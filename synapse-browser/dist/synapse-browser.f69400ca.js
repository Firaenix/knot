// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"../node_modules/reflect-metadata/Reflect.js":[function(require,module,exports) {
var global = arguments[3];
var process = require("process");
/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var Reflect;

(function (Reflect) {
  // Metadata Proposal
  // https://rbuckton.github.io/reflect-metadata/
  (function (factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : Function("return this;")();
    var exporter = makeExporter(Reflect);

    if (typeof root.Reflect === "undefined") {
      root.Reflect = Reflect;
    } else {
      exporter = makeExporter(root.Reflect, exporter);
    }

    factory(exporter);

    function makeExporter(target, previous) {
      return function (key, value) {
        if (typeof target[key] !== "function") {
          Object.defineProperty(target, key, {
            configurable: true,
            writable: true,
            value: value
          });
        }

        if (previous) previous(key, value);
      };
    }
  })(function (exporter) {
    var hasOwn = Object.prototype.hasOwnProperty; // feature test for Symbol support

    var supportsSymbol = typeof Symbol === "function";
    var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
    var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
    var supportsCreate = typeof Object.create === "function"; // feature test for Object.create support

    var supportsProto = {
      __proto__: []
    } instanceof Array; // feature test for __proto__ support

    var downLevel = !supportsCreate && !supportsProto;
    var HashMap = {
      // create an object in dictionary mode (a.k.a. "slow" mode in v8)
      create: supportsCreate ? function () {
        return MakeDictionary(Object.create(null));
      } : supportsProto ? function () {
        return MakeDictionary({
          __proto__: null
        });
      } : function () {
        return MakeDictionary({});
      },
      has: downLevel ? function (map, key) {
        return hasOwn.call(map, key);
      } : function (map, key) {
        return key in map;
      },
      get: downLevel ? function (map, key) {
        return hasOwn.call(map, key) ? map[key] : undefined;
      } : function (map, key) {
        return map[key];
      }
    }; // Load global or shim versions of Map, Set, and WeakMap

    var functionPrototype = Object.getPrototypeOf(Function);
    var usePolyfill = typeof process === "object" && process.env && undefined === "true";

    var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();

    var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();

    var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill(); // [[Metadata]] internal slot
    // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots


    var Metadata = new _WeakMap();
    /**
     * Applies a set of decorators to a property of a target object.
     * @param decorators An array of decorators.
     * @param target The target object.
     * @param propertyKey (Optional) The property key to decorate.
     * @param attributes (Optional) The property descriptor for the target key.
     * @remarks Decorators are applied in reverse order.
     * @example
     *
     *     class Example {
     *         // property declarations are not part of ES6, though they are valid in TypeScript:
     *         // static staticProperty;
     *         // property;
     *
     *         constructor(p) { }
     *         static staticMethod(p) { }
     *         method(p) { }
     *     }
     *
     *     // constructor
     *     Example = Reflect.decorate(decoratorsArray, Example);
     *
     *     // property (on constructor)
     *     Reflect.decorate(decoratorsArray, Example, "staticProperty");
     *
     *     // property (on prototype)
     *     Reflect.decorate(decoratorsArray, Example.prototype, "property");
     *
     *     // method (on constructor)
     *     Object.defineProperty(Example, "staticMethod",
     *         Reflect.decorate(decoratorsArray, Example, "staticMethod",
     *             Object.getOwnPropertyDescriptor(Example, "staticMethod")));
     *
     *     // method (on prototype)
     *     Object.defineProperty(Example.prototype, "method",
     *         Reflect.decorate(decoratorsArray, Example.prototype, "method",
     *             Object.getOwnPropertyDescriptor(Example.prototype, "method")));
     *
     */

    function decorate(decorators, target, propertyKey, attributes) {
      if (!IsUndefined(propertyKey)) {
        if (!IsArray(decorators)) throw new TypeError();
        if (!IsObject(target)) throw new TypeError();
        if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes)) throw new TypeError();
        if (IsNull(attributes)) attributes = undefined;
        propertyKey = ToPropertyKey(propertyKey);
        return DecorateProperty(decorators, target, propertyKey, attributes);
      } else {
        if (!IsArray(decorators)) throw new TypeError();
        if (!IsConstructor(target)) throw new TypeError();
        return DecorateConstructor(decorators, target);
      }
    }

    exporter("decorate", decorate); // 4.1.2 Reflect.metadata(metadataKey, metadataValue)
    // https://rbuckton.github.io/reflect-metadata/#reflect.metadata

    /**
     * A default metadata decorator factory that can be used on a class, class member, or parameter.
     * @param metadataKey The key for the metadata entry.
     * @param metadataValue The value for the metadata entry.
     * @returns A decorator function.
     * @remarks
     * If `metadataKey` is already defined for the target and target key, the
     * metadataValue for that key will be overwritten.
     * @example
     *
     *     // constructor
     *     @Reflect.metadata(key, value)
     *     class Example {
     *     }
     *
     *     // property (on constructor, TypeScript only)
     *     class Example {
     *         @Reflect.metadata(key, value)
     *         static staticProperty;
     *     }
     *
     *     // property (on prototype, TypeScript only)
     *     class Example {
     *         @Reflect.metadata(key, value)
     *         property;
     *     }
     *
     *     // method (on constructor)
     *     class Example {
     *         @Reflect.metadata(key, value)
     *         static staticMethod() { }
     *     }
     *
     *     // method (on prototype)
     *     class Example {
     *         @Reflect.metadata(key, value)
     *         method() { }
     *     }
     *
     */

    function metadata(metadataKey, metadataValue) {
      function decorator(target, propertyKey) {
        if (!IsObject(target)) throw new TypeError();
        if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey)) throw new TypeError();
        OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
      }

      return decorator;
    }

    exporter("metadata", metadata);
    /**
     * Define a unique metadata entry on the target.
     * @param metadataKey A key used to store and retrieve metadata.
     * @param metadataValue A value that contains attached metadata.
     * @param target The target object on which to define metadata.
     * @param propertyKey (Optional) The property key for the target.
     * @example
     *
     *     class Example {
     *         // property declarations are not part of ES6, though they are valid in TypeScript:
     *         // static staticProperty;
     *         // property;
     *
     *         constructor(p) { }
     *         static staticMethod(p) { }
     *         method(p) { }
     *     }
     *
     *     // constructor
     *     Reflect.defineMetadata("custom:annotation", options, Example);
     *
     *     // property (on constructor)
     *     Reflect.defineMetadata("custom:annotation", options, Example, "staticProperty");
     *
     *     // property (on prototype)
     *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "property");
     *
     *     // method (on constructor)
     *     Reflect.defineMetadata("custom:annotation", options, Example, "staticMethod");
     *
     *     // method (on prototype)
     *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "method");
     *
     *     // decorator factory as metadata-producing annotation.
     *     function MyAnnotation(options): Decorator {
     *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
     *     }
     *
     */

    function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
      if (!IsObject(target)) throw new TypeError();
      if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
      return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
    }

    exporter("defineMetadata", defineMetadata);
    /**
     * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
     * @param metadataKey A key used to store and retrieve metadata.
     * @param target The target object on which the metadata is defined.
     * @param propertyKey (Optional) The property key for the target.
     * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
     * @example
     *
     *     class Example {
     *         // property declarations are not part of ES6, though they are valid in TypeScript:
     *         // static staticProperty;
     *         // property;
     *
     *         constructor(p) { }
     *         static staticMethod(p) { }
     *         method(p) { }
     *     }
     *
     *     // constructor
     *     result = Reflect.hasMetadata("custom:annotation", Example);
     *
     *     // property (on constructor)
     *     result = Reflect.hasMetadata("custom:annotation", Example, "staticProperty");
     *
     *     // property (on prototype)
     *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "property");
     *
     *     // method (on constructor)
     *     result = Reflect.hasMetadata("custom:annotation", Example, "staticMethod");
     *
     *     // method (on prototype)
     *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "method");
     *
     */

    function hasMetadata(metadataKey, target, propertyKey) {
      if (!IsObject(target)) throw new TypeError();
      if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
      return OrdinaryHasMetadata(metadataKey, target, propertyKey);
    }

    exporter("hasMetadata", hasMetadata);
    /**
     * Gets a value indicating whether the target object has the provided metadata key defined.
     * @param metadataKey A key used to store and retrieve metadata.
     * @param target The target object on which the metadata is defined.
     * @param propertyKey (Optional) The property key for the target.
     * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
     * @example
     *
     *     class Example {
     *         // property declarations are not part of ES6, though they are valid in TypeScript:
     *         // static staticProperty;
     *         // property;
     *
     *         constructor(p) { }
     *         static staticMethod(p) { }
     *         method(p) { }
     *     }
     *
     *     // constructor
     *     result = Reflect.hasOwnMetadata("custom:annotation", Example);
     *
     *     // property (on constructor)
     *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticProperty");
     *
     *     // property (on prototype)
     *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "property");
     *
     *     // method (on constructor)
     *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticMethod");
     *
     *     // method (on prototype)
     *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "method");
     *
     */

    function hasOwnMetadata(metadataKey, target, propertyKey) {
      if (!IsObject(target)) throw new TypeError();
      if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
      return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
    }

    exporter("hasOwnMetadata", hasOwnMetadata);
    /**
     * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
     * @param metadataKey A key used to store and retrieve metadata.
     * @param target The target object on which the metadata is defined.
     * @param propertyKey (Optional) The property key for the target.
     * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
     * @example
     *
     *     class Example {
     *         // property declarations are not part of ES6, though they are valid in TypeScript:
     *         // static staticProperty;
     *         // property;
     *
     *         constructor(p) { }
     *         static staticMethod(p) { }
     *         method(p) { }
     *     }
     *
     *     // constructor
     *     result = Reflect.getMetadata("custom:annotation", Example);
     *
     *     // property (on constructor)
     *     result = Reflect.getMetadata("custom:annotation", Example, "staticProperty");
     *
     *     // property (on prototype)
     *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "property");
     *
     *     // method (on constructor)
     *     result = Reflect.getMetadata("custom:annotation", Example, "staticMethod");
     *
     *     // method (on prototype)
     *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "method");
     *
     */

    function getMetadata(metadataKey, target, propertyKey) {
      if (!IsObject(target)) throw new TypeError();
      if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
      return OrdinaryGetMetadata(metadataKey, target, propertyKey);
    }

    exporter("getMetadata", getMetadata);
    /**
     * Gets the metadata value for the provided metadata key on the target object.
     * @param metadataKey A key used to store and retrieve metadata.
     * @param target The target object on which the metadata is defined.
     * @param propertyKey (Optional) The property key for the target.
     * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
     * @example
     *
     *     class Example {
     *         // property declarations are not part of ES6, though they are valid in TypeScript:
     *         // static staticProperty;
     *         // property;
     *
     *         constructor(p) { }
     *         static staticMethod(p) { }
     *         method(p) { }
     *     }
     *
     *     // constructor
     *     result = Reflect.getOwnMetadata("custom:annotation", Example);
     *
     *     // property (on constructor)
     *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticProperty");
     *
     *     // property (on prototype)
     *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "property");
     *
     *     // method (on constructor)
     *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticMethod");
     *
     *     // method (on prototype)
     *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "method");
     *
     */

    function getOwnMetadata(metadataKey, target, propertyKey) {
      if (!IsObject(target)) throw new TypeError();
      if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
      return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
    }

    exporter("getOwnMetadata", getOwnMetadata);
    /**
     * Gets the metadata keys defined on the target object or its prototype chain.
     * @param target The target object on which the metadata is defined.
     * @param propertyKey (Optional) The property key for the target.
     * @returns An array of unique metadata keys.
     * @example
     *
     *     class Example {
     *         // property declarations are not part of ES6, though they are valid in TypeScript:
     *         // static staticProperty;
     *         // property;
     *
     *         constructor(p) { }
     *         static staticMethod(p) { }
     *         method(p) { }
     *     }
     *
     *     // constructor
     *     result = Reflect.getMetadataKeys(Example);
     *
     *     // property (on constructor)
     *     result = Reflect.getMetadataKeys(Example, "staticProperty");
     *
     *     // property (on prototype)
     *     result = Reflect.getMetadataKeys(Example.prototype, "property");
     *
     *     // method (on constructor)
     *     result = Reflect.getMetadataKeys(Example, "staticMethod");
     *
     *     // method (on prototype)
     *     result = Reflect.getMetadataKeys(Example.prototype, "method");
     *
     */

    function getMetadataKeys(target, propertyKey) {
      if (!IsObject(target)) throw new TypeError();
      if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
      return OrdinaryMetadataKeys(target, propertyKey);
    }

    exporter("getMetadataKeys", getMetadataKeys);
    /**
     * Gets the unique metadata keys defined on the target object.
     * @param target The target object on which the metadata is defined.
     * @param propertyKey (Optional) The property key for the target.
     * @returns An array of unique metadata keys.
     * @example
     *
     *     class Example {
     *         // property declarations are not part of ES6, though they are valid in TypeScript:
     *         // static staticProperty;
     *         // property;
     *
     *         constructor(p) { }
     *         static staticMethod(p) { }
     *         method(p) { }
     *     }
     *
     *     // constructor
     *     result = Reflect.getOwnMetadataKeys(Example);
     *
     *     // property (on constructor)
     *     result = Reflect.getOwnMetadataKeys(Example, "staticProperty");
     *
     *     // property (on prototype)
     *     result = Reflect.getOwnMetadataKeys(Example.prototype, "property");
     *
     *     // method (on constructor)
     *     result = Reflect.getOwnMetadataKeys(Example, "staticMethod");
     *
     *     // method (on prototype)
     *     result = Reflect.getOwnMetadataKeys(Example.prototype, "method");
     *
     */

    function getOwnMetadataKeys(target, propertyKey) {
      if (!IsObject(target)) throw new TypeError();
      if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
      return OrdinaryOwnMetadataKeys(target, propertyKey);
    }

    exporter("getOwnMetadataKeys", getOwnMetadataKeys);
    /**
     * Deletes the metadata entry from the target object with the provided key.
     * @param metadataKey A key used to store and retrieve metadata.
     * @param target The target object on which the metadata is defined.
     * @param propertyKey (Optional) The property key for the target.
     * @returns `true` if the metadata entry was found and deleted; otherwise, false.
     * @example
     *
     *     class Example {
     *         // property declarations are not part of ES6, though they are valid in TypeScript:
     *         // static staticProperty;
     *         // property;
     *
     *         constructor(p) { }
     *         static staticMethod(p) { }
     *         method(p) { }
     *     }
     *
     *     // constructor
     *     result = Reflect.deleteMetadata("custom:annotation", Example);
     *
     *     // property (on constructor)
     *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticProperty");
     *
     *     // property (on prototype)
     *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "property");
     *
     *     // method (on constructor)
     *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticMethod");
     *
     *     // method (on prototype)
     *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "method");
     *
     */

    function deleteMetadata(metadataKey, target, propertyKey) {
      if (!IsObject(target)) throw new TypeError();
      if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
      var metadataMap = GetOrCreateMetadataMap(target, propertyKey,
      /*Create*/
      false);
      if (IsUndefined(metadataMap)) return false;
      if (!metadataMap.delete(metadataKey)) return false;
      if (metadataMap.size > 0) return true;
      var targetMetadata = Metadata.get(target);
      targetMetadata.delete(propertyKey);
      if (targetMetadata.size > 0) return true;
      Metadata.delete(target);
      return true;
    }

    exporter("deleteMetadata", deleteMetadata);

    function DecorateConstructor(decorators, target) {
      for (var i = decorators.length - 1; i >= 0; --i) {
        var decorator = decorators[i];
        var decorated = decorator(target);

        if (!IsUndefined(decorated) && !IsNull(decorated)) {
          if (!IsConstructor(decorated)) throw new TypeError();
          target = decorated;
        }
      }

      return target;
    }

    function DecorateProperty(decorators, target, propertyKey, descriptor) {
      for (var i = decorators.length - 1; i >= 0; --i) {
        var decorator = decorators[i];
        var decorated = decorator(target, propertyKey, descriptor);

        if (!IsUndefined(decorated) && !IsNull(decorated)) {
          if (!IsObject(decorated)) throw new TypeError();
          descriptor = decorated;
        }
      }

      return descriptor;
    }

    function GetOrCreateMetadataMap(O, P, Create) {
      var targetMetadata = Metadata.get(O);

      if (IsUndefined(targetMetadata)) {
        if (!Create) return undefined;
        targetMetadata = new _Map();
        Metadata.set(O, targetMetadata);
      }

      var metadataMap = targetMetadata.get(P);

      if (IsUndefined(metadataMap)) {
        if (!Create) return undefined;
        metadataMap = new _Map();
        targetMetadata.set(P, metadataMap);
      }

      return metadataMap;
    } // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata


    function OrdinaryHasMetadata(MetadataKey, O, P) {
      var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
      if (hasOwn) return true;
      var parent = OrdinaryGetPrototypeOf(O);
      if (!IsNull(parent)) return OrdinaryHasMetadata(MetadataKey, parent, P);
      return false;
    } // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata


    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
      var metadataMap = GetOrCreateMetadataMap(O, P,
      /*Create*/
      false);
      if (IsUndefined(metadataMap)) return false;
      return ToBoolean(metadataMap.has(MetadataKey));
    } // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata


    function OrdinaryGetMetadata(MetadataKey, O, P) {
      var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
      if (hasOwn) return OrdinaryGetOwnMetadata(MetadataKey, O, P);
      var parent = OrdinaryGetPrototypeOf(O);
      if (!IsNull(parent)) return OrdinaryGetMetadata(MetadataKey, parent, P);
      return undefined;
    } // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata


    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
      var metadataMap = GetOrCreateMetadataMap(O, P,
      /*Create*/
      false);
      if (IsUndefined(metadataMap)) return undefined;
      return metadataMap.get(MetadataKey);
    } // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata


    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
      var metadataMap = GetOrCreateMetadataMap(O, P,
      /*Create*/
      true);
      metadataMap.set(MetadataKey, MetadataValue);
    } // 3.1.6.1 OrdinaryMetadataKeys(O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys


    function OrdinaryMetadataKeys(O, P) {
      var ownKeys = OrdinaryOwnMetadataKeys(O, P);
      var parent = OrdinaryGetPrototypeOf(O);
      if (parent === null) return ownKeys;
      var parentKeys = OrdinaryMetadataKeys(parent, P);
      if (parentKeys.length <= 0) return ownKeys;
      if (ownKeys.length <= 0) return parentKeys;
      var set = new _Set();
      var keys = [];

      for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
        var key = ownKeys_1[_i];
        var hasKey = set.has(key);

        if (!hasKey) {
          set.add(key);
          keys.push(key);
        }
      }

      for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
        var key = parentKeys_1[_a];
        var hasKey = set.has(key);

        if (!hasKey) {
          set.add(key);
          keys.push(key);
        }
      }

      return keys;
    } // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys


    function OrdinaryOwnMetadataKeys(O, P) {
      var keys = [];
      var metadataMap = GetOrCreateMetadataMap(O, P,
      /*Create*/
      false);
      if (IsUndefined(metadataMap)) return keys;
      var keysObj = metadataMap.keys();
      var iterator = GetIterator(keysObj);
      var k = 0;

      while (true) {
        var next = IteratorStep(iterator);

        if (!next) {
          keys.length = k;
          return keys;
        }

        var nextValue = IteratorValue(next);

        try {
          keys[k] = nextValue;
        } catch (e) {
          try {
            IteratorClose(iterator);
          } finally {
            throw e;
          }
        }

        k++;
      }
    } // 6 ECMAScript Data Typ0es and Values
    // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values


    function Type(x) {
      if (x === null) return 1
      /* Null */
      ;

      switch (typeof x) {
        case "undefined":
          return 0
          /* Undefined */
          ;

        case "boolean":
          return 2
          /* Boolean */
          ;

        case "string":
          return 3
          /* String */
          ;

        case "symbol":
          return 4
          /* Symbol */
          ;

        case "number":
          return 5
          /* Number */
          ;

        case "object":
          return x === null ? 1
          /* Null */
          : 6
          /* Object */
          ;

        default:
          return 6
          /* Object */
          ;
      }
    } // 6.1.1 The Undefined Type
    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type


    function IsUndefined(x) {
      return x === undefined;
    } // 6.1.2 The Null Type
    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type


    function IsNull(x) {
      return x === null;
    } // 6.1.5 The Symbol Type
    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type


    function IsSymbol(x) {
      return typeof x === "symbol";
    } // 6.1.7 The Object Type
    // https://tc39.github.io/ecma262/#sec-object-type


    function IsObject(x) {
      return typeof x === "object" ? x !== null : typeof x === "function";
    } // 7.1 Type Conversion
    // https://tc39.github.io/ecma262/#sec-type-conversion
    // 7.1.1 ToPrimitive(input [, PreferredType])
    // https://tc39.github.io/ecma262/#sec-toprimitive


    function ToPrimitive(input, PreferredType) {
      switch (Type(input)) {
        case 0
        /* Undefined */
        :
          return input;

        case 1
        /* Null */
        :
          return input;

        case 2
        /* Boolean */
        :
          return input;

        case 3
        /* String */
        :
          return input;

        case 4
        /* Symbol */
        :
          return input;

        case 5
        /* Number */
        :
          return input;
      }

      var hint = PreferredType === 3
      /* String */
      ? "string" : PreferredType === 5
      /* Number */
      ? "number" : "default";
      var exoticToPrim = GetMethod(input, toPrimitiveSymbol);

      if (exoticToPrim !== undefined) {
        var result = exoticToPrim.call(input, hint);
        if (IsObject(result)) throw new TypeError();
        return result;
      }

      return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
    } // 7.1.1.1 OrdinaryToPrimitive(O, hint)
    // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive


    function OrdinaryToPrimitive(O, hint) {
      if (hint === "string") {
        var toString_1 = O.toString;

        if (IsCallable(toString_1)) {
          var result = toString_1.call(O);
          if (!IsObject(result)) return result;
        }

        var valueOf = O.valueOf;

        if (IsCallable(valueOf)) {
          var result = valueOf.call(O);
          if (!IsObject(result)) return result;
        }
      } else {
        var valueOf = O.valueOf;

        if (IsCallable(valueOf)) {
          var result = valueOf.call(O);
          if (!IsObject(result)) return result;
        }

        var toString_2 = O.toString;

        if (IsCallable(toString_2)) {
          var result = toString_2.call(O);
          if (!IsObject(result)) return result;
        }
      }

      throw new TypeError();
    } // 7.1.2 ToBoolean(argument)
    // https://tc39.github.io/ecma262/2016/#sec-toboolean


    function ToBoolean(argument) {
      return !!argument;
    } // 7.1.12 ToString(argument)
    // https://tc39.github.io/ecma262/#sec-tostring


    function ToString(argument) {
      return "" + argument;
    } // 7.1.14 ToPropertyKey(argument)
    // https://tc39.github.io/ecma262/#sec-topropertykey


    function ToPropertyKey(argument) {
      var key = ToPrimitive(argument, 3
      /* String */
      );
      if (IsSymbol(key)) return key;
      return ToString(key);
    } // 7.2 Testing and Comparison Operations
    // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations
    // 7.2.2 IsArray(argument)
    // https://tc39.github.io/ecma262/#sec-isarray


    function IsArray(argument) {
      return Array.isArray ? Array.isArray(argument) : argument instanceof Object ? argument instanceof Array : Object.prototype.toString.call(argument) === "[object Array]";
    } // 7.2.3 IsCallable(argument)
    // https://tc39.github.io/ecma262/#sec-iscallable


    function IsCallable(argument) {
      // NOTE: This is an approximation as we cannot check for [[Call]] internal method.
      return typeof argument === "function";
    } // 7.2.4 IsConstructor(argument)
    // https://tc39.github.io/ecma262/#sec-isconstructor


    function IsConstructor(argument) {
      // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.
      return typeof argument === "function";
    } // 7.2.7 IsPropertyKey(argument)
    // https://tc39.github.io/ecma262/#sec-ispropertykey


    function IsPropertyKey(argument) {
      switch (Type(argument)) {
        case 3
        /* String */
        :
          return true;

        case 4
        /* Symbol */
        :
          return true;

        default:
          return false;
      }
    } // 7.3 Operations on Objects
    // https://tc39.github.io/ecma262/#sec-operations-on-objects
    // 7.3.9 GetMethod(V, P)
    // https://tc39.github.io/ecma262/#sec-getmethod


    function GetMethod(V, P) {
      var func = V[P];
      if (func === undefined || func === null) return undefined;
      if (!IsCallable(func)) throw new TypeError();
      return func;
    } // 7.4 Operations on Iterator Objects
    // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects


    function GetIterator(obj) {
      var method = GetMethod(obj, iteratorSymbol);
      if (!IsCallable(method)) throw new TypeError(); // from Call

      var iterator = method.call(obj);
      if (!IsObject(iterator)) throw new TypeError();
      return iterator;
    } // 7.4.4 IteratorValue(iterResult)
    // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue


    function IteratorValue(iterResult) {
      return iterResult.value;
    } // 7.4.5 IteratorStep(iterator)
    // https://tc39.github.io/ecma262/#sec-iteratorstep


    function IteratorStep(iterator) {
      var result = iterator.next();
      return result.done ? false : result;
    } // 7.4.6 IteratorClose(iterator, completion)
    // https://tc39.github.io/ecma262/#sec-iteratorclose


    function IteratorClose(iterator) {
      var f = iterator["return"];
      if (f) f.call(iterator);
    } // 9.1 Ordinary Object Internal Methods and Internal Slots
    // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots
    // 9.1.1.1 OrdinaryGetPrototypeOf(O)
    // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof


    function OrdinaryGetPrototypeOf(O) {
      var proto = Object.getPrototypeOf(O);
      if (typeof O !== "function" || O === functionPrototype) return proto; // TypeScript doesn't set __proto__ in ES5, as it's non-standard.
      // Try to determine the superclass constructor. Compatible implementations
      // must either set __proto__ on a subclass constructor to the superclass constructor,
      // or ensure each class has a valid `constructor` property on its prototype that
      // points back to the constructor.
      // If this is not the same as Function.[[Prototype]], then this is definately inherited.
      // This is the case when in ES6 or when using __proto__ in a compatible browser.

      if (proto !== functionPrototype) return proto; // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.

      var prototype = O.prototype;
      var prototypeProto = prototype && Object.getPrototypeOf(prototype);
      if (prototypeProto == null || prototypeProto === Object.prototype) return proto; // If the constructor was not a function, then we cannot determine the heritage.

      var constructor = prototypeProto.constructor;
      if (typeof constructor !== "function") return proto; // If we have some kind of self-reference, then we cannot determine the heritage.

      if (constructor === O) return proto; // we have a pretty good guess at the heritage.

      return constructor;
    } // naive Map shim


    function CreateMapPolyfill() {
      var cacheSentinel = {};
      var arraySentinel = [];

      var MapIterator =
      /** @class */
      function () {
        function MapIterator(keys, values, selector) {
          this._index = 0;
          this._keys = keys;
          this._values = values;
          this._selector = selector;
        }

        MapIterator.prototype["@@iterator"] = function () {
          return this;
        };

        MapIterator.prototype[iteratorSymbol] = function () {
          return this;
        };

        MapIterator.prototype.next = function () {
          var index = this._index;

          if (index >= 0 && index < this._keys.length) {
            var result = this._selector(this._keys[index], this._values[index]);

            if (index + 1 >= this._keys.length) {
              this._index = -1;
              this._keys = arraySentinel;
              this._values = arraySentinel;
            } else {
              this._index++;
            }

            return {
              value: result,
              done: false
            };
          }

          return {
            value: undefined,
            done: true
          };
        };

        MapIterator.prototype.throw = function (error) {
          if (this._index >= 0) {
            this._index = -1;
            this._keys = arraySentinel;
            this._values = arraySentinel;
          }

          throw error;
        };

        MapIterator.prototype.return = function (value) {
          if (this._index >= 0) {
            this._index = -1;
            this._keys = arraySentinel;
            this._values = arraySentinel;
          }

          return {
            value: value,
            done: true
          };
        };

        return MapIterator;
      }();

      return (
        /** @class */
        function () {
          function Map() {
            this._keys = [];
            this._values = [];
            this._cacheKey = cacheSentinel;
            this._cacheIndex = -2;
          }

          Object.defineProperty(Map.prototype, "size", {
            get: function () {
              return this._keys.length;
            },
            enumerable: true,
            configurable: true
          });

          Map.prototype.has = function (key) {
            return this._find(key,
            /*insert*/
            false) >= 0;
          };

          Map.prototype.get = function (key) {
            var index = this._find(key,
            /*insert*/
            false);

            return index >= 0 ? this._values[index] : undefined;
          };

          Map.prototype.set = function (key, value) {
            var index = this._find(key,
            /*insert*/
            true);

            this._values[index] = value;
            return this;
          };

          Map.prototype.delete = function (key) {
            var index = this._find(key,
            /*insert*/
            false);

            if (index >= 0) {
              var size = this._keys.length;

              for (var i = index + 1; i < size; i++) {
                this._keys[i - 1] = this._keys[i];
                this._values[i - 1] = this._values[i];
              }

              this._keys.length--;
              this._values.length--;

              if (key === this._cacheKey) {
                this._cacheKey = cacheSentinel;
                this._cacheIndex = -2;
              }

              return true;
            }

            return false;
          };

          Map.prototype.clear = function () {
            this._keys.length = 0;
            this._values.length = 0;
            this._cacheKey = cacheSentinel;
            this._cacheIndex = -2;
          };

          Map.prototype.keys = function () {
            return new MapIterator(this._keys, this._values, getKey);
          };

          Map.prototype.values = function () {
            return new MapIterator(this._keys, this._values, getValue);
          };

          Map.prototype.entries = function () {
            return new MapIterator(this._keys, this._values, getEntry);
          };

          Map.prototype["@@iterator"] = function () {
            return this.entries();
          };

          Map.prototype[iteratorSymbol] = function () {
            return this.entries();
          };

          Map.prototype._find = function (key, insert) {
            if (this._cacheKey !== key) {
              this._cacheIndex = this._keys.indexOf(this._cacheKey = key);
            }

            if (this._cacheIndex < 0 && insert) {
              this._cacheIndex = this._keys.length;

              this._keys.push(key);

              this._values.push(undefined);
            }

            return this._cacheIndex;
          };

          return Map;
        }()
      );

      function getKey(key, _) {
        return key;
      }

      function getValue(_, value) {
        return value;
      }

      function getEntry(key, value) {
        return [key, value];
      }
    } // naive Set shim


    function CreateSetPolyfill() {
      return (
        /** @class */
        function () {
          function Set() {
            this._map = new _Map();
          }

          Object.defineProperty(Set.prototype, "size", {
            get: function () {
              return this._map.size;
            },
            enumerable: true,
            configurable: true
          });

          Set.prototype.has = function (value) {
            return this._map.has(value);
          };

          Set.prototype.add = function (value) {
            return this._map.set(value, value), this;
          };

          Set.prototype.delete = function (value) {
            return this._map.delete(value);
          };

          Set.prototype.clear = function () {
            this._map.clear();
          };

          Set.prototype.keys = function () {
            return this._map.keys();
          };

          Set.prototype.values = function () {
            return this._map.values();
          };

          Set.prototype.entries = function () {
            return this._map.entries();
          };

          Set.prototype["@@iterator"] = function () {
            return this.keys();
          };

          Set.prototype[iteratorSymbol] = function () {
            return this.keys();
          };

          return Set;
        }()
      );
    } // naive WeakMap shim


    function CreateWeakMapPolyfill() {
      var UUID_SIZE = 16;
      var keys = HashMap.create();
      var rootKey = CreateUniqueKey();
      return (
        /** @class */
        function () {
          function WeakMap() {
            this._key = CreateUniqueKey();
          }

          WeakMap.prototype.has = function (target) {
            var table = GetOrCreateWeakMapTable(target,
            /*create*/
            false);
            return table !== undefined ? HashMap.has(table, this._key) : false;
          };

          WeakMap.prototype.get = function (target) {
            var table = GetOrCreateWeakMapTable(target,
            /*create*/
            false);
            return table !== undefined ? HashMap.get(table, this._key) : undefined;
          };

          WeakMap.prototype.set = function (target, value) {
            var table = GetOrCreateWeakMapTable(target,
            /*create*/
            true);
            table[this._key] = value;
            return this;
          };

          WeakMap.prototype.delete = function (target) {
            var table = GetOrCreateWeakMapTable(target,
            /*create*/
            false);
            return table !== undefined ? delete table[this._key] : false;
          };

          WeakMap.prototype.clear = function () {
            // NOTE: not a real clear, just makes the previous data unreachable
            this._key = CreateUniqueKey();
          };

          return WeakMap;
        }()
      );

      function CreateUniqueKey() {
        var key;

        do key = "@@WeakMap@@" + CreateUUID(); while (HashMap.has(keys, key));

        keys[key] = true;
        return key;
      }

      function GetOrCreateWeakMapTable(target, create) {
        if (!hasOwn.call(target, rootKey)) {
          if (!create) return undefined;
          Object.defineProperty(target, rootKey, {
            value: HashMap.create()
          });
        }

        return target[rootKey];
      }

      function FillRandomBytes(buffer, size) {
        for (var i = 0; i < size; ++i) buffer[i] = Math.random() * 0xff | 0;

        return buffer;
      }

      function GenRandomBytes(size) {
        if (typeof Uint8Array === "function") {
          if (typeof crypto !== "undefined") return crypto.getRandomValues(new Uint8Array(size));
          if (typeof msCrypto !== "undefined") return msCrypto.getRandomValues(new Uint8Array(size));
          return FillRandomBytes(new Uint8Array(size), size);
        }

        return FillRandomBytes(new Array(size), size);
      }

      function CreateUUID() {
        var data = GenRandomBytes(UUID_SIZE); // mark as random - RFC 4122 § 4.4

        data[6] = data[6] & 0x4f | 0x40;
        data[8] = data[8] & 0xbf | 0x80;
        var result = "";

        for (var offset = 0; offset < UUID_SIZE; ++offset) {
          var byte = data[offset];
          if (offset === 4 || offset === 6 || offset === 8) result += "-";
          if (byte < 16) result += "0";
          result += byte.toString(16).toLowerCase();
        }

        return result;
      }
    } // uses a heuristic used by v8 and chakra to force an object into dictionary mode.


    function MakeDictionary(obj) {
      obj.__ = undefined;
      delete obj.__;
      return obj;
    }
  });
})(Reflect || (Reflect = {}));
},{"process":"node_modules/process/browser.js"}],"node_modules/regenerator-runtime/runtime.js":[function(require,module,exports) {
var define;
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

},{}],"node_modules/base64-js/index.js":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"node_modules/ieee754/index.js":[function(require,module,exports) {
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"node_modules/isarray/index.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"node_modules/buffer/index.js":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"node_modules/base64-js/index.js","ieee754":"node_modules/ieee754/index.js","isarray":"node_modules/isarray/index.js","buffer":"node_modules/buffer/index.js"}],"../node_modules/safe-buffer/index.js":[function(require,module,exports) {

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":"node_modules/buffer/index.js"}],"../node_modules/bencode/lib/encode.js":[function(require,module,exports) {

var Buffer = require('safe-buffer').Buffer

/**
 * Encodes data in bencode.
 *
 * @param  {Buffer|Array|String|Object|Number|Boolean} data
 * @return {Buffer}
 */
function encode (data, buffer, offset) {
  var buffers = []
  var result = null

  encode._encode(buffers, data)
  result = Buffer.concat(buffers)
  encode.bytes = result.length

  if (Buffer.isBuffer(buffer)) {
    result.copy(buffer, offset)
    return buffer
  }

  return result
}

encode.bytes = -1
encode._floatConversionDetected = false

encode.getType = function (value) {
  if (Buffer.isBuffer(value)) return 'buffer'
  if (Array.isArray(value)) return 'array'
  if (ArrayBuffer.isView(value)) return 'arraybufferview'
  if (value instanceof Number) return 'number'
  if (value instanceof Boolean) return 'boolean'
  if (value instanceof ArrayBuffer) return 'arraybuffer'
  return typeof value
}

encode._encode = function (buffers, data) {
  if (data == null) { return }

  switch (encode.getType(data)) {
    case 'buffer': encode.buffer(buffers, data); break
    case 'object': encode.dict(buffers, data); break
    case 'array': encode.list(buffers, data); break
    case 'string': encode.string(buffers, data); break
    case 'number': encode.number(buffers, data); break
    case 'boolean': encode.number(buffers, data); break
    case 'arraybufferview': encode.buffer(buffers, Buffer.from(data.buffer, data.byteOffset, data.byteLength)); break
    case 'arraybuffer': encode.buffer(buffers, Buffer.from(data)); break
  }
}

var buffE = Buffer.from('e')
var buffD = Buffer.from('d')
var buffL = Buffer.from('l')

encode.buffer = function (buffers, data) {
  buffers.push(Buffer.from(data.length + ':'), data)
}

encode.string = function (buffers, data) {
  buffers.push(Buffer.from(Buffer.byteLength(data) + ':' + data))
}

encode.number = function (buffers, data) {
  var maxLo = 0x80000000
  var hi = (data / maxLo) << 0
  var lo = (data % maxLo) << 0
  var val = hi * maxLo + lo

  buffers.push(Buffer.from('i' + val + 'e'))

  if (val !== data && !encode._floatConversionDetected) {
    encode._floatConversionDetected = true
    console.warn(
      'WARNING: Possible data corruption detected with value "' + data + '":',
      'Bencoding only defines support for integers, value was converted to "' + val + '"'
    )
    console.trace()
  }
}

encode.dict = function (buffers, data) {
  buffers.push(buffD)

  var j = 0
  var k
  // fix for issue #13 - sorted dicts
  var keys = Object.keys(data).sort()
  var kl = keys.length

  for (; j < kl; j++) {
    k = keys[j]
    if (data[k] == null) continue
    encode.string(buffers, k)
    encode._encode(buffers, data[k])
  }

  buffers.push(buffE)
}

encode.list = function (buffers, data) {
  var i = 0
  var c = data.length
  buffers.push(buffL)

  for (; i < c; i++) {
    if (data[i] == null) continue
    encode._encode(buffers, data[i])
  }

  buffers.push(buffE)
}

module.exports = encode

},{"safe-buffer":"../node_modules/safe-buffer/index.js"}],"../node_modules/bencode/lib/decode.js":[function(require,module,exports) {

var Buffer = require('safe-buffer').Buffer

const INTEGER_START = 0x69 // 'i'
const STRING_DELIM = 0x3A // ':'
const DICTIONARY_START = 0x64 // 'd'
const LIST_START = 0x6C // 'l'
const END_OF_TYPE = 0x65 // 'e'

/**
 * replaces parseInt(buffer.toString('ascii', start, end)).
 * For strings with less then ~30 charachters, this is actually a lot faster.
 *
 * @param {Buffer} data
 * @param {Number} start
 * @param {Number} end
 * @return {Number} calculated number
 */
function getIntFromBuffer (buffer, start, end) {
  var sum = 0
  var sign = 1

  for (var i = start; i < end; i++) {
    var num = buffer[i]

    if (num < 58 && num >= 48) {
      sum = sum * 10 + (num - 48)
      continue
    }

    if (i === start && num === 43) { // +
      continue
    }

    if (i === start && num === 45) { // -
      sign = -1
      continue
    }

    if (num === 46) { // .
      // its a float. break here.
      break
    }

    throw new Error('not a number: buffer[' + i + '] = ' + num)
  }

  return sum * sign
}

/**
 * Decodes bencoded data.
 *
 * @param  {Buffer} data
 * @param  {Number} start (optional)
 * @param  {Number} end (optional)
 * @param  {String} encoding (optional)
 * @return {Object|Array|Buffer|String|Number}
 */
function decode (data, start, end, encoding) {
  if (data == null || data.length === 0) {
    return null
  }

  if (typeof start !== 'number' && encoding == null) {
    encoding = start
    start = undefined
  }

  if (typeof end !== 'number' && encoding == null) {
    encoding = end
    end = undefined
  }

  decode.position = 0
  decode.encoding = encoding || null

  decode.data = !(Buffer.isBuffer(data))
    ? Buffer.from(data)
    : data.slice(start, end)

  decode.bytes = decode.data.length

  return decode.next()
}

decode.bytes = 0
decode.position = 0
decode.data = null
decode.encoding = null

decode.next = function () {
  switch (decode.data[decode.position]) {
    case DICTIONARY_START:
      return decode.dictionary()
    case LIST_START:
      return decode.list()
    case INTEGER_START:
      return decode.integer()
    default:
      return decode.buffer()
  }
}

decode.find = function (chr) {
  var i = decode.position
  var c = decode.data.length
  var d = decode.data

  while (i < c) {
    if (d[i] === chr) return i
    i++
  }

  throw new Error(
    'Invalid data: Missing delimiter "' +
    String.fromCharCode(chr) + '" [0x' +
    chr.toString(16) + ']'
  )
}

decode.dictionary = function () {
  decode.position++

  var dict = {}

  while (decode.data[decode.position] !== END_OF_TYPE) {
    dict[decode.buffer()] = decode.next()
  }

  decode.position++

  return dict
}

decode.list = function () {
  decode.position++

  var lst = []

  while (decode.data[decode.position] !== END_OF_TYPE) {
    lst.push(decode.next())
  }

  decode.position++

  return lst
}

decode.integer = function () {
  var end = decode.find(END_OF_TYPE)
  var number = getIntFromBuffer(decode.data, decode.position + 1, end)

  decode.position += end + 1 - decode.position

  return number
}

decode.buffer = function () {
  var sep = decode.find(STRING_DELIM)
  var length = getIntFromBuffer(decode.data, decode.position, sep)
  var end = ++sep + length

  decode.position = end

  return decode.encoding
    ? decode.data.toString(decode.encoding, sep, end)
    : decode.data.slice(sep, end)
}

module.exports = decode

},{"safe-buffer":"../node_modules/safe-buffer/index.js"}],"../node_modules/bencode/lib/index.js":[function(require,module,exports) {
var bencode = module.exports

bencode.encode = require('./encode')
bencode.decode = require('./decode')

/**
 * Determines the amount of bytes
 * needed to encode the given value
 * @param  {Object|Array|Buffer|String|Number|Boolean} value
 * @return {Number} byteCount
 */
bencode.byteLength = bencode.encodingLength = function (value) {
  return bencode.encode(value).length
}

},{"./encode":"../node_modules/bencode/lib/encode.js","./decode":"../node_modules/bencode/lib/decode.js"}],"node_modules/parcel-bundler/src/builtins/_empty.js":[function(require,module,exports) {

},{}],"../node_modules/synapse-core/lib/Client.min.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var global = arguments[3];
var process = require("process");
var define;
var __dirname = "/Users/firaenix/Projects/knot-client/node_modules/synapse-core/lib";
function _get2(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get2 = Reflect.get; } else { _get2 = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get2(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass2(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof2(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof2(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

(function () {
  function r(e, n, t) {
    function o(i, f) {
      if (!n[i]) {
        if (!e[i]) {
          var c = "function" == typeof require && require;
          if (!f && c) return c(i, !0);
          if (u) return u(i, !0);
          var a = new Error("Cannot find module '" + i + "'");
          throw a.code = "MODULE_NOT_FOUND", a;
        }

        var p = n[i] = {
          exports: {}
        };
        e[i][0].call(p.exports, function (r) {
          var n = e[i][1][r];
          return o(n || r);
        }, p, p.exports, r, e, n, t);
      }

      return n[i].exports;
    }

    for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) {
      o(t[i]);
    }

    return o;
  }

  return r;
})()({
  1: [function (require, module, exports) {
    "use strict";

    var __extends = this && this.__extends || function () {
      var _extendStatics2 = function extendStatics(d, b) {
        _extendStatics2 = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function (d, b) {
          d.__proto__ = b;
        } || function (d, b) {
          for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
          }
        };

        return _extendStatics2(d, b);
      };

      return function (d, b) {
        _extendStatics2(d, b);

        function __() {
          this.constructor = d;
        }

        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EventExtension = exports.Extension = void 0;

    var tiny_typed_emitter_1 = require("tiny-typed-emitter");

    var Extension =
    /** @class */
    function () {
      function Extension(wire) {
        var _this = this;

        this.sendExtendedMessage = function (data) {
          _this.wire.extended(_this.name, data);
        };

        this.wire = wire;
      }

      return Extension;
    }();

    exports.Extension = Extension;

    var EventExtension =
    /** @class */
    function (_super) {
      __extends(EventExtension, _super);

      function EventExtension(wire) {
        var _this = _super.call(this) || this;

        _this.sendExtendedMessage = function (data) {
          _this.wire.extended(_this.name, data);
        };

        _this.wire = wire;
        return _this;
      }

      return EventExtension;
    }(tiny_typed_emitter_1.TypedEmitter);

    exports.EventExtension = EventExtension;
  }, {
    "tiny-typed-emitter": 369
  }],
  2: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        "use strict";

        var __extends = this && this.__extends || function () {
          var _extendStatics3 = function extendStatics(d, b) {
            _extendStatics3 = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
              }
            };

            return _extendStatics3(d, b);
          };

          return function (d, b) {
            _extendStatics3(d, b);

            function __() {
              this.constructor = d;
            }

            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();

        var __assign = this && this.__assign || function () {
          __assign = Object.assign || function (t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];

              for (var p in s) {
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
              }
            }

            return t;
          };

          return __assign.apply(this, arguments);
        };

        var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function (resolve) {
              resolve(value);
            });
          }

          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }

            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }

            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }

            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };

        var __generator = this && this.__generator || function (thisArg, body) {
          var _ = {
            label: 0,
            sent: function sent() {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: []
          },
              f,
              y,
              t,
              g;
          return g = {
            next: verb(0),
            "throw": verb(1),
            "return": verb(2)
          }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
          }), g;

          function verb(n) {
            return function (v) {
              return step([n, v]);
            };
          }

          function step(op) {
            if (f) throw new TypeError("Generator is already executing.");

            while (_) {
              try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];

                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;

                  case 4:
                    _.label++;
                    return {
                      value: op[1],
                      done: false
                    };

                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;

                  case 7:
                    op = _.ops.pop();

                    _.trys.pop();

                    continue;

                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }

                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }

                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }

                    if (t && _.label < t[2]) {
                      _.label = t[2];

                      _.ops.push(op);

                      break;
                    }

                    if (t[2]) _.ops.pop();

                    _.trys.pop();

                    continue;
                }

                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            }

            if (op[0] & 5) throw op[1];
            return {
              value: op[0] ? op[1] : void 0,
              done: true
            };
          }
        };

        var __read = this && this.__read || function (o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m) return o;
          var i = m.call(o),
              r,
              ar = [],
              e;

          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
              ar.push(r.value);
            }
          } catch (error) {
            e = {
              error: error
            };
          } finally {
            try {
              if (r && !r.done && (m = i["return"])) m.call(i);
            } finally {
              if (e) throw e.error;
            }
          }

          return ar;
        };

        var __spread = this && this.__spread || function () {
          for (var ar = [], i = 0; i < arguments.length; i++) {
            ar = ar.concat(__read(arguments[i]));
          }

          return ar;
        };

        var __importDefault = this && this.__importDefault || function (mod) {
          return mod && mod.__esModule ? mod : {
            "default": mod
          };
        };

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Wire = void 0;

        var unordered_array_remove_1 = __importDefault(require("unordered-array-remove"));

        var bencode_1 = __importDefault(require("bencode"));

        var bitfield_1 = __importDefault(require("bitfield"));

        var debug_1 = __importDefault(require("debug"));

        var randombytes_1 = __importDefault(require("randombytes"));

        var speedometer_1 = __importDefault(require("speedometer"));

        var readable_stream_1 = __importDefault(require("readable-stream"));

        var PeerMessages_1 = require("./models/PeerMessages");

        var PieceRequest_1 = require("./models/PieceRequest");

        var ParseRequest_1 = require("./models/ParseRequest");

        var debug = debug_1.default('firaenix-bittorrent-protocol');
        var BITFIELD_GROW = 400000;
        var KEEP_ALIVE_TIMEOUT = 55000;

        var Wire =
        /** @class */
        function (_super) {
          __extends(Wire, _super);

          function Wire(name) {
            var _this = _super.call(this) || this;

            _this._parseRequests = [];
            _this._handshakeSuccess = false;
            _this._extendedHandshakeSuccess = false;

            _this.parseStream = function () {
              var parser = _this._parseRequests.shift();

              while (!parser) {
                _this._debug('Waiting for parser');

                return;
              }

              _this._debug('Waiting for', parser === null || parser === void 0 ? void 0 : parser.parserSize, 'bytes for', parser === null || parser === void 0 ? void 0 : parser.parserName);

              if (_this._buffer.length < (parser === null || parser === void 0 ? void 0 : parser.parserSize)) {
                _this._parseRequests.unshift(parser);

                return;
              }

              var buffer = _this._buffer.slice(0, parser === null || parser === void 0 ? void 0 : parser.parserSize);

              _this._buffer = _this._buffer.slice(parser === null || parser === void 0 ? void 0 : parser.parserSize);

              _this._debug('Sending', parser.parserName, parser === null || parser === void 0 ? void 0 : parser.parserSize, 'bytes');

              parser === null || parser === void 0 ? void 0 : parser.callback(buffer);
              return _this.parseStream();
            };
            /**
             * Handle the first 4 bytes of a message, to determine the length of bytes that must be
             * waited for in order to have the whole message.
             * @param  {Buffer} buffer
             */


            _this._onMessageLength = function (buffer) {
              var length = buffer.readUInt32BE(0);

              if (length > 0) {
                _this._parse(length, 'onMessage', _this._onMessage);
              } else {
                _this._onKeepAlive();

                _this._parse(4, 'onMessageLength', _this._onMessageLength);
              }
            };
            /**
             * Handle a message from the remote peer.
             * @param  {Buffer} buffer
             */


            _this._onMessage = function (buffer) {
              return __awaiter(_this, void 0, void 0, function () {
                var messageFlag, _a;

                return __generator(this, function (_b) {
                  switch (_b.label) {
                    case 0:
                      this._parse(4, '_onMessage.onMessageLength', this._onMessageLength);

                      messageFlag = buffer[0];
                      _a = messageFlag;

                      switch (_a) {
                        case PeerMessages_1.MessageFlags.Choke:
                          return [3
                          /*break*/
                          , 1];

                        case PeerMessages_1.MessageFlags.Unchoke:
                          return [3
                          /*break*/
                          , 3];

                        case PeerMessages_1.MessageFlags.Interested:
                          return [3
                          /*break*/
                          , 5];

                        case PeerMessages_1.MessageFlags.NotInterested:
                          return [3
                          /*break*/
                          , 7];

                        case PeerMessages_1.MessageFlags.Have:
                          return [3
                          /*break*/
                          , 9];

                        case PeerMessages_1.MessageFlags.Bitfield:
                          return [3
                          /*break*/
                          , 11];

                        case PeerMessages_1.MessageFlags.Request:
                          return [3
                          /*break*/
                          , 13];

                        case PeerMessages_1.MessageFlags.Piece:
                          return [3
                          /*break*/
                          , 15];

                        case PeerMessages_1.MessageFlags.Cancel:
                          return [3
                          /*break*/
                          , 17];

                        case 9:
                          return [3
                          /*break*/
                          , 19];

                        case PeerMessages_1.MessageFlags.Extended:
                          return [3
                          /*break*/
                          , 20];
                      }

                      return [3
                      /*break*/
                      , 21];

                    case 1:
                      return [4
                      /*yield*/
                      , this._onChoke()];

                    case 2:
                      return [2
                      /*return*/
                      , _b.sent()];

                    case 3:
                      return [4
                      /*yield*/
                      , this._onUnchoke()];

                    case 4:
                      return [2
                      /*return*/
                      , _b.sent()];

                    case 5:
                      return [4
                      /*yield*/
                      , this._onInterested()];

                    case 6:
                      return [2
                      /*return*/
                      , _b.sent()];

                    case 7:
                      return [4
                      /*yield*/
                      , this._onUninterested()];

                    case 8:
                      return [2
                      /*return*/
                      , _b.sent()];

                    case 9:
                      return [4
                      /*yield*/
                      , this._onHave(buffer.readUInt32BE(1))];

                    case 10:
                      return [2
                      /*return*/
                      , _b.sent()];

                    case 11:
                      return [4
                      /*yield*/
                      , this._onBitField(buffer.slice(1))];

                    case 12:
                      return [2
                      /*return*/
                      , _b.sent()];

                    case 13:
                      return [4
                      /*yield*/
                      , this._onRequest(buffer.readUInt32BE(1), buffer.readUInt32BE(5), buffer.readUInt32BE(9))];

                    case 14:
                      return [2
                      /*return*/
                      , _b.sent()];

                    case 15:
                      return [4
                      /*yield*/
                      , this._onPiece(buffer.readUInt32BE(1), buffer.readUInt32BE(5), buffer.slice(9))];

                    case 16:
                      return [2
                      /*return*/
                      , _b.sent()];

                    case 17:
                      return [4
                      /*yield*/
                      , this._onCancel(buffer.readUInt32BE(1), buffer.readUInt32BE(5), buffer.readUInt32BE(9))];

                    case 18:
                      return [2
                      /*return*/
                      , _b.sent()];

                    case 19:
                      return [2
                      /*return*/
                      , this._onPort(buffer.readUInt16BE(1))];

                    case 20:
                      return [2
                      /*return*/
                      , this._onExtended(buffer.readUInt8(1), buffer.slice(2))];

                    case 21:
                      this._debug('got unknown message');

                      return [2
                      /*return*/
                      , this.emit('unknown_message', buffer)];
                  }
                });
              });
            };

            _this.wireName = name;
            _this._debugId = name || randombytes_1.default(4).toString('hex');

            _this._debug('new wire');

            _this.peerId = undefined; // remote peer id (hex string)

            _this.peerIdBuffer = undefined; // remote peer id (buffer)

            _this.type = null; // connection type ('webrtc', 'tcpIncoming', 'tcpOutgoing', 'webSeed')

            _this.amChoking = true; // are we choking the peer?

            _this.amInterested = false; // are we interested in the peer?

            _this.peerChoking = true; // is the peer choking us?

            _this.peerInterested = false; // is the peer interested in us?
            // The largest torrent that I know of (the Geocities archive) is ~641 GB and has
            // ~41,000 pieces. Therefore, cap bitfield to 10x larger (400,000 bits) to support all
            // possible torrents but prevent malicious peers from growing bitfield to fill memory.

            _this.peerPieces = new bitfield_1.default(0, {
              grow: BITFIELD_GROW
            });
            _this.peerExtensions = {
              dht: false,
              extended: false
            };
            _this.requests = []; // outgoing

            _this.peerRequests = []; // incoming

            _this.extendedMapping = {}; // number -> string, ex: 1 -> 'ut_metadata'

            _this.peerExtendedMapping = {}; // string -> number, ex: 9 -> 'ut_metadata'
            // The extended handshake to send, minus the "m" field, which gets automatically
            // filled from `this.extendedMapping`

            _this.extendedHandshake = {
              m: {},
              exts: {}
            };
            _this.peerExtendedHandshake = {
              m: {},
              exts: {}
            }; // remote peer's extended handshake

            _this._ext = {}; // string -> function, ex 'ut_metadata' -> ut_metadata()

            _this._nextExt = 1;
            _this.uploaded = 0;
            _this.downloaded = 0;
            _this.uploadSpeed = speedometer_1.default();
            _this.downloadSpeed = speedometer_1.default();
            _this._keepAliveInterval = undefined;
            _this._timeout = undefined;
            _this._timeoutMs = 0;
            _this.destroyed = false; // was the wire ended by calling `destroy`?

            _this._finished = false;
            _this._buffer = Buffer.alloc(0); // incomplete message data

            _this.once('finish', function () {
              return _this._onFinish();
            });

            _this._parseHandshake();

            return _this;
          }

          Wire.prototype.once = function (event, listener) {
            return _super.prototype.once.call(this, event, listener);
          };

          Wire.prototype.on = function (event, listener) {
            return _super.prototype.on.call(this, event, listener);
          };

          Wire.prototype.off = function (event, listener) {
            return _super.prototype.off.call(this, event, listener);
          };

          Wire.prototype.emit = function (event) {
            var args = [];

            for (var _i = 1; _i < arguments.length; _i++) {
              args[_i - 1] = arguments[_i];
            }

            return _super.prototype.emit.apply(this, __spread([event], args));
          };
          /**
           * Set whether to send a "keep-alive" ping (sent every 55s)
           * @param {boolean} enable
           */


          Wire.prototype.setKeepAlive = function (enable) {
            var _this = this;

            this._debug('setKeepAlive %s', enable);

            clearInterval(this._keepAliveInterval);
            if (enable === false) return;
            this._keepAliveInterval = setInterval(function () {
              _this.keepAlive();
            }, KEEP_ALIVE_TIMEOUT);
          };
          /**
           * Set the amount of time to wait before considering a request to be "timed out"
           * @param {number} ms
           * @param {boolean=} unref (should the timer be unref'd? default: false)
           */


          Wire.prototype.setTimeout = function (ms, unref) {
            this._debug('setTimeout ms=%d unref=%s', ms, unref);

            this._clearTimeout();

            this._timeoutMs = ms;
            this._timeoutUnref = !!unref;

            this._updateTimeout();
          };

          Wire.prototype.destroy = function () {
            if (this.destroyed) {
              return this;
            }

            this.destroyed = true;

            this._debug('destroy');

            this.emit('close');
            this.end();
            return this;
          };

          Wire.prototype.end = function () {
            var args = [];

            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }

            this._debug('end');

            this._onUninterested();

            this._onChoke();

            _super.prototype.end.apply(this, __spread(args));
          };
          /**
           * Use the specified protocol extension.
           * @param  {function} Extension
           */


          Wire.prototype.use = function (newExtension) {
            var ext = this._nextExt;
            var handler = newExtension(this);
            var name = handler.name;

            if (!name) {
              throw new Error('Extension class requires a "name" property');
            }

            this._debug('use extension.name=%s', name); // eslint-disable-next-line @typescript-eslint/no-empty-function


            function noop() {}

            if (typeof handler.onHandshake !== 'function') {
              handler.onHandshake = noop;
            }

            if (typeof handler.onExtendedHandshake !== 'function') {
              handler.onExtendedHandshake = noop;
            }

            if (typeof handler.onMessage !== 'function') {
              handler.onMessage = noop;
            }

            this.extendedMapping[ext] = name;
            this._ext[name] = handler;
            this[name] = handler;
            this._nextExt += 1;
          }; //
          // OUTGOING MESSAGES
          //

          /**
           * Message "keep-alive": <len=0000>
           */


          Wire.prototype.keepAlive = function () {
            this._debug('keep-alive');

            this._push(PeerMessages_1.MessageBuffers.MESSAGE_KEEP_ALIVE);
          };
          /**
           * Message: "handshake" <pstrlen><pstr><reserved><info_hash><peer_id>
           * @param  {Buffer|string} infoHash (as Buffer or *hex* string)
           * @param  {Buffer|string} peerId
           * @param  {Object} extensions
           */


          Wire.prototype.handshake = function (infoHash, peerId, extensions) {
            var infoHashBuffer;
            var peerIdBuffer;

            if (typeof infoHash === 'string') {
              infoHash = infoHash.toLowerCase();
              infoHashBuffer = Buffer.from(infoHash, 'hex');
            } else {
              infoHashBuffer = infoHash;
              infoHash = infoHashBuffer.toString('hex');
            }

            if (typeof peerId === 'string') {
              peerIdBuffer = Buffer.from(peerId, 'hex');
            } else {
              peerIdBuffer = peerId;
              peerId = peerIdBuffer.toString('hex');
            }

            if (!infoHashBuffer || !infoHashBuffer.length) {
              var err = new Error('infoHash must be specified');
              this.emit('error', err);
              throw err;
            }

            if (infoHashBuffer.length > 255) {
              var err = new Error("infoHash must be smaller than 255 bytes long, it is currently " + infoHashBuffer.length);
              this.emit('error', err);
              throw err;
            }

            if (peerIdBuffer.length !== 20) {
              var err = new Error("peerId MUST have length 20, length is " + peerIdBuffer.length);
              this.emit('error', err);
              throw err;
            }

            this._debug('handshake i=%s p=%s exts=%o', infoHash, peerId, extensions);

            var reserved = Buffer.from(PeerMessages_1.MessageBuffers.MESSAGE_RESERVED); // enable extended message

            reserved[5] |= 0x10;
            if (extensions && extensions.dht) reserved[7] |= 1; // Prepend length of infoHash as a single byte - dont care about overflows, for now must be only 255 bits large to represent a 255 byte hash maximum length.
            // Going off the assumption that by the time you need 255 bytes for a hash, we will move to a more effective hashing algorithm.

            this._push(Buffer.concat([PeerMessages_1.MessageBuffers.MESSAGE_PROTOCOL, reserved, Buffer.from([infoHashBuffer.length]), PeerMessages_1.MessageBuffers.INFOHASH_SPLIT, infoHashBuffer, peerIdBuffer]));

            this._handshakeSent = true;

            if (this.peerExtensions.extended && !this._extendedHandshakeSent) {
              // Peer's handshake indicated support already
              // (incoming connection)
              this._sendExtendedHandshake();
            }
          };
          /* Peer supports BEP-0010, send extended handshake.
           *
           * This comes after the 'handshake' event to give the user a chance to populate
           * `this.extendedHandshake` and `this.extendedMapping` before the extended handshake
           * is sent to the remote peer.
           */


          Wire.prototype._sendExtendedHandshake = function () {
            var msg = __assign(__assign({}, Object.assign({}, this.extendedHandshake)), {
              m: {},
              exts: {}
            });

            for (var ext in this.extendedMapping) {
              var name_1 = this.extendedMapping[ext];
              var extension = this._ext[name_1];
              msg.m[name_1] = Number(ext);
              msg.exts[name_1] = __assign({}, extension.extraFields);
            } // Send extended handshake


            this.extended(0, bencode_1.default.encode(msg));
            this._extendedHandshakeSent = true;
          };
          /**
           * Message "choke": <len=0001><id=0>
           */


          Wire.prototype.choke = function () {
            if (this.amChoking) return;
            this.amChoking = true;

            this._debug('choke');

            while (this.peerRequests.length) {
              this.peerRequests.pop();
            }

            this._push(PeerMessages_1.MessageBuffers.MESSAGE_CHOKE);
          };
          /**
           * Message "unchoke": <len=0001><id=1>
           */


          Wire.prototype.unchoke = function () {
            if (!this.amChoking) return;
            this.amChoking = false;

            this._debug('unchoke');

            this._push(PeerMessages_1.MessageBuffers.MESSAGE_UNCHOKE);
          };
          /**
           * Message "interested": <len=0001><id=2>
           */


          Wire.prototype.interested = function () {
            if (this.amInterested) return;
            this.amInterested = true;

            this._debug('interested');

            this._push(PeerMessages_1.MessageBuffers.MESSAGE_INTERESTED);
          };
          /**
           * Message "uninterested": <len=0001><id=3>
           */


          Wire.prototype.uninterested = function () {
            if (!this.amInterested) return;
            this.amInterested = false;

            this._debug('uninterested');

            this._push(PeerMessages_1.MessageBuffers.MESSAGE_UNINTERESTED);
          };
          /**
           * Message "have": <len=0005><id=4><piece index>
           * @param  {number} index
           */


          Wire.prototype.have = function (index) {
            this._debug('have %d', index);

            this._message(PeerMessages_1.MessageFlags.Have, [index], null);
          };
          /**
           * Message "bitfield": <len=0001+X><id=5><bitfield>
           * @param  {BitField|Buffer} bitfield
           */


          Wire.prototype.bitfield = function (bitfield) {
            this._debug('bitfield');

            if (!Buffer.isBuffer(bitfield)) bitfield = bitfield.buffer;

            this._message(PeerMessages_1.MessageFlags.Bitfield, [], bitfield);
          };
          /**
           * Callback will be resolved when onPiece(index, offset, length, buffer) is called or something fails when requesting.
           *
           * NOTE: index,offset,length are used as a key to look up the callback later.
           *
           * So make sure you specify the length correctly or you will never get your callback.
           *
           * If the other party sends the same index and offset but a buffer of a different length, you will not recieve your callback.
           *
           * Message "request": <len=0013><id=6><index><begin><length>
           * @param  {number}   index
           * @param  {number}   offset
           * @param  {number}   length
           * @param  {function} cb
           */


          Wire.prototype.request = function (index, offset, length, cb) {
            if (!cb) cb = function cb() {};

            if (this._finished) {
              return cb(new Error('wire is closed'), undefined);
            }

            if (this.peerChoking) {
              return cb(new Error('peer is choking'), undefined);
            }

            if (this._handshakeSuccess === false) {
              return cb(new Error("peer hasn't finished handshaking"), undefined);
            }

            if (this._nextExt > 1 && this._extendedHandshakeSuccess === false) {
              return cb(new Error("peer hasn't finished extended handshaking"), undefined);
            }

            this._debug('request index=%d offset=%d length=%d', index, offset, length);

            this.requests.push(new PieceRequest_1.PieceRequest(index, offset, length, cb));

            this._updateTimeout();

            this._message(PeerMessages_1.MessageFlags.Request, [index, offset, length], null);
          };
          /**
           * Message "piece": <len=0009+X><id=7><index><begin><block>
           * @param  {number} index
           * @param  {number} offset
           * @param  {Buffer} buffer
           */


          Wire.prototype.piece = function (index, offset, buffer) {
            this._debug('piece index=%d offset=%d', index, offset);

            this.uploaded += buffer.length;
            this.uploadSpeed(buffer.length);
            this.emit('upload', buffer.length);

            this._message(PeerMessages_1.MessageFlags.Piece, [index, offset], buffer);
          };
          /**
           * Message "cancel": <len=0013><id=8><index><begin><length>
           * @param  {number} index
           * @param  {number} offset
           * @param  {number} length
           */


          Wire.prototype.cancel = function (index, offset, length) {
            this._debug('cancel index=%d offset=%d length=%d', index, offset, length);

            this._callback(this._pull(this.requests, index, offset, length), new Error('request was cancelled'), null);

            this._message(PeerMessages_1.MessageFlags.Cancel, [index, offset, length], null);
          };
          /**
           * Message: "port" <len=0003><id=9><listen-port>
           * @param {Number} port
           */


          Wire.prototype.port = function (port) {
            this._debug('port %d', port);

            var message = Buffer.from(PeerMessages_1.MessageBuffers.MESSAGE_PORT);
            message.writeUInt16BE(port, 5);

            this._push(message);
          };
          /**
           * Message: "extended" <len=0005+X><id=20><ext-number><payload>
           * @param  {number|string} ext
           * @param  {Object} obj
           */


          Wire.prototype.extended = function (ext, obj) {
            this._debug('extended ext=%s', ext);

            if (typeof ext === 'string' && this.peerExtendedMapping[ext]) {
              ext = this.peerExtendedMapping[ext];
            }

            if (typeof ext === 'number') {
              var extId = Buffer.from([ext]);
              var buf = Buffer.isBuffer(obj) ? obj : bencode_1.default.encode(obj);

              this._message(PeerMessages_1.MessageFlags.Extended, [], Buffer.concat([extId, buf]));
            } else {
              throw new Error("Unrecognized extension: " + ext);
            }
          };
          /**
           * Duplex stream method. Called whenever the remote peer stream wants data. No-op
           * since we'll just push data whenever we get it.
           */


          Wire.prototype._read = function () {};
          /**
           * Send a message to the remote peer.
           */


          Wire.prototype._message = function (id, numbers, data) {
            var dataLength = data ? data.length : 0;
            var buffer = Buffer.allocUnsafe(5 + 4 * numbers.length);
            buffer.writeUInt32BE(buffer.length + dataLength - 4, 0);
            buffer[4] = id;

            for (var i = 0; i < numbers.length; i++) {
              buffer.writeUInt32BE(numbers[i], 5 + 4 * i);
            }

            this._push(buffer);

            if (data) this._push(data);
          };

          Wire.prototype._push = function (data) {
            if (this._finished) return;
            return this.push(data);
          }; //
          // INCOMING MESSAGES
          //


          Wire.prototype._onKeepAlive = function () {
            this._debug('got keep-alive');

            this.emit('keep-alive');
          };

          Wire.prototype._onHandshake = function (infoHashBuffer, peerIdBuffer, extensions) {
            var infoHash = infoHashBuffer.toString('hex');
            var peerId = peerIdBuffer.toString('hex');

            this._debug('got handshake i=%s p=%s exts=%o', infoHash, peerId, extensions);

            this.peerId = peerId;
            this.peerIdBuffer = peerIdBuffer;
            this.peerExtensions = extensions;
            this.emit('handshake', infoHash, peerId, extensions);

            for (var name_2 in this._ext) {
              this._ext[name_2].onHandshake(infoHash, peerId, extensions);
            }

            if (extensions.extended && this._handshakeSent && !this._extendedHandshakeSent) {
              // outgoing connection
              this._sendExtendedHandshake();
            }

            this._handshakeSuccess = true;
          };

          Wire.prototype._onChoke = function () {
            return __awaiter(this, void 0, void 0, function () {
              var extensionCalls;
              return __generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    this.peerChoking = true;

                    this._debug('got choke');

                    extensionCalls = Object.values(this._ext).map(function (x) {
                      var _a;

                      return (_a = x.onChoke) === null || _a === void 0 ? void 0 : _a.call(x);
                    });
                    return [4
                    /*yield*/
                    , Promise.all(extensionCalls)];

                  case 1:
                    _a.sent();

                    this.emit('choke');

                    while (this.requests.length) {
                      this._callback(this.requests.pop(), new Error('peer is choking'), null);
                    }

                    return [2
                    /*return*/
                    ];
                }
              });
            });
          };

          Wire.prototype._onUnchoke = function () {
            return __awaiter(this, void 0, void 0, function () {
              var extensionCalls;
              return __generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    this.peerChoking = false;

                    this._debug('got unchoke');

                    extensionCalls = Object.values(this._ext).map(function (x) {
                      var _a;

                      return (_a = x.onUnchoke) === null || _a === void 0 ? void 0 : _a.call(x);
                    });
                    return [4
                    /*yield*/
                    , Promise.all(extensionCalls)];

                  case 1:
                    _a.sent();

                    this.emit('unchoke');
                    return [2
                    /*return*/
                    ];
                }
              });
            });
          };

          Wire.prototype._onInterested = function () {
            return __awaiter(this, void 0, void 0, function () {
              var extensionCalls;
              return __generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    this.peerInterested = true;

                    this._debug('got interested');

                    extensionCalls = Object.values(this._ext).map(function (x) {
                      var _a;

                      return (_a = x.onInterested) === null || _a === void 0 ? void 0 : _a.call(x);
                    });
                    return [4
                    /*yield*/
                    , Promise.all(extensionCalls)];

                  case 1:
                    _a.sent();

                    this.emit('interested');
                    return [2
                    /*return*/
                    ];
                }
              });
            });
          };

          Wire.prototype._onUninterested = function () {
            return __awaiter(this, void 0, void 0, function () {
              var extensionCalls;
              return __generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    this.peerInterested = false;

                    this._debug('got uninterested');

                    extensionCalls = Object.values(this._ext).map(function (x) {
                      var _a;

                      return (_a = x.onUninterested) === null || _a === void 0 ? void 0 : _a.call(x);
                    });
                    return [4
                    /*yield*/
                    , Promise.all(extensionCalls)];

                  case 1:
                    _a.sent();

                    this.emit('uninterested');
                    return [2
                    /*return*/
                    ];
                }
              });
            });
          };

          Wire.prototype._onHave = function (index) {
            return __awaiter(this, void 0, void 0, function () {
              var extensionCalls;
              return __generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    if (this.peerPieces.get(index)) return [2
                    /*return*/
                    ];

                    this._debug('got have %d', index);

                    extensionCalls = Object.values(this._ext).map(function (x) {
                      var _a;

                      return (_a = x.onHave) === null || _a === void 0 ? void 0 : _a.call(x, index);
                    });
                    return [4
                    /*yield*/
                    , Promise.all(extensionCalls)];

                  case 1:
                    _a.sent();

                    this.peerPieces.set(index, true);
                    this.emit('have', index);
                    return [2
                    /*return*/
                    ];
                }
              });
            });
          };

          Wire.prototype._onBitField = function (buffer) {
            return __awaiter(this, void 0, void 0, function () {
              var extensionCalls;
              return __generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    this.peerPieces = new bitfield_1.default(buffer);

                    this._debug('got bitfield');

                    extensionCalls = Object.values(this._ext).map(function (x) {
                      var _a;

                      return (_a = x.onBitField) === null || _a === void 0 ? void 0 : _a.call(x, buffer);
                    });
                    return [4
                    /*yield*/
                    , Promise.all(extensionCalls)];

                  case 1:
                    _a.sent();

                    this.emit('bitfield', this.peerPieces);
                    return [2
                    /*return*/
                    ];
                }
              });
            });
          };

          Wire.prototype._onRequest = function (index, offset, length) {
            return __awaiter(this, void 0, void 0, function () {
              var extensionCalls, respond, request;

              var _this = this;

              return __generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    if (this.amChoking) {
                      return [2
                      /*return*/
                      ];
                    }

                    this._debug('got request index=%d offset=%d length=%d', index, offset, length);

                    extensionCalls = Object.values(this._ext).map(function (x) {
                      var _a;

                      return (_a = x.onRequest) === null || _a === void 0 ? void 0 : _a.call(x, index, offset, length);
                    });
                    return [4
                    /*yield*/
                    , Promise.all(extensionCalls)];

                  case 1:
                    _a.sent();

                    this._debug('Extensions have resolved');

                    respond = function respond(err, buffer) {
                      // below request var gets hoisted above this function.
                      // eslint-disable-next-line @typescript-eslint/no-use-before-define
                      if (request !== _this._pull(_this.peerRequests, index, offset, length)) {
                        return;
                      }

                      if (err) {
                        _this._debug('error satisfying request index=%d offset=%d length=%d (%s)', index, offset, length, err.message);

                        return;
                      }

                      if (buffer === null || buffer === undefined) {
                        _this._debug('the requested piece has no buffer associated with it, return empty buffer index=%d offset=%d length=%d (%s)', index, offset, length);

                        buffer = Buffer.alloc(0);
                      }

                      _this.piece(index, offset, buffer);
                    };

                    request = new PieceRequest_1.PieceRequest(index, offset, length, respond);
                    this.peerRequests.push(request);
                    this.emit('request', index, offset, length, respond);
                    return [2
                    /*return*/
                    ];
                }
              });
            });
          };

          Wire.prototype._onPiece = function (index, offset, buffer) {
            return __awaiter(this, void 0, void 0, function () {
              var extensionOnPieces, resolvedRequest, error_1;
              return __generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    _a.trys.push([0, 2,, 3]);

                    extensionOnPieces = Object.values(this._ext).map(function (x) {
                      var _a;

                      return (_a = x.onPiece) === null || _a === void 0 ? void 0 : _a.call(x, index, offset, buffer);
                    });
                    return [4
                    /*yield*/
                    , Promise.all(extensionOnPieces)];

                  case 1:
                    _a.sent();

                    this._debug('got piece index=%d offset=%d', index, offset);

                    resolvedRequest = this._pull(this.requests, index, offset, buffer.length);

                    this._debug('got resolved request for index=%d offset=%d', index, offset, resolvedRequest);

                    this._callback(resolvedRequest, null, buffer);

                    this.downloaded += buffer.length;
                    this.downloadSpeed(buffer.length);
                    this.emit('download', buffer.length);
                    this.emit('piece', index, offset, buffer);
                    return [3
                    /*break*/
                    , 3];

                  case 2:
                    error_1 = _a.sent();
                    console.error(error_1);

                    this._debug('An error occurred when recieving a piece, destroying the connection', error_1);

                    this.destroy();
                    return [3
                    /*break*/
                    , 3];

                  case 3:
                    return [2
                    /*return*/
                    ];
                }
              });
            });
          };

          Wire.prototype._onCancel = function (index, offset, length) {
            return __awaiter(this, void 0, void 0, function () {
              var extensionCalls;
              return __generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    this._debug('got cancel index=%d offset=%d length=%d', index, offset, length);

                    extensionCalls = Object.values(this._ext).map(function (x) {
                      var _a;

                      return (_a = x.onCancel) === null || _a === void 0 ? void 0 : _a.call(x, index, offset, length);
                    });
                    return [4
                    /*yield*/
                    , Promise.all(extensionCalls)];

                  case 1:
                    _a.sent();

                    this._pull(this.peerRequests, index, offset, length);

                    this.emit('cancel', index, offset, length);
                    return [2
                    /*return*/
                    ];
                }
              });
            });
          };

          Wire.prototype._onPort = function (port) {
            this._debug('got port %d', port);

            this.emit('port', port);
          };

          Wire.prototype.onExtendedMessage = function (extensionId, buf) {
            if (!this.extendedMapping[extensionId]) {
              throw new Error("Could not find extension with the given id: " + extensionId);
            } // get friendly name for extension


            var extensionName = this.extendedMapping[extensionId];

            if (!this._ext[extensionName]) {
              throw new Error("Could not find extension with the given name: " + extensionName);
            } // there is an registered extension handler, so call it


            this._ext[extensionName].onMessage(buf);

            this._debug('got extended message ext=%s', extensionName);

            this.emit('extension_message', extensionName, buf);
          };

          Wire.prototype.onExtendedHandshake = function (buf) {
            var _a;

            var info;

            try {
              info = bencode_1.default.decode(buf);
            } catch (err) {
              this._debug('ignoring invalid extended handshake: %s', err.message || err);

              return;
            }

            if (!info) {
              return;
            }

            this.peerExtendedHandshake = info; // Find any extensions that require the other peer to have it too.

            for (var name_3 in this._ext) {
              if (this._ext[name_3] && this._ext[name_3].requirePeer && !((_a = this.peerExtendedHandshake.m) === null || _a === void 0 ? void 0 : _a[name_3])) {
                this._debug('Destroying connection, peer doesnt have same extension.', name_3);

                this.destroy();
                this.emit('missing_extension', name_3);
                return;
              }
            }

            if (_typeof2(info.m) === 'object') {
              for (var name_4 in info.m) {
                this.peerExtendedMapping[name_4] = Number(info.m[name_4].toString());
              }
            }

            for (var name_5 in this._ext) {
              if (this.peerExtendedMapping[name_5]) {
                this._ext[name_5].onExtendedHandshake(this.peerExtendedHandshake);
              }
            }

            this._debug('got extended handshake');

            this.emit('extended_handshake', 'handshake', this.peerExtendedHandshake);
            this._extendedHandshakeSuccess = true;
          };

          Wire.prototype._onExtended = function (extensionId, buf) {
            // Which extension this message came from was not specified, this is a handshake
            if (extensionId === 0) {
              return this.onExtendedHandshake(buf);
            }

            return this.onExtendedMessage(extensionId, buf);
          };

          Wire.prototype._onTimeout = function () {
            this._debug('request timed out');

            this._callback(this.requests.shift(), new Error('request has timed out'), null);

            this.emit('timeout');
          };
          /**
           * Duplex stream method. Called whenever the remote peer has data for us. Data that the
           * remote peer sends gets buffered (i.e. not actually processed) until the right number
           * of bytes have arrived, determined by the last call to `this._parse(number, callback)`.
           * Once enough bytes have arrived to process the message, the callback function
           * (i.e. `this._parser`) gets called with the full buffer of data.
           * @param  {Buffer} data
           * @param  {string} encoding
           * @param  {function} cb
           */


          Wire.prototype._write = function (data, encoding, cb) {
            this._buffer = Buffer.concat([this._buffer, data]);

            this._debug('Data pushing', data, data.length);

            this.parseStream(); // Keep collecting data for the next request

            cb(null);
          };

          Wire.prototype._callback = function (request, err, buffer) {
            this._debug('calling request callback', request);

            if (!request) {
              this._debug('No request was specified');

              return;
            }

            this._clearTimeout();

            if (!this.peerChoking && !this._finished) {
              this._updateTimeout();
            }

            request.callback(err, buffer);
          };

          Wire.prototype._clearTimeout = function () {
            if (!this._timeout) return;
            clearTimeout(this._timeout);
            this._timeout = undefined;
          };

          Wire.prototype._updateTimeout = function () {
            var _this = this;

            if (!this._timeoutMs || !this.requests.length || this._timeout) return;
            this._timeout = setTimeout(function () {
              return _this._onTimeout();
            }, this._timeoutMs);
            if (this._timeoutUnref && this._timeout.unref) this._timeout.unref();
          };
          /**
           * Takes a number of bytes that the local peer is waiting to receive from the remote peer
           * in order to parse a complete message, and a callback function to be called once enough
           * bytes have arrived.
           * @param  {number} size
           * @param  {function} parser
           */


          Wire.prototype._parse = function (size, name, parser) {
            this._parseRequests.push(new ParseRequest_1.ParseRequest(size, name, parser));

            this._debug('Parse Requests in queue: ', this._parseRequests.length);
          };

          Wire.prototype._parseHandshake = function () {
            var _this = this;

            this._parse(1, 'getBittorrentProtocolIdentifier', function (bittorrentProtocolIdent) {
              var protocolStringLength = bittorrentProtocolIdent.readUInt8(0);

              _this._debug('Is start of Bittorrent Protocol?', protocolStringLength === PeerMessages_1.MessageBuffers.MESSAGE_PROTOCOL[0], bittorrentProtocolIdent.toString());

              _this._parse(protocolStringLength, 'getHandshake', function (handshake) {
                _this._debug('HANDSHAKE BUFFER', handshake.toString(), handshake);

                var protocol = handshake.slice(0, protocolStringLength);

                if (protocol.toString() !== 'BitTorrent protocol') {
                  _this._debug('Error: wire not speaking BitTorrent protocol (%s)', protocol.toString());

                  _this.end();

                  return;
                } // GET RESERVED


                _this._parse(PeerMessages_1.MessageBuffers.MESSAGE_RESERVED.length, 'getReserved', function (reservedFlags) {
                  _this._debug('Reserved flags', reservedFlags);

                  var dht = !!(reservedFlags[7] & 0x01); // see bep_0005

                  var extended = !!(reservedFlags[5] & 0x10); // see bep_0010

                  _this._parse(PeerMessages_1.MessageParams.INFOHASH_SIZE_LENGTH, 'getInfoHashSizeBuf', function (infoHashSizeBuf) {
                    _this._debug('infoHashSizeBuf', infoHashSizeBuf);

                    var infoHashSize = infoHashSizeBuf.readUInt8(0);

                    _this._debug('InfoHash Size:', infoHashSize); // Make sure that the following character is :


                    _this._parse(PeerMessages_1.MessageBuffers.INFOHASH_SPLIT.length, 'getColonSeparator', function (colonChar) {
                      if (!colonChar.equals(PeerMessages_1.MessageBuffers.INFOHASH_SPLIT)) {
                        throw new Error('Invalid handshake, must be infohash_size:infohash. Missing colon');
                      } // Infohash size + peerId size


                      _this._parse(infoHashSize + PeerMessages_1.MessageParams.PEER_ID_LENGTH, 'getPeerIdLength', function (infoHashAndPeerId) {
                        // handshake = handshake.slice(pstrlen);
                        _this._onHandshake(infoHashAndPeerId.slice(0, infoHashSize), infoHashAndPeerId.slice(infoHashSize, infoHashSize + PeerMessages_1.MessageParams.PEER_ID_LENGTH), {
                          dht: dht,
                          extended: extended
                        });

                        _this._parse(4, '_parseHandshake.getMessageLength', _this._onMessageLength);
                      });
                    });
                  });
                });
              });
            });
          };

          Wire.prototype._onFinish = function () {
            return __awaiter(this, void 0, void 0, function () {
              var extensionCalls;
              return __generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    this._finished = true;
                    extensionCalls = Object.values(this._ext).map(function (x) {
                      var _a;

                      return (_a = x.onFinish) === null || _a === void 0 ? void 0 : _a.call(x);
                    });
                    return [4
                    /*yield*/
                    , Promise.all(extensionCalls)];

                  case 1:
                    _a.sent();

                    this.push(null); // stream cannot be half open, so signal the end of it

                    while (this.read()) {} // consume and discard the rest of the stream data


                    clearInterval(this._keepAliveInterval);

                    this._parse(Number.MAX_VALUE, 'dispose', function () {});

                    while (this.peerRequests.length) {
                      this.peerRequests.pop();
                    }

                    while (this.requests.length) {
                      this._callback(this.requests.pop(), new Error('wire was closed'), null);
                    }

                    return [2
                    /*return*/
                    ];
                }
              });
            });
          };

          Wire.prototype._debug = function () {
            var args = [];

            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }

            debug.apply(void 0, __spread(["[" + Date.now() + "][" + this._debugId + "]"], args));
          };
          /**
           * Retrieves the first entity from the requests array that matches the index, offset and length given.
           *
           * Often used in conjunction with _callback to call back to waiting piece requests
           * @param requests
           * @param pieceIdx
           * @param offset
           * @param length
           */


          Wire.prototype._pull = function (requests, pieceIdx, offset, length) {
            for (var i = 0; i < requests.length; i++) {
              var req = requests[i];

              if (req.piece === pieceIdx && req.offset === offset && req.length === length) {
                unordered_array_remove_1.default(requests, i);
                return req;
              }
            }

            return null;
          };

          return Wire;
        }(readable_stream_1.default.Duplex);

        exports.Wire = Wire;
        exports.default = Wire;
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "./models/ParseRequest": 4,
    "./models/PeerMessages": 5,
    "./models/PieceRequest": 6,
    "bencode": 48,
    "bitfield": 49,
    "buffer": 102,
    "debug": 125,
    "randombytes": 291,
    "readable-stream": 21,
    "speedometer": 361,
    "unordered-array-remove": 399
  }],
  3: [function (require, module, exports) {
    (function (global) {
      (function () {
        "use strict";

        var __importDefault = this && this.__importDefault || function (mod) {
          return mod && mod.__esModule ? mod : {
            "default": mod
          };
        };

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var Extension_1 = require("./Extension");

        var Wire_1 = __importDefault(require("./Wire"));

        var Wire_2 = require("./Wire");

        Object.defineProperty(exports, "Wire", {
          enumerable: true,
          get: function get() {
            return Wire_2.Wire;
          }
        });

        var Extension_2 = require("./Extension");

        Object.defineProperty(exports, "Extension", {
          enumerable: true,
          get: function get() {
            return Extension_2.Extension;
          }
        });
        Object.defineProperty(exports, "EventExtension", {
          enumerable: true,
          get: function get() {
            return Extension_2.EventExtension;
          }
        });

        var PeerMessages_1 = require("./models/PeerMessages");

        Object.defineProperty(exports, "MessageBuffers", {
          enumerable: true,
          get: function get() {
            return PeerMessages_1.MessageBuffers;
          }
        });
        Object.defineProperty(exports, "MessageFlags", {
          enumerable: true,
          get: function get() {
            return PeerMessages_1.MessageFlags;
          }
        });
        exports.default = Wire_1.default;
        global['Wire'] = Wire_1.default;
        global['Extension'] = Extension_1.Extension;
      }).call(this);
    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {
    "./Extension": 1,
    "./Wire": 2,
    "./models/PeerMessages": 5
  }],
  4: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StreamProcessor = exports.ParseRequest = void 0;

    var ParseRequest =
    /** @class */
    function () {
      function ParseRequest(parserSize, parserName, callback) {
        this.parserSize = parserSize;
        this.parserName = parserName;
        this.callback = callback;
      }

      return ParseRequest;
    }();

    exports.ParseRequest = ParseRequest;

    var StreamProcessor =
    /** @class */
    function () {
      function StreamProcessor() {
        var _this = this;

        this.parserQueue = [];

        this.push = function (request) {
          _this.parserQueue.push(request);

          var topElement = _this.parserQueue.shift();

          if (!topElement) {
            throw new Error('Top element cant be empty, we just added one.');
          }

          return request;
        };
      }

      return StreamProcessor;
    }();

    exports.StreamProcessor = StreamProcessor;
  }, {}],
  5: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.MessageFlags = exports.MessageParams = exports.MessageBuffers = void 0;
        exports.MessageBuffers = {
          MESSAGE_PROTOCOL: Buffer.from("\x13BitTorrent protocol"),
          MESSAGE_KEEP_ALIVE: Buffer.from([0x00, 0x00, 0x00, 0x00]),
          MESSAGE_CHOKE: Buffer.from([0x00, 0x00, 0x00, 0x01, 0x00]),
          MESSAGE_UNCHOKE: Buffer.from([0x00, 0x00, 0x00, 0x01, 0x01]),
          MESSAGE_INTERESTED: Buffer.from([0x00, 0x00, 0x00, 0x01, 0x02]),
          MESSAGE_UNINTERESTED: Buffer.from([0x00, 0x00, 0x00, 0x01, 0x03]),
          MESSAGE_RESERVED: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
          MESSAGE_PORT: [0x00, 0x00, 0x00, 0x03, 0x09, 0x00, 0x00],
          INFOHASH_SPLIT: Buffer.from(':')
        };
        var MessageParams;

        (function (MessageParams) {
          MessageParams[MessageParams["INFOHASH_SIZE_LENGTH"] = 1] = "INFOHASH_SIZE_LENGTH";
          MessageParams[MessageParams["PEER_ID_LENGTH"] = 20] = "PEER_ID_LENGTH";
        })(MessageParams = exports.MessageParams || (exports.MessageParams = {}));

        var MessageFlags;

        (function (MessageFlags) {
          MessageFlags[MessageFlags["Choke"] = 0] = "Choke";
          MessageFlags[MessageFlags["Unchoke"] = 1] = "Unchoke";
          MessageFlags[MessageFlags["Interested"] = 2] = "Interested";
          MessageFlags[MessageFlags["NotInterested"] = 3] = "NotInterested";
          MessageFlags[MessageFlags["Have"] = 4] = "Have";
          MessageFlags[MessageFlags["Bitfield"] = 5] = "Bitfield";
          MessageFlags[MessageFlags["Request"] = 6] = "Request";
          MessageFlags[MessageFlags["Piece"] = 7] = "Piece";
          MessageFlags[MessageFlags["Cancel"] = 8] = "Cancel";
          MessageFlags[MessageFlags["Extended"] = 20] = "Extended";
        })(MessageFlags = exports.MessageFlags || (exports.MessageFlags = {}));
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "buffer": 102
  }],
  6: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PieceRequest = void 0;

    var PieceRequest =
    /** @class */
    function () {
      function PieceRequest(piece, offset, length, cb) {
        this.piece = piece;
        this.offset = offset;
        this.length = length;
        this.callback = cb;
      }

      return PieceRequest;
    }();

    exports.PieceRequest = PieceRequest;
  }, {}],
  7: [function (require, module, exports) {
    'use strict';

    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }

    var codes = {};

    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }

      function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }

      var NodeError = /*#__PURE__*/function (_Base) {
        _inheritsLoose(NodeError, _Base);

        function NodeError(arg1, arg2, arg3) {
          return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }

        return NodeError;
      }(Base);

      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;
      codes[code] = NodeError;
    } // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function (i) {
          return String(i);
        });

        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


    function endsWith(str, search, this_len) {
      if (this_len === undefined || this_len > str.length) {
        this_len = str.length;
      }

      return str.substring(this_len - search.length, this_len) === search;
    } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


    function includes(str, search, start) {
      if (typeof start !== 'number') {
        start = 0;
      }

      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }

    createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
      return 'The value "' + value + '" is invalid for option "' + name + '"';
    }, TypeError);
    createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
      // determiner: 'must be' or 'must not be'
      var determiner;

      if (typeof expected === 'string' && startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
      } else {
        determiner = 'must be';
      }

      var msg;

      if (endsWith(name, ' argument')) {
        // For cases like 'first argument'
        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
      } else {
        var type = includes(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
      }

      msg += ". Received type ".concat(_typeof2(actual));
      return msg;
    }, TypeError);
    createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
    createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
      return 'The ' + name + ' method is not implemented';
    });
    createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
    createErrorType('ERR_STREAM_DESTROYED', function (name) {
      return 'Cannot call ' + name + ' after a stream was destroyed';
    });
    createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
    createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
    createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
    createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
    createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
      return 'Unknown encoding: ' + arg;
    }, TypeError);
    createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
    module.exports.codes = codes;
  }, {}],
  8: [function (require, module, exports) {
    (function (process) {
      (function () {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        // a duplex stream is just a stream that is both readable and writable.
        // Since JS doesn't have multiple prototypal inheritance, this class
        // prototypally inherits from Readable, and then parasitically from
        // Writable.
        'use strict';
        /*<replacement>*/

        var objectKeys = Object.keys || function (obj) {
          var keys = [];

          for (var key in obj) {
            keys.push(key);
          }

          return keys;
        };
        /*</replacement>*/


        module.exports = Duplex;

        var Readable = require('./_stream_readable');

        var Writable = require('./_stream_writable');

        require('inherits')(Duplex, Readable);

        {
          // Allow the keys array to be GC'ed.
          var keys = objectKeys(Writable.prototype);

          for (var v = 0; v < keys.length; v++) {
            var method = keys[v];
            if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
          }
        }

        function Duplex(options) {
          if (!(this instanceof Duplex)) return new Duplex(options);
          Readable.call(this, options);
          Writable.call(this, options);
          this.allowHalfOpen = true;

          if (options) {
            if (options.readable === false) this.readable = false;
            if (options.writable === false) this.writable = false;

            if (options.allowHalfOpen === false) {
              this.allowHalfOpen = false;
              this.once('end', onend);
            }
          }
        }

        Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState.highWaterMark;
          }
        });
        Object.defineProperty(Duplex.prototype, 'writableBuffer', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState && this._writableState.getBuffer();
          }
        });
        Object.defineProperty(Duplex.prototype, 'writableLength', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState.length;
          }
        }); // the no-half-open enforcer

        function onend() {
          // If the writable side ended, then we're ok.
          if (this._writableState.ended) return; // no more data can be written.
          // But allow more writes to happen in this tick.

          process.nextTick(onEndNT, this);
        }

        function onEndNT(self) {
          self.end();
        }

        Object.defineProperty(Duplex.prototype, 'destroyed', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            if (this._readableState === undefined || this._writableState === undefined) {
              return false;
            }

            return this._readableState.destroyed && this._writableState.destroyed;
          },
          set: function set(value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (this._readableState === undefined || this._writableState === undefined) {
              return;
            } // backward compatibility, the user is explicitly
            // managing destroyed


            this._readableState.destroyed = value;
            this._writableState.destroyed = value;
          }
        });
      }).call(this);
    }).call(this, require('_process'));
  }, {
    "./_stream_readable": 10,
    "./_stream_writable": 12,
    "_process": 276,
    "inherits": 217
  }],
  9: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    // a passthrough stream.
    // basically just the most minimal sort of Transform stream.
    // Every written chunk gets output as-is.
    'use strict';

    module.exports = PassThrough;

    var Transform = require('./_stream_transform');

    require('inherits')(PassThrough, Transform);

    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);
      Transform.call(this, options);
    }

    PassThrough.prototype._transform = function (chunk, encoding, cb) {
      cb(null, chunk);
    };
  }, {
    "./_stream_transform": 11,
    "inherits": 217
  }],
  10: [function (require, module, exports) {
    (function (process, global) {
      (function () {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        'use strict';

        module.exports = Readable;
        /*<replacement>*/

        var Duplex;
        /*</replacement>*/

        Readable.ReadableState = ReadableState;
        /*<replacement>*/

        var EE = require('events').EventEmitter;

        var EElistenerCount = function EElistenerCount(emitter, type) {
          return emitter.listeners(type).length;
        };
        /*</replacement>*/

        /*<replacement>*/


        var Stream = require('./internal/streams/stream');
        /*</replacement>*/


        var Buffer = require('buffer').Buffer;

        var OurUint8Array = global.Uint8Array || function () {};

        function _uint8ArrayToBuffer(chunk) {
          return Buffer.from(chunk);
        }

        function _isUint8Array(obj) {
          return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
        }
        /*<replacement>*/


        var debugUtil = require('util');

        var debug;

        if (debugUtil && debugUtil.debuglog) {
          debug = debugUtil.debuglog('stream');
        } else {
          debug = function debug() {};
        }
        /*</replacement>*/


        var BufferList = require('./internal/streams/buffer_list');

        var destroyImpl = require('./internal/streams/destroy');

        var _require = require('./internal/streams/state'),
            getHighWaterMark = _require.getHighWaterMark;

        var _require$codes = require('../errors').codes,
            ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
            ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
            ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
            ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


        var StringDecoder;
        var createReadableStreamAsyncIterator;
        var from;

        require('inherits')(Readable, Stream);

        var errorOrDestroy = destroyImpl.errorOrDestroy;
        var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

        function prependListener(emitter, event, fn) {
          // Sadly this is not cacheable as some libraries bundle their own
          // event emitter implementation with them.
          if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
          // userland ones.  NEVER DO THIS. This is here only because this code needs
          // to continue to work with older versions of Node.js that do not include
          // the prependListener() method. The goal is to eventually remove this hack.

          if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
        }

        function ReadableState(options, stream, isDuplex) {
          Duplex = Duplex || require('./_stream_duplex');
          options = options || {}; // Duplex streams are both readable and writable, but share
          // the same options object.
          // However, some cases require setting options to different
          // values for the readable and the writable sides of the duplex stream.
          // These options can be provided separately as readableXXX and writableXXX.

          if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
          // make all the buffer merging and length checks go away

          this.objectMode = !!options.objectMode;
          if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
          // Note: 0 is a valid value, means "don't call _read preemptively ever"

          this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
          // linked list can remove elements from the beginning faster than
          // array.shift()

          this.buffer = new BufferList();
          this.length = 0;
          this.pipes = null;
          this.pipesCount = 0;
          this.flowing = null;
          this.ended = false;
          this.endEmitted = false;
          this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
          // immediately, or on a later tick.  We set this to true at first, because
          // any actions that shouldn't happen until "later" should generally also
          // not happen before the first read call.

          this.sync = true; // whenever we return null, then we set a flag to say
          // that we're awaiting a 'readable' event emission.

          this.needReadable = false;
          this.emittedReadable = false;
          this.readableListening = false;
          this.resumeScheduled = false;
          this.paused = true; // Should close be emitted on destroy. Defaults to true.

          this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

          this.autoDestroy = !!options.autoDestroy; // has it been destroyed

          this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
          // encoding is 'binary' so we have to make this configurable.
          // Everything else in the universe uses 'utf8', though.

          this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

          this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

          this.readingMore = false;
          this.decoder = null;
          this.encoding = null;

          if (options.encoding) {
            if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
            this.decoder = new StringDecoder(options.encoding);
            this.encoding = options.encoding;
          }
        }

        function Readable(options) {
          Duplex = Duplex || require('./_stream_duplex');
          if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
          // the ReadableState constructor, at least with V8 6.5

          var isDuplex = this instanceof Duplex;
          this._readableState = new ReadableState(options, this, isDuplex); // legacy

          this.readable = true;

          if (options) {
            if (typeof options.read === 'function') this._read = options.read;
            if (typeof options.destroy === 'function') this._destroy = options.destroy;
          }

          Stream.call(this);
        }

        Object.defineProperty(Readable.prototype, 'destroyed', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            if (this._readableState === undefined) {
              return false;
            }

            return this._readableState.destroyed;
          },
          set: function set(value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (!this._readableState) {
              return;
            } // backward compatibility, the user is explicitly
            // managing destroyed


            this._readableState.destroyed = value;
          }
        });
        Readable.prototype.destroy = destroyImpl.destroy;
        Readable.prototype._undestroy = destroyImpl.undestroy;

        Readable.prototype._destroy = function (err, cb) {
          cb(err);
        }; // Manually shove something into the read() buffer.
        // This returns true if the highWaterMark has not been hit yet,
        // similar to how Writable.write() returns true if you should
        // write() some more.


        Readable.prototype.push = function (chunk, encoding) {
          var state = this._readableState;
          var skipChunkCheck;

          if (!state.objectMode) {
            if (typeof chunk === 'string') {
              encoding = encoding || state.defaultEncoding;

              if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = '';
              }

              skipChunkCheck = true;
            }
          } else {
            skipChunkCheck = true;
          }

          return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
        }; // Unshift should *always* be something directly out of read()


        Readable.prototype.unshift = function (chunk) {
          return readableAddChunk(this, chunk, null, true, false);
        };

        function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
          debug('readableAddChunk', chunk);
          var state = stream._readableState;

          if (chunk === null) {
            state.reading = false;
            onEofChunk(stream, state);
          } else {
            var er;
            if (!skipChunkCheck) er = chunkInvalid(state, chunk);

            if (er) {
              errorOrDestroy(stream, er);
            } else if (state.objectMode || chunk && chunk.length > 0) {
              if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                chunk = _uint8ArrayToBuffer(chunk);
              }

              if (addToFront) {
                if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
              } else if (state.ended) {
                errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
              } else if (state.destroyed) {
                return false;
              } else {
                state.reading = false;

                if (state.decoder && !encoding) {
                  chunk = state.decoder.write(chunk);
                  if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
                } else {
                  addChunk(stream, state, chunk, false);
                }
              }
            } else if (!addToFront) {
              state.reading = false;
              maybeReadMore(stream, state);
            }
          } // We can push more data if we are below the highWaterMark.
          // Also, if we have no data yet, we can stand some more bytes.
          // This is to work around cases where hwm=0, such as the repl.


          return !state.ended && (state.length < state.highWaterMark || state.length === 0);
        }

        function addChunk(stream, state, chunk, addToFront) {
          if (state.flowing && state.length === 0 && !state.sync) {
            state.awaitDrain = 0;
            stream.emit('data', chunk);
          } else {
            // update the buffer info.
            state.length += state.objectMode ? 1 : chunk.length;
            if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
            if (state.needReadable) emitReadable(stream);
          }

          maybeReadMore(stream, state);
        }

        function chunkInvalid(state, chunk) {
          var er;

          if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
            er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
          }

          return er;
        }

        Readable.prototype.isPaused = function () {
          return this._readableState.flowing === false;
        }; // backwards compatibility.


        Readable.prototype.setEncoding = function (enc) {
          if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
          var decoder = new StringDecoder(enc);
          this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

          this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

          var p = this._readableState.buffer.head;
          var content = '';

          while (p !== null) {
            content += decoder.write(p.data);
            p = p.next;
          }

          this._readableState.buffer.clear();

          if (content !== '') this._readableState.buffer.push(content);
          this._readableState.length = content.length;
          return this;
        }; // Don't raise the hwm > 1GB


        var MAX_HWM = 0x40000000;

        function computeNewHighWaterMark(n) {
          if (n >= MAX_HWM) {
            // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
            n = MAX_HWM;
          } else {
            // Get the next highest power of 2 to prevent increasing hwm excessively in
            // tiny amounts
            n--;
            n |= n >>> 1;
            n |= n >>> 2;
            n |= n >>> 4;
            n |= n >>> 8;
            n |= n >>> 16;
            n++;
          }

          return n;
        } // This function is designed to be inlinable, so please take care when making
        // changes to the function body.


        function howMuchToRead(n, state) {
          if (n <= 0 || state.length === 0 && state.ended) return 0;
          if (state.objectMode) return 1;

          if (n !== n) {
            // Only flow one buffer at a time
            if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
          } // If we're asking for more than the current hwm, then raise the hwm.


          if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
          if (n <= state.length) return n; // Don't have enough

          if (!state.ended) {
            state.needReadable = true;
            return 0;
          }

          return state.length;
        } // you can override either this method, or the async _read(n) below.


        Readable.prototype.read = function (n) {
          debug('read', n);
          n = parseInt(n, 10);
          var state = this._readableState;
          var nOrig = n;
          if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
          // already have a bunch of data in the buffer, then just trigger
          // the 'readable' event and move on.

          if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
            debug('read: emitReadable', state.length, state.ended);
            if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
            return null;
          }

          n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

          if (n === 0 && state.ended) {
            if (state.length === 0) endReadable(this);
            return null;
          } // All the actual chunk generation logic needs to be
          // *below* the call to _read.  The reason is that in certain
          // synthetic stream cases, such as passthrough streams, _read
          // may be a completely synchronous operation which may change
          // the state of the read buffer, providing enough data when
          // before there was *not* enough.
          //
          // So, the steps are:
          // 1. Figure out what the state of things will be after we do
          // a read from the buffer.
          //
          // 2. If that resulting state will trigger a _read, then call _read.
          // Note that this may be asynchronous, or synchronous.  Yes, it is
          // deeply ugly to write APIs this way, but that still doesn't mean
          // that the Readable class should behave improperly, as streams are
          // designed to be sync/async agnostic.
          // Take note if the _read call is sync or async (ie, if the read call
          // has returned yet), so that we know whether or not it's safe to emit
          // 'readable' etc.
          //
          // 3. Actually pull the requested chunks out of the buffer and return.
          // if we need a readable event, then we need to do some reading.


          var doRead = state.needReadable;
          debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

          if (state.length === 0 || state.length - n < state.highWaterMark) {
            doRead = true;
            debug('length less than watermark', doRead);
          } // however, if we've ended, then there's no point, and if we're already
          // reading, then it's unnecessary.


          if (state.ended || state.reading) {
            doRead = false;
            debug('reading or ended', doRead);
          } else if (doRead) {
            debug('do read');
            state.reading = true;
            state.sync = true; // if the length is currently zero, then we *need* a readable event.

            if (state.length === 0) state.needReadable = true; // call internal read method

            this._read(state.highWaterMark);

            state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
            // and we need to re-evaluate how much data we can return to the user.

            if (!state.reading) n = howMuchToRead(nOrig, state);
          }

          var ret;
          if (n > 0) ret = fromList(n, state);else ret = null;

          if (ret === null) {
            state.needReadable = state.length <= state.highWaterMark;
            n = 0;
          } else {
            state.length -= n;
            state.awaitDrain = 0;
          }

          if (state.length === 0) {
            // If we have nothing in the buffer, then we want to know
            // as soon as we *do* get something into the buffer.
            if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

            if (nOrig !== n && state.ended) endReadable(this);
          }

          if (ret !== null) this.emit('data', ret);
          return ret;
        };

        function onEofChunk(stream, state) {
          debug('onEofChunk');
          if (state.ended) return;

          if (state.decoder) {
            var chunk = state.decoder.end();

            if (chunk && chunk.length) {
              state.buffer.push(chunk);
              state.length += state.objectMode ? 1 : chunk.length;
            }
          }

          state.ended = true;

          if (state.sync) {
            // if we are sync, wait until next tick to emit the data.
            // Otherwise we risk emitting data in the flow()
            // the readable code triggers during a read() call
            emitReadable(stream);
          } else {
            // emit 'readable' now to make sure it gets picked up.
            state.needReadable = false;

            if (!state.emittedReadable) {
              state.emittedReadable = true;
              emitReadable_(stream);
            }
          }
        } // Don't emit readable right away in sync mode, because this can trigger
        // another read() call => stack overflow.  This way, it might trigger
        // a nextTick recursion warning, but that's not so bad.


        function emitReadable(stream) {
          var state = stream._readableState;
          debug('emitReadable', state.needReadable, state.emittedReadable);
          state.needReadable = false;

          if (!state.emittedReadable) {
            debug('emitReadable', state.flowing);
            state.emittedReadable = true;
            process.nextTick(emitReadable_, stream);
          }
        }

        function emitReadable_(stream) {
          var state = stream._readableState;
          debug('emitReadable_', state.destroyed, state.length, state.ended);

          if (!state.destroyed && (state.length || state.ended)) {
            stream.emit('readable');
            state.emittedReadable = false;
          } // The stream needs another readable event if
          // 1. It is not flowing, as the flow mechanism will take
          //    care of it.
          // 2. It is not ended.
          // 3. It is below the highWaterMark, so we can schedule
          //    another readable later.


          state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
          flow(stream);
        } // at this point, the user has presumably seen the 'readable' event,
        // and called read() to consume some data.  that may have triggered
        // in turn another _read(n) call, in which case reading = true if
        // it's in progress.
        // However, if we're not ended, or reading, and the length < hwm,
        // then go ahead and try to read some more preemptively.


        function maybeReadMore(stream, state) {
          if (!state.readingMore) {
            state.readingMore = true;
            process.nextTick(maybeReadMore_, stream, state);
          }
        }

        function maybeReadMore_(stream, state) {
          // Attempt to read more data if we should.
          //
          // The conditions for reading more data are (one of):
          // - Not enough data buffered (state.length < state.highWaterMark). The loop
          //   is responsible for filling the buffer with enough data if such data
          //   is available. If highWaterMark is 0 and we are not in the flowing mode
          //   we should _not_ attempt to buffer any extra data. We'll get more data
          //   when the stream consumer calls read() instead.
          // - No data in the buffer, and the stream is in flowing mode. In this mode
          //   the loop below is responsible for ensuring read() is called. Failing to
          //   call read here would abort the flow and there's no other mechanism for
          //   continuing the flow if the stream consumer has just subscribed to the
          //   'data' event.
          //
          // In addition to the above conditions to keep reading data, the following
          // conditions prevent the data from being read:
          // - The stream has ended (state.ended).
          // - There is already a pending 'read' operation (state.reading). This is a
          //   case where the the stream has called the implementation defined _read()
          //   method, but they are processing the call asynchronously and have _not_
          //   called push() with new data. In this case we skip performing more
          //   read()s. The execution ends in this method again after the _read() ends
          //   up calling push() with more data.
          while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
            var len = state.length;
            debug('maybeReadMore read 0');
            stream.read(0);
            if (len === state.length) // didn't get any data, stop spinning.
              break;
          }

          state.readingMore = false;
        } // abstract method.  to be overridden in specific implementation classes.
        // call cb(er, data) where data is <= n in length.
        // for virtual (non-string, non-buffer) streams, "length" is somewhat
        // arbitrary, and perhaps not very meaningful.


        Readable.prototype._read = function (n) {
          errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
        };

        Readable.prototype.pipe = function (dest, pipeOpts) {
          var src = this;
          var state = this._readableState;

          switch (state.pipesCount) {
            case 0:
              state.pipes = dest;
              break;

            case 1:
              state.pipes = [state.pipes, dest];
              break;

            default:
              state.pipes.push(dest);
              break;
          }

          state.pipesCount += 1;
          debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
          var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
          var endFn = doEnd ? onend : unpipe;
          if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
          dest.on('unpipe', onunpipe);

          function onunpipe(readable, unpipeInfo) {
            debug('onunpipe');

            if (readable === src) {
              if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
              }
            }
          }

          function onend() {
            debug('onend');
            dest.end();
          } // when the dest drains, it reduces the awaitDrain counter
          // on the source.  This would be more elegant with a .once()
          // handler in flow(), but adding and removing repeatedly is
          // too slow.


          var ondrain = pipeOnDrain(src);
          dest.on('drain', ondrain);
          var cleanedUp = false;

          function cleanup() {
            debug('cleanup'); // cleanup event handlers once the pipe is broken

            dest.removeListener('close', onclose);
            dest.removeListener('finish', onfinish);
            dest.removeListener('drain', ondrain);
            dest.removeListener('error', onerror);
            dest.removeListener('unpipe', onunpipe);
            src.removeListener('end', onend);
            src.removeListener('end', unpipe);
            src.removeListener('data', ondata);
            cleanedUp = true; // if the reader is waiting for a drain event from this
            // specific writer, then it would cause it to never start
            // flowing again.
            // So, if this is awaiting a drain, then we just call it now.
            // If we don't know, then assume that we are waiting for one.

            if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
          }

          src.on('data', ondata);

          function ondata(chunk) {
            debug('ondata');
            var ret = dest.write(chunk);
            debug('dest.write', ret);

            if (ret === false) {
              // If the user unpiped during `dest.write()`, it is possible
              // to get stuck in a permanently paused state if that write
              // also returned false.
              // => Check whether `dest` is still a piping destination.
              if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug('false write response, pause', state.awaitDrain);
                state.awaitDrain++;
              }

              src.pause();
            }
          } // if the dest has an error, then stop piping into it.
          // however, don't suppress the throwing behavior for this.


          function onerror(er) {
            debug('onerror', er);
            unpipe();
            dest.removeListener('error', onerror);
            if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
          } // Make sure our error handler is attached before userland ones.


          prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

          function onclose() {
            dest.removeListener('finish', onfinish);
            unpipe();
          }

          dest.once('close', onclose);

          function onfinish() {
            debug('onfinish');
            dest.removeListener('close', onclose);
            unpipe();
          }

          dest.once('finish', onfinish);

          function unpipe() {
            debug('unpipe');
            src.unpipe(dest);
          } // tell the dest that it's being piped to


          dest.emit('pipe', src); // start the flow if it hasn't been started already.

          if (!state.flowing) {
            debug('pipe resume');
            src.resume();
          }

          return dest;
        };

        function pipeOnDrain(src) {
          return function pipeOnDrainFunctionResult() {
            var state = src._readableState;
            debug('pipeOnDrain', state.awaitDrain);
            if (state.awaitDrain) state.awaitDrain--;

            if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
              state.flowing = true;
              flow(src);
            }
          };
        }

        Readable.prototype.unpipe = function (dest) {
          var state = this._readableState;
          var unpipeInfo = {
            hasUnpiped: false
          }; // if we're not piping anywhere, then do nothing.

          if (state.pipesCount === 0) return this; // just one destination.  most common case.

          if (state.pipesCount === 1) {
            // passed in one, but it's not the right one.
            if (dest && dest !== state.pipes) return this;
            if (!dest) dest = state.pipes; // got a match.

            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;
            if (dest) dest.emit('unpipe', this, unpipeInfo);
            return this;
          } // slow case. multiple pipe destinations.


          if (!dest) {
            // remove all.
            var dests = state.pipes;
            var len = state.pipesCount;
            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;

            for (var i = 0; i < len; i++) {
              dests[i].emit('unpipe', this, {
                hasUnpiped: false
              });
            }

            return this;
          } // try to find the right one.


          var index = indexOf(state.pipes, dest);
          if (index === -1) return this;
          state.pipes.splice(index, 1);
          state.pipesCount -= 1;
          if (state.pipesCount === 1) state.pipes = state.pipes[0];
          dest.emit('unpipe', this, unpipeInfo);
          return this;
        }; // set up data events if they are asked for
        // Ensure readable listeners eventually get something


        Readable.prototype.on = function (ev, fn) {
          var res = Stream.prototype.on.call(this, ev, fn);
          var state = this._readableState;

          if (ev === 'data') {
            // update readableListening so that resume() may be a no-op
            // a few lines down. This is needed to support once('readable').
            state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

            if (state.flowing !== false) this.resume();
          } else if (ev === 'readable') {
            if (!state.endEmitted && !state.readableListening) {
              state.readableListening = state.needReadable = true;
              state.flowing = false;
              state.emittedReadable = false;
              debug('on readable', state.length, state.reading);

              if (state.length) {
                emitReadable(this);
              } else if (!state.reading) {
                process.nextTick(nReadingNextTick, this);
              }
            }
          }

          return res;
        };

        Readable.prototype.addListener = Readable.prototype.on;

        Readable.prototype.removeListener = function (ev, fn) {
          var res = Stream.prototype.removeListener.call(this, ev, fn);

          if (ev === 'readable') {
            // We need to check if there is someone still listening to
            // readable and reset the state. However this needs to happen
            // after readable has been emitted but before I/O (nextTick) to
            // support once('readable', fn) cycles. This means that calling
            // resume within the same tick will have no
            // effect.
            process.nextTick(updateReadableListening, this);
          }

          return res;
        };

        Readable.prototype.removeAllListeners = function (ev) {
          var res = Stream.prototype.removeAllListeners.apply(this, arguments);

          if (ev === 'readable' || ev === undefined) {
            // We need to check if there is someone still listening to
            // readable and reset the state. However this needs to happen
            // after readable has been emitted but before I/O (nextTick) to
            // support once('readable', fn) cycles. This means that calling
            // resume within the same tick will have no
            // effect.
            process.nextTick(updateReadableListening, this);
          }

          return res;
        };

        function updateReadableListening(self) {
          var state = self._readableState;
          state.readableListening = self.listenerCount('readable') > 0;

          if (state.resumeScheduled && !state.paused) {
            // flowing needs to be set to true now, otherwise
            // the upcoming resume will not flow.
            state.flowing = true; // crude way to check if we should resume
          } else if (self.listenerCount('data') > 0) {
            self.resume();
          }
        }

        function nReadingNextTick(self) {
          debug('readable nexttick read 0');
          self.read(0);
        } // pause() and resume() are remnants of the legacy readable stream API
        // If the user uses them, then switch into old mode.


        Readable.prototype.resume = function () {
          var state = this._readableState;

          if (!state.flowing) {
            debug('resume'); // we flow only if there is no one listening
            // for readable, but we still have to call
            // resume()

            state.flowing = !state.readableListening;
            resume(this, state);
          }

          state.paused = false;
          return this;
        };

        function resume(stream, state) {
          if (!state.resumeScheduled) {
            state.resumeScheduled = true;
            process.nextTick(resume_, stream, state);
          }
        }

        function resume_(stream, state) {
          debug('resume', state.reading);

          if (!state.reading) {
            stream.read(0);
          }

          state.resumeScheduled = false;
          stream.emit('resume');
          flow(stream);
          if (state.flowing && !state.reading) stream.read(0);
        }

        Readable.prototype.pause = function () {
          debug('call pause flowing=%j', this._readableState.flowing);

          if (this._readableState.flowing !== false) {
            debug('pause');
            this._readableState.flowing = false;
            this.emit('pause');
          }

          this._readableState.paused = true;
          return this;
        };

        function flow(stream) {
          var state = stream._readableState;
          debug('flow', state.flowing);

          while (state.flowing && stream.read() !== null) {
            ;
          }
        } // wrap an old-style stream as the async data source.
        // This is *not* part of the readable stream interface.
        // It is an ugly unfortunate mess of history.


        Readable.prototype.wrap = function (stream) {
          var _this = this;

          var state = this._readableState;
          var paused = false;
          stream.on('end', function () {
            debug('wrapped end');

            if (state.decoder && !state.ended) {
              var chunk = state.decoder.end();
              if (chunk && chunk.length) _this.push(chunk);
            }

            _this.push(null);
          });
          stream.on('data', function (chunk) {
            debug('wrapped data');
            if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

            if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

            var ret = _this.push(chunk);

            if (!ret) {
              paused = true;
              stream.pause();
            }
          }); // proxy all the other methods.
          // important when wrapping filters and duplexes.

          for (var i in stream) {
            if (this[i] === undefined && typeof stream[i] === 'function') {
              this[i] = function methodWrap(method) {
                return function methodWrapReturnFunction() {
                  return stream[method].apply(stream, arguments);
                };
              }(i);
            }
          } // proxy certain important events.


          for (var n = 0; n < kProxyEvents.length; n++) {
            stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
          } // when we try to consume some more bytes, simply unpause the
          // underlying stream.


          this._read = function (n) {
            debug('wrapped _read', n);

            if (paused) {
              paused = false;
              stream.resume();
            }
          };

          return this;
        };

        if (typeof Symbol === 'function') {
          Readable.prototype[Symbol.asyncIterator] = function () {
            if (createReadableStreamAsyncIterator === undefined) {
              createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
            }

            return createReadableStreamAsyncIterator(this);
          };
        }

        Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._readableState.highWaterMark;
          }
        });
        Object.defineProperty(Readable.prototype, 'readableBuffer', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._readableState && this._readableState.buffer;
          }
        });
        Object.defineProperty(Readable.prototype, 'readableFlowing', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._readableState.flowing;
          },
          set: function set(state) {
            if (this._readableState) {
              this._readableState.flowing = state;
            }
          }
        }); // exposed for testing purposes only.

        Readable._fromList = fromList;
        Object.defineProperty(Readable.prototype, 'readableLength', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._readableState.length;
          }
        }); // Pluck off n bytes from an array of buffers.
        // Length is the combined lengths of all the buffers in the list.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.

        function fromList(n, state) {
          // nothing buffered
          if (state.length === 0) return null;
          var ret;
          if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
            // read it all, truncate the list
            if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
            state.buffer.clear();
          } else {
            // read part of list
            ret = state.buffer.consume(n, state.decoder);
          }
          return ret;
        }

        function endReadable(stream) {
          var state = stream._readableState;
          debug('endReadable', state.endEmitted);

          if (!state.endEmitted) {
            state.ended = true;
            process.nextTick(endReadableNT, state, stream);
          }
        }

        function endReadableNT(state, stream) {
          debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

          if (!state.endEmitted && state.length === 0) {
            state.endEmitted = true;
            stream.readable = false;
            stream.emit('end');

            if (state.autoDestroy) {
              // In case of duplex streams we need a way to detect
              // if the writable side is ready for autoDestroy as well
              var wState = stream._writableState;

              if (!wState || wState.autoDestroy && wState.finished) {
                stream.destroy();
              }
            }
          }
        }

        if (typeof Symbol === 'function') {
          Readable.from = function (iterable, opts) {
            if (from === undefined) {
              from = require('./internal/streams/from');
            }

            return from(Readable, iterable, opts);
          };
        }

        function indexOf(xs, x) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (xs[i] === x) return i;
          }

          return -1;
        }
      }).call(this);
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {
    "../errors": 7,
    "./_stream_duplex": 8,
    "./internal/streams/async_iterator": 13,
    "./internal/streams/buffer_list": 14,
    "./internal/streams/destroy": 15,
    "./internal/streams/from": 17,
    "./internal/streams/state": 19,
    "./internal/streams/stream": 20,
    "_process": 276,
    "buffer": 102,
    "events": 175,
    "inherits": 217,
    "string_decoder/": 364,
    "util": 56
  }],
  11: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    // a transform stream is a readable/writable stream where you do
    // something with the data.  Sometimes it's called a "filter",
    // but that's not a great name for it, since that implies a thing where
    // some bits pass through, and others are simply ignored.  (That would
    // be a valid example of a transform, of course.)
    //
    // While the output is causally related to the input, it's not a
    // necessarily symmetric or synchronous transformation.  For example,
    // a zlib stream might take multiple plain-text writes(), and then
    // emit a single compressed chunk some time in the future.
    //
    // Here's how this works:
    //
    // The Transform stream has all the aspects of the readable and writable
    // stream classes.  When you write(chunk), that calls _write(chunk,cb)
    // internally, and returns false if there's a lot of pending writes
    // buffered up.  When you call read(), that calls _read(n) until
    // there's enough pending readable data buffered up.
    //
    // In a transform stream, the written data is placed in a buffer.  When
    // _read(n) is called, it transforms the queued up data, calling the
    // buffered _write cb's as it consumes chunks.  If consuming a single
    // written chunk would result in multiple output chunks, then the first
    // outputted bit calls the readcb, and subsequent chunks just go into
    // the read buffer, and will cause it to emit 'readable' if necessary.
    //
    // This way, back-pressure is actually determined by the reading side,
    // since _read has to be called to start processing a new chunk.  However,
    // a pathological inflate type of transform can cause excessive buffering
    // here.  For example, imagine a stream where every byte of input is
    // interpreted as an integer from 0-255, and then results in that many
    // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
    // 1kb of data being output.  In this case, you could write a very small
    // amount of input, and end up with a very large amount of output.  In
    // such a pathological inflating mechanism, there'd be no way to tell
    // the system to stop doing the transform.  A single 4MB write could
    // cause the system to run out of memory.
    //
    // However, even in such a pathological case, only a single written chunk
    // would be consumed, and then the rest would wait (un-transformed) until
    // the results of the previous transformed chunk were consumed.
    'use strict';

    module.exports = Transform;

    var _require$codes = require('../errors').codes,
        ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
        ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
        ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
        ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

    var Duplex = require('./_stream_duplex');

    require('inherits')(Transform, Duplex);

    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;

      if (cb === null) {
        return this.emit('error', new ERR_MULTIPLE_CALLBACK());
      }

      ts.writechunk = null;
      ts.writecb = null;
      if (data != null) // single equals check for both `null` and `undefined`
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;

      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }

    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      }; // start out asking for a readable event once data is transformed.

      this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.

      this._readableState.sync = false;

      if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
      } // When the writable side finishes, then flush out anything remaining.


      this.on('prefinish', prefinish);
    }

    function prefinish() {
      var _this = this;

      if (typeof this._flush === 'function' && !this._readableState.destroyed) {
        this._flush(function (er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }

    Transform.prototype.push = function (chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    }; // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.


    Transform.prototype._transform = function (chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
    };

    Transform.prototype._write = function (chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;

      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    }; // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.


    Transform.prototype._read = function (n) {
      var ts = this._transformState;

      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;

        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };

    Transform.prototype._destroy = function (err, cb) {
      Duplex.prototype._destroy.call(this, err, function (err2) {
        cb(err2);
      });
    };

    function done(stream, er, data) {
      if (er) return stream.emit('error', er);
      if (data != null) // single equals check for both `null` and `undefined`
        stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
      // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided

      if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
      if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
      return stream.push(null);
    }
  }, {
    "../errors": 7,
    "./_stream_duplex": 8,
    "inherits": 217
  }],
  12: [function (require, module, exports) {
    (function (process, global) {
      (function () {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        // A bit simpler than readable streams.
        // Implement an async ._write(chunk, encoding, cb), and it'll handle all
        // the drain event emission and buffering.
        'use strict';

        module.exports = Writable;
        /* <replacement> */

        function WriteReq(chunk, encoding, cb) {
          this.chunk = chunk;
          this.encoding = encoding;
          this.callback = cb;
          this.next = null;
        } // It seems a linked list but it is not
        // there will be only 2 of these for each stream


        function CorkedRequest(state) {
          var _this = this;

          this.next = null;
          this.entry = null;

          this.finish = function () {
            onCorkedFinish(_this, state);
          };
        }
        /* </replacement> */

        /*<replacement>*/


        var Duplex;
        /*</replacement>*/

        Writable.WritableState = WritableState;
        /*<replacement>*/

        var internalUtil = {
          deprecate: require('util-deprecate')
        };
        /*</replacement>*/

        /*<replacement>*/

        var Stream = require('./internal/streams/stream');
        /*</replacement>*/


        var Buffer = require('buffer').Buffer;

        var OurUint8Array = global.Uint8Array || function () {};

        function _uint8ArrayToBuffer(chunk) {
          return Buffer.from(chunk);
        }

        function _isUint8Array(obj) {
          return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
        }

        var destroyImpl = require('./internal/streams/destroy');

        var _require = require('./internal/streams/state'),
            getHighWaterMark = _require.getHighWaterMark;

        var _require$codes = require('../errors').codes,
            ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
            ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
            ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
            ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
            ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
            ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
            ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
            ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

        var errorOrDestroy = destroyImpl.errorOrDestroy;

        require('inherits')(Writable, Stream);

        function nop() {}

        function WritableState(options, stream, isDuplex) {
          Duplex = Duplex || require('./_stream_duplex');
          options = options || {}; // Duplex streams are both readable and writable, but share
          // the same options object.
          // However, some cases require setting options to different
          // values for the readable and the writable sides of the duplex stream,
          // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

          if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
          // contains buffers or objects.

          this.objectMode = !!options.objectMode;
          if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
          // Note: 0 is a valid value, means that we always return false if
          // the entire buffer is not flushed immediately on write()

          this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

          this.finalCalled = false; // drain event flag.

          this.needDrain = false; // at the start of calling end()

          this.ending = false; // when end() has been called, and returned

          this.ended = false; // when 'finish' is emitted

          this.finished = false; // has it been destroyed

          this.destroyed = false; // should we decode strings into buffers before passing to _write?
          // this is here so that some node-core streams can optimize string
          // handling at a lower level.

          var noDecode = options.decodeStrings === false;
          this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
          // encoding is 'binary' so we have to make this configurable.
          // Everything else in the universe uses 'utf8', though.

          this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
          // of how much we're waiting to get pushed to some underlying
          // socket or file.

          this.length = 0; // a flag to see when we're in the middle of a write.

          this.writing = false; // when true all writes will be buffered until .uncork() call

          this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
          // or on a later tick.  We set this to true at first, because any
          // actions that shouldn't happen until "later" should generally also
          // not happen before the first write call.

          this.sync = true; // a flag to know if we're processing previously buffered items, which
          // may call the _write() callback in the same tick, so that we don't
          // end up in an overlapped onwrite situation.

          this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

          this.onwrite = function (er) {
            onwrite(stream, er);
          }; // the callback that the user supplies to write(chunk,encoding,cb)


          this.writecb = null; // the amount that is being written when _write is called.

          this.writelen = 0;
          this.bufferedRequest = null;
          this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
          // this must be 0 before 'finish' can be emitted

          this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
          // This is relevant for synchronous Transform streams

          this.prefinished = false; // True if the error was already emitted and should not be thrown again

          this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

          this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

          this.autoDestroy = !!options.autoDestroy; // count buffered requests

          this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
          // one allocated and free to use, and we maintain at most two

          this.corkedRequestsFree = new CorkedRequest(this);
        }

        WritableState.prototype.getBuffer = function getBuffer() {
          var current = this.bufferedRequest;
          var out = [];

          while (current) {
            out.push(current);
            current = current.next;
          }

          return out;
        };

        (function () {
          try {
            Object.defineProperty(WritableState.prototype, 'buffer', {
              get: internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
              }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
            });
          } catch (_) {}
        })(); // Test _writableState for inheritance to account for Duplex streams,
        // whose prototype chain only points to Readable.


        var realHasInstance;

        if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
          realHasInstance = Function.prototype[Symbol.hasInstance];
          Object.defineProperty(Writable, Symbol.hasInstance, {
            value: function value(object) {
              if (realHasInstance.call(this, object)) return true;
              if (this !== Writable) return false;
              return object && object._writableState instanceof WritableState;
            }
          });
        } else {
          realHasInstance = function realHasInstance(object) {
            return object instanceof this;
          };
        }

        function Writable(options) {
          Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
          // `realHasInstance` is necessary because using plain `instanceof`
          // would return false, as no `_writableState` property is attached.
          // Trying to use the custom `instanceof` for Writable here will also break the
          // Node.js LazyTransform implementation, which has a non-trivial getter for
          // `_writableState` that would lead to infinite recursion.
          // Checking for a Stream.Duplex instance is faster here instead of inside
          // the WritableState constructor, at least with V8 6.5

          var isDuplex = this instanceof Duplex;
          if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
          this._writableState = new WritableState(options, this, isDuplex); // legacy.

          this.writable = true;

          if (options) {
            if (typeof options.write === 'function') this._write = options.write;
            if (typeof options.writev === 'function') this._writev = options.writev;
            if (typeof options.destroy === 'function') this._destroy = options.destroy;
            if (typeof options.final === 'function') this._final = options.final;
          }

          Stream.call(this);
        } // Otherwise people can pipe Writable streams, which is just wrong.


        Writable.prototype.pipe = function () {
          errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
        };

        function writeAfterEnd(stream, cb) {
          var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

          errorOrDestroy(stream, er);
          process.nextTick(cb, er);
        } // Checks that a user-supplied chunk is valid, especially for the particular
        // mode the stream is in. Currently this means that `null` is never accepted
        // and undefined/non-string values are only allowed in object mode.


        function validChunk(stream, state, chunk, cb) {
          var er;

          if (chunk === null) {
            er = new ERR_STREAM_NULL_VALUES();
          } else if (typeof chunk !== 'string' && !state.objectMode) {
            er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
          }

          if (er) {
            errorOrDestroy(stream, er);
            process.nextTick(cb, er);
            return false;
          }

          return true;
        }

        Writable.prototype.write = function (chunk, encoding, cb) {
          var state = this._writableState;
          var ret = false;

          var isBuf = !state.objectMode && _isUint8Array(chunk);

          if (isBuf && !Buffer.isBuffer(chunk)) {
            chunk = _uint8ArrayToBuffer(chunk);
          }

          if (typeof encoding === 'function') {
            cb = encoding;
            encoding = null;
          }

          if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
          if (typeof cb !== 'function') cb = nop;
          if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
            state.pendingcb++;
            ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
          }
          return ret;
        };

        Writable.prototype.cork = function () {
          this._writableState.corked++;
        };

        Writable.prototype.uncork = function () {
          var state = this._writableState;

          if (state.corked) {
            state.corked--;
            if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
          }
        };

        Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
          // node::ParseEncoding() requires lower case.
          if (typeof encoding === 'string') encoding = encoding.toLowerCase();
          if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
          this._writableState.defaultEncoding = encoding;
          return this;
        };

        Object.defineProperty(Writable.prototype, 'writableBuffer', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState && this._writableState.getBuffer();
          }
        });

        function decodeChunk(state, chunk, encoding) {
          if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
            chunk = Buffer.from(chunk, encoding);
          }

          return chunk;
        }

        Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState.highWaterMark;
          }
        }); // if we're already writing something, then just put this
        // in the queue, and wait our turn.  Otherwise, call _write
        // If we return false, then we need a drain event, so set that flag.

        function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
          if (!isBuf) {
            var newChunk = decodeChunk(state, chunk, encoding);

            if (chunk !== newChunk) {
              isBuf = true;
              encoding = 'buffer';
              chunk = newChunk;
            }
          }

          var len = state.objectMode ? 1 : chunk.length;
          state.length += len;
          var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

          if (!ret) state.needDrain = true;

          if (state.writing || state.corked) {
            var last = state.lastBufferedRequest;
            state.lastBufferedRequest = {
              chunk: chunk,
              encoding: encoding,
              isBuf: isBuf,
              callback: cb,
              next: null
            };

            if (last) {
              last.next = state.lastBufferedRequest;
            } else {
              state.bufferedRequest = state.lastBufferedRequest;
            }

            state.bufferedRequestCount += 1;
          } else {
            doWrite(stream, state, false, len, chunk, encoding, cb);
          }

          return ret;
        }

        function doWrite(stream, state, writev, len, chunk, encoding, cb) {
          state.writelen = len;
          state.writecb = cb;
          state.writing = true;
          state.sync = true;
          if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
          state.sync = false;
        }

        function onwriteError(stream, state, sync, er, cb) {
          --state.pendingcb;

          if (sync) {
            // defer the callback if we are being called synchronously
            // to avoid piling up things on the stack
            process.nextTick(cb, er); // this can emit finish, and it will always happen
            // after error

            process.nextTick(finishMaybe, stream, state);
            stream._writableState.errorEmitted = true;
            errorOrDestroy(stream, er);
          } else {
            // the caller expect this to happen before if
            // it is async
            cb(er);
            stream._writableState.errorEmitted = true;
            errorOrDestroy(stream, er); // this can emit finish, but finish must
            // always follow error

            finishMaybe(stream, state);
          }
        }

        function onwriteStateUpdate(state) {
          state.writing = false;
          state.writecb = null;
          state.length -= state.writelen;
          state.writelen = 0;
        }

        function onwrite(stream, er) {
          var state = stream._writableState;
          var sync = state.sync;
          var cb = state.writecb;
          if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
          onwriteStateUpdate(state);
          if (er) onwriteError(stream, state, sync, er, cb);else {
            // Check if we're actually ready to finish, but don't emit yet
            var finished = needFinish(state) || stream.destroyed;

            if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
              clearBuffer(stream, state);
            }

            if (sync) {
              process.nextTick(afterWrite, stream, state, finished, cb);
            } else {
              afterWrite(stream, state, finished, cb);
            }
          }
        }

        function afterWrite(stream, state, finished, cb) {
          if (!finished) onwriteDrain(stream, state);
          state.pendingcb--;
          cb();
          finishMaybe(stream, state);
        } // Must force callback to be called on nextTick, so that we don't
        // emit 'drain' before the write() consumer gets the 'false' return
        // value, and has a chance to attach a 'drain' listener.


        function onwriteDrain(stream, state) {
          if (state.length === 0 && state.needDrain) {
            state.needDrain = false;
            stream.emit('drain');
          }
        } // if there's something in the buffer waiting, then process it


        function clearBuffer(stream, state) {
          state.bufferProcessing = true;
          var entry = state.bufferedRequest;

          if (stream._writev && entry && entry.next) {
            // Fast case, write everything using _writev()
            var l = state.bufferedRequestCount;
            var buffer = new Array(l);
            var holder = state.corkedRequestsFree;
            holder.entry = entry;
            var count = 0;
            var allBuffers = true;

            while (entry) {
              buffer[count] = entry;
              if (!entry.isBuf) allBuffers = false;
              entry = entry.next;
              count += 1;
            }

            buffer.allBuffers = allBuffers;
            doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
            // as the hot path ends with doWrite

            state.pendingcb++;
            state.lastBufferedRequest = null;

            if (holder.next) {
              state.corkedRequestsFree = holder.next;
              holder.next = null;
            } else {
              state.corkedRequestsFree = new CorkedRequest(state);
            }

            state.bufferedRequestCount = 0;
          } else {
            // Slow case, write chunks one-by-one
            while (entry) {
              var chunk = entry.chunk;
              var encoding = entry.encoding;
              var cb = entry.callback;
              var len = state.objectMode ? 1 : chunk.length;
              doWrite(stream, state, false, len, chunk, encoding, cb);
              entry = entry.next;
              state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
              // it means that we need to wait until it does.
              // also, that means that the chunk and cb are currently
              // being processed, so move the buffer counter past them.

              if (state.writing) {
                break;
              }
            }

            if (entry === null) state.lastBufferedRequest = null;
          }

          state.bufferedRequest = entry;
          state.bufferProcessing = false;
        }

        Writable.prototype._write = function (chunk, encoding, cb) {
          cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
        };

        Writable.prototype._writev = null;

        Writable.prototype.end = function (chunk, encoding, cb) {
          var state = this._writableState;

          if (typeof chunk === 'function') {
            cb = chunk;
            chunk = null;
            encoding = null;
          } else if (typeof encoding === 'function') {
            cb = encoding;
            encoding = null;
          }

          if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

          if (state.corked) {
            state.corked = 1;
            this.uncork();
          } // ignore unnecessary end() calls.


          if (!state.ending) endWritable(this, state, cb);
          return this;
        };

        Object.defineProperty(Writable.prototype, 'writableLength', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState.length;
          }
        });

        function needFinish(state) {
          return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
        }

        function callFinal(stream, state) {
          stream._final(function (err) {
            state.pendingcb--;

            if (err) {
              errorOrDestroy(stream, err);
            }

            state.prefinished = true;
            stream.emit('prefinish');
            finishMaybe(stream, state);
          });
        }

        function prefinish(stream, state) {
          if (!state.prefinished && !state.finalCalled) {
            if (typeof stream._final === 'function' && !state.destroyed) {
              state.pendingcb++;
              state.finalCalled = true;
              process.nextTick(callFinal, stream, state);
            } else {
              state.prefinished = true;
              stream.emit('prefinish');
            }
          }
        }

        function finishMaybe(stream, state) {
          var need = needFinish(state);

          if (need) {
            prefinish(stream, state);

            if (state.pendingcb === 0) {
              state.finished = true;
              stream.emit('finish');

              if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;

                if (!rState || rState.autoDestroy && rState.endEmitted) {
                  stream.destroy();
                }
              }
            }
          }

          return need;
        }

        function endWritable(stream, state, cb) {
          state.ending = true;
          finishMaybe(stream, state);

          if (cb) {
            if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
          }

          state.ended = true;
          stream.writable = false;
        }

        function onCorkedFinish(corkReq, state, err) {
          var entry = corkReq.entry;
          corkReq.entry = null;

          while (entry) {
            var cb = entry.callback;
            state.pendingcb--;
            cb(err);
            entry = entry.next;
          } // reuse the free corkReq.


          state.corkedRequestsFree.next = corkReq;
        }

        Object.defineProperty(Writable.prototype, 'destroyed', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            if (this._writableState === undefined) {
              return false;
            }

            return this._writableState.destroyed;
          },
          set: function set(value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (!this._writableState) {
              return;
            } // backward compatibility, the user is explicitly
            // managing destroyed


            this._writableState.destroyed = value;
          }
        });
        Writable.prototype.destroy = destroyImpl.destroy;
        Writable.prototype._undestroy = destroyImpl.undestroy;

        Writable.prototype._destroy = function (err, cb) {
          cb(err);
        };
      }).call(this);
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {
    "../errors": 7,
    "./_stream_duplex": 8,
    "./internal/streams/destroy": 15,
    "./internal/streams/state": 19,
    "./internal/streams/stream": 20,
    "_process": 276,
    "buffer": 102,
    "inherits": 217,
    "util-deprecate": 400
  }],
  13: [function (require, module, exports) {
    (function (process) {
      (function () {
        'use strict';

        var _Object$setPrototypeO;

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }

          return obj;
        }

        var finished = require('./end-of-stream');

        var kLastResolve = Symbol('lastResolve');
        var kLastReject = Symbol('lastReject');
        var kError = Symbol('error');
        var kEnded = Symbol('ended');
        var kLastPromise = Symbol('lastPromise');
        var kHandlePromise = Symbol('handlePromise');
        var kStream = Symbol('stream');

        function createIterResult(value, done) {
          return {
            value: value,
            done: done
          };
        }

        function readAndResolve(iter) {
          var resolve = iter[kLastResolve];

          if (resolve !== null) {
            var data = iter[kStream].read(); // we defer if data is null
            // we can be expecting either 'end' or
            // 'error'

            if (data !== null) {
              iter[kLastPromise] = null;
              iter[kLastResolve] = null;
              iter[kLastReject] = null;
              resolve(createIterResult(data, false));
            }
          }
        }

        function onReadable(iter) {
          // we wait for the next tick, because it might
          // emit an error with process.nextTick
          process.nextTick(readAndResolve, iter);
        }

        function wrapForNext(lastPromise, iter) {
          return function (resolve, reject) {
            lastPromise.then(function () {
              if (iter[kEnded]) {
                resolve(createIterResult(undefined, true));
                return;
              }

              iter[kHandlePromise](resolve, reject);
            }, reject);
          };
        }

        var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
        var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
          get stream() {
            return this[kStream];
          },

          next: function next() {
            var _this = this; // if we have detected an error in the meanwhile
            // reject straight away


            var error = this[kError];

            if (error !== null) {
              return Promise.reject(error);
            }

            if (this[kEnded]) {
              return Promise.resolve(createIterResult(undefined, true));
            }

            if (this[kStream].destroyed) {
              // We need to defer via nextTick because if .destroy(err) is
              // called, the error will be emitted via nextTick, and
              // we cannot guarantee that there is no error lingering around
              // waiting to be emitted.
              return new Promise(function (resolve, reject) {
                process.nextTick(function () {
                  if (_this[kError]) {
                    reject(_this[kError]);
                  } else {
                    resolve(createIterResult(undefined, true));
                  }
                });
              });
            } // if we have multiple next() calls
            // we will wait for the previous Promise to finish
            // this logic is optimized to support for await loops,
            // where next() is only called once at a time


            var lastPromise = this[kLastPromise];
            var promise;

            if (lastPromise) {
              promise = new Promise(wrapForNext(lastPromise, this));
            } else {
              // fast path needed to support multiple this.push()
              // without triggering the next() queue
              var data = this[kStream].read();

              if (data !== null) {
                return Promise.resolve(createIterResult(data, false));
              }

              promise = new Promise(this[kHandlePromise]);
            }

            this[kLastPromise] = promise;
            return promise;
          }
        }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
          return this;
        }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
          var _this2 = this; // destroy(err, cb) is a private API
          // we can guarantee we have that here, because we control the
          // Readable class this is attached to


          return new Promise(function (resolve, reject) {
            _this2[kStream].destroy(null, function (err) {
              if (err) {
                reject(err);
                return;
              }

              resolve(createIterResult(undefined, true));
            });
          });
        }), _Object$setPrototypeO), AsyncIteratorPrototype);

        var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
          var _Object$create;

          var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
            value: stream,
            writable: true
          }), _defineProperty(_Object$create, kLastResolve, {
            value: null,
            writable: true
          }), _defineProperty(_Object$create, kLastReject, {
            value: null,
            writable: true
          }), _defineProperty(_Object$create, kError, {
            value: null,
            writable: true
          }), _defineProperty(_Object$create, kEnded, {
            value: stream._readableState.endEmitted,
            writable: true
          }), _defineProperty(_Object$create, kHandlePromise, {
            value: function value(resolve, reject) {
              var data = iterator[kStream].read();

              if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
              } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
              }
            },
            writable: true
          }), _Object$create));
          iterator[kLastPromise] = null;
          finished(stream, function (err) {
            if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
              var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
              // returned by next() and store the error

              if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
              }

              iterator[kError] = err;
              return;
            }

            var resolve = iterator[kLastResolve];

            if (resolve !== null) {
              iterator[kLastPromise] = null;
              iterator[kLastResolve] = null;
              iterator[kLastReject] = null;
              resolve(createIterResult(undefined, true));
            }

            iterator[kEnded] = true;
          });
          stream.on('readable', onReadable.bind(null, iterator));
          return iterator;
        };

        module.exports = createReadableStreamAsyncIterator;
      }).call(this);
    }).call(this, require('_process'));
  }, {
    "./end-of-stream": 16,
    "_process": 276
  }],
  14: [function (require, module, exports) {
    'use strict';

    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);

      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
      }

      return keys;
    }

    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};

        if (i % 2) {
          ownKeys(Object(source), true).forEach(function (key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function (key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }

      return target;
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    var _require = require('buffer'),
        Buffer = _require.Buffer;

    var _require2 = require('util'),
        inspect = _require2.inspect;

    var custom = inspect && inspect.custom || 'inspect';

    function copyBuffer(src, target, offset) {
      Buffer.prototype.copy.call(src, target, offset);
    }

    module.exports = /*#__PURE__*/function () {
      function BufferList() {
        _classCallCheck(this, BufferList);

        this.head = null;
        this.tail = null;
        this.length = 0;
      }

      _createClass(BufferList, [{
        key: "push",
        value: function push(v) {
          var entry = {
            data: v,
            next: null
          };
          if (this.length > 0) this.tail.next = entry;else this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v) {
          var entry = {
            data: v,
            next: this.head
          };
          if (this.length === 0) this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0) return;
          var ret = this.head.data;
          if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join(s) {
          if (this.length === 0) return '';
          var p = this.head;
          var ret = '' + p.data;

          while (p = p.next) {
            ret += s + p.data;
          }

          return ret;
        }
      }, {
        key: "concat",
        value: function concat(n) {
          if (this.length === 0) return Buffer.alloc(0);
          var ret = Buffer.allocUnsafe(n >>> 0);
          var p = this.head;
          var i = 0;

          while (p) {
            copyBuffer(p.data, ret, i);
            i += p.data.length;
            p = p.next;
          }

          return ret;
        } // Consumes a specified amount of bytes or characters from the buffered data.

      }, {
        key: "consume",
        value: function consume(n, hasStrings) {
          var ret;

          if (n < this.head.data.length) {
            // `slice` is the same for buffers and strings.
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
          } else if (n === this.head.data.length) {
            // First chunk is a perfect match.
            ret = this.shift();
          } else {
            // Result spans more than one buffer.
            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
          }

          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        } // Consumes a specified amount of characters from the buffered data.

      }, {
        key: "_getString",
        value: function _getString(n) {
          var p = this.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;

          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length) ret += str;else ret += str.slice(0, n);
            n -= nb;

            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next) this.head = p.next;else this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = str.slice(nb);
              }

              break;
            }

            ++c;
          }

          this.length -= c;
          return ret;
        } // Consumes a specified amount of bytes from the buffered data.

      }, {
        key: "_getBuffer",
        value: function _getBuffer(n) {
          var ret = Buffer.allocUnsafe(n);
          var p = this.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;

          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;

            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next) this.head = p.next;else this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = buf.slice(nb);
              }

              break;
            }

            ++c;
          }

          this.length -= c;
          return ret;
        } // Make sure the linked list only shows the minimal necessary information.

      }, {
        key: custom,
        value: function value(_, options) {
          return inspect(this, _objectSpread({}, options, {
            // Only inspect one level.
            depth: 0,
            // It should not recurse.
            customInspect: false
          }));
        }
      }]);

      return BufferList;
    }();
  }, {
    "buffer": 102,
    "util": 56
  }],
  15: [function (require, module, exports) {
    (function (process) {
      (function () {
        'use strict'; // undocumented cb() API, needed for core, not for public API

        function destroy(err, cb) {
          var _this = this;

          var readableDestroyed = this._readableState && this._readableState.destroyed;
          var writableDestroyed = this._writableState && this._writableState.destroyed;

          if (readableDestroyed || writableDestroyed) {
            if (cb) {
              cb(err);
            } else if (err) {
              if (!this._writableState) {
                process.nextTick(emitErrorNT, this, err);
              } else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                process.nextTick(emitErrorNT, this, err);
              }
            }

            return this;
          } // we set destroyed to true before firing error callbacks in order
          // to make it re-entrance safe in case destroy() is called within callbacks


          if (this._readableState) {
            this._readableState.destroyed = true;
          } // if this is a duplex stream mark the writable part as destroyed as well


          if (this._writableState) {
            this._writableState.destroyed = true;
          }

          this._destroy(err || null, function (err) {
            if (!cb && err) {
              if (!_this._writableState) {
                process.nextTick(emitErrorAndCloseNT, _this, err);
              } else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                process.nextTick(emitErrorAndCloseNT, _this, err);
              } else {
                process.nextTick(emitCloseNT, _this);
              }
            } else if (cb) {
              process.nextTick(emitCloseNT, _this);
              cb(err);
            } else {
              process.nextTick(emitCloseNT, _this);
            }
          });

          return this;
        }

        function emitErrorAndCloseNT(self, err) {
          emitErrorNT(self, err);
          emitCloseNT(self);
        }

        function emitCloseNT(self) {
          if (self._writableState && !self._writableState.emitClose) return;
          if (self._readableState && !self._readableState.emitClose) return;
          self.emit('close');
        }

        function undestroy() {
          if (this._readableState) {
            this._readableState.destroyed = false;
            this._readableState.reading = false;
            this._readableState.ended = false;
            this._readableState.endEmitted = false;
          }

          if (this._writableState) {
            this._writableState.destroyed = false;
            this._writableState.ended = false;
            this._writableState.ending = false;
            this._writableState.finalCalled = false;
            this._writableState.prefinished = false;
            this._writableState.finished = false;
            this._writableState.errorEmitted = false;
          }
        }

        function emitErrorNT(self, err) {
          self.emit('error', err);
        }

        function errorOrDestroy(stream, err) {
          // We have tests that rely on errors being emitted
          // in the same tick, so changing this is semver major.
          // For now when you opt-in to autoDestroy we allow
          // the error to be emitted nextTick. In a future
          // semver major update we should change the default to this.
          var rState = stream._readableState;
          var wState = stream._writableState;
          if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
        }

        module.exports = {
          destroy: destroy,
          undestroy: undestroy,
          errorOrDestroy: errorOrDestroy
        };
      }).call(this);
    }).call(this, require('_process'));
  }, {
    "_process": 276
  }],
  16: [function (require, module, exports) {
    // Ported from https://github.com/mafintosh/end-of-stream with
    // permission from the author, Mathias Buus (@mafintosh).
    'use strict';

    var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

    function once(callback) {
      var called = false;
      return function () {
        if (called) return;
        called = true;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        callback.apply(this, args);
      };
    }

    function noop() {}

    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === 'function';
    }

    function eos(stream, opts, callback) {
      if (typeof opts === 'function') return eos(stream, null, opts);
      if (!opts) opts = {};
      callback = once(callback || noop);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;

      var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
      };

      var writableEnded = stream._writableState && stream._writableState.finished;

      var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
      };

      var readableEnded = stream._readableState && stream._readableState.endEmitted;

      var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
      };

      var onerror = function onerror(err) {
        callback.call(stream, err);
      };

      var onclose = function onclose() {
        var err;

        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }

        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
      };

      var onrequest = function onrequest() {
        stream.req.on('finish', onfinish);
      };

      if (isRequest(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest();else stream.on('request', onrequest);
      } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
      }

      stream.on('end', onend);
      stream.on('finish', onfinish);
      if (opts.error !== false) stream.on('error', onerror);
      stream.on('close', onclose);
      return function () {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
      };
    }

    module.exports = eos;
  }, {
    "../../../errors": 7
  }],
  17: [function (require, module, exports) {
    module.exports = function () {
      throw new Error('Readable.from is not available in the browser');
    };
  }, {}],
  18: [function (require, module, exports) {
    // Ported from https://github.com/mafintosh/pump with
    // permission from the author, Mathias Buus (@mafintosh).
    'use strict';

    var eos;

    function once(callback) {
      var called = false;
      return function () {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }

    var _require$codes = require('../../../errors').codes,
        ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
        ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

    function noop(err) {
      // Rethrow the error if it exists to avoid swallowing it
      if (err) throw err;
    }

    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === 'function';
    }

    function destroyer(stream, reading, writing, callback) {
      callback = once(callback);
      var closed = false;
      stream.on('close', function () {
        closed = true;
      });
      if (eos === undefined) eos = require('./end-of-stream');
      eos(stream, {
        readable: reading,
        writable: writing
      }, function (err) {
        if (err) return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function (err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want

        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED('pipe'));
      };
    }

    function call(fn) {
      fn();
    }

    function pipe(from, to) {
      return from.pipe(to);
    }

    function popCallback(streams) {
      if (!streams.length) return noop;
      if (typeof streams[streams.length - 1] !== 'function') return noop;
      return streams.pop();
    }

    function pipeline() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }

      var callback = popCallback(streams);
      if (Array.isArray(streams[0])) streams = streams[0];

      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS('streams');
      }

      var error;
      var destroys = streams.map(function (stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function (err) {
          if (!error) error = err;
          if (err) destroys.forEach(call);
          if (reading) return;
          destroys.forEach(call);
          callback(error);
        });
      });
      return streams.reduce(pipe);
    }

    module.exports = pipeline;
  }, {
    "../../../errors": 7,
    "./end-of-stream": 16
  }],
  19: [function (require, module, exports) {
    'use strict';

    var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;

    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }

    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name = isDuplex ? duplexKey : 'highWaterMark';
          throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }

        return Math.floor(hwm);
      } // Default value


      return state.objectMode ? 16 : 16 * 1024;
    }

    module.exports = {
      getHighWaterMark: getHighWaterMark
    };
  }, {
    "../../../errors": 7
  }],
  20: [function (require, module, exports) {
    module.exports = require('events').EventEmitter;
  }, {
    "events": 175
  }],
  21: [function (require, module, exports) {
    exports = module.exports = require('./lib/_stream_readable.js');
    exports.Stream = exports;
    exports.Readable = exports;
    exports.Writable = require('./lib/_stream_writable.js');
    exports.Duplex = require('./lib/_stream_duplex.js');
    exports.Transform = require('./lib/_stream_transform.js');
    exports.PassThrough = require('./lib/_stream_passthrough.js');
    exports.finished = require('./lib/internal/streams/end-of-stream.js');
    exports.pipeline = require('./lib/internal/streams/pipeline.js');
  }, {
    "./lib/_stream_duplex.js": 8,
    "./lib/_stream_passthrough.js": 9,
    "./lib/_stream_readable.js": 10,
    "./lib/_stream_transform.js": 11,
    "./lib/_stream_writable.js": 12,
    "./lib/internal/streams/end-of-stream.js": 16,
    "./lib/internal/streams/pipeline.js": 18
  }],
  22: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        var _require3 = require('events'),
            EventEmitter = _require3.EventEmitter;

        var _require4 = require('stream'),
            Readable = _require4.Readable;

        var crypto = require('crypto');

        var pump = require('pump');

        var MMST = require('mostly-minimal-spanning-tree');

        var debounce = require('p-debounce');

        var log = require('debug')('discovery-swarm-webrtc');

        var SignalClient = require('./lib/signal-client');

        var Peer = require('./lib/peer');

        var Scheduler = require('./lib/scheduler');

        var _require5 = require('./lib/utils'),
            toHex = _require5.toHex,
            SwarmError = _require5.SwarmError,
            callbackPromise = _require5.callbackPromise,
            resolveCallback = _require5.resolveCallback;

        var ERR_MAX_PEERS_REACHED = 'ERR_MAX_PEERS_REACHED';
        var ERR_INVALID_CHANNEL = 'ERR_INVALID_CHANNEL';
        var ERR_CONNECTION_DUPLICATED = 'ERR_CONNECTION_DUPLICATED';
        var ERR_REMOTE_MAX_PEERS_REACHED = 'ERR_REMOTE_MAX_PEERS_REACHED';
        var ERR_REMOTE_INVALID_CHANNEL = 'ERR_REMOTE_INVALID_CHANNEL';
        var ERR_REMOTE_CONNECTION_DUPLICATED = 'ERR_REMOTE_CONNECTION_DUPLICATED';

        var DiscoverySwarmWebrtc = /*#__PURE__*/function (_EventEmitter) {
          _inherits(DiscoverySwarmWebrtc, _EventEmitter);

          var _super2 = _createSuper(DiscoverySwarmWebrtc);

          function DiscoverySwarmWebrtc() {
            var _this3;

            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            _classCallCheck2(this, DiscoverySwarmWebrtc);

            _this3 = _super2.call(this);
            log('opts', opts);
            console.assert(Array.isArray(opts.bootstrap) && opts.bootstrap.length > 0, 'The `bootstrap` options is required.');
            console.assert(!opts.id || Buffer.isBuffer(opts.id), 'The `id` option needs to be a Buffer.');
            _this3._id = opts.id || crypto.randomBytes(32);
            _this3._stream = opts.stream;
            _this3._simplePeer = opts.simplePeer;
            _this3._peers = new Set();
            _this3._channels = new Map();
            _this3._mmsts = new Map();
            _this3._candidates = new Map();
            _this3._scheduler = new Scheduler();
            _this3._destroyed = false;
            _this3._maxPeers = opts.maxPeers;
            _this3.signal = new SignalClient({
              bootstrap: opts.bootstrap,
              connectionTimeout: opts.connectionTimeout || 10 * 1000,
              requestTimeout: opts.requestTimeout || 5 * 1000
            });
            _this3._updateCandidates = debounce(_this3._updateCandidates, 500);

            _this3._initialize(opts);

            return _this3;
          }

          _createClass2(DiscoverySwarmWebrtc, [{
            key: "listen",
            value: function listen() {// Empty method to respect the API of discovery-swarm
            }
          }, {
            key: "getPeers",
            value: function getPeers(channel) {
              console.assert(!channel || Buffer.isBuffer(channel));
              var peers = Array.from(this._peers.values());

              if (channel) {
                return peers.filter(function (peer) {
                  return peer.channel.equals(channel);
                });
              }

              return peers;
            }
          }, {
            key: "getCandidates",
            value: function getCandidates(channel) {
              console.assert(!channel || Buffer.isBuffer(channel));
              return this._candidates.get(toHex(channel)) || {
                list: [],
                lastUpdate: 0
              };
            }
          }, {
            key: "join",
            value: function join(channel) {
              var _this4 = this;

              console.assert(Buffer.isBuffer(channel)); // Account for buffers being passed in

              var channelStr = toHex(channel);

              if (this._channels.has(channelStr)) {
                return;
              }

              this._channels.set(channelStr, channel);

              var mmst = new MMST({
                id: this._id,
                lookup: function lookup() {
                  return _this4._lookup(channel);
                },
                connect: function connect(to) {
                  return _this4._createConnection(to, channel);
                },
                maxPeers: this._maxPeers,
                lookupTimeout: 5 * 1000
              });

              this._mmsts.set(channelStr, mmst);

              this._scheduler.addTask(channelStr, /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(task) {
                  var connected, _this4$getCandidates, list;

                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          if (!_this4._isClosed(channel)) {
                            _context.next = 2;
                            break;
                          }

                          return _context.abrupt("return", task.destroy());

                        case 2:
                          _context.next = 4;
                          return _this4._run(channel);

                        case 4:
                          connected = _this4.getPeers(channel);
                          _this4$getCandidates = _this4.getCandidates(channel), list = _this4$getCandidates.list;

                          if (!(list.length === 0 || connected.length === list.length)) {
                            _context.next = 8;
                            break;
                          }

                          return _context.abrupt("return", 30 * 1000);

                        case 8:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }));

                return function (_x) {
                  return _ref.apply(this, arguments);
                };
              }(), 10 * 1000);

              if (this.signal.connected) {
                this.signal.discover(this._id, channel);
              }
            }
          }, {
            key: "leave",
            value: function leave(channel) {
              var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : callbackPromise();
              resolveCallback(this._leave(channel), cb);
              return cb.promise;
            }
          }, {
            key: "close",
            value: function close() {
              var cb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : callbackPromise();
              resolveCallback(this._close(), cb);
              return cb.promise;
            }
          }, {
            key: "info",
            value: function info() {
              var _this$signal;

              return (_this$signal = this.signal).info.apply(_this$signal, arguments);
            }
          }, {
            key: "_leave",
            value: function () {
              var _leave2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(channel) {
                var _this5 = this;

                var channelStr;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        console.assert(Buffer.isBuffer(channel)); // Account for buffers being passed in

                        channelStr = toHex(channel);

                        this._scheduler.deleteTask(channelStr);

                        this._mmsts.get(channelStr).destroy();

                        this._mmsts.delete(channelStr);

                        this._channels.delete(channelStr);

                        this._candidates.delete(channelStr); // We need to notify to the signal that we our leaving


                        _context3.prev = 7;
                        _context3.next = 10;
                        return this.signal.leave(this._id, channel);

                      case 10:
                        _context3.next = 14;
                        break;

                      case 12:
                        _context3.prev = 12;
                        _context3.t0 = _context3["catch"](7);

                      case 14:
                        _context3.next = 16;
                        return Promise.all(this.getPeers(channel).map( /*#__PURE__*/function () {
                          var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(peer) {
                            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                              while (1) {
                                switch (_context2.prev = _context2.next) {
                                  case 0:
                                    return _context2.abrupt("return", _this5._disconnectPeer(peer));

                                  case 1:
                                  case "end":
                                    return _context2.stop();
                                }
                              }
                            }, _callee2);
                          }));

                          return function (_x3) {
                            return _ref2.apply(this, arguments);
                          };
                        }()));

                      case 16:
                        this.emit('leave', channel);

                      case 17:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3, this, [[7, 12]]);
              }));

              function _leave(_x2) {
                return _leave2.apply(this, arguments);
              }

              return _leave;
            }()
          }, {
            key: "_close",
            value: function () {
              var _close2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                var _this6 = this;

                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                  while (1) {
                    switch (_context5.prev = _context5.next) {
                      case 0:
                        if (!this._destroyed) {
                          _context5.next = 2;
                          break;
                        }

                        return _context5.abrupt("return");

                      case 2:
                        this._destroyed = true;
                        _context5.next = 5;
                        return this.signal.disconnect();

                      case 5:
                        this._scheduler.clearTasks();

                        this._mmsts.forEach(function (mmst) {
                          return mmst.destroy();
                        });

                        this._mmsts.clear();

                        this._channels.clear();

                        this._candidates.clear();

                        _context5.next = 12;
                        return Promise.all(this.getPeers().map( /*#__PURE__*/function () {
                          var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(peer) {
                            return regeneratorRuntime.wrap(function _callee4$(_context4) {
                              while (1) {
                                switch (_context4.prev = _context4.next) {
                                  case 0:
                                    return _context4.abrupt("return", _this6._disconnectPeer(peer));

                                  case 1:
                                  case "end":
                                    return _context4.stop();
                                }
                              }
                            }, _callee4);
                          }));

                          return function (_x4) {
                            return _ref3.apply(this, arguments);
                          };
                        }()));

                      case 12:
                        this.emit('close');

                      case 13:
                      case "end":
                        return _context5.stop();
                    }
                  }
                }, _callee5, this);
              }));

              function _close() {
                return _close2.apply(this, arguments);
              }

              return _close;
            }()
          }, {
            key: "_initialize",
            value: function _initialize() {
              var _this7 = this;

              var signal = this.signal; // It would log the errors and prevent of throw it.

              this.on('error', function () {
                for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                  args[_key2] = arguments[_key2];
                }

                return log.apply(void 0, ['error'].concat(args));
              });
              signal.on('error', function (err) {
                return _this7.emit('error', err);
              });
              signal.on('discover', /*#__PURE__*/function () {
                var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(_ref4) {
                  var peers, channel;
                  return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                      switch (_context6.prev = _context6.next) {
                        case 0:
                          peers = _ref4.peers, channel = _ref4.channel;
                          log('discover', {
                            channel: channel
                          });

                          if (!_this7._isClosed(channel)) {
                            _context6.next = 4;
                            break;
                          }

                          return _context6.abrupt("return");

                        case 4:
                          _context6.next = 6;
                          return _this7._updateCandidates(channel, peers);

                        case 6:
                          _context6.next = 8;
                          return _this7._run(channel);

                        case 8:
                          _this7._scheduler.startTask(toHex(channel));

                        case 9:
                        case "end":
                          return _context6.stop();
                      }
                    }
                  }, _callee6);
                }));

                return function (_x5) {
                  return _ref5.apply(this, arguments);
                };
              }());
              signal.on('request', /*#__PURE__*/function () {
                var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(request) {
                  var id, channel;
                  return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          id = request.initiator, channel = request.channel;
                          _context7.prev = 1;
                          _context7.next = 4;
                          return _this7._createConnection(id, channel, request);

                        case 4:
                          _context7.next = 8;
                          break;

                        case 6:
                          _context7.prev = 6;
                          _context7.t0 = _context7["catch"](1);

                        case 8:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7, null, [[1, 6]]);
                }));

                return function (_x6) {
                  return _ref6.apply(this, arguments);
                };
              }());
              signal.on('info', function (data) {
                return _this7.emit('info', data);
              });
              signal.on('connect', function () {
                _this7._channels.forEach(function (channel) {
                  signal.discover(_this7._id, channel);
                });
              });
            }
          }, {
            key: "_disconnectPeer",
            value: function () {
              var _disconnectPeer2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(peer) {
                return regeneratorRuntime.wrap(function _callee8$(_context8) {
                  while (1) {
                    switch (_context8.prev = _context8.next) {
                      case 0:
                        _context8.next = 2;
                        return peer.disconnect();

                      case 2:
                        this._peers.delete(peer);

                      case 3:
                      case "end":
                        return _context8.stop();
                    }
                  }
                }, _callee8, this);
              }));

              function _disconnectPeer(_x7) {
                return _disconnectPeer2.apply(this, arguments);
              }

              return _disconnectPeer;
            }()
          }, {
            key: "_isClosed",
            value: function _isClosed(channel) {
              return !this._channels.has(toHex(channel));
            }
          }, {
            key: "_createConnection",
            value: function () {
              var _createConnection2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(id, channel, request) {
                var _this8 = this;

                var peer, mmst, duplicate, socket, candidates;
                return regeneratorRuntime.wrap(function _callee9$(_context9) {
                  while (1) {
                    switch (_context9.prev = _context9.next) {
                      case 0:
                        peer = new Peer(id, channel, {
                          connectionId: request && request.connectionId,
                          initiator: !request
                        });

                        this._peers.add(peer);

                        log("createConnection from ".concat(request ? 'request' : 'connect'), {
                          request: request,
                          info: peer.printInfo()
                        });
                        _context9.prev = 3;
                        mmst = this._getMMST(peer.channel);

                        if (!this._isClosed(peer.channel)) {
                          _context9.next = 8;
                          break;
                        }

                        request && request.reject({
                          code: ERR_REMOTE_INVALID_CHANNEL
                        });
                        throw new SwarmError(ERR_INVALID_CHANNEL);

                      case 8:
                        if (!(request && !mmst.shouldHandleIncoming())) {
                          _context9.next = 11;
                          break;
                        }

                        request.reject({
                          code: ERR_REMOTE_MAX_PEERS_REACHED
                        });
                        throw new SwarmError(ERR_MAX_PEERS_REACHED);

                      case 11:
                        duplicate = this._checkForDuplicate(peer);

                        if (!duplicate) {
                          _context9.next = 15;
                          break;
                        }

                        request && request.reject({
                          code: ERR_REMOTE_CONNECTION_DUPLICATED
                        });
                        throw new SwarmError(ERR_CONNECTION_DUPLICATED);

                      case 15:
                        socket = null;

                        if (!request) {
                          _context9.next = 23;
                          break;
                        }

                        mmst.addConnection(peer.id, peer);
                        _context9.next = 20;
                        return request.accept({}, this._simplePeer);

                      case 20:
                        socket = _context9.sent;
                        _context9.next = 26;
                        break;

                      case 23:
                        _context9.next = 25;
                        return this.signal.connect(peer, this._simplePeer);

                      case 25:
                        socket = _context9.sent;

                      case 26:
                        _context9.next = 28;
                        return peer.setSocket(socket);

                      case 28:
                        if (!this._isClosed(peer.channel)) {
                          _context9.next = 30;
                          break;
                        }

                        throw new SwarmError(ERR_INVALID_CHANNEL);

                      case 30:
                        this._bindSocketEvents(peer);

                        return _context9.abrupt("return", peer);

                      case 34:
                        _context9.prev = 34;
                        _context9.t0 = _context9["catch"](3);

                        if (_context9.t0.code === ERR_REMOTE_INVALID_CHANNEL) {
                          // Remove a candidate.
                          candidates = this.getCandidates(peer.channel);
                          candidates.list = candidates.filter(function (candidate) {
                            return !candidate.equals(peer.id);
                          });
                        }

                        this.emit('connect-failed', _context9.t0, peer.getInfo());
                        _context9.next = 40;
                        return this._disconnectPeer(peer).catch(function (err) {
                          return _this8.emit('error', err, peer.getInfo());
                        });

                      case 40:
                        this.emit('error', _context9.t0, peer.getInfo());
                        throw _context9.t0;

                      case 42:
                      case "end":
                        return _context9.stop();
                    }
                  }
                }, _callee9, this, [[3, 34]]);
              }));

              function _createConnection(_x8, _x9, _x10) {
                return _createConnection2.apply(this, arguments);
              }

              return _createConnection;
            }()
          }, {
            key: "_bindSocketEvents",
            value: function _bindSocketEvents(peer) {
              var _this9 = this;

              var socket = peer.socket;
              var info = peer.getInfo();
              socket.on('error', function (err) {
                log('error', err);

                _this9.emit('connection-error', err, info);
              });
              socket.on('connect', function () {
                log('connect', {
                  peer: peer
                });

                if (_this9._isClosed(peer.channel)) {
                  peer.disconnect();
                  return;
                }

                if (socket.destroyed) {
                  return;
                }

                if (!_this9._stream) {
                  _this9._handleConnection(socket, info);

                  return;
                }

                var conn = _this9._stream(info);

                _this9.emit('handshaking', conn, info);

                conn.on('handshake', _this9._handshake.bind(_this9, conn, info));
                pump(socket, conn, socket);
              });
              socket.on('close', function () {
                log('close', {
                  peer: peer
                });

                _this9._peers.delete(peer);

                _this9.emit('connection-closed', socket, info);
              });
            }
          }, {
            key: "_handshake",
            value: function _handshake(conn, info) {
              this._handleConnection(conn, info);
            }
          }, {
            key: "_handleConnection",
            value: function _handleConnection(conn, info) {
              this.emit('connection', conn, info);
            }
          }, {
            key: "_updateCandidates",
            value: function () {
              var _updateCandidates2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(channel, peers) {
                var _this10 = this;

                var _this$getCandidates, lastUpdate, newUpdate, list;

                return regeneratorRuntime.wrap(function _callee10$(_context10) {
                  while (1) {
                    switch (_context10.prev = _context10.next) {
                      case 0:
                        if (this.signal.connected) {
                          _context10.next = 2;
                          break;
                        }

                        return _context10.abrupt("return");

                      case 2:
                        // We try to minimize how many times we get candidates from the signal.
                        _this$getCandidates = this.getCandidates(channel), lastUpdate = _this$getCandidates.lastUpdate;
                        newUpdate = Date.now();

                        if (!(newUpdate - lastUpdate < 5 * 1000)) {
                          _context10.next = 6;
                          break;
                        }

                        return _context10.abrupt("return");

                      case 6:
                        list = [];

                        if (!peers) {
                          _context10.next = 11;
                          break;
                        }

                        list = peers;
                        _context10.next = 14;
                        break;

                      case 11:
                        _context10.next = 13;
                        return this.signal.candidates(this.id, channel);

                      case 13:
                        list = _context10.sent;

                      case 14:
                        list = list.filter(function (id) {
                          return !id.equals(_this10._id);
                        });

                        this._candidates.set(toHex(channel), {
                          lastUpdate: Date.now(),
                          list: list
                        });

                        this.emit('candidates-updated', channel, list);

                      case 17:
                      case "end":
                        return _context10.stop();
                    }
                  }
                }, _callee10, this);
              }));

              function _updateCandidates(_x11, _x12) {
                return _updateCandidates2.apply(this, arguments);
              }

              return _updateCandidates;
            }()
          }, {
            key: "_run",
            value: function () {
              var _run2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(channel) {
                return regeneratorRuntime.wrap(function _callee11$(_context11) {
                  while (1) {
                    switch (_context11.prev = _context11.next) {
                      case 0:
                        if (this.signal.connected) {
                          _context11.next = 2;
                          break;
                        }

                        return _context11.abrupt("return");

                      case 2:
                        if (!(this.getPeers(channel).filter(function (p) {
                          return p.initiator;
                        }).length > 0)) {
                          _context11.next = 4;
                          break;
                        }

                        return _context11.abrupt("return");

                      case 4:
                        _context11.prev = 4;

                        if (this._isClosed(channel)) {
                          _context11.next = 8;
                          break;
                        }

                        _context11.next = 8;
                        return this._getMMST(channel).run();

                      case 8:
                        _context11.next = 13;
                        break;

                      case 10:
                        _context11.prev = 10;
                        _context11.t0 = _context11["catch"](4);
                        // nothing to do
                        log('run error', _context11.t0.message);

                      case 13:
                      case "end":
                        return _context11.stop();
                    }
                  }
                }, _callee11, this, [[4, 10]]);
              }));

              function _run(_x13) {
                return _run2.apply(this, arguments);
              }

              return _run;
            }()
          }, {
            key: "_getMMST",
            value: function _getMMST(channel) {
              return this._mmsts.get(toHex(channel));
            }
          }, {
            key: "_lookup",
            value: function _lookup(channel) {
              var _this11 = this;

              var stream = new Readable({
                read: function read() {},
                objectMode: true
              });

              this._updateCandidates(channel).then(function () {
                stream.push(_this11.getCandidates(channel).list);
                stream.push(null);
              }).catch(function () {
                stream.push(_this11.getCandidates(channel).list);
                stream.push(null);
              });

              return stream;
            }
          }, {
            key: "_checkForDuplicate",
            value: function _checkForDuplicate(peer) {
              var oldPeer = this.getPeers(peer.channel).find(function (p) {
                return p.id.equals(peer.id) && !p.connectionId.equals(peer.connectionId);
              });

              if (!oldPeer) {
                return;
              }

              var connections = [peer, oldPeer];
              /**
               * The first case is to have duplicate connections from the same origin (remote or local).
               * In this case we do a sort by connectionId and destroy the first one.
               */

              if (peer.initiator && oldPeer.initiator || !peer.initiator && !oldPeer.initiator) {
                return connections.sort(function (a, b) {
                  return Buffer.compare(a.connectionId, b.connectionId);
                })[0];
              }
              /**
               * The second case is to have duplicate connections where each connection is started from different origins.
               * In this case we do a sort by peer id and destroy the first one.
               */


              var toDestroy = [this._id, peer.id].sort(Buffer.compare)[0];
              return connections.find(function (p) {
                return p.id.equals(toDestroy);
              });
            }
          }, {
            key: "id",
            get: function get() {
              return this._id;
            }
          }, {
            key: "connecting",
            get: function get() {
              return this.getPeers().filter(function (peer) {
                return !peer.connected;
              }).length;
            }
          }, {
            key: "connected",
            get: function get() {
              return this.getPeers().filter(function (peer) {
                return peer.connected;
              }).length;
            }
          }]);

          return DiscoverySwarmWebrtc;
        }(EventEmitter);

        module.exports = function () {
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }

          return _construct(DiscoverySwarmWebrtc, args);
        };
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "./lib/peer": 23,
    "./lib/scheduler": 24,
    "./lib/signal-client": 25,
    "./lib/utils": 26,
    "buffer": 102,
    "crypto": 120,
    "debug": 125,
    "events": 175,
    "mostly-minimal-spanning-tree": 247,
    "p-debounce": 254,
    "pump": 289,
    "stream": 362
  }],
  23: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        var _require6 = require('events'),
            EventEmitter = _require6.EventEmitter;

        var crypto = require('crypto');

        var _require7 = require('./utils'),
            toHex = _require7.toHex,
            SwarmError = _require7.SwarmError;

        var Peer = /*#__PURE__*/function (_EventEmitter2) {
          _inherits(Peer, _EventEmitter2);

          var _super3 = _createSuper(Peer);

          function Peer(id, channel) {
            var _this12;

            var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            _classCallCheck2(this, Peer);

            _this12 = _super3.call(this);
            console.assert(Buffer.isBuffer(id));
            console.assert(Buffer.isBuffer(channel));
            var socket = opts.socket,
                _opts$connectionId = opts.connectionId,
                connectionId = _opts$connectionId === void 0 ? crypto.randomBytes(32) : _opts$connectionId,
                _opts$initiator = opts.initiator,
                initiator = _opts$initiator === void 0 ? true : _opts$initiator;
            _this12.id = id;
            _this12.channel = channel;
            _this12.socket = socket;
            _this12.connectionId = connectionId;
            _this12.initiator = initiator;
            _this12._destroyed = false;
            return _this12;
          }

          _createClass2(Peer, [{
            key: "setSocket",
            value: function () {
              var _setSocket = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(socket) {
                var _this13 = this;

                return regeneratorRuntime.wrap(function _callee12$(_context12) {
                  while (1) {
                    switch (_context12.prev = _context12.next) {
                      case 0:
                        this.socket = socket;

                        if (!this.socket.destroyed) {
                          _context12.next = 5;
                          break;
                        }

                        _context12.next = 4;
                        return this.disconnect();

                      case 4:
                        throw new Error(new SwarmError('ERR_CONNECTION_CLOSED'));

                      case 5:
                        if (!this._destroyed) {
                          _context12.next = 8;
                          break;
                        }

                        if (!this.socket.destroyed) this.socket.destroy();
                        throw new Error(new SwarmError('ERR_CONNECTION_CLOSED'));

                      case 8:
                        this.socket.once('close', function () {
                          _this13._handleClose();
                        });

                      case 9:
                      case "end":
                        return _context12.stop();
                    }
                  }
                }, _callee12, this);
              }));

              function setSocket(_x14) {
                return _setSocket.apply(this, arguments);
              }

              return setSocket;
            }()
          }, {
            key: "disconnect",
            value: function () {
              var _disconnect = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(err) {
                var _this14 = this;

                return regeneratorRuntime.wrap(function _callee13$(_context13) {
                  while (1) {
                    switch (_context13.prev = _context13.next) {
                      case 0:
                        if (!this._destroyed) {
                          _context13.next = 2;
                          break;
                        }

                        return _context13.abrupt("return");

                      case 2:
                        this._destroyed = true;

                        if (this.socket) {
                          _context13.next = 6;
                          break;
                        }

                        this._handleClose();

                        return _context13.abrupt("return");

                      case 6:
                        return _context13.abrupt("return", new Promise(function (resolve) {
                          if (_this14.socket.destroyed) {
                            return resolve();
                          }

                          _this14.socket.once('close', function () {
                            resolve();
                          });

                          _this14.socket.destroy(err);
                        }));

                      case 7:
                      case "end":
                        return _context13.stop();
                    }
                  }
                }, _callee13, this);
              }));

              function disconnect(_x15) {
                return _disconnect.apply(this, arguments);
              }

              return disconnect;
            }()
          }, {
            key: "close",
            value: function close() {
              this.disconnect().then(function () {}).catch(function () {});
            }
          }, {
            key: "getInfo",
            value: function getInfo() {
              return {
                id: this.id,
                channel: this.channel,
                initiator: this.initiator
              };
            }
          }, {
            key: "printInfo",
            value: function printInfo() {
              return {
                id: toHex(this.id),
                channel: toHex(this.channel),
                initiator: this.initiator
              };
            }
          }, {
            key: "_handleClose",
            value: function _handleClose() {
              this.emit('close');
              this.emit('end');
            }
          }, {
            key: "connected",
            get: function get() {
              return !!(this.socket && this.socket.connected);
            }
          }]);

          return Peer;
        }(EventEmitter);

        module.exports = Peer;
      }).call(this);
    }).call(this, {
      "isBuffer": require("../../../is-buffer/index.js")
    });
  }, {
    "../../../is-buffer/index.js": 218,
    "./utils": 26,
    "crypto": 120,
    "events": 175
  }],
  24: [function (require, module, exports) {
    var _require8 = require('events'),
        EventEmitter = _require8.EventEmitter;

    var delay = require('delay');

    var pForever = require('p-forever');

    var Task = /*#__PURE__*/function (_EventEmitter3) {
      _inherits(Task, _EventEmitter3);

      var _super4 = _createSuper(Task);

      function Task(id, job, ms) {
        var _this15;

        _classCallCheck2(this, Task);

        _this15 = _super4.call(this);
        _this15._id = id;

        _this15._job = function (task) {
          return job(task);
        };

        _this15._ms = ms;
        _this15._started = false;
        _this15._destroyed = false;
        _this15._delayedPromise = null;
        return _this15;
      }

      _createClass2(Task, [{
        key: "start",
        value: function start() {
          var _this16 = this;

          if (this._started || this._destroyed) return;
          var ms = this._ms;
          pForever( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
            var newMS;
            return regeneratorRuntime.wrap(function _callee14$(_context14) {
              while (1) {
                switch (_context14.prev = _context14.next) {
                  case 0:
                    _context14.prev = 0;

                    if (!_this16._destroyed) {
                      _context14.next = 3;
                      break;
                    }

                    return _context14.abrupt("return", pForever.end);

                  case 3:
                    _this16._delayedPromise = delay(ms);
                    _context14.next = 6;
                    return _this16._delayedPromise;

                  case 6:
                    if (!_this16._destroyed) {
                      _context14.next = 8;
                      break;
                    }

                    return _context14.abrupt("return", pForever.end);

                  case 8:
                    _context14.next = 10;
                    return _this16._job(_this16);

                  case 10:
                    newMS = _context14.sent;

                    if (Number.isInteger(newMS)) {
                      ms = newMS;
                    } else {
                      ms = _this16._ms;
                    }

                    _context14.next = 17;
                    break;

                  case 14:
                    _context14.prev = 14;
                    _context14.t0 = _context14["catch"](0);
                    console.warn("Error in Task ".concat(_this16._id), _context14.t0.message);

                  case 17:
                  case "end":
                    return _context14.stop();
                }
              }
            }, _callee14, null, [[0, 14]]);
          }))).finally(function () {
            _this16.emit('destroy');
          });
          this._started = true;
        }
      }, {
        key: "destroy",
        value: function destroy() {
          if (this._destroyed) return;
          this._destroyed = true;
          if (this._delayedPromise) this._delayedPromise.clear();
        }
      }]);

      return Task;
    }(EventEmitter);

    var Scheduler = /*#__PURE__*/function () {
      function Scheduler() {
        _classCallCheck2(this, Scheduler);

        this._tasks = new Map();
      }

      _createClass2(Scheduler, [{
        key: "addTask",
        value: function addTask(id, job, ms) {
          var _this17 = this;

          var task = new Task(id, job, ms);

          this._tasks.set(id, task);

          task.on('destroy', function () {
            if (_this17._tasks.has(id)) {
              _this17._tasks.delete(id);
            }
          });
          return task;
        }
      }, {
        key: "startTask",
        value: function startTask(id) {
          var task = this._tasks.get(id);

          if (task) {
            task.start();
          }
        }
      }, {
        key: "deleteTask",
        value: function deleteTask(id) {
          var task = this._tasks.get(id);

          if (task) {
            task.destroy();
          }
        }
      }, {
        key: "clearTasks",
        value: function clearTasks() {
          this._tasks.forEach(function (task) {
            task.destroy();
          });
        }
      }]);

      return Scheduler;
    }();

    module.exports = Scheduler;
  }, {
    "delay": 127,
    "events": 175,
    "p-forever": 256
  }],
  25: [function (require, module, exports) {
    var crypto = require('crypto');

    var _require9 = require('events'),
        EventEmitter = _require9.EventEmitter;

    var SimpleSignalClient = require('simple-signal-client');

    var io = require('socket.io-client');

    var parseUrl = require('socket.io-client/lib/url');

    var _require10 = require('./utils'),
        SwarmError = _require10.SwarmError,
        toHex = _require10.toHex,
        toBuffer = _require10.toBuffer;

    var ERR_TRANSACTION_TIMEOUT = 'ERR_TRANSACTION_TIMEOUT';

    var Request = /*#__PURE__*/function () {
      function Request(simpleRequest) {
        _classCallCheck2(this, Request);

        this._simpleRequest = simpleRequest;
      }

      _createClass2(Request, [{
        key: "accept",
        value: function () {
          var _accept = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(data, simplePeer) {
            var _yield$this$_simpleRe, socket;

            return regeneratorRuntime.wrap(function _callee15$(_context15) {
              while (1) {
                switch (_context15.prev = _context15.next) {
                  case 0:
                    _context15.prev = 0;
                    _context15.next = 3;
                    return this._simpleRequest.accept(data, simplePeer);

                  case 3:
                    _yield$this$_simpleRe = _context15.sent;
                    socket = _yield$this$_simpleRe.peer;
                    return _context15.abrupt("return", socket);

                  case 8:
                    _context15.prev = 8;
                    _context15.t0 = _context15["catch"](0);
                    throw SignalClient.parseMetadataError(_context15.t0);

                  case 11:
                  case "end":
                    return _context15.stop();
                }
              }
            }, _callee15, this, [[0, 8]]);
          }));

          function accept(_x16, _x17) {
            return _accept.apply(this, arguments);
          }

          return accept;
        }()
      }, {
        key: "reject",
        value: function () {
          var _reject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(data) {
            return regeneratorRuntime.wrap(function _callee16$(_context16) {
              while (1) {
                switch (_context16.prev = _context16.next) {
                  case 0:
                    return _context16.abrupt("return", this._simpleRequest.reject(data));

                  case 1:
                  case "end":
                    return _context16.stop();
                }
              }
            }, _callee16, this);
          }));

          function reject(_x18) {
            return _reject.apply(this, arguments);
          }

          return reject;
        }()
      }, {
        key: "initiator",
        get: function get() {
          return toBuffer(this._simpleRequest.initiator);
        }
      }, {
        key: "channel",
        get: function get() {
          return toBuffer(this._simpleRequest.metadata.channel);
        }
      }, {
        key: "connectionId",
        get: function get() {
          return toBuffer(this._simpleRequest.metadata.connectionId);
        }
      }]);

      return Request;
    }();

    var SignalClient = /*#__PURE__*/function (_EventEmitter4) {
      _inherits(SignalClient, _EventEmitter4);

      var _super5 = _createSuper(SignalClient);

      _createClass2(SignalClient, null, [{
        key: "parseMetadataError",
        value: function parseMetadataError(err) {
          if (err instanceof Error) {
            return err;
          }

          if (!err.metadata || !err.metadata.code) {
            return new SwarmError(JSON.stringify(err));
          }

          var _err$metadata = err.metadata,
              message = _err$metadata.message,
              code = _err$metadata.code;
          return new SwarmError(message || code, code);
        }
      }]);

      function SignalClient() {
        var _this18;

        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck2(this, SignalClient);

        _this18 = _super5.call(this);

        var bootstrap = options.bootstrap,
            requestTimeout = options.requestTimeout,
            opts = _objectWithoutProperties(options, ["bootstrap", "requestTimeout"]);

        _this18._urls = bootstrap.map(function (url) {
          return parseUrl(url).source;
        });
        _this18._simpleSignal = new SimpleSignalClient(io(_this18._urls[0]), opts);
        _this18._transactions = new Map();
        _this18._requestTimeout = requestTimeout;
        _this18._destroyed = false;

        _this18._initialize();

        return _this18;
      }

      _createClass2(SignalClient, [{
        key: "candidates",
        value: function () {
          var _candidates = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(id, channel) {
            return regeneratorRuntime.wrap(function _callee17$(_context17) {
              while (1) {
                switch (_context17.prev = _context17.next) {
                  case 0:
                    return _context17.abrupt("return", this._emitTransaction('simple-signal[candidates]', {
                      id: toHex(id),
                      channel: toHex(channel)
                    }, function (_ref8) {
                      var _ref8$peers = _ref8.peers,
                          peers = _ref8$peers === void 0 ? [] : _ref8$peers;
                      return peers.map(function (id) {
                        return toBuffer(id);
                      });
                    }));

                  case 1:
                  case "end":
                    return _context17.stop();
                }
              }
            }, _callee17, this);
          }));

          function candidates(_x19, _x20) {
            return _candidates.apply(this, arguments);
          }

          return candidates;
        }()
      }, {
        key: "leave",
        value: function () {
          var _leave3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(id, channel) {
            return regeneratorRuntime.wrap(function _callee18$(_context18) {
              while (1) {
                switch (_context18.prev = _context18.next) {
                  case 0:
                    return _context18.abrupt("return", this._emitTransaction('simple-signal[leave]', {
                      id: toHex(id),
                      channel: toHex(channel)
                    }));

                  case 1:
                  case "end":
                    return _context18.stop();
                }
              }
            }, _callee18, this);
          }));

          function leave(_x21, _x22) {
            return _leave3.apply(this, arguments);
          }

          return leave;
        }()
      }, {
        key: "info",
        value: function info() {
          var discoveryData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          return this.socket.emit('simple-signal[info]', {
            discoveryData: discoveryData
          });
        }
      }, {
        key: "discover",
        value: function discover(id, channel) {
          return this._simpleSignal.discover({
            id: toHex(id),
            channel: toHex(channel)
          });
        }
      }, {
        key: "connect",
        value: function () {
          var _connect = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(peer, simplePeer) {
            var _yield$this$_simpleSi, socket;

            return regeneratorRuntime.wrap(function _callee19$(_context19) {
              while (1) {
                switch (_context19.prev = _context19.next) {
                  case 0:
                    _context19.prev = 0;
                    _context19.next = 3;
                    return this._simpleSignal.connect(toHex(peer.id), {
                      channel: toHex(peer.channel),
                      connectionId: toHex(peer.connectionId)
                    }, simplePeer);

                  case 3:
                    _yield$this$_simpleSi = _context19.sent;
                    socket = _yield$this$_simpleSi.peer;
                    return _context19.abrupt("return", socket);

                  case 8:
                    _context19.prev = 8;
                    _context19.t0 = _context19["catch"](0);
                    throw SignalClient.parseMetadataError(_context19.t0);

                  case 11:
                  case "end":
                    return _context19.stop();
                }
              }
            }, _callee19, this, [[0, 8]]);
          }));

          function connect(_x23, _x24) {
            return _connect.apply(this, arguments);
          }

          return connect;
        }()
      }, {
        key: "disconnect",
        value: function () {
          var _disconnect2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {
            var _this19 = this;

            return regeneratorRuntime.wrap(function _callee20$(_context20) {
              while (1) {
                switch (_context20.prev = _context20.next) {
                  case 0:
                    if (!this._destroyed) {
                      _context20.next = 2;
                      break;
                    }

                    return _context20.abrupt("return");

                  case 2:
                    this._destroyed = true;
                    return _context20.abrupt("return", new Promise(function (resolve) {
                      if (_this19.socket.disconnected) {
                        _this19._simpleSignal.destroy();

                        resolve();
                      }

                      _this19.socket.once('disconnect', resolve);

                      _this19._simpleSignal.destroy();
                    }));

                  case 4:
                  case "end":
                    return _context20.stop();
                }
              }
            }, _callee20, this);
          }));

          function disconnect() {
            return _disconnect2.apply(this, arguments);
          }

          return disconnect;
        }()
      }, {
        key: "_initialize",
        value: function _initialize() {
          var _this20 = this;

          this.socket.on('connect', function () {
            return _this20.emit('connect');
          });
          this.socket.on('connect_error', function (err) {
            return _this20.emit('error', new SwarmError(err.message, 'socket-connect-error', err.stack));
          });
          this.socket.on('connect_timeout', function (timeout) {
            return _this20.emit('error', new SwarmError("connect-timeout ".concat(timeout), 'socket-connect-timeout'));
          });
          this.socket.on('error', function (err) {
            return _this20.emit('error', new SwarmError(err.message, 'socket-error', err.stack));
          });
          this.socket.on('reconnect_failed', function () {
            return _this20.emit('error', new SwarmError('socket-reconnect-failed'));
          });
          this.socket.on('reconnect_error', function (err) {
            _this20.emit('error', new SwarmError(err.message, 'socket-reconnect-error', err.stack));

            var lastUrl = _this20.socket.io.uri;

            var lastIdx = _this20._urls.indexOf(lastUrl);

            var nextIdx = lastIdx === _this20._urls.length - 1 ? 0 : lastIdx + 1;
            _this20.socket.io.uri = _this20._urls[nextIdx];
          });

          this._simpleSignal.on('discover', function (_ref9) {
            var channel = _ref9.channel,
                _ref9$peers = _ref9.peers,
                peers = _ref9$peers === void 0 ? [] : _ref9$peers;
            return _this20.emit('discover', {
              channel: toBuffer(channel),
              peers: peers.map(function (id) {
                return toBuffer(id);
              })
            });
          });

          this._simpleSignal.on('request', function (request) {
            return _this20.emit('request', new Request(request));
          });

          this.socket.on('simple-signal[info]', function () {
            var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            return _this20.emit('info', data);
          });
        }
      }, {
        key: "_emitTransaction",
        value: function () {
          var _emitTransaction2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(event, discoveryData) {
            var _this21 = this;

            var map,
                transactionId,
                promise,
                timer,
                _args21 = arguments;
            return regeneratorRuntime.wrap(function _callee21$(_context21) {
              while (1) {
                switch (_context21.prev = _context21.next) {
                  case 0:
                    map = _args21.length > 2 && _args21[2] !== undefined ? _args21[2] : function (data) {
                      return data;
                    };
                    transactionId = crypto.randomBytes(12).toString('hex');
                    promise = new Promise(function (resolve, reject) {
                      _this21._transactions.set(transactionId, {
                        resolve: resolve,
                        reject: reject
                      });

                      _this21.socket.emit(event, {
                        transactionId: transactionId,
                        discoveryData: discoveryData
                      }, function (data) {
                        if (_this21._transactions.has(transactionId)) {
                          resolve(data.discoveryData);
                        }
                      });
                    });
                    timer = setTimeout(function () {
                      if (_this21._transactions.has(transactionId)) {
                        var _this21$_transactions = _this21._transactions.get(transactionId),
                            reject = _this21$_transactions.reject;

                        reject(new SwarmError("Timeout on event transaction: ".concat(event), ERR_TRANSACTION_TIMEOUT));
                      }
                    }, this._requestTimeout);
                    return _context21.abrupt("return", promise.then(function (data) {
                      clearTimeout(timer);

                      _this21._transactions.delete(transactionId);

                      return map(data);
                    }).catch(function (err) {
                      clearTimeout(timer);

                      _this21._transactions.delete(transactionId);

                      throw err;
                    }));

                  case 5:
                  case "end":
                    return _context21.stop();
                }
              }
            }, _callee21, this);
          }));

          function _emitTransaction(_x25, _x26) {
            return _emitTransaction2.apply(this, arguments);
          }

          return _emitTransaction;
        }()
      }, {
        key: "socket",
        get: function get() {
          return this._simpleSignal.socket;
        }
      }, {
        key: "connected",
        get: function get() {
          return this.socket.connected;
        }
      }]);

      return SignalClient;
    }(EventEmitter);

    module.exports = SignalClient;
  }, {
    "./utils": 26,
    "crypto": 120,
    "events": 175,
    "simple-signal-client": 346,
    "socket.io-client": 347,
    "socket.io-client/lib/url": 351
  }],
  26: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        var toHex = function toHex(buff) {
          if (typeof buff === 'string') {
            return buff;
          }

          if (Buffer.isBuffer(buff)) {
            return buff.toString('hex');
          }

          throw new Error('Cannot convert the buffer to hex: ', buff);
        };

        var toBuffer = function toBuffer(str) {
          if (Buffer.isBuffer(str)) {
            return str;
          }

          if (typeof str === 'string') {
            return Buffer.from(str, 'hex');
          }

          throw new Error('Cannot convert the string to buffer: ', str);
        };

        var SwarmError = /*#__PURE__*/function (_Error) {
          _inherits(SwarmError, _Error);

          var _super6 = _createSuper(SwarmError);

          function SwarmError(message, code, stack) {
            var _this22;

            _classCallCheck2(this, SwarmError);

            _this22 = _super6.call(this, message);
            _this22.code = code || message;

            if (typeof Error.captureStackTrace === 'function') {
              Error.captureStackTrace(_assertThisInitialized(_this22), _this22.constructor);
            } else {
              _this22.stack = stack || new Error(_this22.message).stack;
            }

            return _this22;
          }

          return SwarmError;
        }( /*#__PURE__*/_wrapNativeSuper(Error));

        var callbackPromise = function callbackPromise() {
          var callback;
          var promise = new Promise(function (resolve, reject) {
            callback = function callback(err, value) {
              if (err) reject(err);else resolve(value);
            };
          });
          callback.promise = promise;
          return callback;
        };

        var resolveCallback = function resolveCallback(promise, cb) {
          if (!promise.then) {
            promise = Promise.resolve();
          }

          return promise.then(function (result) {
            return cb(null, result);
          }).catch(cb);
        };

        module.exports = {
          toHex: toHex,
          toBuffer: toBuffer,
          SwarmError: SwarmError,
          callbackPromise: callbackPromise,
          resolveCallback: resolveCallback
        };
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "buffer": 102
  }],
  27: [function (require, module, exports) {
    module.exports = after;

    function after(count, callback, err_cb) {
      var bail = false;
      err_cb = err_cb || noop;
      proxy.count = count;
      return count === 0 ? callback() : proxy;

      function proxy(err, result) {
        if (proxy.count <= 0) {
          throw new Error('after called too many times');
        }

        --proxy.count; // after first error, rest are passed to err_cb

        if (err) {
          bail = true;
          callback(err); // future error callbacks will go to error handler

          callback = err_cb;
        } else if (proxy.count === 0 && !bail) {
          callback(null, result);
        }
      }
    }

    function noop() {}
  }, {}],
  28: [function (require, module, exports) {
    'use strict';

    var wrapAnsi16 = function wrapAnsi16(fn, offset) {
      return function () {
        var code = fn.apply(void 0, arguments);
        return "\x1B[".concat(code + offset, "m");
      };
    };

    var wrapAnsi256 = function wrapAnsi256(fn, offset) {
      return function () {
        var code = fn.apply(void 0, arguments);
        return "\x1B[".concat(38 + offset, ";5;").concat(code, "m");
      };
    };

    var wrapAnsi16m = function wrapAnsi16m(fn, offset) {
      return function () {
        var rgb = fn.apply(void 0, arguments);
        return "\x1B[".concat(38 + offset, ";2;").concat(rgb[0], ";").concat(rgb[1], ";").concat(rgb[2], "m");
      };
    };

    var ansi2ansi = function ansi2ansi(n) {
      return n;
    };

    var rgb2rgb = function rgb2rgb(r, g, b) {
      return [r, g, b];
    };

    var setLazyProperty = function setLazyProperty(object, property, _get) {
      Object.defineProperty(object, property, {
        get: function get() {
          var value = _get();

          Object.defineProperty(object, property, {
            value: value,
            enumerable: true,
            configurable: true
          });
          return value;
        },
        enumerable: true,
        configurable: true
      });
    };
    /** @type {typeof import('color-convert')} */


    var colorConvert;

    var makeDynamicStyles = function makeDynamicStyles(wrap, targetSpace, identity, isBackground) {
      if (colorConvert === undefined) {
        colorConvert = require('color-convert');
      }

      var offset = isBackground ? 10 : 0;
      var styles = {};

      for (var _i2 = 0, _Object$entries = Object.entries(colorConvert); _i2 < _Object$entries.length; _i2++) {
        var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),
            sourceSpace = _Object$entries$_i[0],
            suite = _Object$entries$_i[1];

        var name = sourceSpace === 'ansi16' ? 'ansi' : sourceSpace;

        if (sourceSpace === targetSpace) {
          styles[name] = wrap(identity, offset);
        } else if (_typeof2(suite) === 'object') {
          styles[name] = wrap(suite[targetSpace], offset);
        }
      }

      return styles;
    };

    function assembleStyles() {
      var codes = new Map();
      var styles = {
        modifier: {
          reset: [0, 0],
          // 21 isn't widely supported and 22 does the same thing
          bold: [1, 22],
          dim: [2, 22],
          italic: [3, 23],
          underline: [4, 24],
          inverse: [7, 27],
          hidden: [8, 28],
          strikethrough: [9, 29]
        },
        color: {
          black: [30, 39],
          red: [31, 39],
          green: [32, 39],
          yellow: [33, 39],
          blue: [34, 39],
          magenta: [35, 39],
          cyan: [36, 39],
          white: [37, 39],
          // Bright color
          blackBright: [90, 39],
          redBright: [91, 39],
          greenBright: [92, 39],
          yellowBright: [93, 39],
          blueBright: [94, 39],
          magentaBright: [95, 39],
          cyanBright: [96, 39],
          whiteBright: [97, 39]
        },
        bgColor: {
          bgBlack: [40, 49],
          bgRed: [41, 49],
          bgGreen: [42, 49],
          bgYellow: [43, 49],
          bgBlue: [44, 49],
          bgMagenta: [45, 49],
          bgCyan: [46, 49],
          bgWhite: [47, 49],
          // Bright color
          bgBlackBright: [100, 49],
          bgRedBright: [101, 49],
          bgGreenBright: [102, 49],
          bgYellowBright: [103, 49],
          bgBlueBright: [104, 49],
          bgMagentaBright: [105, 49],
          bgCyanBright: [106, 49],
          bgWhiteBright: [107, 49]
        }
      }; // Alias bright black as gray (and grey)

      styles.color.gray = styles.color.blackBright;
      styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
      styles.color.grey = styles.color.blackBright;
      styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;

      for (var _i3 = 0, _Object$entries2 = Object.entries(styles); _i3 < _Object$entries2.length; _i3++) {
        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i3], 2),
            groupName = _Object$entries2$_i[0],
            group = _Object$entries2$_i[1];

        for (var _i4 = 0, _Object$entries3 = Object.entries(group); _i4 < _Object$entries3.length; _i4++) {
          var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i4], 2),
              styleName = _Object$entries3$_i[0],
              style = _Object$entries3$_i[1];

          styles[styleName] = {
            open: "\x1B[".concat(style[0], "m"),
            close: "\x1B[".concat(style[1], "m")
          };
          group[styleName] = styles[styleName];
          codes.set(style[0], style[1]);
        }

        Object.defineProperty(styles, groupName, {
          value: group,
          enumerable: false
        });
      }

      Object.defineProperty(styles, 'codes', {
        value: codes,
        enumerable: false
      });
      styles.color.close = "\x1B[39m";
      styles.bgColor.close = "\x1B[49m";
      setLazyProperty(styles.color, 'ansi', function () {
        return makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, false);
      });
      setLazyProperty(styles.color, 'ansi256', function () {
        return makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, false);
      });
      setLazyProperty(styles.color, 'ansi16m', function () {
        return makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, false);
      });
      setLazyProperty(styles.bgColor, 'ansi', function () {
        return makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, true);
      });
      setLazyProperty(styles.bgColor, 'ansi256', function () {
        return makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, true);
      });
      setLazyProperty(styles.bgColor, 'ansi16m', function () {
        return makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, true);
      });
      return styles;
    } // Make the export immutable


    Object.defineProperty(module, 'exports', {
      enumerable: true,
      get: assembleStyles
    });
  }, {
    "color-convert": 108
  }],
  29: [function (require, module, exports) {
    /**
     * An abstraction for slicing an arraybuffer even when
     * ArrayBuffer.prototype.slice is not supported
     *
     * @api public
     */
    module.exports = function (arraybuffer, start, end) {
      var bytes = arraybuffer.byteLength;
      start = start || 0;
      end = end || bytes;

      if (arraybuffer.slice) {
        return arraybuffer.slice(start, end);
      }

      if (start < 0) {
        start += bytes;
      }

      if (end < 0) {
        end += bytes;
      }

      if (end > bytes) {
        end = bytes;
      }

      if (start >= bytes || start >= end || bytes === 0) {
        return new ArrayBuffer(0);
      }

      var abv = new Uint8Array(arraybuffer);
      var result = new Uint8Array(end - start);

      for (var i = start, ii = 0; i < end; i++, ii++) {
        result[ii] = abv[i];
      }

      return result.buffer;
    };
  }, {}],
  30: [function (require, module, exports) {
    'use strict';

    var asn1 = exports;
    asn1.bignum = require('bn.js');
    asn1.define = require('./asn1/api').define;
    asn1.base = require('./asn1/base');
    asn1.constants = require('./asn1/constants');
    asn1.decoders = require('./asn1/decoders');
    asn1.encoders = require('./asn1/encoders');
  }, {
    "./asn1/api": 31,
    "./asn1/base": 33,
    "./asn1/constants": 37,
    "./asn1/decoders": 39,
    "./asn1/encoders": 42,
    "bn.js": 54
  }],
  31: [function (require, module, exports) {
    'use strict';

    var encoders = require('./encoders');

    var decoders = require('./decoders');

    var inherits = require('inherits');

    var api = exports;

    api.define = function define(name, body) {
      return new Entity(name, body);
    };

    function Entity(name, body) {
      this.name = name;
      this.body = body;
      this.decoders = {};
      this.encoders = {};
    }

    Entity.prototype._createNamed = function createNamed(Base) {
      var name = this.name;

      function Generated(entity) {
        this._initNamed(entity, name);
      }

      inherits(Generated, Base);

      Generated.prototype._initNamed = function _initNamed(entity, name) {
        Base.call(this, entity, name);
      };

      return new Generated(this);
    };

    Entity.prototype._getDecoder = function _getDecoder(enc) {
      enc = enc || 'der'; // Lazily create decoder

      if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed(decoders[enc]);
      return this.decoders[enc];
    };

    Entity.prototype.decode = function decode(data, enc, options) {
      return this._getDecoder(enc).decode(data, options);
    };

    Entity.prototype._getEncoder = function _getEncoder(enc) {
      enc = enc || 'der'; // Lazily create encoder

      if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed(encoders[enc]);
      return this.encoders[enc];
    };

    Entity.prototype.encode = function encode(data, enc,
    /* internal */
    reporter) {
      return this._getEncoder(enc).encode(data, reporter);
    };
  }, {
    "./decoders": 39,
    "./encoders": 42,
    "inherits": 217
  }],
  32: [function (require, module, exports) {
    'use strict';

    var inherits = require('inherits');

    var Reporter = require('../base/reporter').Reporter;

    var Buffer = require('safer-buffer').Buffer;

    function DecoderBuffer(base, options) {
      Reporter.call(this, options);

      if (!Buffer.isBuffer(base)) {
        this.error('Input not Buffer');
        return;
      }

      this.base = base;
      this.offset = 0;
      this.length = base.length;
    }

    inherits(DecoderBuffer, Reporter);
    exports.DecoderBuffer = DecoderBuffer;

    DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
      if (data instanceof DecoderBuffer) {
        return true;
      } // Or accept compatible API


      var isCompatible = _typeof2(data) === 'object' && Buffer.isBuffer(data.base) && data.constructor.name === 'DecoderBuffer' && typeof data.offset === 'number' && typeof data.length === 'number' && typeof data.save === 'function' && typeof data.restore === 'function' && typeof data.isEmpty === 'function' && typeof data.readUInt8 === 'function' && typeof data.skip === 'function' && typeof data.raw === 'function';
      return isCompatible;
    };

    DecoderBuffer.prototype.save = function save() {
      return {
        offset: this.offset,
        reporter: Reporter.prototype.save.call(this)
      };
    };

    DecoderBuffer.prototype.restore = function restore(save) {
      // Return skipped data
      var res = new DecoderBuffer(this.base);
      res.offset = save.offset;
      res.length = this.offset;
      this.offset = save.offset;
      Reporter.prototype.restore.call(this, save.reporter);
      return res;
    };

    DecoderBuffer.prototype.isEmpty = function isEmpty() {
      return this.offset === this.length;
    };

    DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
      if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);else return this.error(fail || 'DecoderBuffer overrun');
    };

    DecoderBuffer.prototype.skip = function skip(bytes, fail) {
      if (!(this.offset + bytes <= this.length)) return this.error(fail || 'DecoderBuffer overrun');
      var res = new DecoderBuffer(this.base); // Share reporter state

      res._reporterState = this._reporterState;
      res.offset = this.offset;
      res.length = this.offset + bytes;
      this.offset += bytes;
      return res;
    };

    DecoderBuffer.prototype.raw = function raw(save) {
      return this.base.slice(save ? save.offset : this.offset, this.length);
    };

    function EncoderBuffer(value, reporter) {
      if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function (item) {
          if (!EncoderBuffer.isEncoderBuffer(item)) item = new EncoderBuffer(item, reporter);
          this.length += item.length;
          return item;
        }, this);
      } else if (typeof value === 'number') {
        if (!(0 <= value && value <= 0xff)) return reporter.error('non-byte EncoderBuffer value');
        this.value = value;
        this.length = 1;
      } else if (typeof value === 'string') {
        this.value = value;
        this.length = Buffer.byteLength(value);
      } else if (Buffer.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
      } else {
        return reporter.error('Unsupported type: ' + _typeof2(value));
      }
    }

    exports.EncoderBuffer = EncoderBuffer;

    EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
      if (data instanceof EncoderBuffer) {
        return true;
      } // Or accept compatible API


      var isCompatible = _typeof2(data) === 'object' && data.constructor.name === 'EncoderBuffer' && typeof data.length === 'number' && typeof data.join === 'function';
      return isCompatible;
    };

    EncoderBuffer.prototype.join = function join(out, offset) {
      if (!out) out = Buffer.alloc(this.length);
      if (!offset) offset = 0;
      if (this.length === 0) return out;

      if (Array.isArray(this.value)) {
        this.value.forEach(function (item) {
          item.join(out, offset);
          offset += item.length;
        });
      } else {
        if (typeof this.value === 'number') out[offset] = this.value;else if (typeof this.value === 'string') out.write(this.value, offset);else if (Buffer.isBuffer(this.value)) this.value.copy(out, offset);
        offset += this.length;
      }

      return out;
    };
  }, {
    "../base/reporter": 35,
    "inherits": 217,
    "safer-buffer": 315
  }],
  33: [function (require, module, exports) {
    'use strict';

    var base = exports;
    base.Reporter = require('./reporter').Reporter;
    base.DecoderBuffer = require('./buffer').DecoderBuffer;
    base.EncoderBuffer = require('./buffer').EncoderBuffer;
    base.Node = require('./node');
  }, {
    "./buffer": 32,
    "./node": 34,
    "./reporter": 35
  }],
  34: [function (require, module, exports) {
    'use strict';

    var Reporter = require('../base/reporter').Reporter;

    var EncoderBuffer = require('../base/buffer').EncoderBuffer;

    var DecoderBuffer = require('../base/buffer').DecoderBuffer;

    var assert = require('minimalistic-assert'); // Supported tags


    var tags = ['seq', 'seqof', 'set', 'setof', 'objid', 'bool', 'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc', 'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str', 'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr']; // Public methods list

    var methods = ['key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice', 'any', 'contains'].concat(tags); // Overrided methods list

    var overrided = ['_peekTag', '_decodeTag', '_use', '_decodeStr', '_decodeObjid', '_decodeTime', '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList', '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime', '_encodeNull', '_encodeInt', '_encodeBool'];

    function Node(enc, parent, name) {
      var state = {};
      this._baseState = state;
      state.name = name;
      state.enc = enc;
      state.parent = parent || null;
      state.children = null; // State

      state.tag = null;
      state.args = null;
      state.reverseArgs = null;
      state.choice = null;
      state.optional = false;
      state.any = false;
      state.obj = false;
      state.use = null;
      state.useDecoder = null;
      state.key = null;
      state['default'] = null;
      state.explicit = null;
      state.implicit = null;
      state.contains = null; // Should create new instance on each method

      if (!state.parent) {
        state.children = [];

        this._wrap();
      }
    }

    module.exports = Node;
    var stateProps = ['enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice', 'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit', 'implicit', 'contains'];

    Node.prototype.clone = function clone() {
      var state = this._baseState;
      var cstate = {};
      stateProps.forEach(function (prop) {
        cstate[prop] = state[prop];
      });
      var res = new this.constructor(cstate.parent);
      res._baseState = cstate;
      return res;
    };

    Node.prototype._wrap = function wrap() {
      var state = this._baseState;
      methods.forEach(function (method) {
        this[method] = function _wrappedMethod() {
          var clone = new this.constructor(this);
          state.children.push(clone);
          return clone[method].apply(clone, arguments);
        };
      }, this);
    };

    Node.prototype._init = function init(body) {
      var state = this._baseState;
      assert(state.parent === null);
      body.call(this); // Filter children

      state.children = state.children.filter(function (child) {
        return child._baseState.parent === this;
      }, this);
      assert.equal(state.children.length, 1, 'Root node can have only one child');
    };

    Node.prototype._useArgs = function useArgs(args) {
      var state = this._baseState; // Filter children and args

      var children = args.filter(function (arg) {
        return arg instanceof this.constructor;
      }, this);
      args = args.filter(function (arg) {
        return !(arg instanceof this.constructor);
      }, this);

      if (children.length !== 0) {
        assert(state.children === null);
        state.children = children; // Replace parent to maintain backward link

        children.forEach(function (child) {
          child._baseState.parent = this;
        }, this);
      }

      if (args.length !== 0) {
        assert(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function (arg) {
          if (_typeof2(arg) !== 'object' || arg.constructor !== Object) return arg;
          var res = {};
          Object.keys(arg).forEach(function (key) {
            if (key == (key | 0)) key |= 0;
            var value = arg[key];
            res[value] = key;
          });
          return res;
        });
      }
    }; //
    // Overrided methods
    //


    overrided.forEach(function (method) {
      Node.prototype[method] = function _overrided() {
        var state = this._baseState;
        throw new Error(method + ' not implemented for encoding: ' + state.enc);
      };
    }); //
    // Public methods
    //

    tags.forEach(function (tag) {
      Node.prototype[tag] = function _tagMethod() {
        var state = this._baseState;
        var args = Array.prototype.slice.call(arguments);
        assert(state.tag === null);
        state.tag = tag;

        this._useArgs(args);

        return this;
      };
    });

    Node.prototype.use = function use(item) {
      assert(item);
      var state = this._baseState;
      assert(state.use === null);
      state.use = item;
      return this;
    };

    Node.prototype.optional = function optional() {
      var state = this._baseState;
      state.optional = true;
      return this;
    };

    Node.prototype.def = function def(val) {
      var state = this._baseState;
      assert(state['default'] === null);
      state['default'] = val;
      state.optional = true;
      return this;
    };

    Node.prototype.explicit = function explicit(num) {
      var state = this._baseState;
      assert(state.explicit === null && state.implicit === null);
      state.explicit = num;
      return this;
    };

    Node.prototype.implicit = function implicit(num) {
      var state = this._baseState;
      assert(state.explicit === null && state.implicit === null);
      state.implicit = num;
      return this;
    };

    Node.prototype.obj = function obj() {
      var state = this._baseState;
      var args = Array.prototype.slice.call(arguments);
      state.obj = true;
      if (args.length !== 0) this._useArgs(args);
      return this;
    };

    Node.prototype.key = function key(newKey) {
      var state = this._baseState;
      assert(state.key === null);
      state.key = newKey;
      return this;
    };

    Node.prototype.any = function any() {
      var state = this._baseState;
      state.any = true;
      return this;
    };

    Node.prototype.choice = function choice(obj) {
      var state = this._baseState;
      assert(state.choice === null);
      state.choice = obj;

      this._useArgs(Object.keys(obj).map(function (key) {
        return obj[key];
      }));

      return this;
    };

    Node.prototype.contains = function contains(item) {
      var state = this._baseState;
      assert(state.use === null);
      state.contains = item;
      return this;
    }; //
    // Decoding
    //


    Node.prototype._decode = function decode(input, options) {
      var state = this._baseState; // Decode root node

      if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));
      var result = state['default'];
      var present = true;
      var prevKey = null;
      if (state.key !== null) prevKey = input.enterKey(state.key); // Check if tag is there

      if (state.optional) {
        var tag = null;
        if (state.explicit !== null) tag = state.explicit;else if (state.implicit !== null) tag = state.implicit;else if (state.tag !== null) tag = state.tag;

        if (tag === null && !state.any) {
          // Trial and Error
          var save = input.save();

          try {
            if (state.choice === null) this._decodeGeneric(state.tag, input, options);else this._decodeChoice(input, options);
            present = true;
          } catch (e) {
            present = false;
          }

          input.restore(save);
        } else {
          present = this._peekTag(input, tag, state.any);
          if (input.isError(present)) return present;
        }
      } // Push object on stack


      var prevObj;
      if (state.obj && present) prevObj = input.enterObject();

      if (present) {
        // Unwrap explicit values
        if (state.explicit !== null) {
          var explicit = this._decodeTag(input, state.explicit);

          if (input.isError(explicit)) return explicit;
          input = explicit;
        }

        var start = input.offset; // Unwrap implicit and normal values

        if (state.use === null && state.choice === null) {
          var _save;

          if (state.any) _save = input.save();

          var body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);

          if (input.isError(body)) return body;
          if (state.any) result = input.raw(_save);else input = body;
        }

        if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, 'tagged');
        if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, 'content'); // Select proper method for tag

        if (state.any) {// no-op
        } else if (state.choice === null) {
          result = this._decodeGeneric(state.tag, input, options);
        } else {
          result = this._decodeChoice(input, options);
        }

        if (input.isError(result)) return result; // Decode children

        if (!state.any && state.choice === null && state.children !== null) {
          state.children.forEach(function decodeChildren(child) {
            // NOTE: We are ignoring errors here, to let parser continue with other
            // parts of encoded data
            child._decode(input, options);
          });
        } // Decode contained/encoded by schema, only in bit or octet strings


        if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
          var data = new DecoderBuffer(result);
          result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
        }
      } // Pop object


      if (state.obj && present) result = input.leaveObject(prevObj); // Set key

      if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);else if (prevKey !== null) input.exitKey(prevKey);
      return result;
    };

    Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
      var state = this._baseState;
      if (tag === 'seq' || tag === 'set') return null;
      if (tag === 'seqof' || tag === 'setof') return this._decodeList(input, tag, state.args[0], options);else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);else if (tag === 'objid' && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);else if (tag === 'objid') return this._decodeObjid(input, null, null, options);else if (tag === 'gentime' || tag === 'utctime') return this._decodeTime(input, tag, options);else if (tag === 'null_') return this._decodeNull(input, options);else if (tag === 'bool') return this._decodeBool(input, options);else if (tag === 'objDesc') return this._decodeStr(input, tag, options);else if (tag === 'int' || tag === 'enum') return this._decodeInt(input, state.args && state.args[0], options);

      if (state.use !== null) {
        return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
      } else {
        return input.error('unknown tag: ' + tag);
      }
    };

    Node.prototype._getUse = function _getUse(entity, obj) {
      var state = this._baseState; // Create altered use decoder if implicit is set

      state.useDecoder = this._use(entity, obj);
      assert(state.useDecoder._baseState.parent === null);
      state.useDecoder = state.useDecoder._baseState.children[0];

      if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
      }

      return state.useDecoder;
    };

    Node.prototype._decodeChoice = function decodeChoice(input, options) {
      var state = this._baseState;
      var result = null;
      var match = false;
      Object.keys(state.choice).some(function (key) {
        var save = input.save();
        var node = state.choice[key];

        try {
          var value = node._decode(input, options);

          if (input.isError(value)) return false;
          result = {
            type: key,
            value: value
          };
          match = true;
        } catch (e) {
          input.restore(save);
          return false;
        }

        return true;
      }, this);
      if (!match) return input.error('Choice not matched');
      return result;
    }; //
    // Encoding
    //


    Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
      return new EncoderBuffer(data, this.reporter);
    };

    Node.prototype._encode = function encode(data, reporter, parent) {
      var state = this._baseState;
      if (state['default'] !== null && state['default'] === data) return;

      var result = this._encodeValue(data, reporter, parent);

      if (result === undefined) return;
      if (this._skipDefault(result, reporter, parent)) return;
      return result;
    };

    Node.prototype._encodeValue = function encode(data, reporter, parent) {
      var state = this._baseState; // Decode root node

      if (state.parent === null) return state.children[0]._encode(data, reporter || new Reporter());
      var result = null; // Set reporter to share it with a child class

      this.reporter = reporter; // Check if data is there

      if (state.optional && data === undefined) {
        if (state['default'] !== null) data = state['default'];else return;
      } // Encode children first


      var content = null;
      var primitive = false;

      if (state.any) {
        // Anything that was given is translated to buffer
        result = this._createEncoderBuffer(data);
      } else if (state.choice) {
        result = this._encodeChoice(data, reporter);
      } else if (state.contains) {
        content = this._getUse(state.contains, parent)._encode(data, reporter);
        primitive = true;
      } else if (state.children) {
        content = state.children.map(function (child) {
          if (child._baseState.tag === 'null_') return child._encode(null, reporter, data);
          if (child._baseState.key === null) return reporter.error('Child should have a key');
          var prevKey = reporter.enterKey(child._baseState.key);
          if (_typeof2(data) !== 'object') return reporter.error('Child expected, but input is not object');

          var res = child._encode(data[child._baseState.key], reporter, data);

          reporter.leaveKey(prevKey);
          return res;
        }, this).filter(function (child) {
          return child;
        });
        content = this._createEncoderBuffer(content);
      } else {
        if (state.tag === 'seqof' || state.tag === 'setof') {
          // TODO(indutny): this should be thrown on DSL level
          if (!(state.args && state.args.length === 1)) return reporter.error('Too many args for : ' + state.tag);
          if (!Array.isArray(data)) return reporter.error('seqof/setof, but data is not Array');
          var child = this.clone();
          child._baseState.implicit = null;
          content = this._createEncoderBuffer(data.map(function (item) {
            var state = this._baseState;
            return this._getUse(state.args[0], data)._encode(item, reporter);
          }, child));
        } else if (state.use !== null) {
          result = this._getUse(state.use, parent)._encode(data, reporter);
        } else {
          content = this._encodePrimitive(state.tag, data);
          primitive = true;
        }
      } // Encode data itself


      if (!state.any && state.choice === null) {
        var tag = state.implicit !== null ? state.implicit : state.tag;
        var cls = state.implicit === null ? 'universal' : 'context';

        if (tag === null) {
          if (state.use === null) reporter.error('Tag could be omitted only for .use()');
        } else {
          if (state.use === null) result = this._encodeComposite(tag, primitive, cls, content);
        }
      } // Wrap in explicit


      if (state.explicit !== null) result = this._encodeComposite(state.explicit, false, 'context', result);
      return result;
    };

    Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
      var state = this._baseState;
      var node = state.choice[data.type];

      if (!node) {
        assert(false, data.type + ' not found in ' + JSON.stringify(Object.keys(state.choice)));
      }

      return node._encode(data.value, reporter);
    };

    Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
      var state = this._baseState;
      if (/str$/.test(tag)) return this._encodeStr(data, tag);else if (tag === 'objid' && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);else if (tag === 'objid') return this._encodeObjid(data, null, null);else if (tag === 'gentime' || tag === 'utctime') return this._encodeTime(data, tag);else if (tag === 'null_') return this._encodeNull();else if (tag === 'int' || tag === 'enum') return this._encodeInt(data, state.args && state.reverseArgs[0]);else if (tag === 'bool') return this._encodeBool(data);else if (tag === 'objDesc') return this._encodeStr(data, tag);else throw new Error('Unsupported tag: ' + tag);
    };

    Node.prototype._isNumstr = function isNumstr(str) {
      return /^[0-9 ]*$/.test(str);
    };

    Node.prototype._isPrintstr = function isPrintstr(str) {
      return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
    };
  }, {
    "../base/buffer": 32,
    "../base/reporter": 35,
    "minimalistic-assert": 245
  }],
  35: [function (require, module, exports) {
    'use strict';

    var inherits = require('inherits');

    function Reporter(options) {
      this._reporterState = {
        obj: null,
        path: [],
        options: options || {},
        errors: []
      };
    }

    exports.Reporter = Reporter;

    Reporter.prototype.isError = function isError(obj) {
      return obj instanceof ReporterError;
    };

    Reporter.prototype.save = function save() {
      var state = this._reporterState;
      return {
        obj: state.obj,
        pathLen: state.path.length
      };
    };

    Reporter.prototype.restore = function restore(data) {
      var state = this._reporterState;
      state.obj = data.obj;
      state.path = state.path.slice(0, data.pathLen);
    };

    Reporter.prototype.enterKey = function enterKey(key) {
      return this._reporterState.path.push(key);
    };

    Reporter.prototype.exitKey = function exitKey(index) {
      var state = this._reporterState;
      state.path = state.path.slice(0, index - 1);
    };

    Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
      var state = this._reporterState;
      this.exitKey(index);
      if (state.obj !== null) state.obj[key] = value;
    };

    Reporter.prototype.path = function path() {
      return this._reporterState.path.join('/');
    };

    Reporter.prototype.enterObject = function enterObject() {
      var state = this._reporterState;
      var prev = state.obj;
      state.obj = {};
      return prev;
    };

    Reporter.prototype.leaveObject = function leaveObject(prev) {
      var state = this._reporterState;
      var now = state.obj;
      state.obj = prev;
      return now;
    };

    Reporter.prototype.error = function error(msg) {
      var err;
      var state = this._reporterState;
      var inherited = msg instanceof ReporterError;

      if (inherited) {
        err = msg;
      } else {
        err = new ReporterError(state.path.map(function (elem) {
          return '[' + JSON.stringify(elem) + ']';
        }).join(''), msg.message || msg, msg.stack);
      }

      if (!state.options.partial) throw err;
      if (!inherited) state.errors.push(err);
      return err;
    };

    Reporter.prototype.wrapResult = function wrapResult(result) {
      var state = this._reporterState;
      if (!state.options.partial) return result;
      return {
        result: this.isError(result) ? null : result,
        errors: state.errors
      };
    };

    function ReporterError(path, msg) {
      this.path = path;
      this.rethrow(msg);
    }

    inherits(ReporterError, Error);

    ReporterError.prototype.rethrow = function rethrow(msg) {
      this.message = msg + ' at: ' + (this.path || '(shallow)');
      if (Error.captureStackTrace) Error.captureStackTrace(this, ReporterError);

      if (!this.stack) {
        try {
          // IE only adds stack when thrown
          throw new Error(this.message);
        } catch (e) {
          this.stack = e.stack;
        }
      }

      return this;
    };
  }, {
    "inherits": 217
  }],
  36: [function (require, module, exports) {
    'use strict'; // Helper

    function reverse(map) {
      var res = {};
      Object.keys(map).forEach(function (key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        var value = map[key];
        res[value] = key;
      });
      return res;
    }

    exports.tagClass = {
      0: 'universal',
      1: 'application',
      2: 'context',
      3: 'private'
    };
    exports.tagClassByName = reverse(exports.tagClass);
    exports.tag = {
      0x00: 'end',
      0x01: 'bool',
      0x02: 'int',
      0x03: 'bitstr',
      0x04: 'octstr',
      0x05: 'null_',
      0x06: 'objid',
      0x07: 'objDesc',
      0x08: 'external',
      0x09: 'real',
      0x0a: 'enum',
      0x0b: 'embed',
      0x0c: 'utf8str',
      0x0d: 'relativeOid',
      0x10: 'seq',
      0x11: 'set',
      0x12: 'numstr',
      0x13: 'printstr',
      0x14: 't61str',
      0x15: 'videostr',
      0x16: 'ia5str',
      0x17: 'utctime',
      0x18: 'gentime',
      0x19: 'graphstr',
      0x1a: 'iso646str',
      0x1b: 'genstr',
      0x1c: 'unistr',
      0x1d: 'charstr',
      0x1e: 'bmpstr'
    };
    exports.tagByName = reverse(exports.tag);
  }, {}],
  37: [function (require, module, exports) {
    'use strict';

    var constants = exports; // Helper

    constants._reverse = function reverse(map) {
      var res = {};
      Object.keys(map).forEach(function (key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        var value = map[key];
        res[value] = key;
      });
      return res;
    };

    constants.der = require('./der');
  }, {
    "./der": 36
  }],
  38: [function (require, module, exports) {
    'use strict';

    var inherits = require('inherits');

    var bignum = require('bn.js');

    var DecoderBuffer = require('../base/buffer').DecoderBuffer;

    var Node = require('../base/node'); // Import DER constants


    var der = require('../constants/der');

    function DERDecoder(entity) {
      this.enc = 'der';
      this.name = entity.name;
      this.entity = entity; // Construct base tree

      this.tree = new DERNode();

      this.tree._init(entity.body);
    }

    module.exports = DERDecoder;

    DERDecoder.prototype.decode = function decode(data, options) {
      if (!DecoderBuffer.isDecoderBuffer(data)) {
        data = new DecoderBuffer(data, options);
      }

      return this.tree._decode(data, options);
    }; // Tree methods


    function DERNode(parent) {
      Node.call(this, 'der', parent);
    }

    inherits(DERNode, Node);

    DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
      if (buffer.isEmpty()) return false;
      var state = buffer.save();
      var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
      if (buffer.isError(decodedTag)) return decodedTag;
      buffer.restore(state);
      return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + 'of' === tag || any;
    };

    DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
      var decodedTag = derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
      if (buffer.isError(decodedTag)) return decodedTag;
      var len = derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"'); // Failure

      if (buffer.isError(len)) return len;

      if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + 'of' !== tag) {
        return buffer.error('Failed to match tag: "' + tag + '"');
      }

      if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: "' + tag + '"'); // Indefinite length... find END tag

      var state = buffer.save();

      var res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');

      if (buffer.isError(res)) return res;
      len = buffer.offset - state.offset;
      buffer.restore(state);
      return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    };

    DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
      for (;;) {
        var tag = derDecodeTag(buffer, fail);
        if (buffer.isError(tag)) return tag;
        var len = derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len)) return len;
        var res = void 0;
        if (tag.primitive || len !== null) res = buffer.skip(len);else res = this._skipUntilEnd(buffer, fail); // Failure

        if (buffer.isError(res)) return res;
        if (tag.tagStr === 'end') break;
      }
    };

    DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
      var result = [];

      while (!buffer.isEmpty()) {
        var possibleEnd = this._peekTag(buffer, 'end');

        if (buffer.isError(possibleEnd)) return possibleEnd;
        var res = decoder.decode(buffer, 'der', options);
        if (buffer.isError(res) && possibleEnd) break;
        result.push(res);
      }

      return result;
    };

    DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
      if (tag === 'bitstr') {
        var unused = buffer.readUInt8();
        if (buffer.isError(unused)) return unused;
        return {
          unused: unused,
          data: buffer.raw()
        };
      } else if (tag === 'bmpstr') {
        var raw = buffer.raw();
        if (raw.length % 2 === 1) return buffer.error('Decoding of string type: bmpstr length mismatch');
        var str = '';

        for (var i = 0; i < raw.length / 2; i++) {
          str += String.fromCharCode(raw.readUInt16BE(i * 2));
        }

        return str;
      } else if (tag === 'numstr') {
        var numstr = buffer.raw().toString('ascii');

        if (!this._isNumstr(numstr)) {
          return buffer.error('Decoding of string type: ' + 'numstr unsupported characters');
        }

        return numstr;
      } else if (tag === 'octstr') {
        return buffer.raw();
      } else if (tag === 'objDesc') {
        return buffer.raw();
      } else if (tag === 'printstr') {
        var printstr = buffer.raw().toString('ascii');

        if (!this._isPrintstr(printstr)) {
          return buffer.error('Decoding of string type: ' + 'printstr unsupported characters');
        }

        return printstr;
      } else if (/str$/.test(tag)) {
        return buffer.raw().toString();
      } else {
        return buffer.error('Decoding of string type: ' + tag + ' unsupported');
      }
    };

    DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
      var result;
      var identifiers = [];
      var ident = 0;
      var subident = 0;

      while (!buffer.isEmpty()) {
        subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 0x7f;

        if ((subident & 0x80) === 0) {
          identifiers.push(ident);
          ident = 0;
        }
      }

      if (subident & 0x80) identifiers.push(ident);
      var first = identifiers[0] / 40 | 0;
      var second = identifiers[0] % 40;
      if (relative) result = identifiers;else result = [first, second].concat(identifiers.slice(1));

      if (values) {
        var tmp = values[result.join(' ')];
        if (tmp === undefined) tmp = values[result.join('.')];
        if (tmp !== undefined) result = tmp;
      }

      return result;
    };

    DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
      var str = buffer.raw().toString();
      var year;
      var mon;
      var day;
      var hour;
      var min;
      var sec;

      if (tag === 'gentime') {
        year = str.slice(0, 4) | 0;
        mon = str.slice(4, 6) | 0;
        day = str.slice(6, 8) | 0;
        hour = str.slice(8, 10) | 0;
        min = str.slice(10, 12) | 0;
        sec = str.slice(12, 14) | 0;
      } else if (tag === 'utctime') {
        year = str.slice(0, 2) | 0;
        mon = str.slice(2, 4) | 0;
        day = str.slice(4, 6) | 0;
        hour = str.slice(6, 8) | 0;
        min = str.slice(8, 10) | 0;
        sec = str.slice(10, 12) | 0;
        if (year < 70) year = 2000 + year;else year = 1900 + year;
      } else {
        return buffer.error('Decoding ' + tag + ' time is not supported yet');
      }

      return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
    };

    DERNode.prototype._decodeNull = function decodeNull() {
      return null;
    };

    DERNode.prototype._decodeBool = function decodeBool(buffer) {
      var res = buffer.readUInt8();
      if (buffer.isError(res)) return res;else return res !== 0;
    };

    DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
      // Bigint, return as it is (assume big endian)
      var raw = buffer.raw();
      var res = new bignum(raw);
      if (values) res = values[res.toString(10)] || res;
      return res;
    };

    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === 'function') entity = entity(obj);
      return entity._getDecoder('der').tree;
    }; // Utility methods


    function derDecodeTag(buf, fail) {
      var tag = buf.readUInt8(fail);
      if (buf.isError(tag)) return tag;
      var cls = der.tagClass[tag >> 6];
      var primitive = (tag & 0x20) === 0; // Multi-octet tag - load

      if ((tag & 0x1f) === 0x1f) {
        var oct = tag;
        tag = 0;

        while ((oct & 0x80) === 0x80) {
          oct = buf.readUInt8(fail);
          if (buf.isError(oct)) return oct;
          tag <<= 7;
          tag |= oct & 0x7f;
        }
      } else {
        tag &= 0x1f;
      }

      var tagStr = der.tag[tag];
      return {
        cls: cls,
        primitive: primitive,
        tag: tag,
        tagStr: tagStr
      };
    }

    function derDecodeLen(buf, primitive, fail) {
      var len = buf.readUInt8(fail);
      if (buf.isError(len)) return len; // Indefinite form

      if (!primitive && len === 0x80) return null; // Definite form

      if ((len & 0x80) === 0) {
        // Short form
        return len;
      } // Long form


      var num = len & 0x7f;
      if (num > 4) return buf.error('length octect is too long');
      len = 0;

      for (var i = 0; i < num; i++) {
        len <<= 8;
        var j = buf.readUInt8(fail);
        if (buf.isError(j)) return j;
        len |= j;
      }

      return len;
    }
  }, {
    "../base/buffer": 32,
    "../base/node": 34,
    "../constants/der": 36,
    "bn.js": 54,
    "inherits": 217
  }],
  39: [function (require, module, exports) {
    'use strict';

    var decoders = exports;
    decoders.der = require('./der');
    decoders.pem = require('./pem');
  }, {
    "./der": 38,
    "./pem": 40
  }],
  40: [function (require, module, exports) {
    'use strict';

    var inherits = require('inherits');

    var Buffer = require('safer-buffer').Buffer;

    var DERDecoder = require('./der');

    function PEMDecoder(entity) {
      DERDecoder.call(this, entity);
      this.enc = 'pem';
    }

    inherits(PEMDecoder, DERDecoder);
    module.exports = PEMDecoder;

    PEMDecoder.prototype.decode = function decode(data, options) {
      var lines = data.toString().split(/[\r\n]+/g);
      var label = options.label.toUpperCase();
      var re = /^-----(BEGIN|END) ([^-]+)-----$/;
      var start = -1;
      var end = -1;

      for (var i = 0; i < lines.length; i++) {
        var match = lines[i].match(re);
        if (match === null) continue;
        if (match[2] !== label) continue;

        if (start === -1) {
          if (match[1] !== 'BEGIN') break;
          start = i;
        } else {
          if (match[1] !== 'END') break;
          end = i;
          break;
        }
      }

      if (start === -1 || end === -1) throw new Error('PEM section not found for: ' + label);
      var base64 = lines.slice(start + 1, end).join(''); // Remove excessive symbols

      base64.replace(/[^a-z0-9+/=]+/gi, '');
      var input = Buffer.from(base64, 'base64');
      return DERDecoder.prototype.decode.call(this, input, options);
    };
  }, {
    "./der": 38,
    "inherits": 217,
    "safer-buffer": 315
  }],
  41: [function (require, module, exports) {
    'use strict';

    var inherits = require('inherits');

    var Buffer = require('safer-buffer').Buffer;

    var Node = require('../base/node'); // Import DER constants


    var der = require('../constants/der');

    function DEREncoder(entity) {
      this.enc = 'der';
      this.name = entity.name;
      this.entity = entity; // Construct base tree

      this.tree = new DERNode();

      this.tree._init(entity.body);
    }

    module.exports = DEREncoder;

    DEREncoder.prototype.encode = function encode(data, reporter) {
      return this.tree._encode(data, reporter).join();
    }; // Tree methods


    function DERNode(parent) {
      Node.call(this, 'der', parent);
    }

    inherits(DERNode, Node);

    DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
      var encodedTag = encodeTag(tag, primitive, cls, this.reporter); // Short form

      if (content.length < 0x80) {
        var _header = Buffer.alloc(2);

        _header[0] = encodedTag;
        _header[1] = content.length;
        return this._createEncoderBuffer([_header, content]);
      } // Long form
      // Count octets required to store length


      var lenOctets = 1;

      for (var i = content.length; i >= 0x100; i >>= 8) {
        lenOctets++;
      }

      var header = Buffer.alloc(1 + 1 + lenOctets);
      header[0] = encodedTag;
      header[1] = 0x80 | lenOctets;

      for (var _i5 = 1 + lenOctets, j = content.length; j > 0; _i5--, j >>= 8) {
        header[_i5] = j & 0xff;
      }

      return this._createEncoderBuffer([header, content]);
    };

    DERNode.prototype._encodeStr = function encodeStr(str, tag) {
      if (tag === 'bitstr') {
        return this._createEncoderBuffer([str.unused | 0, str.data]);
      } else if (tag === 'bmpstr') {
        var buf = Buffer.alloc(str.length * 2);

        for (var i = 0; i < str.length; i++) {
          buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        }

        return this._createEncoderBuffer(buf);
      } else if (tag === 'numstr') {
        if (!this._isNumstr(str)) {
          return this.reporter.error('Encoding of string type: numstr supports ' + 'only digits and space');
        }

        return this._createEncoderBuffer(str);
      } else if (tag === 'printstr') {
        if (!this._isPrintstr(str)) {
          return this.reporter.error('Encoding of string type: printstr supports ' + 'only latin upper and lower case letters, ' + 'digits, space, apostrophe, left and rigth ' + 'parenthesis, plus sign, comma, hyphen, ' + 'dot, slash, colon, equal sign, ' + 'question mark');
        }

        return this._createEncoderBuffer(str);
      } else if (/str$/.test(tag)) {
        return this._createEncoderBuffer(str);
      } else if (tag === 'objDesc') {
        return this._createEncoderBuffer(str);
      } else {
        return this.reporter.error('Encoding of string type: ' + tag + ' unsupported');
      }
    };

    DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
      if (typeof id === 'string') {
        if (!values) return this.reporter.error('string objid given, but no values map found');
        if (!values.hasOwnProperty(id)) return this.reporter.error('objid not found in values map');
        id = values[id].split(/[\s.]+/g);

        for (var i = 0; i < id.length; i++) {
          id[i] |= 0;
        }
      } else if (Array.isArray(id)) {
        id = id.slice();

        for (var _i6 = 0; _i6 < id.length; _i6++) {
          id[_i6] |= 0;
        }
      }

      if (!Array.isArray(id)) {
        return this.reporter.error('objid() should be either array or string, ' + 'got: ' + JSON.stringify(id));
      }

      if (!relative) {
        if (id[1] >= 40) return this.reporter.error('Second objid identifier OOB');
        id.splice(0, 2, id[0] * 40 + id[1]);
      } // Count number of octets


      var size = 0;

      for (var _i7 = 0; _i7 < id.length; _i7++) {
        var ident = id[_i7];

        for (size++; ident >= 0x80; ident >>= 7) {
          size++;
        }
      }

      var objid = Buffer.alloc(size);
      var offset = objid.length - 1;

      for (var _i8 = id.length - 1; _i8 >= 0; _i8--) {
        var _ident = id[_i8];
        objid[offset--] = _ident & 0x7f;

        while ((_ident >>= 7) > 0) {
          objid[offset--] = 0x80 | _ident & 0x7f;
        }
      }

      return this._createEncoderBuffer(objid);
    };

    function two(num) {
      if (num < 10) return '0' + num;else return num;
    }

    DERNode.prototype._encodeTime = function encodeTime(time, tag) {
      var str;
      var date = new Date(time);

      if (tag === 'gentime') {
        str = [two(date.getUTCFullYear()), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), 'Z'].join('');
      } else if (tag === 'utctime') {
        str = [two(date.getUTCFullYear() % 100), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), 'Z'].join('');
      } else {
        this.reporter.error('Encoding ' + tag + ' time is not supported yet');
      }

      return this._encodeStr(str, 'octstr');
    };

    DERNode.prototype._encodeNull = function encodeNull() {
      return this._createEncoderBuffer('');
    };

    DERNode.prototype._encodeInt = function encodeInt(num, values) {
      if (typeof num === 'string') {
        if (!values) return this.reporter.error('String int or enum given, but no values map');

        if (!values.hasOwnProperty(num)) {
          return this.reporter.error('Values map doesn\'t contain: ' + JSON.stringify(num));
        }

        num = values[num];
      } // Bignum, assume big endian


      if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
        var numArray = num.toArray();

        if (!num.sign && numArray[0] & 0x80) {
          numArray.unshift(0);
        }

        num = Buffer.from(numArray);
      }

      if (Buffer.isBuffer(num)) {
        var _size = num.length;
        if (num.length === 0) _size++;

        var _out = Buffer.alloc(_size);

        num.copy(_out);
        if (num.length === 0) _out[0] = 0;
        return this._createEncoderBuffer(_out);
      }

      if (num < 0x80) return this._createEncoderBuffer(num);
      if (num < 0x100) return this._createEncoderBuffer([0, num]);
      var size = 1;

      for (var i = num; i >= 0x100; i >>= 8) {
        size++;
      }

      var out = new Array(size);

      for (var _i9 = out.length - 1; _i9 >= 0; _i9--) {
        out[_i9] = num & 0xff;
        num >>= 8;
      }

      if (out[0] & 0x80) {
        out.unshift(0);
      }

      return this._createEncoderBuffer(Buffer.from(out));
    };

    DERNode.prototype._encodeBool = function encodeBool(value) {
      return this._createEncoderBuffer(value ? 0xff : 0);
    };

    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === 'function') entity = entity(obj);
      return entity._getEncoder('der').tree;
    };

    DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
      var state = this._baseState;
      var i;
      if (state['default'] === null) return false;
      var data = dataBuffer.join();
      if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();
      if (data.length !== state.defaultBuffer.length) return false;

      for (i = 0; i < data.length; i++) {
        if (data[i] !== state.defaultBuffer[i]) return false;
      }

      return true;
    }; // Utility methods


    function encodeTag(tag, primitive, cls, reporter) {
      var res;
      if (tag === 'seqof') tag = 'seq';else if (tag === 'setof') tag = 'set';
      if (der.tagByName.hasOwnProperty(tag)) res = der.tagByName[tag];else if (typeof tag === 'number' && (tag | 0) === tag) res = tag;else return reporter.error('Unknown tag: ' + tag);
      if (res >= 0x1f) return reporter.error('Multi-octet tag encoding unsupported');
      if (!primitive) res |= 0x20;
      res |= der.tagClassByName[cls || 'universal'] << 6;
      return res;
    }
  }, {
    "../base/node": 34,
    "../constants/der": 36,
    "inherits": 217,
    "safer-buffer": 315
  }],
  42: [function (require, module, exports) {
    'use strict';

    var encoders = exports;
    encoders.der = require('./der');
    encoders.pem = require('./pem');
  }, {
    "./der": 41,
    "./pem": 43
  }],
  43: [function (require, module, exports) {
    'use strict';

    var inherits = require('inherits');

    var DEREncoder = require('./der');

    function PEMEncoder(entity) {
      DEREncoder.call(this, entity);
      this.enc = 'pem';
    }

    inherits(PEMEncoder, DEREncoder);
    module.exports = PEMEncoder;

    PEMEncoder.prototype.encode = function encode(data, options) {
      var buf = DEREncoder.prototype.encode.call(this, data);
      var p = buf.toString('base64');
      var out = ['-----BEGIN ' + options.label + '-----'];

      for (var i = 0; i < p.length; i += 64) {
        out.push(p.slice(i, i + 64));
      }

      out.push('-----END ' + options.label + '-----');
      return out.join('\n');
    };
  }, {
    "./der": 41,
    "inherits": 217
  }],
  44: [function (require, module, exports) {
    /**
     * Expose `Backoff`.
     */
    module.exports = Backoff;
    /**
     * Initialize backoff timer with `opts`.
     *
     * - `min` initial timeout in milliseconds [100]
     * - `max` max timeout [10000]
     * - `jitter` [0]
     * - `factor` [2]
     *
     * @param {Object} opts
     * @api public
     */

    function Backoff(opts) {
      opts = opts || {};
      this.ms = opts.min || 100;
      this.max = opts.max || 10000;
      this.factor = opts.factor || 2;
      this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
      this.attempts = 0;
    }
    /**
     * Return the backoff duration.
     *
     * @return {Number}
     * @api public
     */


    Backoff.prototype.duration = function () {
      var ms = this.ms * Math.pow(this.factor, this.attempts++);

      if (this.jitter) {
        var rand = Math.random();
        var deviation = Math.floor(rand * this.jitter * ms);
        ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
      }

      return Math.min(ms, this.max) | 0;
    };
    /**
     * Reset the number of attempts.
     *
     * @api public
     */


    Backoff.prototype.reset = function () {
      this.attempts = 0;
    };
    /**
     * Set the minimum duration
     *
     * @api public
     */


    Backoff.prototype.setMin = function (min) {
      this.ms = min;
    };
    /**
     * Set the maximum duration
     *
     * @api public
     */


    Backoff.prototype.setMax = function (max) {
      this.max = max;
    };
    /**
     * Set the jitter
     *
     * @api public
     */


    Backoff.prototype.setJitter = function (jitter) {
      this.jitter = jitter;
    };
  }, {}],
  45: [function (require, module, exports) {
    'use strict';

    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    } // Support decoding URL-safe base64 strings, as Node.js does.
    // See: https://en.wikipedia.org/wiki/Base64#URL_applications


    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;

    function getLens(b64) {
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4');
      } // Trim off extra bytes after placeholder bytes are found
      // See: https://github.com/beatgammit/base64-js/issues/42


      var validLen = b64.indexOf('=');
      if (validLen === -1) validLen = len;
      var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    } // base64 is 4/3 + up to two characters of the original data


    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }

    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }

    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

      var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i;

      for (i = 0; i < len; i += 4) {
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      return arr;
    }

    function tripletToBase64(num) {
      return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
    }

    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];

      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
      }

      return output.join('');
    }

    function fromByteArray(uint8) {
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3
      // go through the array every three bytes, we'll deal with trailing stuff later

      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
      } // pad the end with zeros, but make sure to not forget the extra bytes


      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
      }

      return parts.join('');
    }
  }, {}],
  46: [function (require, module, exports) {
    var Buffer = require('safe-buffer').Buffer;

    var INTEGER_START = 0x69; // 'i'

    var STRING_DELIM = 0x3A; // ':'

    var DICTIONARY_START = 0x64; // 'd'

    var LIST_START = 0x6C; // 'l'

    var END_OF_TYPE = 0x65; // 'e'

    /**
     * replaces parseInt(buffer.toString('ascii', start, end)).
     * For strings with less then ~30 charachters, this is actually a lot faster.
     *
     * @param {Buffer} data
     * @param {Number} start
     * @param {Number} end
     * @return {Number} calculated number
     */

    function getIntFromBuffer(buffer, start, end) {
      var sum = 0;
      var sign = 1;

      for (var i = start; i < end; i++) {
        var num = buffer[i];

        if (num < 58 && num >= 48) {
          sum = sum * 10 + (num - 48);
          continue;
        }

        if (i === start && num === 43) {
          // +
          continue;
        }

        if (i === start && num === 45) {
          // -
          sign = -1;
          continue;
        }

        if (num === 46) {
          // .
          // its a float. break here.
          break;
        }

        throw new Error('not a number: buffer[' + i + '] = ' + num);
      }

      return sum * sign;
    }
    /**
     * Decodes bencoded data.
     *
     * @param  {Buffer} data
     * @param  {Number} start (optional)
     * @param  {Number} end (optional)
     * @param  {String} encoding (optional)
     * @return {Object|Array|Buffer|String|Number}
     */


    function decode(data, start, end, encoding) {
      if (data == null || data.length === 0) {
        return null;
      }

      if (typeof start !== 'number' && encoding == null) {
        encoding = start;
        start = undefined;
      }

      if (typeof end !== 'number' && encoding == null) {
        encoding = end;
        end = undefined;
      }

      decode.position = 0;
      decode.encoding = encoding || null;
      decode.data = !Buffer.isBuffer(data) ? Buffer.from(data) : data.slice(start, end);
      decode.bytes = decode.data.length;
      return decode.next();
    }

    decode.bytes = 0;
    decode.position = 0;
    decode.data = null;
    decode.encoding = null;

    decode.next = function () {
      switch (decode.data[decode.position]) {
        case DICTIONARY_START:
          return decode.dictionary();

        case LIST_START:
          return decode.list();

        case INTEGER_START:
          return decode.integer();

        default:
          return decode.buffer();
      }
    };

    decode.find = function (chr) {
      var i = decode.position;
      var c = decode.data.length;
      var d = decode.data;

      while (i < c) {
        if (d[i] === chr) return i;
        i++;
      }

      throw new Error('Invalid data: Missing delimiter "' + String.fromCharCode(chr) + '" [0x' + chr.toString(16) + ']');
    };

    decode.dictionary = function () {
      decode.position++;
      var dict = {};

      while (decode.data[decode.position] !== END_OF_TYPE) {
        dict[decode.buffer()] = decode.next();
      }

      decode.position++;
      return dict;
    };

    decode.list = function () {
      decode.position++;
      var lst = [];

      while (decode.data[decode.position] !== END_OF_TYPE) {
        lst.push(decode.next());
      }

      decode.position++;
      return lst;
    };

    decode.integer = function () {
      var end = decode.find(END_OF_TYPE);
      var number = getIntFromBuffer(decode.data, decode.position + 1, end);
      decode.position += end + 1 - decode.position;
      return number;
    };

    decode.buffer = function () {
      var sep = decode.find(STRING_DELIM);
      var length = getIntFromBuffer(decode.data, decode.position, sep);
      var end = ++sep + length;
      decode.position = end;
      return decode.encoding ? decode.data.toString(decode.encoding, sep, end) : decode.data.slice(sep, end);
    };

    module.exports = decode;
  }, {
    "safe-buffer": 314
  }],
  47: [function (require, module, exports) {
    var Buffer = require('safe-buffer').Buffer;
    /**
     * Encodes data in bencode.
     *
     * @param  {Buffer|Array|String|Object|Number|Boolean} data
     * @return {Buffer}
     */


    function encode(data, buffer, offset) {
      var buffers = [];
      var result = null;

      encode._encode(buffers, data);

      result = Buffer.concat(buffers);
      encode.bytes = result.length;

      if (Buffer.isBuffer(buffer)) {
        result.copy(buffer, offset);
        return buffer;
      }

      return result;
    }

    encode.bytes = -1;
    encode._floatConversionDetected = false;

    encode.getType = function (value) {
      if (Buffer.isBuffer(value)) return 'buffer';
      if (Array.isArray(value)) return 'array';
      if (ArrayBuffer.isView(value)) return 'arraybufferview';
      if (value instanceof Number) return 'number';
      if (value instanceof Boolean) return 'boolean';
      if (value instanceof ArrayBuffer) return 'arraybuffer';
      return _typeof2(value);
    };

    encode._encode = function (buffers, data) {
      if (data == null) {
        return;
      }

      switch (encode.getType(data)) {
        case 'buffer':
          encode.buffer(buffers, data);
          break;

        case 'object':
          encode.dict(buffers, data);
          break;

        case 'array':
          encode.list(buffers, data);
          break;

        case 'string':
          encode.string(buffers, data);
          break;

        case 'number':
          encode.number(buffers, data);
          break;

        case 'boolean':
          encode.number(buffers, data);
          break;

        case 'arraybufferview':
          encode.buffer(buffers, Buffer.from(data.buffer, data.byteOffset, data.byteLength));
          break;

        case 'arraybuffer':
          encode.buffer(buffers, Buffer.from(data));
          break;
      }
    };

    var buffE = Buffer.from('e');
    var buffD = Buffer.from('d');
    var buffL = Buffer.from('l');

    encode.buffer = function (buffers, data) {
      buffers.push(Buffer.from(data.length + ':'), data);
    };

    encode.string = function (buffers, data) {
      buffers.push(Buffer.from(Buffer.byteLength(data) + ':' + data));
    };

    encode.number = function (buffers, data) {
      var maxLo = 0x80000000;
      var hi = data / maxLo << 0;
      var lo = data % maxLo << 0;
      var val = hi * maxLo + lo;
      buffers.push(Buffer.from('i' + val + 'e'));

      if (val !== data && !encode._floatConversionDetected) {
        encode._floatConversionDetected = true;
        console.warn('WARNING: Possible data corruption detected with value "' + data + '":', 'Bencoding only defines support for integers, value was converted to "' + val + '"');
        console.trace();
      }
    };

    encode.dict = function (buffers, data) {
      buffers.push(buffD);
      var j = 0;
      var k; // fix for issue #13 - sorted dicts

      var keys = Object.keys(data).sort();
      var kl = keys.length;

      for (; j < kl; j++) {
        k = keys[j];
        if (data[k] == null) continue;
        encode.string(buffers, k);

        encode._encode(buffers, data[k]);
      }

      buffers.push(buffE);
    };

    encode.list = function (buffers, data) {
      var i = 0;
      var c = data.length;
      buffers.push(buffL);

      for (; i < c; i++) {
        if (data[i] == null) continue;

        encode._encode(buffers, data[i]);
      }

      buffers.push(buffE);
    };

    module.exports = encode;
  }, {
    "safe-buffer": 314
  }],
  48: [function (require, module, exports) {
    var bencode = module.exports;
    bencode.encode = require('./encode');
    bencode.decode = require('./decode');
    /**
     * Determines the amount of bytes
     * needed to encode the given value
     * @param  {Object|Array|Buffer|String|Number|Boolean} value
     * @return {Number} byteCount
     */

    bencode.byteLength = bencode.encodingLength = function (value) {
      return bencode.encode(value).length;
    };
  }, {
    "./decode": 46,
    "./encode": 47
  }],
  49: [function (require, module, exports) {
    function getByteSize(num) {
      var out = num >> 3;
      if (num % 8 !== 0) out++;
      return out;
    }

    var BitField = /*#__PURE__*/function () {
      function BitField() {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var opts = arguments.length > 1 ? arguments[1] : undefined;

        _classCallCheck2(this, BitField);

        var grow = opts != null && opts.grow;
        this.grow = grow && isFinite(grow) && getByteSize(grow) || grow || 0;
        this.buffer = typeof data === 'number' ? new Uint8Array(getByteSize(data)) : data;
      }

      _createClass2(BitField, [{
        key: "get",
        value: function get(i) {
          var j = i >> 3;
          return j < this.buffer.length && !!(this.buffer[j] & 128 >> i % 8);
        }
      }, {
        key: "set",
        value: function set(i) {
          var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
          var j = i >> 3;

          if (b) {
            if (this.buffer.length < j + 1) {
              var length = Math.max(j + 1, Math.min(2 * this.buffer.length, this.grow));

              if (length <= this.grow) {
                var newBuffer = new Uint8Array(length);
                newBuffer.set(this.buffer);
                this.buffer = newBuffer;
              }
            } // Set


            this.buffer[j] |= 128 >> i % 8;
          } else if (j < this.buffer.length) {
            // Clear
            this.buffer[j] &= ~(128 >> i % 8);
          }
        }
      }]);

      return BitField;
    }();

    if (typeof module !== 'undefined') module.exports = BitField;
  }, {}],
  50: [function (require, module, exports) {
    (function (process, Buffer) {
      (function () {
        var bencode = require('bencode');

        var debug = require('debug')('bittorrent-dht');

        var KBucket = require('k-bucket');

        var krpc = require('k-rpc');

        var low = require('last-one-wins');

        var LRU = require('lru');

        var randombytes = require('randombytes');

        var records = require('record-cache');

        var simpleSha1 = require('simple-sha1');

        var _require11 = require('events'),
            EventEmitter = _require11.EventEmitter;

        var ROTATE_INTERVAL = 5 * 60 * 1000; // rotate secrets every 5 minutes

        var BUCKET_OUTDATED_TIMESPAN = 15 * 60 * 1000; // check nodes in bucket in 15 minutes old buckets

        var DHT = /*#__PURE__*/function (_EventEmitter5) {
          _inherits(DHT, _EventEmitter5);

          var _super7 = _createSuper(DHT);

          function DHT() {
            var _this23;

            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            _classCallCheck2(this, DHT);

            _this23 = _super7.call(this);
            _this23._tables = new LRU({
              maxAge: ROTATE_INTERVAL,
              max: opts.maxTables || 1000
            });
            _this23._values = new LRU(opts.maxValues || 1000);
            _this23._peers = records({
              maxAge: opts.maxAge || 0,
              maxSize: opts.maxPeers || 10000
            });
            _this23._secrets = null;
            _this23._hash = opts.hash || sha1;
            _this23._hashLength = _this23._hash(Buffer.from('')).length;
            _this23._rpc = opts.krpc || krpc(Object.assign({
              idLength: _this23._hashLength
            }, opts));

            _this23._rpc.on('query', onquery);

            _this23._rpc.on('node', onnode);

            _this23._rpc.on('warning', onwarning);

            _this23._rpc.on('error', onerror);

            _this23._rpc.on('listening', onlistening);

            _this23._rotateSecrets();

            _this23._verify = opts.verify || null;
            _this23._host = opts.host || null;
            _this23._interval = setInterval(rotateSecrets, ROTATE_INTERVAL);
            _this23._runningBucketCheck = false;
            _this23._bucketCheckTimeout = null;
            _this23._bucketOutdatedTimeSpan = opts.timeBucketOutdated || BUCKET_OUTDATED_TIMESPAN;
            _this23.listening = false;
            _this23.destroyed = false;
            _this23.nodeId = _this23._rpc.id;
            _this23.nodes = _this23._rpc.nodes; // ensure only *one* ping it running at the time to avoid infinite async
            // ping recursion, and make the latest one is always ran, but inbetween ones
            // are disregarded

            var onping = low(ping);

            _this23._rpc.on('ping', function (older, swap) {
              onping({
                older: older,
                swap: swap
              });
            });

            process.nextTick(bootstrap);

            _this23._debug('new DHT %s', _this23.nodeId);

            var self = _assertThisInitialized(_this23);

            function ping(opts, cb) {
              var older = opts.older;
              var swap = opts.swap;

              self._debug('received ping', older);

              self._checkNodes(older, false, function (_, deadNode) {
                if (deadNode) {
                  self._debug('swaping dead node with newer', deadNode);

                  swap(deadNode);
                  return cb();
                }

                self._debug('no node added, all other nodes ok');

                cb();
              });
            }

            function onlistening() {
              self.listening = true;

              self._debug('listening %d', self.address().port);

              self.updateBucketTimestamp();

              self._setBucketCheckInterval();

              self.emit('listening');
            }

            function onquery(query, peer) {
              self._onquery(query, peer);
            }

            function rotateSecrets() {
              self._rotateSecrets();
            }

            function bootstrap() {
              if (!self.destroyed) self._bootstrap(opts.bootstrap !== false);
            }

            function onwarning(err) {
              self.emit('warning', err);
            }

            function onerror(err) {
              self.emit('error', err);
            }

            function onnode(node) {
              self.emit('node', node);
            }

            return _this23;
          }

          _createClass2(DHT, [{
            key: "_setBucketCheckInterval",
            value: function _setBucketCheckInterval() {
              var self = this;
              var interval = 1 * 60 * 1000; // check age of bucket every minute

              this._runningBucketCheck = true;
              queueNext();

              function checkBucket() {
                var diff = Date.now() - self._rpc.nodes.metadata.lastChange;

                if (diff < self._bucketOutdatedTimeSpan) return queueNext();

                self._pingAll(function () {
                  if (self.destroyed) return;

                  if (self.nodes.toArray().length < 1) {
                    // node is currently isolated,
                    // retry with initial bootstrap nodes
                    self._bootstrap(true);
                  }

                  queueNext();
                });
              }

              function queueNext() {
                if (!self._runningBucketCheck || self.destroyed) return;
                var nextTimeout = Math.floor(Math.random() * interval + interval / 2);
                self._bucketCheckTimeout = setTimeout(checkBucket, nextTimeout);
              }
            }
          }, {
            key: "_pingAll",
            value: function _pingAll(cb) {
              this._checkAndRemoveNodes(this.nodes.toArray(), cb);
            }
          }, {
            key: "removeBucketCheckInterval",
            value: function removeBucketCheckInterval() {
              this._runningBucketCheck = false;
              clearTimeout(this._bucketCheckTimeout);
            }
          }, {
            key: "updateBucketTimestamp",
            value: function updateBucketTimestamp() {
              this._rpc.nodes.metadata.lastChange = Date.now();
            }
          }, {
            key: "_checkAndRemoveNodes",
            value: function _checkAndRemoveNodes(nodes, cb) {
              var self = this;

              this._checkNodes(nodes, true, function (_, node) {
                if (node) self.removeNode(node.id);
                cb(null, node);
              });
            }
          }, {
            key: "_checkNodes",
            value: function _checkNodes(nodes, force, cb) {
              var self = this;
              test(nodes);

              function test(acc) {
                var current = null;

                while (acc.length) {
                  current = acc.pop();
                  if (!current.id || force) break;
                  if (Date.now() - (current.seen || 0) > 10000) break; // not pinged within 10s

                  current = null;
                }

                if (!current) return cb(null);

                self._sendPing(current, function (err) {
                  if (!err) {
                    self.updateBucketTimestamp();
                    return test(acc);
                  }

                  cb(null, current);
                });
              }
            }
          }, {
            key: "addNode",
            value: function addNode(node) {
              var self = this;

              if (node.id) {
                node.id = toBuffer(node.id);
                var old = !!this._rpc.nodes.get(node.id);

                this._rpc.nodes.add(node);

                if (!old) {
                  this.emit('node', node);
                  this.updateBucketTimestamp();
                }

                return;
              }

              this._sendPing(node, function (_, node) {
                if (node) self.addNode(node);
              });
            }
          }, {
            key: "removeNode",
            value: function removeNode(id) {
              this._rpc.nodes.remove(toBuffer(id));
            }
          }, {
            key: "_sendPing",
            value: function _sendPing(node, cb) {
              var self = this;
              var expectedId = node.id;

              this._rpc.query(node, {
                q: 'ping'
              }, function (err, pong, node) {
                if (err) return cb(err);

                if (!pong.r || !pong.r.id || !Buffer.isBuffer(pong.r.id) || pong.r.id.length !== self._hashLength) {
                  return cb(new Error('Bad reply'));
                }

                if (Buffer.isBuffer(expectedId) && !expectedId.equals(pong.r.id)) {
                  return cb(new Error('Unexpected node id'));
                }

                self.updateBucketTimestamp();
                cb(null, {
                  id: pong.r.id,
                  host: node.host || node.address,
                  port: node.port
                });
              });
            }
          }, {
            key: "toJSON",
            value: function toJSON() {
              var self = this;
              var values = {};
              Object.keys(this._values.cache).forEach(function (key) {
                var value = self._values.cache[key].value;
                values[key] = {
                  v: value.v.toString('hex'),
                  id: value.id.toString('hex')
                };
                if (value.seq != null) values[key].seq = value.seq;
                if (value.sig != null) values[key].sig = value.sig.toString('hex');
                if (value.k != null) values[key].k = value.k.toString('hex');
              });
              return {
                nodes: this._rpc.nodes.toArray().map(toNode),
                values: values
              };
            }
          }, {
            key: "put",
            value: function put(opts, cb) {
              if (Buffer.isBuffer(opts) || typeof opts === 'string') opts = {
                v: opts
              };
              var isMutable = !!opts.k;

              if (opts.v === undefined) {
                throw new Error('opts.v not given');
              }

              if (opts.v.length >= 1000) {
                throw new Error('v must be less than 1000 bytes in put()');
              }

              if (isMutable && opts.cas !== undefined && typeof opts.cas !== 'number') {
                throw new Error('opts.cas must be an integer if provided');
              }

              if (isMutable && opts.k.length !== 32) {
                throw new Error('opts.k ed25519 public key must be 32 bytes');
              }

              if (isMutable && typeof opts.sign !== 'function' && !Buffer.isBuffer(opts.sig)) {
                throw new Error('opts.sign function or options.sig signature is required for mutable put');
              }

              if (isMutable && opts.salt && opts.salt.length > 64) {
                throw new Error('opts.salt is > 64 bytes long');
              }

              if (isMutable && opts.seq === undefined) {
                throw new Error('opts.seq not provided for a mutable update');
              }

              if (isMutable && typeof opts.seq !== 'number') {
                throw new Error('opts.seq not an integer');
              }

              return this._put(opts, cb);
            }
          }, {
            key: "_put",
            value: function _put(opts, cb) {
              if (!cb) cb = noop;
              var isMutable = !!opts.k;
              var v = typeof opts.v === 'string' ? Buffer.from(opts.v) : opts.v;
              var key = isMutable ? this._hash(opts.salt ? Buffer.concat([opts.k, opts.salt]) : opts.k) : this._hash(bencode.encode(v));

              var table = this._tables.get(key.toString('hex'));

              if (!table) return this._preput(key, opts, cb);
              var message = {
                q: 'put',
                a: {
                  id: this._rpc.id,
                  token: null,
                  // queryAll sets this
                  v: v
                }
              };

              if (isMutable) {
                if (typeof opts.cas === 'number') message.a.cas = opts.cas;
                if (opts.salt) message.a.salt = opts.salt;
                message.a.k = opts.k;
                message.a.seq = opts.seq;
                if (typeof opts.sign === 'function') message.a.sig = opts.sign(encodeSigData(message.a));else if (Buffer.isBuffer(opts.sig)) message.a.sig = opts.sig;
              } else {
                this._values.set(key.toString('hex'), message.a);
              }

              this._rpc.queryAll(table.closest(key), message, null, function (err, n) {
                if (err) return cb(err, key, n);
                cb(null, key, n);
              });

              return key;
            }
          }, {
            key: "_preput",
            value: function _preput(key, opts, cb) {
              var self = this;

              this._closest(key, {
                q: 'get',
                a: {
                  id: this._rpc.id,
                  target: key
                }
              }, null, function (err, n) {
                if (err) return cb(err);
                self.put(opts, cb);
              });

              return key;
            }
          }, {
            key: "get",
            value: function get(key, opts, cb) {
              key = toBuffer(key);

              if (typeof opts === 'function') {
                cb = opts;
                opts = null;
              }

              if (!opts) opts = {};
              var verify = opts.verify || this._verify;
              var hash = this._hash;
              var value = this._values.get(key.toString('hex')) || null;

              if (value && opts.cache !== false) {
                value = createGetResponse(this._rpc.id, null, value);
                return process.nextTick(done);
              }

              this._closest(key, {
                q: 'get',
                a: {
                  id: this._rpc.id,
                  target: key
                }
              }, onreply, done);

              function done(err) {
                if (err) return cb(err);
                cb(null, value);
              }

              function onreply(message) {
                var r = message.r;
                if (!r || !r.v) return true;
                var isMutable = r.k || r.sig;
                if (opts.salt) r.salt = Buffer.from(opts.salt);

                if (isMutable) {
                  if (!verify || !r.sig || !r.k) return true;
                  if (!verify(r.sig, encodeSigData(r), r.k)) return true;

                  if (hash(r.salt ? Buffer.concat([r.k, r.salt]) : r.k).equals(key)) {
                    if (!value || r.seq > value.seq) value = r;
                  }
                } else {
                  if (hash(bencode.encode(r.v)).equals(key)) {
                    value = r;
                    return false;
                  }
                }

                return true;
              }
            }
          }, {
            key: "announce",
            value: function announce(infoHash, port, cb) {
              if (typeof port === 'function') return this.announce(infoHash, 0, port);
              infoHash = toBuffer(infoHash);
              if (!cb) cb = noop;

              var table = this._tables.get(infoHash.toString('hex'));

              if (!table) return this._preannounce(infoHash, port, cb);

              if (this._host) {
                var dhtPort = this.listening ? this.address().port : 0;

                this._addPeer({
                  host: this._host,
                  port: port || dhtPort
                }, infoHash, {
                  host: this._host,
                  port: dhtPort
                });
              }

              var message = {
                q: 'announce_peer',
                a: {
                  id: this._rpc.id,
                  token: null,
                  // queryAll sets this
                  info_hash: infoHash,
                  port: port,
                  implied_port: port ? 0 : 1
                }
              };

              this._debug('announce %s %d', infoHash, port);

              this._rpc.queryAll(table.closest(infoHash), message, null, cb);
            }
          }, {
            key: "_preannounce",
            value: function _preannounce(infoHash, port, cb) {
              var self = this;
              this.lookup(infoHash, function (err) {
                if (self.destroyed) return cb(new Error('dht is destroyed'));
                if (err) return cb(err);
                self.announce(infoHash, port, cb);
              });
            }
          }, {
            key: "lookup",
            value: function lookup(infoHash, cb) {
              infoHash = toBuffer(infoHash);
              if (!cb) cb = noop;
              var self = this;
              var aborted = false;

              this._debug('lookup %s', infoHash);

              process.nextTick(emit);

              this._closest(infoHash, {
                q: 'get_peers',
                a: {
                  id: this._rpc.id,
                  info_hash: infoHash
                }
              }, onreply, cb);

              function emit(values, from) {
                if (!values) values = self._peers.get(infoHash.toString('hex'), 100);
                var peers = decodePeers(values);

                for (var i = 0; i < peers.length; i++) {
                  self.emit('peer', peers[i], infoHash, from || null);
                }
              }

              function onreply(message, node) {
                if (aborted) return false;
                if (message.r.values) emit(message.r.values, node);
              }

              return function abort() {
                aborted = true;
              };
            }
          }, {
            key: "address",
            value: function address() {
              return this._rpc.address();
            } // listen([port], [address], [onlistening])

          }, {
            key: "listen",
            value: function listen() {
              var _this$_rpc;

              (_this$_rpc = this._rpc).bind.apply(_this$_rpc, arguments);
            }
          }, {
            key: "destroy",
            value: function destroy(cb) {
              if (this.destroyed) {
                if (cb) process.nextTick(cb);
                return;
              }

              this.destroyed = true;
              var self = this;
              clearInterval(this._interval);
              this.removeBucketCheckInterval();

              this._peers.destroy();

              this._debug('destroying');

              this._rpc.destroy(function () {
                self.emit('close');
                if (cb) cb();
              });
            }
          }, {
            key: "_onquery",
            value: function _onquery(query, peer) {
              var q = query.q.toString();

              this._debug('received %s query from %s:%d', q, peer.address, peer.port);

              if (!query.a) return;

              switch (q) {
                case 'ping':
                  return this._rpc.response(peer, query, {
                    id: this._rpc.id
                  });

                case 'find_node':
                  return this._onfindnode(query, peer);

                case 'get_peers':
                  return this._ongetpeers(query, peer);

                case 'announce_peer':
                  return this._onannouncepeer(query, peer);

                case 'get':
                  return this._onget(query, peer);

                case 'put':
                  return this._onput(query, peer);
              }
            }
          }, {
            key: "_onfindnode",
            value: function _onfindnode(query, peer) {
              var target = query.a.target;
              if (!target) return this._rpc.error(peer, query, [203, '`find_node` missing required `a.target` field']);
              this.emit('find_node', target);

              var nodes = this._rpc.nodes.closest(target);

              this._rpc.response(peer, query, {
                id: this._rpc.id
              }, nodes);
            }
          }, {
            key: "_ongetpeers",
            value: function _ongetpeers(query, peer) {
              var host = peer.address || peer.host;
              var infoHash = query.a.info_hash;
              if (!infoHash) return this._rpc.error(peer, query, [203, '`get_peers` missing required `a.info_hash` field']);
              this.emit('get_peers', infoHash);
              var r = {
                id: this._rpc.id,
                token: this._generateToken(host)
              };

              var peers = this._peers.get(infoHash.toString('hex'));

              if (peers.length) {
                r.values = peers;

                this._rpc.response(peer, query, r);
              } else {
                this._rpc.response(peer, query, r, this._rpc.nodes.closest(infoHash));
              }
            }
          }, {
            key: "_onannouncepeer",
            value: function _onannouncepeer(query, peer) {
              var host = peer.address || peer.host;
              var port = query.a.implied_port ? peer.port : query.a.port;
              if (!port || typeof port !== 'number' || port <= 0 || port > 65535) return;
              var infoHash = query.a.info_hash;
              var token = query.a.token;
              if (!infoHash || !token) return;

              if (!this._validateToken(host, token)) {
                return this._rpc.error(peer, query, [203, 'cannot `announce_peer` with bad token']);
              }

              this.emit('announce_peer', infoHash, {
                host: host,
                port: peer.port
              });

              this._addPeer({
                host: host,
                port: port
              }, infoHash, {
                host: host,
                port: peer.port
              });

              this._rpc.response(peer, query, {
                id: this._rpc.id
              });
            }
          }, {
            key: "_addPeer",
            value: function _addPeer(peer, infoHash, from) {
              this._peers.add(infoHash.toString('hex'), encodePeer(peer.host, peer.port));

              this.emit('announce', peer, infoHash, from);
            }
          }, {
            key: "_onget",
            value: function _onget(query, peer) {
              var host = peer.address || peer.host;
              var target = query.a.target;
              if (!target) return;

              var token = this._generateToken(host);

              var value = this._values.get(target.toString('hex'));

              this.emit('get', target, value);

              if (!value) {
                var nodes = this._rpc.nodes.closest(target);

                this._rpc.response(peer, query, {
                  id: this._rpc.id,
                  token: token
                }, nodes);
              } else {
                this._rpc.response(peer, query, createGetResponse(this._rpc.id, token, value));
              }
            }
          }, {
            key: "_onput",
            value: function _onput(query, peer) {
              var host = peer.address || peer.host;
              var a = query.a;
              if (!a) return;
              var v = query.a.v;
              if (!v) return;
              var id = query.a.id;
              if (!id) return;
              var token = a.token;
              if (!token) return;

              if (!this._validateToken(host, token)) {
                return this._rpc.error(peer, query, [203, 'cannot `put` with bad token']);
              }

              if (v.length > 1000) {
                return this._rpc.error(peer, query, [205, 'data payload too large']);
              }

              var isMutable = !!(a.k || a.sig);
              if (isMutable && !a.k && !a.sig) return;
              var key = isMutable ? this._hash(a.salt ? Buffer.concat([a.k, a.salt]) : a.k) : this._hash(bencode.encode(v));
              var keyHex = key.toString('hex');
              this.emit('put', key, v);

              if (isMutable) {
                if (!this._verify) return this._rpc.error(peer, query, [400, 'verification not supported']);
                if (!this._verify(a.sig, encodeSigData(a), a.k)) return;

                var prev = this._values.get(keyHex);

                if (prev && typeof a.cas === 'number' && prev.seq !== a.cas) {
                  return this._rpc.error(peer, query, [301, 'CAS mismatch, re-read and try again']);
                }

                if (prev && typeof prev.seq === 'number' && !(a.seq > prev.seq)) {
                  return this._rpc.error(peer, query, [302, 'sequence number less than current']);
                }

                this._values.set(keyHex, {
                  v: v,
                  k: a.k,
                  salt: a.salt,
                  sig: a.sig,
                  seq: a.seq,
                  id: id
                });
              } else {
                this._values.set(keyHex, {
                  v: v,
                  id: id
                });
              }

              this._rpc.response(peer, query, {
                id: this._rpc.id
              });
            }
          }, {
            key: "_bootstrap",
            value: function _bootstrap(populate) {
              var self = this;
              if (!populate) return process.nextTick(ready);

              this._rpc.populate(self._rpc.id, {
                q: 'find_node',
                a: {
                  id: self._rpc.id,
                  target: self._rpc.id
                }
              }, ready);

              function ready() {
                if (self.ready) return;

                self._debug('emit ready');

                self.ready = true;
                self.emit('ready');
              }
            }
          }, {
            key: "_closest",
            value: function _closest(target, message, onmessage, cb) {
              var self = this;
              var table = new KBucket({
                localNodeId: target,
                numberOfNodesPerKBucket: this._rpc.k
              });

              this._rpc.closest(target, message, onreply, done);

              function done(err, n) {
                if (err) return cb(err);

                self._tables.set(target.toString('hex'), table);

                self._debug('visited %d nodes', n);

                cb(null, n);
              }

              function onreply(message, node) {
                if (!message.r) return true;

                if (message.r.token && message.r.id && Buffer.isBuffer(message.r.id) && message.r.id.length === self._hashLength) {
                  self._debug('found node %s (target: %s)', message.r.id, target);

                  table.add({
                    id: message.r.id,
                    host: node.host || node.address,
                    port: node.port,
                    token: message.r.token
                  });
                }

                if (!onmessage) return true;
                return onmessage(message, node);
              }
            }
          }, {
            key: "_debug",
            value: function _debug() {
              if (!debug.enabled) return;
              var args = [].slice.call(arguments);
              args[0] = "[".concat(this.nodeId.toString('hex').substring(0, 7), "] ").concat(args[0]);

              for (var i = 1; i < args.length; i++) {
                if (Buffer.isBuffer(args[i])) args[i] = args[i].toString('hex');
              }

              debug.apply(void 0, _toConsumableArray(args));
            }
          }, {
            key: "_validateToken",
            value: function _validateToken(host, token) {
              var tokenA = this._generateToken(host, this._secrets[0]);

              var tokenB = this._generateToken(host, this._secrets[1]);

              return token.equals(tokenA) || token.equals(tokenB);
            }
          }, {
            key: "_generateToken",
            value: function _generateToken(host, secret) {
              if (!secret) secret = this._secrets[0];
              return this._hash(Buffer.concat([Buffer.from(host), secret]));
            }
          }, {
            key: "_rotateSecrets",
            value: function _rotateSecrets() {
              if (!this._secrets) {
                this._secrets = [randombytes(this._hashLength), randombytes(this._hashLength)];
              } else {
                this._secrets[1] = this._secrets[0];
                this._secrets[0] = randombytes(this._hashLength);
              }
            }
          }]);

          return DHT;
        }(EventEmitter);

        function noop() {}

        function sha1(buf) {
          return Buffer.from(simpleSha1.sync(buf), 'hex');
        }

        function createGetResponse(id, token, value) {
          var r = {
            id: id,
            token: token,
            v: value.v
          };

          if (value.sig) {
            r.sig = value.sig;
            r.k = value.k;
            if (typeof value.seq === 'number') r.seq = value.seq;
          }

          return r;
        }

        function encodePeer(host, port) {
          var buf = Buffer.allocUnsafe(6);
          var ip = host.split('.');

          for (var i = 0; i < 4; i++) {
            buf[i] = parseInt(ip[i] || 0, 10);
          }

          buf.writeUInt16BE(port, 4);
          return buf;
        }

        function decodePeers(buf) {
          var peers = [];

          try {
            for (var i = 0; i < buf.length; i++) {
              var port = buf[i].readUInt16BE(4);
              if (!port) continue;
              peers.push({
                host: parseIp(buf[i], 0),
                port: port
              });
            }
          } catch (err) {// do nothing
          }

          return peers;
        }

        function parseIp(buf, offset) {
          return "".concat(buf[offset++], ".").concat(buf[offset++], ".").concat(buf[offset++], ".").concat(buf[offset++]);
        }

        function encodeSigData(msg) {
          var ref = {
            seq: msg.seq || 0,
            v: msg.v
          };
          if (msg.salt) ref.salt = msg.salt;
          return bencode.encode(ref).slice(1, -1);
        }

        function toNode(node) {
          return {
            host: node.host,
            port: node.port
          };
        }

        function toBuffer(str) {
          if (Buffer.isBuffer(str)) return str;
          if (ArrayBuffer.isView(str)) return Buffer.from(str.buffer, str.byteOffset, str.byteLength);
          if (typeof str === 'string') return Buffer.from(str, 'hex');
          throw new Error('Pass a buffer or a string');
        }

        module.exports = DHT;
      }).call(this);
    }).call(this, require('_process'), require("buffer").Buffer);
  }, {
    "_process": 276,
    "bencode": 48,
    "buffer": 102,
    "debug": 125,
    "events": 175,
    "k-bucket": 220,
    "k-rpc": 222,
    "last-one-wins": 223,
    "lru": 242,
    "randombytes": 291,
    "record-cache": 310,
    "simple-sha1": 344
  }],
  51: [function (require, module, exports) {
    /*! bittorrent-dht. MIT License. WebTorrent LLC <https://webtorrent.io/opensource> */
    var Client = require('./client');

    var Server = require('./server');

    module.exports = Client;
    module.exports.Client = Client;
    module.exports.Server = Server;
  }, {
    "./client": 50,
    "./server": 52
  }],
  52: [function (require, module, exports) {
    /**
     * TODO: DHT Bootstrap Server
     *
     * For now, just export the client, which will work just fine. But, later, it'll
     * be important to give out nodes evenly from across the DHT.
     */
    module.exports = require('./client');
  }, {
    "./client": 50
  }],
  53: [function (require, module, exports) {
    /**
     * Create a blob builder even when vendor prefixes exist
     */
    var BlobBuilder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof WebKitBlobBuilder !== 'undefined' ? WebKitBlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : false;
    /**
     * Check if Blob constructor is supported
     */

    var blobSupported = function () {
      try {
        var a = new Blob(['hi']);
        return a.size === 2;
      } catch (e) {
        return false;
      }
    }();
    /**
     * Check if Blob constructor supports ArrayBufferViews
     * Fails in Safari 6, so we need to map to ArrayBuffers there.
     */


    var blobSupportsArrayBufferView = blobSupported && function () {
      try {
        var b = new Blob([new Uint8Array([1, 2])]);
        return b.size === 2;
      } catch (e) {
        return false;
      }
    }();
    /**
     * Check if BlobBuilder is supported
     */


    var blobBuilderSupported = BlobBuilder && BlobBuilder.prototype.append && BlobBuilder.prototype.getBlob;
    /**
     * Helper function that maps ArrayBufferViews to ArrayBuffers
     * Used by BlobBuilder constructor and old browsers that didn't
     * support it in the Blob constructor.
     */

    function mapArrayBufferViews(ary) {
      return ary.map(function (chunk) {
        if (chunk.buffer instanceof ArrayBuffer) {
          var buf = chunk.buffer; // if this is a subarray, make a copy so we only
          // include the subarray region from the underlying buffer

          if (chunk.byteLength !== buf.byteLength) {
            var copy = new Uint8Array(chunk.byteLength);
            copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
            buf = copy.buffer;
          }

          return buf;
        }

        return chunk;
      });
    }

    function BlobBuilderConstructor(ary, options) {
      options = options || {};
      var bb = new BlobBuilder();
      mapArrayBufferViews(ary).forEach(function (part) {
        bb.append(part);
      });
      return options.type ? bb.getBlob(options.type) : bb.getBlob();
    }

    ;

    function BlobConstructor(ary, options) {
      return new Blob(mapArrayBufferViews(ary), options || {});
    }

    ;

    if (typeof Blob !== 'undefined') {
      BlobBuilderConstructor.prototype = Blob.prototype;
      BlobConstructor.prototype = Blob.prototype;
    }

    module.exports = function () {
      if (blobSupported) {
        return blobSupportsArrayBufferView ? Blob : BlobConstructor;
      } else if (blobBuilderSupported) {
        return BlobBuilderConstructor;
      } else {
        return undefined;
      }
    }();
  }, {}],
  54: [function (require, module, exports) {
    (function (module, exports) {
      'use strict'; // Utils

      function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      } // Could use `inherits` module, but don't want to move from single file
      // architecture yet.


      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;

        var TempCtor = function TempCtor() {};

        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      } // BN


      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }

        this.negative = 0;
        this.words = null;
        this.length = 0; // Reduction context

        this.red = null;

        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }

          this._init(number || 0, base || 10, endian || 'be');
        }
      }

      if (_typeof2(module) === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }

      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer;

      try {
        Buffer = require('buffer').Buffer;
      } catch (e) {}

      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }

        return num !== null && _typeof2(num) === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };

      BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };

      BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };

      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }

        if (_typeof2(number) === 'object') {
          return this._initArray(number, base, endian);
        }

        if (base === 'hex') {
          base = 16;
        }

        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;

        if (number[0] === '-') {
          start++;
        }

        if (base === 16) {
          this._parseHex(number, start);
        } else {
          this._parseBase(number, base, start);
        }

        if (number[0] === '-') {
          this.negative = 1;
        }

        this.strip();
        if (endian !== 'le') return;

        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }

        if (number < 0x4000000) {
          this.words = [number & 0x3ffffff];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)

          this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
          this.length = 3;
        }

        if (endian !== 'le') return; // Reverse the bytes

        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');

        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }

        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);

        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        var off = 0;

        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;

            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;

            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }

        return this.strip();
      };

      function parseHex(str, start, end) {
        var r = 0;
        var len = Math.min(str.length, end);

        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r <<= 4; // 'a' - 'f'

          if (c >= 49 && c <= 54) {
            r |= c - 49 + 0xa; // 'A' - 'F'
          } else if (c >= 17 && c <= 22) {
            r |= c - 17 + 0xa; // '0' - '9'
          } else {
            r |= c & 0xf;
          }
        }

        return r;
      }

      BN.prototype._parseHex = function _parseHex(number, start) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);

        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w; // Scan 24-bit chunks and add them to the number

        var off = 0;

        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
          w = parseHex(number, i, i + 6);
          this.words[j] |= w << off & 0x3ffffff; // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb

          this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
          off += 24;

          if (off >= 26) {
            off -= 26;
            j++;
          }
        }

        if (i + 6 !== start) {
          w = parseHex(number, start, i + 6);
          this.words[j] |= w << off & 0x3ffffff;
          this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
        }

        this.strip();
      };

      function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);

        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul; // 'a'

          if (c >= 49) {
            r += c - 49 + 0xa; // 'A'
          } else if (c >= 17) {
            r += c - 17 + 0xa; // '0' - '9'
          } else {
            r += c;
          }
        }

        return r;
      }

      BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [0];
        this.length = 1; // Find length of limb in base

        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }

        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;

        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);

          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);

          for (i = 0; i < mod; i++) {
            pow *= base;
          }

          this.imuln(pow);

          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
      };

      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);

        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }

        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };

      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };

      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }

        return this;
      }; // Remove leading `0` from `this`


      BN.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }

        return this._normSign();
      };

      BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }

        return this;
      };

      BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      };
      /*
       var zeros = [];
      var groupSizes = [];
      var groupBases = [];
       var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }
       */


      var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
      var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
      var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];

      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;

        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;

          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 0xffffff).toString(16);
            carry = w >>> 24 - off & 0xffffff;

            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }

            off += 2;

            if (off >= 26) {
              off -= 26;
              i--;
            }
          }

          if (carry !== 0) {
            out = carry.toString(16) + out;
          }

          while (out.length % padding !== 0) {
            out = '0' + out;
          }

          if (this.negative !== 0) {
            out = '-' + out;
          }

          return out;
        }

        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base]; // var groupBase = Math.pow(base, groupSize);

          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;

          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);

            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }

          if (this.isZero()) {
            out = '0' + out;
          }

          while (out.length % padding !== 0) {
            out = '0' + out;
          }

          if (this.negative !== 0) {
            out = '-' + out;
          }

          return out;
        }

        assert(false, 'Base should be between 2 and 36');
      };

      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];

        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + this.words[1] * 0x4000000;
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }

        return this.negative !== 0 ? -ret : ret;
      };

      BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };

      BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
      };

      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };

      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();

        if (!littleEndian) {
          // Assume big-endian
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }

          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);
            res[i] = b;
          }

          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }

        return res;
      };

      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;

          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }

          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }

          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }

          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }

          return r + t;
        };
      }

      BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;

        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }

        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }

        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }

        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }

        if ((t & 0x1) === 0) {
          r++;
        }

        return r;
      }; // Return number of used bits in a BN


      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];

        var hi = this._countBits(w);

        return (this.length - 1) * 26 + hi;
      };

      function toBitArray(num) {
        var w = new Array(num.bitLength());

        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }

        return w;
      } // Number of trailing zero bits


      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;

        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);

          r += b;
          if (b !== 26) break;
        }

        return r;
      };

      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };

      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }

        return this.clone();
      };

      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }

        return this.clone();
      };

      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      }; // Return negative clone of `this`


      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };

      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }

        return this;
      }; // Or `num` with `this` in-place


      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }

        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }

        return this.strip();
      };

      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      }; // Or `num` with `this`


      BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };

      BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      }; // And `num` with `this` in-place


      BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;

        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }

        this.length = b.length;
        return this.strip();
      };

      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      }; // And `num` with `this`


      BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };

      BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      }; // Xor `num` with `this` in-place


      BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;

        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }

        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = a.length;
        return this.strip();
      };

      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      }; // Xor `num` with `this`


      BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };

      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      }; // Not ``this`` with ``width`` bitwidth


      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26; // Extend the buffer with leading zeroes

        this._expand(bytesNeeded);

        if (bitsLeft > 0) {
          bytesNeeded--;
        } // Handle complete words


        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        } // Handle the residue


        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        } // And remove leading zeroes


        return this.strip();
      };

      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      }; // Set `bit` of `this`


      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;

        this._expand(off + 1);

        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }

        return this.strip();
      }; // Add `num` to `this` in-place


      BN.prototype.iadd = function iadd(num) {
        var r; // negative + positive

        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign(); // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        } // a.length > b.length


        var a, b;

        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;

        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        this.length = a.length;

        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++; // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        return this;
      }; // Add `num` to `this`


      BN.prototype.add = function add(num) {
        var res;

        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }

        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      }; // Subtract `num` from `this` in-place


      BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign(); // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        } // At this point both numbers are positive


        var cmp = this.cmp(num); // Optimization - zeroify

        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        } // a > b


        var a, b;

        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;

        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }

        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        } // Copy rest of the words


        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = Math.max(this.length, i);

        if (a !== this) {
          this.negative = 1;
        }

        return this.strip();
      }; // Subtract `num` from `this`


      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };

      function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0; // Peel one iteration (compiler can't do it, because of code complexity)

        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;

        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);

          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 0x4000000 | 0;
            rword = r & 0x3ffffff;
          }

          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }

        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }

        return out.strip();
      } // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).


      var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */

        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */

        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */

        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */

        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */

        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */

        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */

        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */

        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */

        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */

        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */

        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */

        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */

        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */

        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */

        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */

        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */

        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */

        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */

        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;

        if (c !== 0) {
          o[19] = c;
          out.length++;
        }

        return out;
      }; // Polyfill comb


      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }

      function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;

        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);

          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 0x3ffffff;
            ncarry = ncarry + (r / 0x4000000 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 0x3ffffff;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }

          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }

        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }

        return out.strip();
      }

      function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
      }

      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;

        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }

        return res;
      }; // Cooley-Tukey algorithm for FFT
      // slightly revisited to rely on looping instead of recursion


      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }

      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;

        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }

        return t;
      }; // Returns binary-reversed representation of `x`


      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;

        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }

        return rb;
      }; // Performs "tweedling" phase, therefore 'emulating'
      // behaviour of the recursive algorithm


      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };

      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);

        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);

          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;

            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              /* jshint maxdepth : false */

              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };

      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;

        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }

        return 1 << i + 1 + odd;
      };

      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;

        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };

      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;

        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 0x3ffffff;

          if (w < 0x4000000) {
            carry = 0;
          } else {
            carry = w / 0x4000000 | 0;
          }
        }

        return ws;
      };

      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;

        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 0x1fff;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 0x1fff;
          carry = carry >>> 13;
        } // Pad with zeroes


        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }

        assert(carry === 0);
        assert((carry & ~0x1fff) === 0);
      };

      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);

        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }

        return ph;
      };

      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);

        var _ = this.stub(N);

        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);

        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }

        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      }; // Multiply `this` by `num`


      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      }; // Multiply employing FFT


      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      }; // In-place Multiplication


      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };

      BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000); // Carry

        var carry = 0;

        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += w / 0x4000000 | 0; // NOTE: lo is 27bit maximum

          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return this;
      };

      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      }; // `this` * `this`


      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      }; // `this` * `this` in-place


      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      }; // Math.pow(`this`, `num`)


      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1); // Skip leading zeroes

        var res = this;

        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }

        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
            res = res.mul(q);
          }
        }

        return res;
      }; // Shift-left in-place


      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;

        if (r !== 0) {
          var carry = 0;

          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }

          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }

        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }

          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }

          this.length += s;
        }

        return this.strip();
      };

      BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      }; // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits


      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;

        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }

        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h); // Extended mode, copy masked part

        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }

          maskedWords.length = s;
        }

        if (s === 0) {// No-op, we should not move anything at all
        } else if (this.length > s) {
          this.length -= s;

          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }

        var carry = 0;

        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        } // Push carried bits as a mask


        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }

        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }

        return this.strip();
      };

      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      }; // Shift-left


      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };

      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      }; // Shift-right


      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };

      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      }; // Test if n bit is set


      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r; // Fast case: bit is much higher than all existing words

        if (this.length <= s) return false; // Check bit and return

        var w = this.words[s];
        return !!(w & q);
      }; // Return only lowers bits of number (in-place)


      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');

        if (this.length <= s) {
          return this;
        }

        if (r !== 0) {
          s++;
        }

        this.length = Math.min(s, this.length);

        if (r !== 0) {
          var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
          this.words[this.length - 1] &= mask;
        }

        return this.strip();
      }; // Return only lowers bits of number


      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      }; // Add plain number `num` to `this`


      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num); // Possible sign change

        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }

          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        } // Add without checks


        return this._iaddn(num);
      };

      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num; // Carry

        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;

          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }

        this.length = Math.max(this.length, i + 1);
        return this;
      }; // Subtract plain number `num` from `this`


      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);

        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }

        this.words[0] -= num;

        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }

        return this.strip();
      };

      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };

      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };

      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };

      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };

      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;

        this._expand(len);

        var w;
        var carry = 0;

        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - (right / 0x4000000 | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }

        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }

        if (carry === 0) return this.strip(); // Subtraction overflow

        assert(carry === -1);
        carry = 0;

        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }

        this.negative = 1;
        return this.strip();
      };

      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num; // Normalize

        var bhi = b.words[b.length - 1] | 0;

        var bhiBits = this._countBits(bhi);

        shift = 26 - bhiBits;

        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        } // Initialize quotient


        var m = a.length - b.length;
        var q;

        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);

          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }

        var diff = a.clone()._ishlnsubmul(b, 1, m);

        if (diff.negative === 0) {
          a = diff;

          if (q) {
            q.words[m] = 1;
          }
        }

        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0); // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)

          qj = Math.min(qj / bhi | 0, 0x3ffffff);

          a._ishlnsubmul(b, qj, j);

          while (a.negative !== 0) {
            qj--;
            a.negative = 0;

            a._ishlnsubmul(b, 1, j);

            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }

          if (q) {
            q.words[j] = qj;
          }
        }

        if (q) {
          q.strip();
        }

        a.strip(); // Denormalize

        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }

        return {
          div: q || null,
          mod: a
        };
      }; // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested


      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());

        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }

        var div, mod, res;

        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          if (mode !== 'div') {
            mod = res.mod.neg();

            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }

          return {
            div: div,
            mod: mod
          };
        }

        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          return {
            div: div,
            mod: res.mod
          };
        }

        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);

          if (mode !== 'div') {
            mod = res.mod.neg();

            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }

          return {
            div: res.div,
            mod: mod
          };
        } // Both numbers are positive at this point
        // Strip both numbers to approximate shift value


        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        } // Very short reduction


        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }

          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }

          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return this._wordDiv(num, mode);
      }; // Find `this` / `num`


      BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
      }; // Find `this` % `num`


      BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
      };

      BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
      }; // Find Round(`this` / `num`)


      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num); // Fast case - exact division

        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half); // Round down

        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div; // Round up

        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };

      BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;
        var acc = 0;

        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }

        return acc;
      }; // In-place division by number


      BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;

        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = w / num | 0;
          carry = w % num;
        }

        return this.strip();
      };

      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };

      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();

        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        } // A * x + B * y = x


        var A = new BN(1);
        var B = new BN(0); // C * x + D * y = y

        var C = new BN(0);
        var D = new BN(1);
        var g = 0;

        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }

        var yp = y.clone();
        var xp = x.clone();

        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
            ;
          }

          if (i > 0) {
            x.iushrn(i);

            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }

              A.iushrn(1);
              B.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
            ;
          }

          if (j > 0) {
            y.iushrn(j);

            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }

              C.iushrn(1);
              D.iushrn(1);
            }
          }

          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }

        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      }; // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed


      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();

        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }

        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();

        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
            ;
          }

          if (i > 0) {
            a.iushrn(i);

            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }

              x1.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
            ;
          }

          if (j > 0) {
            b.iushrn(j);

            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }

              x2.iushrn(1);
            }
          }

          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }

        var res;

        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }

        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }

        return res;
      };

      BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0; // Remove common factor of two

        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }

        do {
          while (a.isEven()) {
            a.iushrn(1);
          }

          while (b.isEven()) {
            b.iushrn(1);
          }

          var r = a.cmp(b);

          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }

          a.isub(b);
        } while (true);

        return b.iushln(shift);
      }; // Invert number in the field F(num)


      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };

      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };

      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      }; // And first word and num


      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      }; // Increment at the bit position in-line


      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r; // Fast case: bit is much higher than all existing words

        if (this.length <= s) {
          this._expand(s + 1);

          this.words[s] |= q;
          return this;
        } // Add bit and propagate, if needed


        var carry = q;

        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return this;
      };

      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };

      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;

        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }

          assert(num <= 0x3ffffff, 'Number is too big');
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }

        if (this.negative !== 0) return -res | 0;
        return res;
      }; // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`


      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      }; // Unsigned comparison


      BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;

        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b) continue;

          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }

          break;
        }

        return res;
      };

      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };

      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };

      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };

      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };

      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };

      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };

      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };

      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };

      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };

      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      }; //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //


      BN.red = function red(num) {
        return new Red(num);
      };

      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };

      BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };

      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };

      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };

      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };

      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };

      BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };

      BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };

      BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };

      BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');

        this.red._verify2(this, num);

        return this.red.mul(this, num);
      };

      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');

        this.red._verify2(this, num);

        return this.red.imul(this, num);
      };

      BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');

        this.red._verify1(this);

        return this.red.sqr(this);
      };

      BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');

        this.red._verify1(this);

        return this.red.isqr(this);
      }; // Square root over p


      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');

        this.red._verify1(this);

        return this.red.sqrt(this);
      };

      BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');

        this.red._verify1(this);

        return this.red.invm(this);
      }; // Return negative clone of `this` % `red modulo`


      BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');

        this.red._verify1(this);

        return this.red.neg(this);
      };

      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');

        this.red._verify1(this);

        return this.red.pow(this, num);
      }; // Prime numbers with efficient reduction


      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      }; // Pseudo-Mersenne prime

      function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }

      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };

      MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;

        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);

        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);

        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== undefined) {
            // r is BN v4 instance
            r.strip();
          } else {
            // r is BN v5 instance
            r._strip();
          }
        }

        return r;
      };

      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };

      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };

      function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }

      inherits(K256, MPrime);

      K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);

        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }

        output.length = outLen;

        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        } // Shift by 9 limbs


        var prev = input.words[9];
        output.words[output.length++] = prev & mask;

        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }

        prev >>>= 22;
        input.words[i - 10] = prev;

        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };

      K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2; // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390

        var lo = 0;

        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + (lo / 0x4000000 | 0);
        } // Fast length reduction


        if (num.words[num.length - 1] === 0) {
          num.length--;

          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }

        return num;
      };

      function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }

      inherits(P224, MPrime);

      function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }

      inherits(P192, MPrime);

      function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }

      inherits(P25519, MPrime);

      P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;

        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }

        if (carry !== 0) {
          num.words[num.length++] = carry;
        }

        return num;
      }; // Exported mostly for testing purposes, use plain name instead


      BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;

        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }

        primes[name] = prime;
        return prime;
      }; //
      // Base reduction engine
      //


      function Red(m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);

          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }

      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };

      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
      };

      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };

      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }

        return this.m.sub(a)._forceRed(this);
      };

      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);

        var res = a.add(b);

        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }

        return res._forceRed(this);
      };

      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);

        var res = a.iadd(b);

        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }

        return res;
      };

      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);

        var res = a.sub(b);

        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);

        var res = a.isub(b);

        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }

        return res;
      };

      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);

        return this.imod(a.ushln(num));
      };

      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);

        return this.imod(a.imul(b));
      };

      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);

        return this.imod(a.mul(b));
      };

      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };

      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };

      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1); // Fast case

        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        } // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)


        var q = this.m.subn(1);
        var s = 0;

        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }

        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg(); // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.

        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);

        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }

        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;

        while (t.cmp(one) !== 0) {
          var tmp = t;

          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }

          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }

        return r;
      };

      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);

        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };

      Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;

        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }

        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;

        if (start === 0) {
          start = 26;
        }

        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];

          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;

            if (res !== wnd[0]) {
              res = this.sqr(res);
            }

            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }

            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }

          start = 26;
        }

        return res;
      };

      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };

      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      }; //
      // Montgomery method engine
      //


      BN.mont = function mont(num) {
        return new Mont(num);
      };

      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();

        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }

        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }

      inherits(Mont, Red);

      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };

      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };

      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }

        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === 'undefined' || module, this);
  }, {
    "buffer": 56
  }],
  55: [function (require, module, exports) {
    var r;

    module.exports = function rand(len) {
      if (!r) r = new Rand(null);
      return r.generate(len);
    };

    function Rand(rand) {
      this.rand = rand;
    }

    module.exports.Rand = Rand;

    Rand.prototype.generate = function generate(len) {
      return this._rand(len);
    }; // Emulate crypto API using randy


    Rand.prototype._rand = function _rand(n) {
      if (this.rand.getBytes) return this.rand.getBytes(n);
      var res = new Uint8Array(n);

      for (var i = 0; i < res.length; i++) {
        res[i] = this.rand.getByte();
      }

      return res;
    };

    if ((typeof self === "undefined" ? "undefined" : _typeof2(self)) === 'object') {
      if (self.crypto && self.crypto.getRandomValues) {
        // Modern browsers
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.crypto.getRandomValues(arr);
          return arr;
        };
      } else if (self.msCrypto && self.msCrypto.getRandomValues) {
        // IE
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.msCrypto.getRandomValues(arr);
          return arr;
        }; // Safari's WebWorkers do not have `crypto`

      } else if ((typeof window === "undefined" ? "undefined" : _typeof2(window)) === 'object') {
        // Old junk
        Rand.prototype._rand = function () {
          throw new Error('Not implemented yet');
        };
      }
    } else {
      // Node.js or Web worker with no crypto support
      try {
        var crypto = require('crypto');

        if (typeof crypto.randomBytes !== 'function') throw new Error('Not supported');

        Rand.prototype._rand = function _rand(n) {
          return crypto.randomBytes(n);
        };
      } catch (e) {}
    }
  }, {
    "crypto": 56
  }],
  56: [function (require, module, exports) {}, {}],
  57: [function (require, module, exports) {
    // based on the aes implimentation in triple sec
    // https://github.com/keybase/triplesec
    // which is in turn based on the one from crypto-js
    // https://code.google.com/p/crypto-js/
    var Buffer = require('safe-buffer').Buffer;

    function asUInt32Array(buf) {
      if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
      var len = buf.length / 4 | 0;
      var out = new Array(len);

      for (var i = 0; i < len; i++) {
        out[i] = buf.readUInt32BE(i * 4);
      }

      return out;
    }

    function scrubVec(v) {
      for (var i = 0; i < v.length; v++) {
        v[i] = 0;
      }
    }

    function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
      var SUB_MIX0 = SUB_MIX[0];
      var SUB_MIX1 = SUB_MIX[1];
      var SUB_MIX2 = SUB_MIX[2];
      var SUB_MIX3 = SUB_MIX[3];
      var s0 = M[0] ^ keySchedule[0];
      var s1 = M[1] ^ keySchedule[1];
      var s2 = M[2] ^ keySchedule[2];
      var s3 = M[3] ^ keySchedule[3];
      var t0, t1, t2, t3;
      var ksRow = 4;

      for (var round = 1; round < nRounds; round++) {
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 0xff] ^ SUB_MIX2[s2 >>> 8 & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++];
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 0xff] ^ SUB_MIX2[s3 >>> 8 & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++];
        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 0xff] ^ SUB_MIX2[s0 >>> 8 & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++];
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 0xff] ^ SUB_MIX2[s1 >>> 8 & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++];
        s0 = t0;
        s1 = t1;
        s2 = t2;
        s3 = t3;
      }

      t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
      t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
      t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
      t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
      t0 = t0 >>> 0;
      t1 = t1 >>> 0;
      t2 = t2 >>> 0;
      t3 = t3 >>> 0;
      return [t0, t1, t2, t3];
    } // AES constants


    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

    var G = function () {
      // Compute double table
      var d = new Array(256);

      for (var j = 0; j < 256; j++) {
        if (j < 128) {
          d[j] = j << 1;
        } else {
          d[j] = j << 1 ^ 0x11b;
        }
      }

      var SBOX = [];
      var INV_SBOX = [];
      var SUB_MIX = [[], [], [], []];
      var INV_SUB_MIX = [[], [], [], []]; // Walk GF(2^8)

      var x = 0;
      var xi = 0;

      for (var i = 0; i < 256; ++i) {
        // Compute sbox
        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
        sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
        SBOX[x] = sx;
        INV_SBOX[sx] = x; // Compute multiplication

        var x2 = d[x];
        var x4 = d[x2];
        var x8 = d[x4]; // Compute sub bytes, mix columns tables

        var t = d[sx] * 0x101 ^ sx * 0x1010100;
        SUB_MIX[0][x] = t << 24 | t >>> 8;
        SUB_MIX[1][x] = t << 16 | t >>> 16;
        SUB_MIX[2][x] = t << 8 | t >>> 24;
        SUB_MIX[3][x] = t; // Compute inv sub bytes, inv mix columns tables

        t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
        INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
        INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
        INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
        INV_SUB_MIX[3][sx] = t;

        if (x === 0) {
          x = xi = 1;
        } else {
          x = x2 ^ d[d[d[x8 ^ x2]]];
          xi ^= d[d[xi]];
        }
      }

      return {
        SBOX: SBOX,
        INV_SBOX: INV_SBOX,
        SUB_MIX: SUB_MIX,
        INV_SUB_MIX: INV_SUB_MIX
      };
    }();

    function AES(key) {
      this._key = asUInt32Array(key);

      this._reset();
    }

    AES.blockSize = 4 * 4;
    AES.keySize = 256 / 8;
    AES.prototype.blockSize = AES.blockSize;
    AES.prototype.keySize = AES.keySize;

    AES.prototype._reset = function () {
      var keyWords = this._key;
      var keySize = keyWords.length;
      var nRounds = keySize + 6;
      var ksRows = (nRounds + 1) * 4;
      var keySchedule = [];

      for (var k = 0; k < keySize; k++) {
        keySchedule[k] = keyWords[k];
      }

      for (k = keySize; k < ksRows; k++) {
        var t = keySchedule[k - 1];

        if (k % keySize === 0) {
          t = t << 8 | t >>> 24;
          t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff];
          t ^= RCON[k / keySize | 0] << 24;
        } else if (keySize > 6 && k % keySize === 4) {
          t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff];
        }

        keySchedule[k] = keySchedule[k - keySize] ^ t;
      }

      var invKeySchedule = [];

      for (var ik = 0; ik < ksRows; ik++) {
        var ksR = ksRows - ik;
        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];

        if (ik < 4 || ksR <= 4) {
          invKeySchedule[ik] = tt;
        } else {
          invKeySchedule[ik] = G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[tt >>> 16 & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[tt >>> 8 & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]];
        }
      }

      this._nRounds = nRounds;
      this._keySchedule = keySchedule;
      this._invKeySchedule = invKeySchedule;
    };

    AES.prototype.encryptBlockRaw = function (M) {
      M = asUInt32Array(M);
      return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds);
    };

    AES.prototype.encryptBlock = function (M) {
      var out = this.encryptBlockRaw(M);
      var buf = Buffer.allocUnsafe(16);
      buf.writeUInt32BE(out[0], 0);
      buf.writeUInt32BE(out[1], 4);
      buf.writeUInt32BE(out[2], 8);
      buf.writeUInt32BE(out[3], 12);
      return buf;
    };

    AES.prototype.decryptBlock = function (M) {
      M = asUInt32Array(M); // swap

      var m1 = M[1];
      M[1] = M[3];
      M[3] = m1;
      var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
      var buf = Buffer.allocUnsafe(16);
      buf.writeUInt32BE(out[0], 0);
      buf.writeUInt32BE(out[3], 4);
      buf.writeUInt32BE(out[2], 8);
      buf.writeUInt32BE(out[1], 12);
      return buf;
    };

    AES.prototype.scrub = function () {
      scrubVec(this._keySchedule);
      scrubVec(this._invKeySchedule);
      scrubVec(this._key);
    };

    module.exports.AES = AES;
  }, {
    "safe-buffer": 314
  }],
  58: [function (require, module, exports) {
    var aes = require('./aes');

    var Buffer = require('safe-buffer').Buffer;

    var Transform = require('cipher-base');

    var inherits = require('inherits');

    var GHASH = require('./ghash');

    var xor = require('buffer-xor');

    var incr32 = require('./incr32');

    function xorTest(a, b) {
      var out = 0;
      if (a.length !== b.length) out++;
      var len = Math.min(a.length, b.length);

      for (var i = 0; i < len; ++i) {
        out += a[i] ^ b[i];
      }

      return out;
    }

    function calcIv(self, iv, ck) {
      if (iv.length === 12) {
        self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])]);
        return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])]);
      }

      var ghash = new GHASH(ck);
      var len = iv.length;
      var toPad = len % 16;
      ghash.update(iv);

      if (toPad) {
        toPad = 16 - toPad;
        ghash.update(Buffer.alloc(toPad, 0));
      }

      ghash.update(Buffer.alloc(8, 0));
      var ivBits = len * 8;
      var tail = Buffer.alloc(8);
      tail.writeUIntBE(ivBits, 0, 8);
      ghash.update(tail);
      self._finID = ghash.state;
      var out = Buffer.from(self._finID);
      incr32(out);
      return out;
    }

    function StreamCipher(mode, key, iv, decrypt) {
      Transform.call(this);
      var h = Buffer.alloc(4, 0);
      this._cipher = new aes.AES(key);

      var ck = this._cipher.encryptBlock(h);

      this._ghash = new GHASH(ck);
      iv = calcIv(this, iv, ck);
      this._prev = Buffer.from(iv);
      this._cache = Buffer.allocUnsafe(0);
      this._secCache = Buffer.allocUnsafe(0);
      this._decrypt = decrypt;
      this._alen = 0;
      this._len = 0;
      this._mode = mode;
      this._authTag = null;
      this._called = false;
    }

    inherits(StreamCipher, Transform);

    StreamCipher.prototype._update = function (chunk) {
      if (!this._called && this._alen) {
        var rump = 16 - this._alen % 16;

        if (rump < 16) {
          rump = Buffer.alloc(rump, 0);

          this._ghash.update(rump);
        }
      }

      this._called = true;

      var out = this._mode.encrypt(this, chunk);

      if (this._decrypt) {
        this._ghash.update(chunk);
      } else {
        this._ghash.update(out);
      }

      this._len += chunk.length;
      return out;
    };

    StreamCipher.prototype._final = function () {
      if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data');
      var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
      if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data');
      this._authTag = tag;

      this._cipher.scrub();
    };

    StreamCipher.prototype.getAuthTag = function getAuthTag() {
      if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state');
      return this._authTag;
    };

    StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
      if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state');
      this._authTag = tag;
    };

    StreamCipher.prototype.setAAD = function setAAD(buf) {
      if (this._called) throw new Error('Attempting to set AAD in unsupported state');

      this._ghash.update(buf);

      this._alen += buf.length;
    };

    module.exports = StreamCipher;
  }, {
    "./aes": 57,
    "./ghash": 62,
    "./incr32": 63,
    "buffer-xor": 101,
    "cipher-base": 106,
    "inherits": 217,
    "safe-buffer": 314
  }],
  59: [function (require, module, exports) {
    var ciphers = require('./encrypter');

    var deciphers = require('./decrypter');

    var modes = require('./modes/list.json');

    function getCiphers() {
      return Object.keys(modes);
    }

    exports.createCipher = exports.Cipher = ciphers.createCipher;
    exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;
    exports.createDecipher = exports.Decipher = deciphers.createDecipher;
    exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;
    exports.listCiphers = exports.getCiphers = getCiphers;
  }, {
    "./decrypter": 60,
    "./encrypter": 61,
    "./modes/list.json": 71
  }],
  60: [function (require, module, exports) {
    var AuthCipher = require('./authCipher');

    var Buffer = require('safe-buffer').Buffer;

    var MODES = require('./modes');

    var StreamCipher = require('./streamCipher');

    var Transform = require('cipher-base');

    var aes = require('./aes');

    var ebtk = require('evp_bytestokey');

    var inherits = require('inherits');

    function Decipher(mode, key, iv) {
      Transform.call(this);
      this._cache = new Splitter();
      this._last = void 0;
      this._cipher = new aes.AES(key);
      this._prev = Buffer.from(iv);
      this._mode = mode;
      this._autopadding = true;
    }

    inherits(Decipher, Transform);

    Decipher.prototype._update = function (data) {
      this._cache.add(data);

      var chunk;
      var thing;
      var out = [];

      while (chunk = this._cache.get(this._autopadding)) {
        thing = this._mode.decrypt(this, chunk);
        out.push(thing);
      }

      return Buffer.concat(out);
    };

    Decipher.prototype._final = function () {
      var chunk = this._cache.flush();

      if (this._autopadding) {
        return unpad(this._mode.decrypt(this, chunk));
      } else if (chunk) {
        throw new Error('data not multiple of block length');
      }
    };

    Decipher.prototype.setAutoPadding = function (setTo) {
      this._autopadding = !!setTo;
      return this;
    };

    function Splitter() {
      this.cache = Buffer.allocUnsafe(0);
    }

    Splitter.prototype.add = function (data) {
      this.cache = Buffer.concat([this.cache, data]);
    };

    Splitter.prototype.get = function (autoPadding) {
      var out;

      if (autoPadding) {
        if (this.cache.length > 16) {
          out = this.cache.slice(0, 16);
          this.cache = this.cache.slice(16);
          return out;
        }
      } else {
        if (this.cache.length >= 16) {
          out = this.cache.slice(0, 16);
          this.cache = this.cache.slice(16);
          return out;
        }
      }

      return null;
    };

    Splitter.prototype.flush = function () {
      if (this.cache.length) return this.cache;
    };

    function unpad(last) {
      var padded = last[15];

      if (padded < 1 || padded > 16) {
        throw new Error('unable to decrypt data');
      }

      var i = -1;

      while (++i < padded) {
        if (last[i + (16 - padded)] !== padded) {
          throw new Error('unable to decrypt data');
        }
      }

      if (padded === 16) return;
      return last.slice(0, 16 - padded);
    }

    function createDecipheriv(suite, password, iv) {
      var config = MODES[suite.toLowerCase()];
      if (!config) throw new TypeError('invalid suite type');
      if (typeof iv === 'string') iv = Buffer.from(iv);
      if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);
      if (typeof password === 'string') password = Buffer.from(password);
      if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);

      if (config.type === 'stream') {
        return new StreamCipher(config.module, password, iv, true);
      } else if (config.type === 'auth') {
        return new AuthCipher(config.module, password, iv, true);
      }

      return new Decipher(config.module, password, iv);
    }

    function createDecipher(suite, password) {
      var config = MODES[suite.toLowerCase()];
      if (!config) throw new TypeError('invalid suite type');
      var keys = ebtk(password, false, config.key, config.iv);
      return createDecipheriv(suite, keys.key, keys.iv);
    }

    exports.createDecipher = createDecipher;
    exports.createDecipheriv = createDecipheriv;
  }, {
    "./aes": 57,
    "./authCipher": 58,
    "./modes": 70,
    "./streamCipher": 73,
    "cipher-base": 106,
    "evp_bytestokey": 176,
    "inherits": 217,
    "safe-buffer": 314
  }],
  61: [function (require, module, exports) {
    var MODES = require('./modes');

    var AuthCipher = require('./authCipher');

    var Buffer = require('safe-buffer').Buffer;

    var StreamCipher = require('./streamCipher');

    var Transform = require('cipher-base');

    var aes = require('./aes');

    var ebtk = require('evp_bytestokey');

    var inherits = require('inherits');

    function Cipher(mode, key, iv) {
      Transform.call(this);
      this._cache = new Splitter();
      this._cipher = new aes.AES(key);
      this._prev = Buffer.from(iv);
      this._mode = mode;
      this._autopadding = true;
    }

    inherits(Cipher, Transform);

    Cipher.prototype._update = function (data) {
      this._cache.add(data);

      var chunk;
      var thing;
      var out = [];

      while (chunk = this._cache.get()) {
        thing = this._mode.encrypt(this, chunk);
        out.push(thing);
      }

      return Buffer.concat(out);
    };

    var PADDING = Buffer.alloc(16, 0x10);

    Cipher.prototype._final = function () {
      var chunk = this._cache.flush();

      if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk);

        this._cipher.scrub();

        return chunk;
      }

      if (!chunk.equals(PADDING)) {
        this._cipher.scrub();

        throw new Error('data not multiple of block length');
      }
    };

    Cipher.prototype.setAutoPadding = function (setTo) {
      this._autopadding = !!setTo;
      return this;
    };

    function Splitter() {
      this.cache = Buffer.allocUnsafe(0);
    }

    Splitter.prototype.add = function (data) {
      this.cache = Buffer.concat([this.cache, data]);
    };

    Splitter.prototype.get = function () {
      if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
      }

      return null;
    };

    Splitter.prototype.flush = function () {
      var len = 16 - this.cache.length;
      var padBuff = Buffer.allocUnsafe(len);
      var i = -1;

      while (++i < len) {
        padBuff.writeUInt8(len, i);
      }

      return Buffer.concat([this.cache, padBuff]);
    };

    function createCipheriv(suite, password, iv) {
      var config = MODES[suite.toLowerCase()];
      if (!config) throw new TypeError('invalid suite type');
      if (typeof password === 'string') password = Buffer.from(password);
      if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);
      if (typeof iv === 'string') iv = Buffer.from(iv);
      if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);

      if (config.type === 'stream') {
        return new StreamCipher(config.module, password, iv);
      } else if (config.type === 'auth') {
        return new AuthCipher(config.module, password, iv);
      }

      return new Cipher(config.module, password, iv);
    }

    function createCipher(suite, password) {
      var config = MODES[suite.toLowerCase()];
      if (!config) throw new TypeError('invalid suite type');
      var keys = ebtk(password, false, config.key, config.iv);
      return createCipheriv(suite, keys.key, keys.iv);
    }

    exports.createCipheriv = createCipheriv;
    exports.createCipher = createCipher;
  }, {
    "./aes": 57,
    "./authCipher": 58,
    "./modes": 70,
    "./streamCipher": 73,
    "cipher-base": 106,
    "evp_bytestokey": 176,
    "inherits": 217,
    "safe-buffer": 314
  }],
  62: [function (require, module, exports) {
    var Buffer = require('safe-buffer').Buffer;

    var ZEROES = Buffer.alloc(16, 0);

    function toArray(buf) {
      return [buf.readUInt32BE(0), buf.readUInt32BE(4), buf.readUInt32BE(8), buf.readUInt32BE(12)];
    }

    function fromArray(out) {
      var buf = Buffer.allocUnsafe(16);
      buf.writeUInt32BE(out[0] >>> 0, 0);
      buf.writeUInt32BE(out[1] >>> 0, 4);
      buf.writeUInt32BE(out[2] >>> 0, 8);
      buf.writeUInt32BE(out[3] >>> 0, 12);
      return buf;
    }

    function GHASH(key) {
      this.h = key;
      this.state = Buffer.alloc(16, 0);
      this.cache = Buffer.allocUnsafe(0);
    } // from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
    // by Juho Vähä-Herttua


    GHASH.prototype.ghash = function (block) {
      var i = -1;

      while (++i < block.length) {
        this.state[i] ^= block[i];
      }

      this._multiply();
    };

    GHASH.prototype._multiply = function () {
      var Vi = toArray(this.h);
      var Zi = [0, 0, 0, 0];
      var j, xi, lsbVi;
      var i = -1;

      while (++i < 128) {
        xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;

        if (xi) {
          // Z_i+1 = Z_i ^ V_i
          Zi[0] ^= Vi[0];
          Zi[1] ^= Vi[1];
          Zi[2] ^= Vi[2];
          Zi[3] ^= Vi[3];
        } // Store the value of LSB(V_i)


        lsbVi = (Vi[3] & 1) !== 0; // V_i+1 = V_i >> 1

        for (j = 3; j > 0; j--) {
          Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
        }

        Vi[0] = Vi[0] >>> 1; // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R

        if (lsbVi) {
          Vi[0] = Vi[0] ^ 0xe1 << 24;
        }
      }

      this.state = fromArray(Zi);
    };

    GHASH.prototype.update = function (buf) {
      this.cache = Buffer.concat([this.cache, buf]);
      var chunk;

      while (this.cache.length >= 16) {
        chunk = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        this.ghash(chunk);
      }
    };

    GHASH.prototype.final = function (abl, bl) {
      if (this.cache.length) {
        this.ghash(Buffer.concat([this.cache, ZEROES], 16));
      }

      this.ghash(fromArray([0, abl, 0, bl]));
      return this.state;
    };

    module.exports = GHASH;
  }, {
    "safe-buffer": 314
  }],
  63: [function (require, module, exports) {
    function incr32(iv) {
      var len = iv.length;
      var item;

      while (len--) {
        item = iv.readUInt8(len);

        if (item === 255) {
          iv.writeUInt8(0, len);
        } else {
          item++;
          iv.writeUInt8(item, len);
          break;
        }
      }
    }

    module.exports = incr32;
  }, {}],
  64: [function (require, module, exports) {
    var xor = require('buffer-xor');

    exports.encrypt = function (self, block) {
      var data = xor(block, self._prev);
      self._prev = self._cipher.encryptBlock(data);
      return self._prev;
    };

    exports.decrypt = function (self, block) {
      var pad = self._prev;
      self._prev = block;

      var out = self._cipher.decryptBlock(block);

      return xor(out, pad);
    };
  }, {
    "buffer-xor": 101
  }],
  65: [function (require, module, exports) {
    var Buffer = require('safe-buffer').Buffer;

    var xor = require('buffer-xor');

    function encryptStart(self, data, decrypt) {
      var len = data.length;
      var out = xor(data, self._cache);
      self._cache = self._cache.slice(len);
      self._prev = Buffer.concat([self._prev, decrypt ? data : out]);
      return out;
    }

    exports.encrypt = function (self, data, decrypt) {
      var out = Buffer.allocUnsafe(0);
      var len;

      while (data.length) {
        if (self._cache.length === 0) {
          self._cache = self._cipher.encryptBlock(self._prev);
          self._prev = Buffer.allocUnsafe(0);
        }

        if (self._cache.length <= data.length) {
          len = self._cache.length;
          out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
          data = data.slice(len);
        } else {
          out = Buffer.concat([out, encryptStart(self, data, decrypt)]);
          break;
        }
      }

      return out;
    };
  }, {
    "buffer-xor": 101,
    "safe-buffer": 314
  }],
  66: [function (require, module, exports) {
    var Buffer = require('safe-buffer').Buffer;

    function encryptByte(self, byteParam, decrypt) {
      var pad;
      var i = -1;
      var len = 8;
      var out = 0;
      var bit, value;

      while (++i < len) {
        pad = self._cipher.encryptBlock(self._prev);
        bit = byteParam & 1 << 7 - i ? 0x80 : 0;
        value = pad[0] ^ bit;
        out += (value & 0x80) >> i % 8;
        self._prev = shiftIn(self._prev, decrypt ? bit : value);
      }

      return out;
    }

    function shiftIn(buffer, value) {
      var len = buffer.length;
      var i = -1;
      var out = Buffer.allocUnsafe(buffer.length);
      buffer = Buffer.concat([buffer, Buffer.from([value])]);

      while (++i < len) {
        out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
      }

      return out;
    }

    exports.encrypt = function (self, chunk, decrypt) {
      var len = chunk.length;
      var out = Buffer.allocUnsafe(len);
      var i = -1;

      while (++i < len) {
        out[i] = encryptByte(self, chunk[i], decrypt);
      }

      return out;
    };
  }, {
    "safe-buffer": 314
  }],
  67: [function (require, module, exports) {
    var Buffer = require('safe-buffer').Buffer;

    function encryptByte(self, byteParam, decrypt) {
      var pad = self._cipher.encryptBlock(self._prev);

      var out = pad[0] ^ byteParam;
      self._prev = Buffer.concat([self._prev.slice(1), Buffer.from([decrypt ? byteParam : out])]);
      return out;
    }

    exports.encrypt = function (self, chunk, decrypt) {
      var len = chunk.length;
      var out = Buffer.allocUnsafe(len);
      var i = -1;

      while (++i < len) {
        out[i] = encryptByte(self, chunk[i], decrypt);
      }

      return out;
    };
  }, {
    "safe-buffer": 314
  }],
  68: [function (require, module, exports) {
    var xor = require('buffer-xor');

    var Buffer = require('safe-buffer').Buffer;

    var incr32 = require('../incr32');

    function getBlock(self) {
      var out = self._cipher.encryptBlockRaw(self._prev);

      incr32(self._prev);
      return out;
    }

    var blockSize = 16;

    exports.encrypt = function (self, chunk) {
      var chunkNum = Math.ceil(chunk.length / blockSize);
      var start = self._cache.length;
      self._cache = Buffer.concat([self._cache, Buffer.allocUnsafe(chunkNum * blockSize)]);

      for (var i = 0; i < chunkNum; i++) {
        var out = getBlock(self);
        var offset = start + i * blockSize;

        self._cache.writeUInt32BE(out[0], offset + 0);

        self._cache.writeUInt32BE(out[1], offset + 4);

        self._cache.writeUInt32BE(out[2], offset + 8);

        self._cache.writeUInt32BE(out[3], offset + 12);
      }

      var pad = self._cache.slice(0, chunk.length);

      self._cache = self._cache.slice(chunk.length);
      return xor(chunk, pad);
    };
  }, {
    "../incr32": 63,
    "buffer-xor": 101,
    "safe-buffer": 314
  }],
  69: [function (require, module, exports) {
    exports.encrypt = function (self, block) {
      return self._cipher.encryptBlock(block);
    };

    exports.decrypt = function (self, block) {
      return self._cipher.decryptBlock(block);
    };
  }, {}],
  70: [function (require, module, exports) {
    var modeModules = {
      ECB: require('./ecb'),
      CBC: require('./cbc'),
      CFB: require('./cfb'),
      CFB8: require('./cfb8'),
      CFB1: require('./cfb1'),
      OFB: require('./ofb'),
      CTR: require('./ctr'),
      GCM: require('./ctr')
    };

    var modes = require('./list.json');

    for (var key in modes) {
      modes[key].module = modeModules[modes[key].mode];
    }

    module.exports = modes;
  }, {
    "./cbc": 64,
    "./cfb": 65,
    "./cfb1": 66,
    "./cfb8": 67,
    "./ctr": 68,
    "./ecb": 69,
    "./list.json": 71,
    "./ofb": 72
  }],
  71: [function (require, module, exports) {
    module.exports = {
      "aes-128-ecb": {
        "cipher": "AES",
        "key": 128,
        "iv": 0,
        "mode": "ECB",
        "type": "block"
      },
      "aes-192-ecb": {
        "cipher": "AES",
        "key": 192,
        "iv": 0,
        "mode": "ECB",
        "type": "block"
      },
      "aes-256-ecb": {
        "cipher": "AES",
        "key": 256,
        "iv": 0,
        "mode": "ECB",
        "type": "block"
      },
      "aes-128-cbc": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes-192-cbc": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes-256-cbc": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes128": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes192": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes256": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes-128-cfb": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CFB",
        "type": "stream"
      },
      "aes-192-cfb": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CFB",
        "type": "stream"
      },
      "aes-256-cfb": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CFB",
        "type": "stream"
      },
      "aes-128-cfb8": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CFB8",
        "type": "stream"
      },
      "aes-192-cfb8": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CFB8",
        "type": "stream"
      },
      "aes-256-cfb8": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CFB8",
        "type": "stream"
      },
      "aes-128-cfb1": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CFB1",
        "type": "stream"
      },
      "aes-192-cfb1": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CFB1",
        "type": "stream"
      },
      "aes-256-cfb1": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CFB1",
        "type": "stream"
      },
      "aes-128-ofb": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "OFB",
        "type": "stream"
      },
      "aes-192-ofb": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "OFB",
        "type": "stream"
      },
      "aes-256-ofb": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "OFB",
        "type": "stream"
      },
      "aes-128-ctr": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CTR",
        "type": "stream"
      },
      "aes-192-ctr": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CTR",
        "type": "stream"
      },
      "aes-256-ctr": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CTR",
        "type": "stream"
      },
      "aes-128-gcm": {
        "cipher": "AES",
        "key": 128,
        "iv": 12,
        "mode": "GCM",
        "type": "auth"
      },
      "aes-192-gcm": {
        "cipher": "AES",
        "key": 192,
        "iv": 12,
        "mode": "GCM",
        "type": "auth"
      },
      "aes-256-gcm": {
        "cipher": "AES",
        "key": 256,
        "iv": 12,
        "mode": "GCM",
        "type": "auth"
      }
    };
  }, {}],
  72: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        var xor = require('buffer-xor');

        function getBlock(self) {
          self._prev = self._cipher.encryptBlock(self._prev);
          return self._prev;
        }

        exports.encrypt = function (self, chunk) {
          while (self._cache.length < chunk.length) {
            self._cache = Buffer.concat([self._cache, getBlock(self)]);
          }

          var pad = self._cache.slice(0, chunk.length);

          self._cache = self._cache.slice(chunk.length);
          return xor(chunk, pad);
        };
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "buffer": 102,
    "buffer-xor": 101
  }],
  73: [function (require, module, exports) {
    var aes = require('./aes');

    var Buffer = require('safe-buffer').Buffer;

    var Transform = require('cipher-base');

    var inherits = require('inherits');

    function StreamCipher(mode, key, iv, decrypt) {
      Transform.call(this);
      this._cipher = new aes.AES(key);
      this._prev = Buffer.from(iv);
      this._cache = Buffer.allocUnsafe(0);
      this._secCache = Buffer.allocUnsafe(0);
      this._decrypt = decrypt;
      this._mode = mode;
    }

    inherits(StreamCipher, Transform);

    StreamCipher.prototype._update = function (chunk) {
      return this._mode.encrypt(this, chunk, this._decrypt);
    };

    StreamCipher.prototype._final = function () {
      this._cipher.scrub();
    };

    module.exports = StreamCipher;
  }, {
    "./aes": 57,
    "cipher-base": 106,
    "inherits": 217,
    "safe-buffer": 314
  }],
  74: [function (require, module, exports) {
    var DES = require('browserify-des');

    var aes = require('browserify-aes/browser');

    var aesModes = require('browserify-aes/modes');

    var desModes = require('browserify-des/modes');

    var ebtk = require('evp_bytestokey');

    function createCipher(suite, password) {
      suite = suite.toLowerCase();
      var keyLen, ivLen;

      if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
      } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
      } else {
        throw new TypeError('invalid suite type');
      }

      var keys = ebtk(password, false, keyLen, ivLen);
      return createCipheriv(suite, keys.key, keys.iv);
    }

    function createDecipher(suite, password) {
      suite = suite.toLowerCase();
      var keyLen, ivLen;

      if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
      } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
      } else {
        throw new TypeError('invalid suite type');
      }

      var keys = ebtk(password, false, keyLen, ivLen);
      return createDecipheriv(suite, keys.key, keys.iv);
    }

    function createCipheriv(suite, key, iv) {
      suite = suite.toLowerCase();
      if (aesModes[suite]) return aes.createCipheriv(suite, key, iv);
      if (desModes[suite]) return new DES({
        key: key,
        iv: iv,
        mode: suite
      });
      throw new TypeError('invalid suite type');
    }

    function createDecipheriv(suite, key, iv) {
      suite = suite.toLowerCase();
      if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv);
      if (desModes[suite]) return new DES({
        key: key,
        iv: iv,
        mode: suite,
        decrypt: true
      });
      throw new TypeError('invalid suite type');
    }

    function getCiphers() {
      return Object.keys(desModes).concat(aes.getCiphers());
    }

    exports.createCipher = exports.Cipher = createCipher;
    exports.createCipheriv = exports.Cipheriv = createCipheriv;
    exports.createDecipher = exports.Decipher = createDecipher;
    exports.createDecipheriv = exports.Decipheriv = createDecipheriv;
    exports.listCiphers = exports.getCiphers = getCiphers;
  }, {
    "browserify-aes/browser": 59,
    "browserify-aes/modes": 70,
    "browserify-des": 75,
    "browserify-des/modes": 76,
    "evp_bytestokey": 176
  }],
  75: [function (require, module, exports) {
    var CipherBase = require('cipher-base');

    var des = require('des.js');

    var inherits = require('inherits');

    var Buffer = require('safe-buffer').Buffer;

    var modes = {
      'des-ede3-cbc': des.CBC.instantiate(des.EDE),
      'des-ede3': des.EDE,
      'des-ede-cbc': des.CBC.instantiate(des.EDE),
      'des-ede': des.EDE,
      'des-cbc': des.CBC.instantiate(des.DES),
      'des-ecb': des.DES
    };
    modes.des = modes['des-cbc'];
    modes.des3 = modes['des-ede3-cbc'];
    module.exports = DES;
    inherits(DES, CipherBase);

    function DES(opts) {
      CipherBase.call(this);
      var modeName = opts.mode.toLowerCase();
      var mode = modes[modeName];
      var type;

      if (opts.decrypt) {
        type = 'decrypt';
      } else {
        type = 'encrypt';
      }

      var key = opts.key;

      if (!Buffer.isBuffer(key)) {
        key = Buffer.from(key);
      }

      if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
        key = Buffer.concat([key, key.slice(0, 8)]);
      }

      var iv = opts.iv;

      if (!Buffer.isBuffer(iv)) {
        iv = Buffer.from(iv);
      }

      this._des = mode.create({
        key: key,
        iv: iv,
        type: type
      });
    }

    DES.prototype._update = function (data) {
      return Buffer.from(this._des.update(data));
    };

    DES.prototype._final = function () {
      return Buffer.from(this._des.final());
    };
  }, {
    "cipher-base": 106,
    "des.js": 128,
    "inherits": 217,
    "safe-buffer": 314
  }],
  76: [function (require, module, exports) {
    exports['des-ecb'] = {
      key: 8,
      iv: 0
    };
    exports['des-cbc'] = exports.des = {
      key: 8,
      iv: 8
    };
    exports['des-ede3-cbc'] = exports.des3 = {
      key: 24,
      iv: 8
    };
    exports['des-ede3'] = {
      key: 24,
      iv: 0
    };
    exports['des-ede-cbc'] = {
      key: 16,
      iv: 8
    };
    exports['des-ede'] = {
      key: 16,
      iv: 0
    };
  }, {}],
  77: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        var bn = require('bn.js');

        var randomBytes = require('randombytes');

        module.exports = crt;

        function blind(priv) {
          var r = getr(priv);
          var blinder = r.toRed(bn.mont(priv.modulus)).redPow(new bn(priv.publicExponent)).fromRed();
          return {
            blinder: blinder,
            unblinder: r.invm(priv.modulus)
          };
        }

        function crt(msg, priv) {
          var blinds = blind(priv);
          var len = priv.modulus.byteLength();
          var mod = bn.mont(priv.modulus);
          var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
          var c1 = blinded.toRed(bn.mont(priv.prime1));
          var c2 = blinded.toRed(bn.mont(priv.prime2));
          var qinv = priv.coefficient;
          var p = priv.prime1;
          var q = priv.prime2;
          var m1 = c1.redPow(priv.exponent1);
          var m2 = c2.redPow(priv.exponent2);
          m1 = m1.fromRed();
          m2 = m2.fromRed();
          var h = m1.isub(m2).imul(qinv).umod(p);
          h.imul(q);
          m2.iadd(h);
          return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
        }

        crt.getr = getr;

        function getr(priv) {
          var len = priv.modulus.byteLength();
          var r = new bn(randomBytes(len));

          while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
            r = new bn(randomBytes(len));
          }

          return r;
        }
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "bn.js": 54,
    "buffer": 102,
    "randombytes": 291
  }],
  78: [function (require, module, exports) {
    module.exports = require('./browser/algorithms.json');
  }, {
    "./browser/algorithms.json": 79
  }],
  79: [function (require, module, exports) {
    module.exports = {
      "sha224WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha224",
        "id": "302d300d06096086480165030402040500041c"
      },
      "RSA-SHA224": {
        "sign": "ecdsa/rsa",
        "hash": "sha224",
        "id": "302d300d06096086480165030402040500041c"
      },
      "sha256WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha256",
        "id": "3031300d060960864801650304020105000420"
      },
      "RSA-SHA256": {
        "sign": "ecdsa/rsa",
        "hash": "sha256",
        "id": "3031300d060960864801650304020105000420"
      },
      "sha384WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha384",
        "id": "3041300d060960864801650304020205000430"
      },
      "RSA-SHA384": {
        "sign": "ecdsa/rsa",
        "hash": "sha384",
        "id": "3041300d060960864801650304020205000430"
      },
      "sha512WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha512",
        "id": "3051300d060960864801650304020305000440"
      },
      "RSA-SHA512": {
        "sign": "ecdsa/rsa",
        "hash": "sha512",
        "id": "3051300d060960864801650304020305000440"
      },
      "RSA-SHA1": {
        "sign": "rsa",
        "hash": "sha1",
        "id": "3021300906052b0e03021a05000414"
      },
      "ecdsa-with-SHA1": {
        "sign": "ecdsa",
        "hash": "sha1",
        "id": ""
      },
      "sha256": {
        "sign": "ecdsa",
        "hash": "sha256",
        "id": ""
      },
      "sha224": {
        "sign": "ecdsa",
        "hash": "sha224",
        "id": ""
      },
      "sha384": {
        "sign": "ecdsa",
        "hash": "sha384",
        "id": ""
      },
      "sha512": {
        "sign": "ecdsa",
        "hash": "sha512",
        "id": ""
      },
      "DSA-SHA": {
        "sign": "dsa",
        "hash": "sha1",
        "id": ""
      },
      "DSA-SHA1": {
        "sign": "dsa",
        "hash": "sha1",
        "id": ""
      },
      "DSA": {
        "sign": "dsa",
        "hash": "sha1",
        "id": ""
      },
      "DSA-WITH-SHA224": {
        "sign": "dsa",
        "hash": "sha224",
        "id": ""
      },
      "DSA-SHA224": {
        "sign": "dsa",
        "hash": "sha224",
        "id": ""
      },
      "DSA-WITH-SHA256": {
        "sign": "dsa",
        "hash": "sha256",
        "id": ""
      },
      "DSA-SHA256": {
        "sign": "dsa",
        "hash": "sha256",
        "id": ""
      },
      "DSA-WITH-SHA384": {
        "sign": "dsa",
        "hash": "sha384",
        "id": ""
      },
      "DSA-SHA384": {
        "sign": "dsa",
        "hash": "sha384",
        "id": ""
      },
      "DSA-WITH-SHA512": {
        "sign": "dsa",
        "hash": "sha512",
        "id": ""
      },
      "DSA-SHA512": {
        "sign": "dsa",
        "hash": "sha512",
        "id": ""
      },
      "DSA-RIPEMD160": {
        "sign": "dsa",
        "hash": "rmd160",
        "id": ""
      },
      "ripemd160WithRSA": {
        "sign": "rsa",
        "hash": "rmd160",
        "id": "3021300906052b2403020105000414"
      },
      "RSA-RIPEMD160": {
        "sign": "rsa",
        "hash": "rmd160",
        "id": "3021300906052b2403020105000414"
      },
      "md5WithRSAEncryption": {
        "sign": "rsa",
        "hash": "md5",
        "id": "3020300c06082a864886f70d020505000410"
      },
      "RSA-MD5": {
        "sign": "rsa",
        "hash": "md5",
        "id": "3020300c06082a864886f70d020505000410"
      }
    };
  }, {}],
  80: [function (require, module, exports) {
    module.exports = {
      "1.3.132.0.10": "secp256k1",
      "1.3.132.0.33": "p224",
      "1.2.840.10045.3.1.1": "p192",
      "1.2.840.10045.3.1.7": "p256",
      "1.3.132.0.34": "p384",
      "1.3.132.0.35": "p521"
    };
  }, {}],
  81: [function (require, module, exports) {
    var Buffer = require('safe-buffer').Buffer;

    var createHash = require('create-hash');

    var stream = require('readable-stream');

    var inherits = require('inherits');

    var sign = require('./sign');

    var verify = require('./verify');

    var algorithms = require('./algorithms.json');

    Object.keys(algorithms).forEach(function (key) {
      algorithms[key].id = Buffer.from(algorithms[key].id, 'hex');
      algorithms[key.toLowerCase()] = algorithms[key];
    });

    function Sign(algorithm) {
      stream.Writable.call(this);
      var data = algorithms[algorithm];
      if (!data) throw new Error('Unknown message digest');
      this._hashType = data.hash;
      this._hash = createHash(data.hash);
      this._tag = data.id;
      this._signType = data.sign;
    }

    inherits(Sign, stream.Writable);

    Sign.prototype._write = function _write(data, _, done) {
      this._hash.update(data);

      done();
    };

    Sign.prototype.update = function update(data, enc) {
      if (typeof data === 'string') data = Buffer.from(data, enc);

      this._hash.update(data);

      return this;
    };

    Sign.prototype.sign = function signMethod(key, enc) {
      this.end();

      var hash = this._hash.digest();

      var sig = sign(hash, key, this._hashType, this._signType, this._tag);
      return enc ? sig.toString(enc) : sig;
    };

    function Verify(algorithm) {
      stream.Writable.call(this);
      var data = algorithms[algorithm];
      if (!data) throw new Error('Unknown message digest');
      this._hash = createHash(data.hash);
      this._tag = data.id;
      this._signType = data.sign;
    }

    inherits(Verify, stream.Writable);

    Verify.prototype._write = function _write(data, _, done) {
      this._hash.update(data);

      done();
    };

    Verify.prototype.update = function update(data, enc) {
      if (typeof data === 'string') data = Buffer.from(data, enc);

      this._hash.update(data);

      return this;
    };

    Verify.prototype.verify = function verifyMethod(key, sig, enc) {
      if (typeof sig === 'string') sig = Buffer.from(sig, enc);
      this.end();

      var hash = this._hash.digest();

      return verify(sig, hash, key, this._signType, this._tag);
    };

    function createSign(algorithm) {
      return new Sign(algorithm);
    }

    function createVerify(algorithm) {
      return new Verify(algorithm);
    }

    module.exports = {
      Sign: createSign,
      Verify: createVerify,
      createSign: createSign,
      createVerify: createVerify
    };
  }, {
    "./algorithms.json": 79,
    "./sign": 82,
    "./verify": 83,
    "create-hash": 116,
    "inherits": 217,
    "readable-stream": 99,
    "safe-buffer": 314
  }],
  82: [function (require, module, exports) {
    // much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
    var Buffer = require('safe-buffer').Buffer;

    var createHmac = require('create-hmac');

    var crt = require('browserify-rsa');

    var EC = require('elliptic').ec;

    var BN = require('bn.js');

    var parseKeys = require('parse-asn1');

    var curves = require('./curves.json');

    function sign(hash, key, hashType, signType, tag) {
      var priv = parseKeys(key);

      if (priv.curve) {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
        return ecSign(hash, priv);
      } else if (priv.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong private key type');
        return dsaSign(hash, priv, hashType);
      } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
      }

      hash = Buffer.concat([tag, hash]);
      var len = priv.modulus.byteLength();
      var pad = [0, 1];

      while (hash.length + pad.length + 1 < len) {
        pad.push(0xff);
      }

      pad.push(0x00);
      var i = -1;

      while (++i < hash.length) {
        pad.push(hash[i]);
      }

      var out = crt(pad, priv);
      return out;
    }

    function ecSign(hash, priv) {
      var curveId = curves[priv.curve.join('.')];
      if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'));
      var curve = new EC(curveId);
      var key = curve.keyFromPrivate(priv.privateKey);
      var out = key.sign(hash);
      return Buffer.from(out.toDER());
    }

    function dsaSign(hash, priv, algo) {
      var x = priv.params.priv_key;
      var p = priv.params.p;
      var q = priv.params.q;
      var g = priv.params.g;
      var r = new BN(0);
      var k;
      var H = bits2int(hash, q).mod(q);
      var s = false;
      var kv = getKey(x, q, hash, algo);

      while (s === false) {
        k = makeKey(q, kv, algo);
        r = makeR(g, k, p, q);
        s = k.invm(q).imul(H.add(x.mul(r))).mod(q);

        if (s.cmpn(0) === 0) {
          s = false;
          r = new BN(0);
        }
      }

      return toDER(r, s);
    }

    function toDER(r, s) {
      r = r.toArray();
      s = s.toArray(); // Pad values

      if (r[0] & 0x80) r = [0].concat(r);
      if (s[0] & 0x80) s = [0].concat(s);
      var total = r.length + s.length + 4;
      var res = [0x30, total, 0x02, r.length];
      res = res.concat(r, [0x02, s.length], s);
      return Buffer.from(res);
    }

    function getKey(x, q, hash, algo) {
      x = Buffer.from(x.toArray());

      if (x.length < q.byteLength()) {
        var zeros = Buffer.alloc(q.byteLength() - x.length);
        x = Buffer.concat([zeros, x]);
      }

      var hlen = hash.length;
      var hbits = bits2octets(hash, q);
      var v = Buffer.alloc(hlen);
      v.fill(1);
      var k = Buffer.alloc(hlen);
      k = createHmac(algo, k).update(v).update(Buffer.from([0])).update(x).update(hbits).digest();
      v = createHmac(algo, k).update(v).digest();
      k = createHmac(algo, k).update(v).update(Buffer.from([1])).update(x).update(hbits).digest();
      v = createHmac(algo, k).update(v).digest();
      return {
        k: k,
        v: v
      };
    }

    function bits2int(obits, q) {
      var bits = new BN(obits);
      var shift = (obits.length << 3) - q.bitLength();
      if (shift > 0) bits.ishrn(shift);
      return bits;
    }

    function bits2octets(bits, q) {
      bits = bits2int(bits, q);
      bits = bits.mod(q);
      var out = Buffer.from(bits.toArray());

      if (out.length < q.byteLength()) {
        var zeros = Buffer.alloc(q.byteLength() - out.length);
        out = Buffer.concat([zeros, out]);
      }

      return out;
    }

    function makeKey(q, kv, algo) {
      var t;
      var k;

      do {
        t = Buffer.alloc(0);

        while (t.length * 8 < q.bitLength()) {
          kv.v = createHmac(algo, kv.k).update(kv.v).digest();
          t = Buffer.concat([t, kv.v]);
        }

        k = bits2int(t, q);
        kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([0])).digest();
        kv.v = createHmac(algo, kv.k).update(kv.v).digest();
      } while (k.cmp(q) !== -1);

      return k;
    }

    function makeR(g, k, p, q) {
      return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);
    }

    module.exports = sign;
    module.exports.getKey = getKey;
    module.exports.makeKey = makeKey;
  }, {
    "./curves.json": 80,
    "bn.js": 84,
    "browserify-rsa": 77,
    "create-hmac": 118,
    "elliptic": 139,
    "parse-asn1": 265,
    "safe-buffer": 314
  }],
  83: [function (require, module, exports) {
    // much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
    var Buffer = require('safe-buffer').Buffer;

    var BN = require('bn.js');

    var EC = require('elliptic').ec;

    var parseKeys = require('parse-asn1');

    var curves = require('./curves.json');

    function verify(sig, hash, key, signType, tag) {
      var pub = parseKeys(key);

      if (pub.type === 'ec') {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
        return ecVerify(sig, hash, pub);
      } else if (pub.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong public key type');
        return dsaVerify(sig, hash, pub);
      } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
      }

      hash = Buffer.concat([tag, hash]);
      var len = pub.modulus.byteLength();
      var pad = [1];
      var padNum = 0;

      while (hash.length + pad.length + 2 < len) {
        pad.push(0xff);
        padNum++;
      }

      pad.push(0x00);
      var i = -1;

      while (++i < hash.length) {
        pad.push(hash[i]);
      }

      pad = Buffer.from(pad);
      var red = BN.mont(pub.modulus);
      sig = new BN(sig).toRed(red);
      sig = sig.redPow(new BN(pub.publicExponent));
      sig = Buffer.from(sig.fromRed().toArray());
      var out = padNum < 8 ? 1 : 0;
      len = Math.min(sig.length, pad.length);
      if (sig.length !== pad.length) out = 1;
      i = -1;

      while (++i < len) {
        out |= sig[i] ^ pad[i];
      }

      return out === 0;
    }

    function ecVerify(sig, hash, pub) {
      var curveId = curves[pub.data.algorithm.curve.join('.')];
      if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'));
      var curve = new EC(curveId);
      var pubkey = pub.data.subjectPrivateKey.data;
      return curve.verify(hash, sig, pubkey);
    }

    function dsaVerify(sig, hash, pub) {
      var p = pub.data.p;
      var q = pub.data.q;
      var g = pub.data.g;
      var y = pub.data.pub_key;
      var unpacked = parseKeys.signature.decode(sig, 'der');
      var s = unpacked.s;
      var r = unpacked.r;
      checkValue(s, q);
      checkValue(r, q);
      var montp = BN.mont(p);
      var w = s.invm(q);
      var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
      return v.cmp(r) === 0;
    }

    function checkValue(b, q) {
      if (b.cmpn(0) <= 0) throw new Error('invalid sig');
      if (b.cmp(q) >= q) throw new Error('invalid sig');
    }

    module.exports = verify;
  }, {
    "./curves.json": 80,
    "bn.js": 84,
    "elliptic": 139,
    "parse-asn1": 265,
    "safe-buffer": 314
  }],
  84: [function (require, module, exports) {
    (function (module, exports) {
      'use strict'; // Utils

      function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      } // Could use `inherits` module, but don't want to move from single file
      // architecture yet.


      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;

        var TempCtor = function TempCtor() {};

        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      } // BN


      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }

        this.negative = 0;
        this.words = null;
        this.length = 0; // Reduction context

        this.red = null;

        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }

          this._init(number || 0, base || 10, endian || 'be');
        }
      }

      if (_typeof2(module) === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }

      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer;

      try {
        Buffer = require('buffer').Buffer;
      } catch (e) {}

      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }

        return num !== null && _typeof2(num) === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };

      BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };

      BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };

      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }

        if (_typeof2(number) === 'object') {
          return this._initArray(number, base, endian);
        }

        if (base === 'hex') {
          base = 16;
        }

        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;

        if (number[0] === '-') {
          start++;
        }

        if (base === 16) {
          this._parseHex(number, start);
        } else {
          this._parseBase(number, base, start);
        }

        if (number[0] === '-') {
          this.negative = 1;
        }

        this._strip();

        if (endian !== 'le') return;

        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }

        if (number < 0x4000000) {
          this.words = [number & 0x3ffffff];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)

          this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
          this.length = 3;
        }

        if (endian !== 'le') return; // Reverse the bytes

        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');

        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }

        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);

        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        var off = 0;

        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;

            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;

            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }

        return this._strip();
      };

      function parseHex(str, start, end) {
        var r = 0;
        var len = Math.min(str.length, end);
        var z = 0;

        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r <<= 4;
          var b; // 'a' - 'f'

          if (c >= 49 && c <= 54) {
            b = c - 49 + 0xa; // 'A' - 'F'
          } else if (c >= 17 && c <= 22) {
            b = c - 17 + 0xa; // '0' - '9'
          } else {
            b = c;
          }

          r |= b;
          z |= b;
        }

        assert(!(z & 0xf0), 'Invalid character in ' + str);
        return r;
      }

      BN.prototype._parseHex = function _parseHex(number, start) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);

        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w; // Scan 24-bit chunks and add them to the number

        var off = 0;

        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
          w = parseHex(number, i, i + 6);
          this.words[j] |= w << off & 0x3ffffff; // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb

          this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
          off += 24;

          if (off >= 26) {
            off -= 26;
            j++;
          }
        }

        if (i + 6 !== start) {
          w = parseHex(number, start, i + 6);
          this.words[j] |= w << off & 0x3ffffff;
          this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
        }

        this._strip();
      };

      function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);

        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul; // 'a'

          if (c >= 49) {
            b = c - 49 + 0xa; // 'A'
          } else if (c >= 17) {
            b = c - 17 + 0xa; // '0' - '9'
          } else {
            b = c;
          }

          assert(c >= 0 && b < mul, 'Invalid character');
          r += b;
        }

        return r;
      }

      BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [0];
        this.length = 1; // Find length of limb in base

        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }

        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;

        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);

          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);

          for (i = 0; i < mod; i++) {
            pow *= base;
          }

          this.imuln(pow);

          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
      };

      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);

        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }

        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };

      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }

      BN.prototype._move = function _move(dest) {
        move(dest, this);
      };

      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };

      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }

        return this;
      }; // Remove leading `0` from `this`


      BN.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }

        return this._normSign();
      };

      BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }

        return this;
      }; // Check Symbol.for because not everywhere where Symbol defined
      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility


      if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
        try {
          BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
        } catch (e) {
          BN.prototype.inspect = inspect;
        }
      } else {
        BN.prototype.inspect = inspect;
      }

      function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      }
      /*
       var zeros = [];
      var groupSizes = [];
      var groupBases = [];
       var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }
       */


      var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
      var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
      var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];

      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;

        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;

          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 0xffffff).toString(16);
            carry = w >>> 24 - off & 0xffffff;

            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }

            off += 2;

            if (off >= 26) {
              off -= 26;
              i--;
            }
          }

          if (carry !== 0) {
            out = carry.toString(16) + out;
          }

          while (out.length % padding !== 0) {
            out = '0' + out;
          }

          if (this.negative !== 0) {
            out = '-' + out;
          }

          return out;
        }

        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base]; // var groupBase = Math.pow(base, groupSize);

          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;

          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);

            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }

          if (this.isZero()) {
            out = '0' + out;
          }

          while (out.length % padding !== 0) {
            out = '0' + out;
          }

          if (this.negative !== 0) {
            out = '-' + out;
          }

          return out;
        }

        assert(false, 'Base should be between 2 and 36');
      };

      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];

        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + this.words[1] * 0x4000000;
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }

        return this.negative !== 0 ? -ret : ret;
      };

      BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
      };

      if (Buffer) {
        BN.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }

      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };

      var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }

        return new ArrayType(size);
      };

      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();

        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
      };

      BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 0xff;

          if (position < res.length) {
            res[position++] = word >> 8 & 0xff;
          }

          if (position < res.length) {
            res[position++] = word >> 16 & 0xff;
          }

          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 0xff;
            }

            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position < res.length) {
          res[position++] = carry;

          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };

      BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 0xff;

          if (position >= 0) {
            res[position--] = word >> 8 & 0xff;
          }

          if (position >= 0) {
            res[position--] = word >> 16 & 0xff;
          }

          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 0xff;
            }

            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position >= 0) {
          res[position--] = carry;

          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };

      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;

          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }

          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }

          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }

          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }

          return r + t;
        };
      }

      BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;

        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }

        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }

        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }

        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }

        if ((t & 0x1) === 0) {
          r++;
        }

        return r;
      }; // Return number of used bits in a BN


      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];

        var hi = this._countBits(w);

        return (this.length - 1) * 26 + hi;
      };

      function toBitArray(num) {
        var w = new Array(num.bitLength());

        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 0x01;
        }

        return w;
      } // Number of trailing zero bits


      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;

        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);

          r += b;
          if (b !== 26) break;
        }

        return r;
      };

      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };

      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }

        return this.clone();
      };

      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }

        return this.clone();
      };

      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      }; // Return negative clone of `this`


      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };

      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }

        return this;
      }; // Or `num` with `this` in-place


      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }

        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }

        return this._strip();
      };

      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      }; // Or `num` with `this`


      BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };

      BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      }; // And `num` with `this` in-place


      BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;

        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }

        this.length = b.length;
        return this._strip();
      };

      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      }; // And `num` with `this`


      BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };

      BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      }; // Xor `num` with `this` in-place


      BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;

        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }

        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = a.length;
        return this._strip();
      };

      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      }; // Xor `num` with `this`


      BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };

      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      }; // Not ``this`` with ``width`` bitwidth


      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26; // Extend the buffer with leading zeroes

        this._expand(bytesNeeded);

        if (bitsLeft > 0) {
          bytesNeeded--;
        } // Handle complete words


        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        } // Handle the residue


        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        } // And remove leading zeroes


        return this._strip();
      };

      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      }; // Set `bit` of `this`


      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;

        this._expand(off + 1);

        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }

        return this._strip();
      }; // Add `num` to `this` in-place


      BN.prototype.iadd = function iadd(num) {
        var r; // negative + positive

        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign(); // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        } // a.length > b.length


        var a, b;

        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;

        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        this.length = a.length;

        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++; // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        return this;
      }; // Add `num` to `this`


      BN.prototype.add = function add(num) {
        var res;

        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }

        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      }; // Subtract `num` from `this` in-place


      BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign(); // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        } // At this point both numbers are positive


        var cmp = this.cmp(num); // Optimization - zeroify

        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        } // a > b


        var a, b;

        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;

        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }

        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        } // Copy rest of the words


        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = Math.max(this.length, i);

        if (a !== this) {
          this.negative = 1;
        }

        return this._strip();
      }; // Subtract `num` from `this`


      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };

      function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0; // Peel one iteration (compiler can't do it, because of code complexity)

        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;

        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);

          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 0x4000000 | 0;
            rword = r & 0x3ffffff;
          }

          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }

        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }

        return out._strip();
      } // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).


      var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */

        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */

        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */

        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */

        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */

        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */

        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */

        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */

        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */

        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */

        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */

        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */

        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */

        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */

        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */

        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */

        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */

        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */

        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */

        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;

        if (c !== 0) {
          o[19] = c;
          out.length++;
        }

        return out;
      }; // Polyfill comb


      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }

      function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;

        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);

          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 0x3ffffff;
            ncarry = ncarry + (r / 0x4000000 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 0x3ffffff;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }

          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }

        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }

        return out._strip();
      }

      function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
      }

      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;

        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }

        return res;
      }; // Cooley-Tukey algorithm for FFT
      // slightly revisited to rely on looping instead of recursion


      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }

      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;

        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }

        return t;
      }; // Returns binary-reversed representation of `x`


      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;

        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }

        return rb;
      }; // Performs "tweedling" phase, therefore 'emulating'
      // behaviour of the recursive algorithm


      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };

      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);

        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);

          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;

            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              /* jshint maxdepth : false */

              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };

      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;

        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }

        return 1 << i + 1 + odd;
      };

      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;

        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };

      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;

        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 0x3ffffff;

          if (w < 0x4000000) {
            carry = 0;
          } else {
            carry = w / 0x4000000 | 0;
          }
        }

        return ws;
      };

      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;

        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 0x1fff;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 0x1fff;
          carry = carry >>> 13;
        } // Pad with zeroes


        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }

        assert(carry === 0);
        assert((carry & ~0x1fff) === 0);
      };

      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);

        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }

        return ph;
      };

      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);

        var _ = this.stub(N);

        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);

        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }

        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      }; // Multiply `this` by `num`


      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      }; // Multiply employing FFT


      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      }; // In-place Multiplication


      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };

      BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === 'number');
        assert(num < 0x4000000); // Carry

        var carry = 0;

        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += w / 0x4000000 | 0; // NOTE: lo is 27bit maximum

          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      }; // `this` * `this`


      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      }; // `this` * `this` in-place


      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      }; // Math.pow(`this`, `num`)


      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1); // Skip leading zeroes

        var res = this;

        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }

        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
            res = res.mul(q);
          }
        }

        return res;
      }; // Shift-left in-place


      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;

        if (r !== 0) {
          var carry = 0;

          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }

          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }

        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }

          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }

          this.length += s;
        }

        return this._strip();
      };

      BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      }; // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits


      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;

        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }

        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h); // Extended mode, copy masked part

        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }

          maskedWords.length = s;
        }

        if (s === 0) {// No-op, we should not move anything at all
        } else if (this.length > s) {
          this.length -= s;

          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }

        var carry = 0;

        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        } // Push carried bits as a mask


        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }

        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }

        return this._strip();
      };

      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      }; // Shift-left


      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };

      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      }; // Shift-right


      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };

      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      }; // Test if n bit is set


      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r; // Fast case: bit is much higher than all existing words

        if (this.length <= s) return false; // Check bit and return

        var w = this.words[s];
        return !!(w & q);
      }; // Return only lowers bits of number (in-place)


      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');

        if (this.length <= s) {
          return this;
        }

        if (r !== 0) {
          s++;
        }

        this.length = Math.min(s, this.length);

        if (r !== 0) {
          var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
          this.words[this.length - 1] &= mask;
        }

        return this._strip();
      }; // Return only lowers bits of number


      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      }; // Add plain number `num` to `this`


      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num); // Possible sign change

        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }

          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        } // Add without checks


        return this._iaddn(num);
      };

      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num; // Carry

        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;

          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }

        this.length = Math.max(this.length, i + 1);
        return this;
      }; // Subtract plain number `num` from `this`


      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);

        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }

        this.words[0] -= num;

        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }

        return this._strip();
      };

      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };

      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };

      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };

      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };

      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;

        this._expand(len);

        var w;
        var carry = 0;

        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - (right / 0x4000000 | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }

        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }

        if (carry === 0) return this._strip(); // Subtraction overflow

        assert(carry === -1);
        carry = 0;

        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }

        this.negative = 1;
        return this._strip();
      };

      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num; // Normalize

        var bhi = b.words[b.length - 1] | 0;

        var bhiBits = this._countBits(bhi);

        shift = 26 - bhiBits;

        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        } // Initialize quotient


        var m = a.length - b.length;
        var q;

        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);

          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }

        var diff = a.clone()._ishlnsubmul(b, 1, m);

        if (diff.negative === 0) {
          a = diff;

          if (q) {
            q.words[m] = 1;
          }
        }

        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0); // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)

          qj = Math.min(qj / bhi | 0, 0x3ffffff);

          a._ishlnsubmul(b, qj, j);

          while (a.negative !== 0) {
            qj--;
            a.negative = 0;

            a._ishlnsubmul(b, 1, j);

            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }

          if (q) {
            q.words[j] = qj;
          }
        }

        if (q) {
          q._strip();
        }

        a._strip(); // Denormalize


        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }

        return {
          div: q || null,
          mod: a
        };
      }; // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested


      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());

        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }

        var div, mod, res;

        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          if (mode !== 'div') {
            mod = res.mod.neg();

            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }

          return {
            div: div,
            mod: mod
          };
        }

        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          return {
            div: div,
            mod: res.mod
          };
        }

        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);

          if (mode !== 'div') {
            mod = res.mod.neg();

            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }

          return {
            div: res.div,
            mod: mod
          };
        } // Both numbers are positive at this point
        // Strip both numbers to approximate shift value


        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        } // Very short reduction


        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }

          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modrn(num.words[0]))
            };
          }

          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modrn(num.words[0]))
          };
        }

        return this._wordDiv(num, mode);
      }; // Find `this` / `num`


      BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
      }; // Find `this` % `num`


      BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
      };

      BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
      }; // Find Round(`this` / `num`)


      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num); // Fast case - exact division

        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half); // Round down

        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div; // Round up

        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };

      BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;
        var acc = 0;

        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }

        return isNegNum ? -acc : acc;
      }; // WARNING: DEPRECATED


      BN.prototype.modn = function modn(num) {
        return this.modrn(num);
      }; // In-place division by number


      BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var carry = 0;

        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = w / num | 0;
          carry = w % num;
        }

        this._strip();

        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };

      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();

        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        } // A * x + B * y = x


        var A = new BN(1);
        var B = new BN(0); // C * x + D * y = y

        var C = new BN(0);
        var D = new BN(1);
        var g = 0;

        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }

        var yp = y.clone();
        var xp = x.clone();

        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
            ;
          }

          if (i > 0) {
            x.iushrn(i);

            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }

              A.iushrn(1);
              B.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
            ;
          }

          if (j > 0) {
            y.iushrn(j);

            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }

              C.iushrn(1);
              D.iushrn(1);
            }
          }

          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }

        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      }; // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed


      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();

        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }

        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();

        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
            ;
          }

          if (i > 0) {
            a.iushrn(i);

            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }

              x1.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
            ;
          }

          if (j > 0) {
            b.iushrn(j);

            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }

              x2.iushrn(1);
            }
          }

          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }

        var res;

        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }

        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }

        return res;
      };

      BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0; // Remove common factor of two

        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }

        do {
          while (a.isEven()) {
            a.iushrn(1);
          }

          while (b.isEven()) {
            b.iushrn(1);
          }

          var r = a.cmp(b);

          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }

          a.isub(b);
        } while (true);

        return b.iushln(shift);
      }; // Invert number in the field F(num)


      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };

      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };

      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      }; // And first word and num


      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      }; // Increment at the bit position in-line


      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r; // Fast case: bit is much higher than all existing words

        if (this.length <= s) {
          this._expand(s + 1);

          this.words[s] |= q;
          return this;
        } // Add bit and propagate, if needed


        var carry = q;

        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return this;
      };

      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };

      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;

        this._strip();

        var res;

        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }

          assert(num <= 0x3ffffff, 'Number is too big');
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }

        if (this.negative !== 0) return -res | 0;
        return res;
      }; // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`


      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      }; // Unsigned comparison


      BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;

        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b) continue;

          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }

          break;
        }

        return res;
      };

      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };

      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };

      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };

      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };

      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };

      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };

      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };

      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };

      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };

      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      }; //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //


      BN.red = function red(num) {
        return new Red(num);
      };

      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };

      BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };

      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };

      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };

      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };

      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };

      BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };

      BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };

      BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };

      BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');

        this.red._verify2(this, num);

        return this.red.mul(this, num);
      };

      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');

        this.red._verify2(this, num);

        return this.red.imul(this, num);
      };

      BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');

        this.red._verify1(this);

        return this.red.sqr(this);
      };

      BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');

        this.red._verify1(this);

        return this.red.isqr(this);
      }; // Square root over p


      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');

        this.red._verify1(this);

        return this.red.sqrt(this);
      };

      BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');

        this.red._verify1(this);

        return this.red.invm(this);
      }; // Return negative clone of `this` % `red modulo`


      BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');

        this.red._verify1(this);

        return this.red.neg(this);
      };

      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');

        this.red._verify1(this);

        return this.red.pow(this, num);
      }; // Prime numbers with efficient reduction


      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      }; // Pseudo-Mersenne prime

      function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }

      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };

      MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;

        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);

        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);

        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== undefined) {
            // r is a BN v4 instance
            r.strip();
          } else {
            // r is a BN v5 instance
            r._strip();
          }
        }

        return r;
      };

      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };

      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };

      function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }

      inherits(K256, MPrime);

      K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);

        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }

        output.length = outLen;

        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        } // Shift by 9 limbs


        var prev = input.words[9];
        output.words[output.length++] = prev & mask;

        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }

        prev >>>= 22;
        input.words[i - 10] = prev;

        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };

      K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2; // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390

        var lo = 0;

        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + (lo / 0x4000000 | 0);
        } // Fast length reduction


        if (num.words[num.length - 1] === 0) {
          num.length--;

          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }

        return num;
      };

      function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }

      inherits(P224, MPrime);

      function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }

      inherits(P192, MPrime);

      function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }

      inherits(P25519, MPrime);

      P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;

        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }

        if (carry !== 0) {
          num.words[num.length++] = carry;
        }

        return num;
      }; // Exported mostly for testing purposes, use plain name instead


      BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;

        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }

        primes[name] = prime;
        return prime;
      }; //
      // Base reduction engine
      //


      function Red(m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);

          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }

      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };

      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
      };

      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };

      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }

        return this.m.sub(a)._forceRed(this);
      };

      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);

        var res = a.add(b);

        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }

        return res._forceRed(this);
      };

      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);

        var res = a.iadd(b);

        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }

        return res;
      };

      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);

        var res = a.sub(b);

        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);

        var res = a.isub(b);

        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }

        return res;
      };

      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);

        return this.imod(a.ushln(num));
      };

      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);

        return this.imod(a.imul(b));
      };

      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);

        return this.imod(a.mul(b));
      };

      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };

      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };

      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1); // Fast case

        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        } // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)


        var q = this.m.subn(1);
        var s = 0;

        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }

        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg(); // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.

        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);

        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }

        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;

        while (t.cmp(one) !== 0) {
          var tmp = t;

          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }

          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }

        return r;
      };

      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);

        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };

      Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;

        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }

        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;

        if (start === 0) {
          start = 26;
        }

        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];

          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;

            if (res !== wnd[0]) {
              res = this.sqr(res);
            }

            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }

            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }

          start = 26;
        }

        return res;
      };

      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };

      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      }; //
      // Montgomery method engine
      //


      BN.mont = function mont(num) {
        return new Mont(num);
      };

      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();

        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }

        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }

      inherits(Mont, Red);

      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };

      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };

      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }

        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === 'undefined' || module, this);
  }, {
    "buffer": 56
  }],
  85: [function (require, module, exports) {
    arguments[4][7][0].apply(exports, arguments);
  }, {
    "dup": 7
  }],
  86: [function (require, module, exports) {
    arguments[4][8][0].apply(exports, arguments);
  }, {
    "./_stream_readable": 88,
    "./_stream_writable": 90,
    "_process": 276,
    "dup": 8,
    "inherits": 217
  }],
  87: [function (require, module, exports) {
    arguments[4][9][0].apply(exports, arguments);
  }, {
    "./_stream_transform": 89,
    "dup": 9,
    "inherits": 217
  }],
  88: [function (require, module, exports) {
    arguments[4][10][0].apply(exports, arguments);
  }, {
    "../errors": 85,
    "./_stream_duplex": 86,
    "./internal/streams/async_iterator": 91,
    "./internal/streams/buffer_list": 92,
    "./internal/streams/destroy": 93,
    "./internal/streams/from": 95,
    "./internal/streams/state": 97,
    "./internal/streams/stream": 98,
    "_process": 276,
    "buffer": 102,
    "dup": 10,
    "events": 175,
    "inherits": 217,
    "string_decoder/": 364,
    "util": 56
  }],
  89: [function (require, module, exports) {
    arguments[4][11][0].apply(exports, arguments);
  }, {
    "../errors": 85,
    "./_stream_duplex": 86,
    "dup": 11,
    "inherits": 217
  }],
  90: [function (require, module, exports) {
    arguments[4][12][0].apply(exports, arguments);
  }, {
    "../errors": 85,
    "./_stream_duplex": 86,
    "./internal/streams/destroy": 93,
    "./internal/streams/state": 97,
    "./internal/streams/stream": 98,
    "_process": 276,
    "buffer": 102,
    "dup": 12,
    "inherits": 217,
    "util-deprecate": 400
  }],
  91: [function (require, module, exports) {
    arguments[4][13][0].apply(exports, arguments);
  }, {
    "./end-of-stream": 94,
    "_process": 276,
    "dup": 13
  }],
  92: [function (require, module, exports) {
    arguments[4][14][0].apply(exports, arguments);
  }, {
    "buffer": 102,
    "dup": 14,
    "util": 56
  }],
  93: [function (require, module, exports) {
    arguments[4][15][0].apply(exports, arguments);
  }, {
    "_process": 276,
    "dup": 15
  }],
  94: [function (require, module, exports) {
    arguments[4][16][0].apply(exports, arguments);
  }, {
    "../../../errors": 85,
    "dup": 16
  }],
  95: [function (require, module, exports) {
    arguments[4][17][0].apply(exports, arguments);
  }, {
    "dup": 17
  }],
  96: [function (require, module, exports) {
    arguments[4][18][0].apply(exports, arguments);
  }, {
    "../../../errors": 85,
    "./end-of-stream": 94,
    "dup": 18
  }],
  97: [function (require, module, exports) {
    arguments[4][19][0].apply(exports, arguments);
  }, {
    "../../../errors": 85,
    "dup": 19
  }],
  98: [function (require, module, exports) {
    arguments[4][20][0].apply(exports, arguments);
  }, {
    "dup": 20,
    "events": 175
  }],
  99: [function (require, module, exports) {
    arguments[4][21][0].apply(exports, arguments);
  }, {
    "./lib/_stream_duplex.js": 86,
    "./lib/_stream_passthrough.js": 87,
    "./lib/_stream_readable.js": 88,
    "./lib/_stream_transform.js": 89,
    "./lib/_stream_writable.js": 90,
    "./lib/internal/streams/end-of-stream.js": 94,
    "./lib/internal/streams/pipeline.js": 96,
    "dup": 21
  }],
  100: [function (require, module, exports) {
    arguments[4][56][0].apply(exports, arguments);
  }, {
    "dup": 56
  }],
  101: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        module.exports = function xor(a, b) {
          var length = Math.min(a.length, b.length);
          var buffer = new Buffer(length);

          for (var i = 0; i < length; ++i) {
            buffer[i] = a[i] ^ b[i];
          }

          return buffer;
        };
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "buffer": 102
  }],
  102: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        /*!
         * The buffer module from node.js, for the browser.
         *
         * @author   Feross Aboukhadijeh <https://feross.org>
         * @license  MIT
         */

        /* eslint-disable no-proto */
        'use strict';

        var base64 = require('base64-js');

        var ieee754 = require('ieee754');

        exports.Buffer = Buffer;
        exports.SlowBuffer = SlowBuffer;
        exports.INSPECT_MAX_BYTES = 50;
        var K_MAX_LENGTH = 0x7fffffff;
        exports.kMaxLength = K_MAX_LENGTH;
        /**
         * If `Buffer.TYPED_ARRAY_SUPPORT`:
         *   === true    Use Uint8Array implementation (fastest)
         *   === false   Print warning and recommend using `buffer` v4.x which has an Object
         *               implementation (most compatible, even IE6)
         *
         * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
         * Opera 11.6+, iOS 4.2+.
         *
         * We report that the browser does not support typed arrays if the are not subclassable
         * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
         * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
         * for __proto__ and has a buggy typed array implementation.
         */

        Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

        if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
          console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
        }

        function typedArraySupport() {
          // Can typed array instances can be augmented?
          try {
            var arr = new Uint8Array(1);
            arr.__proto__ = {
              __proto__: Uint8Array.prototype,
              foo: function foo() {
                return 42;
              }
            };
            return arr.foo() === 42;
          } catch (e) {
            return false;
          }
        }

        Object.defineProperty(Buffer.prototype, 'parent', {
          enumerable: true,
          get: function get() {
            if (!Buffer.isBuffer(this)) return undefined;
            return this.buffer;
          }
        });
        Object.defineProperty(Buffer.prototype, 'offset', {
          enumerable: true,
          get: function get() {
            if (!Buffer.isBuffer(this)) return undefined;
            return this.byteOffset;
          }
        });

        function createBuffer(length) {
          if (length > K_MAX_LENGTH) {
            throw new RangeError('The value "' + length + '" is invalid for option "size"');
          } // Return an augmented `Uint8Array` instance


          var buf = new Uint8Array(length);
          buf.__proto__ = Buffer.prototype;
          return buf;
        }
        /**
         * The Buffer constructor returns instances of `Uint8Array` that have their
         * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
         * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
         * and the `Uint8Array` methods. Square bracket notation works as expected -- it
         * returns a single octet.
         *
         * The `Uint8Array` prototype remains unmodified.
         */


        function Buffer(arg, encodingOrOffset, length) {
          // Common case.
          if (typeof arg === 'number') {
            if (typeof encodingOrOffset === 'string') {
              throw new TypeError('The "string" argument must be of type string. Received type number');
            }

            return allocUnsafe(arg);
          }

          return from(arg, encodingOrOffset, length);
        } // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97


        if (typeof Symbol !== 'undefined' && Symbol.species != null && Buffer[Symbol.species] === Buffer) {
          Object.defineProperty(Buffer, Symbol.species, {
            value: null,
            configurable: true,
            enumerable: false,
            writable: false
          });
        }

        Buffer.poolSize = 8192; // not used by this implementation

        function from(value, encodingOrOffset, length) {
          if (typeof value === 'string') {
            return fromString(value, encodingOrOffset);
          }

          if (ArrayBuffer.isView(value)) {
            return fromArrayLike(value);
          }

          if (value == null) {
            throw TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + _typeof2(value));
          }

          if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
            return fromArrayBuffer(value, encodingOrOffset, length);
          }

          if (typeof value === 'number') {
            throw new TypeError('The "value" argument must not be of type number. Received type number');
          }

          var valueOf = value.valueOf && value.valueOf();

          if (valueOf != null && valueOf !== value) {
            return Buffer.from(valueOf, encodingOrOffset, length);
          }

          var b = fromObject(value);
          if (b) return b;

          if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {
            return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
          }

          throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + _typeof2(value));
        }
        /**
         * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
         * if value is a number.
         * Buffer.from(str[, encoding])
         * Buffer.from(array)
         * Buffer.from(buffer)
         * Buffer.from(arrayBuffer[, byteOffset[, length]])
         **/


        Buffer.from = function (value, encodingOrOffset, length) {
          return from(value, encodingOrOffset, length);
        }; // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
        // https://github.com/feross/buffer/pull/148


        Buffer.prototype.__proto__ = Uint8Array.prototype;
        Buffer.__proto__ = Uint8Array;

        function assertSize(size) {
          if (typeof size !== 'number') {
            throw new TypeError('"size" argument must be of type number');
          } else if (size < 0) {
            throw new RangeError('The value "' + size + '" is invalid for option "size"');
          }
        }

        function alloc(size, fill, encoding) {
          assertSize(size);

          if (size <= 0) {
            return createBuffer(size);
          }

          if (fill !== undefined) {
            // Only pay attention to encoding if it's a string. This
            // prevents accidentally sending in a number that would
            // be interpretted as a start offset.
            return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
          }

          return createBuffer(size);
        }
        /**
         * Creates a new filled Buffer instance.
         * alloc(size[, fill[, encoding]])
         **/


        Buffer.alloc = function (size, fill, encoding) {
          return alloc(size, fill, encoding);
        };

        function allocUnsafe(size) {
          assertSize(size);
          return createBuffer(size < 0 ? 0 : checked(size) | 0);
        }
        /**
         * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
         * */


        Buffer.allocUnsafe = function (size) {
          return allocUnsafe(size);
        };
        /**
         * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
         */


        Buffer.allocUnsafeSlow = function (size) {
          return allocUnsafe(size);
        };

        function fromString(string, encoding) {
          if (typeof encoding !== 'string' || encoding === '') {
            encoding = 'utf8';
          }

          if (!Buffer.isEncoding(encoding)) {
            throw new TypeError('Unknown encoding: ' + encoding);
          }

          var length = byteLength(string, encoding) | 0;
          var buf = createBuffer(length);
          var actual = buf.write(string, encoding);

          if (actual !== length) {
            // Writing a hex string, for example, that contains invalid characters will
            // cause everything after the first invalid character to be ignored. (e.g.
            // 'abxxcd' will be treated as 'ab')
            buf = buf.slice(0, actual);
          }

          return buf;
        }

        function fromArrayLike(array) {
          var length = array.length < 0 ? 0 : checked(array.length) | 0;
          var buf = createBuffer(length);

          for (var i = 0; i < length; i += 1) {
            buf[i] = array[i] & 255;
          }

          return buf;
        }

        function fromArrayBuffer(array, byteOffset, length) {
          if (byteOffset < 0 || array.byteLength < byteOffset) {
            throw new RangeError('"offset" is outside of buffer bounds');
          }

          if (array.byteLength < byteOffset + (length || 0)) {
            throw new RangeError('"length" is outside of buffer bounds');
          }

          var buf;

          if (byteOffset === undefined && length === undefined) {
            buf = new Uint8Array(array);
          } else if (length === undefined) {
            buf = new Uint8Array(array, byteOffset);
          } else {
            buf = new Uint8Array(array, byteOffset, length);
          } // Return an augmented `Uint8Array` instance


          buf.__proto__ = Buffer.prototype;
          return buf;
        }

        function fromObject(obj) {
          if (Buffer.isBuffer(obj)) {
            var len = checked(obj.length) | 0;
            var buf = createBuffer(len);

            if (buf.length === 0) {
              return buf;
            }

            obj.copy(buf, 0, 0, len);
            return buf;
          }

          if (obj.length !== undefined) {
            if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
              return createBuffer(0);
            }

            return fromArrayLike(obj);
          }

          if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
            return fromArrayLike(obj.data);
          }
        }

        function checked(length) {
          // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
          // length is NaN (which is otherwise coerced to zero.)
          if (length >= K_MAX_LENGTH) {
            throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
          }

          return length | 0;
        }

        function SlowBuffer(length) {
          if (+length != length) {
            // eslint-disable-line eqeqeq
            length = 0;
          }

          return Buffer.alloc(+length);
        }

        Buffer.isBuffer = function isBuffer(b) {
          return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
        };

        Buffer.compare = function compare(a, b) {
          if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
          if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);

          if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
            throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
          }

          if (a === b) return 0;
          var x = a.length;
          var y = b.length;

          for (var i = 0, len = Math.min(x, y); i < len; ++i) {
            if (a[i] !== b[i]) {
              x = a[i];
              y = b[i];
              break;
            }
          }

          if (x < y) return -1;
          if (y < x) return 1;
          return 0;
        };

        Buffer.isEncoding = function isEncoding(encoding) {
          switch (String(encoding).toLowerCase()) {
            case 'hex':
            case 'utf8':
            case 'utf-8':
            case 'ascii':
            case 'latin1':
            case 'binary':
            case 'base64':
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return true;

            default:
              return false;
          }
        };

        Buffer.concat = function concat(list, length) {
          if (!Array.isArray(list)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          }

          if (list.length === 0) {
            return Buffer.alloc(0);
          }

          var i;

          if (length === undefined) {
            length = 0;

            for (i = 0; i < list.length; ++i) {
              length += list[i].length;
            }
          }

          var buffer = Buffer.allocUnsafe(length);
          var pos = 0;

          for (i = 0; i < list.length; ++i) {
            var buf = list[i];

            if (isInstance(buf, Uint8Array)) {
              buf = Buffer.from(buf);
            }

            if (!Buffer.isBuffer(buf)) {
              throw new TypeError('"list" argument must be an Array of Buffers');
            }

            buf.copy(buffer, pos);
            pos += buf.length;
          }

          return buffer;
        };

        function byteLength(string, encoding) {
          if (Buffer.isBuffer(string)) {
            return string.length;
          }

          if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
            return string.byteLength;
          }

          if (typeof string !== 'string') {
            throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + _typeof2(string));
          }

          var len = string.length;
          var mustMatch = arguments.length > 2 && arguments[2] === true;
          if (!mustMatch && len === 0) return 0; // Use a for loop to avoid recursion

          var loweredCase = false;

          for (;;) {
            switch (encoding) {
              case 'ascii':
              case 'latin1':
              case 'binary':
                return len;

              case 'utf8':
              case 'utf-8':
                return utf8ToBytes(string).length;

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return len * 2;

              case 'hex':
                return len >>> 1;

              case 'base64':
                return base64ToBytes(string).length;

              default:
                if (loweredCase) {
                  return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
                }

                encoding = ('' + encoding).toLowerCase();
                loweredCase = true;
            }
          }
        }

        Buffer.byteLength = byteLength;

        function slowToString(encoding, start, end) {
          var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
          // property of a typed array.
          // This behaves neither like String nor Uint8Array in that we set start/end
          // to their upper/lower bounds if the value passed is out of range.
          // undefined is handled specially as per ECMA-262 6th Edition,
          // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

          if (start === undefined || start < 0) {
            start = 0;
          } // Return early if start > this.length. Done here to prevent potential uint32
          // coercion fail below.


          if (start > this.length) {
            return '';
          }

          if (end === undefined || end > this.length) {
            end = this.length;
          }

          if (end <= 0) {
            return '';
          } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


          end >>>= 0;
          start >>>= 0;

          if (end <= start) {
            return '';
          }

          if (!encoding) encoding = 'utf8';

          while (true) {
            switch (encoding) {
              case 'hex':
                return hexSlice(this, start, end);

              case 'utf8':
              case 'utf-8':
                return utf8Slice(this, start, end);

              case 'ascii':
                return asciiSlice(this, start, end);

              case 'latin1':
              case 'binary':
                return latin1Slice(this, start, end);

              case 'base64':
                return base64Slice(this, start, end);

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return utf16leSlice(this, start, end);

              default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                encoding = (encoding + '').toLowerCase();
                loweredCase = true;
            }
          }
        } // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
        // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
        // reliably in a browserify context because there could be multiple different
        // copies of the 'buffer' package in use. This method works even for Buffer
        // instances that were created from another copy of the `buffer` package.
        // See: https://github.com/feross/buffer/issues/154


        Buffer.prototype._isBuffer = true;

        function swap(b, n, m) {
          var i = b[n];
          b[n] = b[m];
          b[m] = i;
        }

        Buffer.prototype.swap16 = function swap16() {
          var len = this.length;

          if (len % 2 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 16-bits');
          }

          for (var i = 0; i < len; i += 2) {
            swap(this, i, i + 1);
          }

          return this;
        };

        Buffer.prototype.swap32 = function swap32() {
          var len = this.length;

          if (len % 4 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 32-bits');
          }

          for (var i = 0; i < len; i += 4) {
            swap(this, i, i + 3);
            swap(this, i + 1, i + 2);
          }

          return this;
        };

        Buffer.prototype.swap64 = function swap64() {
          var len = this.length;

          if (len % 8 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 64-bits');
          }

          for (var i = 0; i < len; i += 8) {
            swap(this, i, i + 7);
            swap(this, i + 1, i + 6);
            swap(this, i + 2, i + 5);
            swap(this, i + 3, i + 4);
          }

          return this;
        };

        Buffer.prototype.toString = function toString() {
          var length = this.length;
          if (length === 0) return '';
          if (arguments.length === 0) return utf8Slice(this, 0, length);
          return slowToString.apply(this, arguments);
        };

        Buffer.prototype.toLocaleString = Buffer.prototype.toString;

        Buffer.prototype.equals = function equals(b) {
          if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
          if (this === b) return true;
          return Buffer.compare(this, b) === 0;
        };

        Buffer.prototype.inspect = function inspect() {
          var str = '';
          var max = exports.INSPECT_MAX_BYTES;
          str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
          if (this.length > max) str += ' ... ';
          return '<Buffer ' + str + '>';
        };

        Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
          if (isInstance(target, Uint8Array)) {
            target = Buffer.from(target, target.offset, target.byteLength);
          }

          if (!Buffer.isBuffer(target)) {
            throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + _typeof2(target));
          }

          if (start === undefined) {
            start = 0;
          }

          if (end === undefined) {
            end = target ? target.length : 0;
          }

          if (thisStart === undefined) {
            thisStart = 0;
          }

          if (thisEnd === undefined) {
            thisEnd = this.length;
          }

          if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
            throw new RangeError('out of range index');
          }

          if (thisStart >= thisEnd && start >= end) {
            return 0;
          }

          if (thisStart >= thisEnd) {
            return -1;
          }

          if (start >= end) {
            return 1;
          }

          start >>>= 0;
          end >>>= 0;
          thisStart >>>= 0;
          thisEnd >>>= 0;
          if (this === target) return 0;
          var x = thisEnd - thisStart;
          var y = end - start;
          var len = Math.min(x, y);
          var thisCopy = this.slice(thisStart, thisEnd);
          var targetCopy = target.slice(start, end);

          for (var i = 0; i < len; ++i) {
            if (thisCopy[i] !== targetCopy[i]) {
              x = thisCopy[i];
              y = targetCopy[i];
              break;
            }
          }

          if (x < y) return -1;
          if (y < x) return 1;
          return 0;
        }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
        // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
        //
        // Arguments:
        // - buffer - a Buffer to search
        // - val - a string, Buffer, or number
        // - byteOffset - an index into `buffer`; will be clamped to an int32
        // - encoding - an optional encoding, relevant is val is a string
        // - dir - true for indexOf, false for lastIndexOf


        function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
          // Empty buffer means no match
          if (buffer.length === 0) return -1; // Normalize byteOffset

          if (typeof byteOffset === 'string') {
            encoding = byteOffset;
            byteOffset = 0;
          } else if (byteOffset > 0x7fffffff) {
            byteOffset = 0x7fffffff;
          } else if (byteOffset < -0x80000000) {
            byteOffset = -0x80000000;
          }

          byteOffset = +byteOffset; // Coerce to Number.

          if (numberIsNaN(byteOffset)) {
            // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
            byteOffset = dir ? 0 : buffer.length - 1;
          } // Normalize byteOffset: negative offsets start from the end of the buffer


          if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

          if (byteOffset >= buffer.length) {
            if (dir) return -1;else byteOffset = buffer.length - 1;
          } else if (byteOffset < 0) {
            if (dir) byteOffset = 0;else return -1;
          } // Normalize val


          if (typeof val === 'string') {
            val = Buffer.from(val, encoding);
          } // Finally, search either indexOf (if dir is true) or lastIndexOf


          if (Buffer.isBuffer(val)) {
            // Special case: looking for empty string/buffer always fails
            if (val.length === 0) {
              return -1;
            }

            return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
          } else if (typeof val === 'number') {
            val = val & 0xFF; // Search for a byte value [0-255]

            if (typeof Uint8Array.prototype.indexOf === 'function') {
              if (dir) {
                return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
              } else {
                return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
              }
            }

            return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
          }

          throw new TypeError('val must be string, number or Buffer');
        }

        function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
          var indexSize = 1;
          var arrLength = arr.length;
          var valLength = val.length;

          if (encoding !== undefined) {
            encoding = String(encoding).toLowerCase();

            if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
              if (arr.length < 2 || val.length < 2) {
                return -1;
              }

              indexSize = 2;
              arrLength /= 2;
              valLength /= 2;
              byteOffset /= 2;
            }
          }

          function read(buf, i) {
            if (indexSize === 1) {
              return buf[i];
            } else {
              return buf.readUInt16BE(i * indexSize);
            }
          }

          var i;

          if (dir) {
            var foundIndex = -1;

            for (i = byteOffset; i < arrLength; i++) {
              if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                if (foundIndex === -1) foundIndex = i;
                if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
              } else {
                if (foundIndex !== -1) i -= i - foundIndex;
                foundIndex = -1;
              }
            }
          } else {
            if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

            for (i = byteOffset; i >= 0; i--) {
              var found = true;

              for (var j = 0; j < valLength; j++) {
                if (read(arr, i + j) !== read(val, j)) {
                  found = false;
                  break;
                }
              }

              if (found) return i;
            }
          }

          return -1;
        }

        Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
          return this.indexOf(val, byteOffset, encoding) !== -1;
        };

        Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
        };

        Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
        };

        function hexWrite(buf, string, offset, length) {
          offset = Number(offset) || 0;
          var remaining = buf.length - offset;

          if (!length) {
            length = remaining;
          } else {
            length = Number(length);

            if (length > remaining) {
              length = remaining;
            }
          }

          var strLen = string.length;

          if (length > strLen / 2) {
            length = strLen / 2;
          }

          for (var i = 0; i < length; ++i) {
            var parsed = parseInt(string.substr(i * 2, 2), 16);
            if (numberIsNaN(parsed)) return i;
            buf[offset + i] = parsed;
          }

          return i;
        }

        function utf8Write(buf, string, offset, length) {
          return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
        }

        function asciiWrite(buf, string, offset, length) {
          return blitBuffer(asciiToBytes(string), buf, offset, length);
        }

        function latin1Write(buf, string, offset, length) {
          return asciiWrite(buf, string, offset, length);
        }

        function base64Write(buf, string, offset, length) {
          return blitBuffer(base64ToBytes(string), buf, offset, length);
        }

        function ucs2Write(buf, string, offset, length) {
          return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
        }

        Buffer.prototype.write = function write(string, offset, length, encoding) {
          // Buffer#write(string)
          if (offset === undefined) {
            encoding = 'utf8';
            length = this.length;
            offset = 0; // Buffer#write(string, encoding)
          } else if (length === undefined && typeof offset === 'string') {
            encoding = offset;
            length = this.length;
            offset = 0; // Buffer#write(string, offset[, length][, encoding])
          } else if (isFinite(offset)) {
            offset = offset >>> 0;

            if (isFinite(length)) {
              length = length >>> 0;
              if (encoding === undefined) encoding = 'utf8';
            } else {
              encoding = length;
              length = undefined;
            }
          } else {
            throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
          }

          var remaining = this.length - offset;
          if (length === undefined || length > remaining) length = remaining;

          if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
            throw new RangeError('Attempt to write outside buffer bounds');
          }

          if (!encoding) encoding = 'utf8';
          var loweredCase = false;

          for (;;) {
            switch (encoding) {
              case 'hex':
                return hexWrite(this, string, offset, length);

              case 'utf8':
              case 'utf-8':
                return utf8Write(this, string, offset, length);

              case 'ascii':
                return asciiWrite(this, string, offset, length);

              case 'latin1':
              case 'binary':
                return latin1Write(this, string, offset, length);

              case 'base64':
                // Warning: maxLength not taken into account in base64Write
                return base64Write(this, string, offset, length);

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return ucs2Write(this, string, offset, length);

              default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                encoding = ('' + encoding).toLowerCase();
                loweredCase = true;
            }
          }
        };

        Buffer.prototype.toJSON = function toJSON() {
          return {
            type: 'Buffer',
            data: Array.prototype.slice.call(this._arr || this, 0)
          };
        };

        function base64Slice(buf, start, end) {
          if (start === 0 && end === buf.length) {
            return base64.fromByteArray(buf);
          } else {
            return base64.fromByteArray(buf.slice(start, end));
          }
        }

        function utf8Slice(buf, start, end) {
          end = Math.min(buf.length, end);
          var res = [];
          var i = start;

          while (i < end) {
            var firstByte = buf[i];
            var codePoint = null;
            var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

            if (i + bytesPerSequence <= end) {
              var secondByte, thirdByte, fourthByte, tempCodePoint;

              switch (bytesPerSequence) {
                case 1:
                  if (firstByte < 0x80) {
                    codePoint = firstByte;
                  }

                  break;

                case 2:
                  secondByte = buf[i + 1];

                  if ((secondByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

                    if (tempCodePoint > 0x7F) {
                      codePoint = tempCodePoint;
                    }
                  }

                  break;

                case 3:
                  secondByte = buf[i + 1];
                  thirdByte = buf[i + 2];

                  if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

                    if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                      codePoint = tempCodePoint;
                    }
                  }

                  break;

                case 4:
                  secondByte = buf[i + 1];
                  thirdByte = buf[i + 2];
                  fourthByte = buf[i + 3];

                  if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

                    if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                      codePoint = tempCodePoint;
                    }
                  }

              }
            }

            if (codePoint === null) {
              // we did not generate a valid codePoint so insert a
              // replacement char (U+FFFD) and advance only 1 byte
              codePoint = 0xFFFD;
              bytesPerSequence = 1;
            } else if (codePoint > 0xFFFF) {
              // encode to utf16 (surrogate pair dance)
              codePoint -= 0x10000;
              res.push(codePoint >>> 10 & 0x3FF | 0xD800);
              codePoint = 0xDC00 | codePoint & 0x3FF;
            }

            res.push(codePoint);
            i += bytesPerSequence;
          }

          return decodeCodePointsArray(res);
        } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
        // the lowest limit is Chrome, with 0x10000 args.
        // We go 1 magnitude less, for safety


        var MAX_ARGUMENTS_LENGTH = 0x1000;

        function decodeCodePointsArray(codePoints) {
          var len = codePoints.length;

          if (len <= MAX_ARGUMENTS_LENGTH) {
            return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
          } // Decode in chunks to avoid "call stack size exceeded".


          var res = '';
          var i = 0;

          while (i < len) {
            res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
          }

          return res;
        }

        function asciiSlice(buf, start, end) {
          var ret = '';
          end = Math.min(buf.length, end);

          for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i] & 0x7F);
          }

          return ret;
        }

        function latin1Slice(buf, start, end) {
          var ret = '';
          end = Math.min(buf.length, end);

          for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i]);
          }

          return ret;
        }

        function hexSlice(buf, start, end) {
          var len = buf.length;
          if (!start || start < 0) start = 0;
          if (!end || end < 0 || end > len) end = len;
          var out = '';

          for (var i = start; i < end; ++i) {
            out += toHex(buf[i]);
          }

          return out;
        }

        function utf16leSlice(buf, start, end) {
          var bytes = buf.slice(start, end);
          var res = '';

          for (var i = 0; i < bytes.length; i += 2) {
            res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
          }

          return res;
        }

        Buffer.prototype.slice = function slice(start, end) {
          var len = this.length;
          start = ~~start;
          end = end === undefined ? len : ~~end;

          if (start < 0) {
            start += len;
            if (start < 0) start = 0;
          } else if (start > len) {
            start = len;
          }

          if (end < 0) {
            end += len;
            if (end < 0) end = 0;
          } else if (end > len) {
            end = len;
          }

          if (end < start) end = start;
          var newBuf = this.subarray(start, end); // Return an augmented `Uint8Array` instance

          newBuf.__proto__ = Buffer.prototype;
          return newBuf;
        };
        /*
         * Need to make sure that buffer isn't trying to write out of bounds.
         */


        function checkOffset(offset, ext, length) {
          if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
          if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
        }

        Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
          offset = offset >>> 0;
          byteLength = byteLength >>> 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);
          var val = this[offset];
          var mul = 1;
          var i = 0;

          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul;
          }

          return val;
        };

        Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
          offset = offset >>> 0;
          byteLength = byteLength >>> 0;

          if (!noAssert) {
            checkOffset(offset, byteLength, this.length);
          }

          var val = this[offset + --byteLength];
          var mul = 1;

          while (byteLength > 0 && (mul *= 0x100)) {
            val += this[offset + --byteLength] * mul;
          }

          return val;
        };

        Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 1, this.length);
          return this[offset];
        };

        Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 2, this.length);
          return this[offset] | this[offset + 1] << 8;
        };

        Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 2, this.length);
          return this[offset] << 8 | this[offset + 1];
        };

        Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
        };

        Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
        };

        Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
          offset = offset >>> 0;
          byteLength = byteLength >>> 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);
          var val = this[offset];
          var mul = 1;
          var i = 0;

          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul;
          }

          mul *= 0x80;
          if (val >= mul) val -= Math.pow(2, 8 * byteLength);
          return val;
        };

        Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
          offset = offset >>> 0;
          byteLength = byteLength >>> 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);
          var i = byteLength;
          var mul = 1;
          var val = this[offset + --i];

          while (i > 0 && (mul *= 0x100)) {
            val += this[offset + --i] * mul;
          }

          mul *= 0x80;
          if (val >= mul) val -= Math.pow(2, 8 * byteLength);
          return val;
        };

        Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 1, this.length);
          if (!(this[offset] & 0x80)) return this[offset];
          return (0xff - this[offset] + 1) * -1;
        };

        Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 2, this.length);
          var val = this[offset] | this[offset + 1] << 8;
          return val & 0x8000 ? val | 0xFFFF0000 : val;
        };

        Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 2, this.length);
          var val = this[offset + 1] | this[offset] << 8;
          return val & 0x8000 ? val | 0xFFFF0000 : val;
        };

        Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
        };

        Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
        };

        Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return ieee754.read(this, offset, true, 23, 4);
        };

        Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return ieee754.read(this, offset, false, 23, 4);
        };

        Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 8, this.length);
          return ieee754.read(this, offset, true, 52, 8);
        };

        Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 8, this.length);
          return ieee754.read(this, offset, false, 52, 8);
        };

        function checkInt(buf, value, offset, ext, max, min) {
          if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
          if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
          if (offset + ext > buf.length) throw new RangeError('Index out of range');
        }

        Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset >>> 0;
          byteLength = byteLength >>> 0;

          if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1;
            checkInt(this, value, offset, byteLength, maxBytes, 0);
          }

          var mul = 1;
          var i = 0;
          this[offset] = value & 0xFF;

          while (++i < byteLength && (mul *= 0x100)) {
            this[offset + i] = value / mul & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset >>> 0;
          byteLength = byteLength >>> 0;

          if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1;
            checkInt(this, value, offset, byteLength, maxBytes, 0);
          }

          var i = byteLength - 1;
          var mul = 1;
          this[offset + i] = value & 0xFF;

          while (--i >= 0 && (mul *= 0x100)) {
            this[offset + i] = value / mul & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
          this[offset] = value & 0xff;
          return offset + 1;
        };

        Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
          this[offset] = value & 0xff;
          this[offset + 1] = value >>> 8;
          return offset + 2;
        };

        Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
          this[offset] = value >>> 8;
          this[offset + 1] = value & 0xff;
          return offset + 2;
        };

        Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
          this[offset + 3] = value >>> 24;
          this[offset + 2] = value >>> 16;
          this[offset + 1] = value >>> 8;
          this[offset] = value & 0xff;
          return offset + 4;
        };

        Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = value & 0xff;
          return offset + 4;
        };

        Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset >>> 0;

          if (!noAssert) {
            var limit = Math.pow(2, 8 * byteLength - 1);
            checkInt(this, value, offset, byteLength, limit - 1, -limit);
          }

          var i = 0;
          var mul = 1;
          var sub = 0;
          this[offset] = value & 0xFF;

          while (++i < byteLength && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
              sub = 1;
            }

            this[offset + i] = (value / mul >> 0) - sub & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset >>> 0;

          if (!noAssert) {
            var limit = Math.pow(2, 8 * byteLength - 1);
            checkInt(this, value, offset, byteLength, limit - 1, -limit);
          }

          var i = byteLength - 1;
          var mul = 1;
          var sub = 0;
          this[offset + i] = value & 0xFF;

          while (--i >= 0 && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
              sub = 1;
            }

            this[offset + i] = (value / mul >> 0) - sub & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
          if (value < 0) value = 0xff + value + 1;
          this[offset] = value & 0xff;
          return offset + 1;
        };

        Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
          this[offset] = value & 0xff;
          this[offset + 1] = value >>> 8;
          return offset + 2;
        };

        Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
          this[offset] = value >>> 8;
          this[offset + 1] = value & 0xff;
          return offset + 2;
        };

        Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
          this[offset] = value & 0xff;
          this[offset + 1] = value >>> 8;
          this[offset + 2] = value >>> 16;
          this[offset + 3] = value >>> 24;
          return offset + 4;
        };

        Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
          if (value < 0) value = 0xffffffff + value + 1;
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = value & 0xff;
          return offset + 4;
        };

        function checkIEEE754(buf, value, offset, ext, max, min) {
          if (offset + ext > buf.length) throw new RangeError('Index out of range');
          if (offset < 0) throw new RangeError('Index out of range');
        }

        function writeFloat(buf, value, offset, littleEndian, noAssert) {
          value = +value;
          offset = offset >>> 0;

          if (!noAssert) {
            checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
          }

          ieee754.write(buf, value, offset, littleEndian, 23, 4);
          return offset + 4;
        }

        Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
          return writeFloat(this, value, offset, true, noAssert);
        };

        Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
          return writeFloat(this, value, offset, false, noAssert);
        };

        function writeDouble(buf, value, offset, littleEndian, noAssert) {
          value = +value;
          offset = offset >>> 0;

          if (!noAssert) {
            checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
          }

          ieee754.write(buf, value, offset, littleEndian, 52, 8);
          return offset + 8;
        }

        Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
          return writeDouble(this, value, offset, true, noAssert);
        };

        Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
          return writeDouble(this, value, offset, false, noAssert);
        }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


        Buffer.prototype.copy = function copy(target, targetStart, start, end) {
          if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
          if (!start) start = 0;
          if (!end && end !== 0) end = this.length;
          if (targetStart >= target.length) targetStart = target.length;
          if (!targetStart) targetStart = 0;
          if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

          if (end === start) return 0;
          if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

          if (targetStart < 0) {
            throw new RangeError('targetStart out of bounds');
          }

          if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
          if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

          if (end > this.length) end = this.length;

          if (target.length - targetStart < end - start) {
            end = target.length - targetStart + start;
          }

          var len = end - start;

          if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
            // Use built-in when available, missing from IE11
            this.copyWithin(targetStart, start, end);
          } else if (this === target && start < targetStart && targetStart < end) {
            // descending copy from end
            for (var i = len - 1; i >= 0; --i) {
              target[i + targetStart] = this[i + start];
            }
          } else {
            Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
          }

          return len;
        }; // Usage:
        //    buffer.fill(number[, offset[, end]])
        //    buffer.fill(buffer[, offset[, end]])
        //    buffer.fill(string[, offset[, end]][, encoding])


        Buffer.prototype.fill = function fill(val, start, end, encoding) {
          // Handle string cases:
          if (typeof val === 'string') {
            if (typeof start === 'string') {
              encoding = start;
              start = 0;
              end = this.length;
            } else if (typeof end === 'string') {
              encoding = end;
              end = this.length;
            }

            if (encoding !== undefined && typeof encoding !== 'string') {
              throw new TypeError('encoding must be a string');
            }

            if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
              throw new TypeError('Unknown encoding: ' + encoding);
            }

            if (val.length === 1) {
              var code = val.charCodeAt(0);

              if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
                // Fast path: If `val` fits into a single byte, use that numeric value.
                val = code;
              }
            }
          } else if (typeof val === 'number') {
            val = val & 255;
          } // Invalid ranges are not set to a default, so can range check early.


          if (start < 0 || this.length < start || this.length < end) {
            throw new RangeError('Out of range index');
          }

          if (end <= start) {
            return this;
          }

          start = start >>> 0;
          end = end === undefined ? this.length : end >>> 0;
          if (!val) val = 0;
          var i;

          if (typeof val === 'number') {
            for (i = start; i < end; ++i) {
              this[i] = val;
            }
          } else {
            var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
            var len = bytes.length;

            if (len === 0) {
              throw new TypeError('The value "' + val + '" is invalid for argument "value"');
            }

            for (i = 0; i < end - start; ++i) {
              this[i + start] = bytes[i % len];
            }
          }

          return this;
        }; // HELPER FUNCTIONS
        // ================


        var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

        function base64clean(str) {
          // Node takes equal signs as end of the Base64 encoding
          str = str.split('=')[0]; // Node strips out invalid characters like \n and \t from the string, base64-js does not

          str = str.trim().replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

          if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

          while (str.length % 4 !== 0) {
            str = str + '=';
          }

          return str;
        }

        function toHex(n) {
          if (n < 16) return '0' + n.toString(16);
          return n.toString(16);
        }

        function utf8ToBytes(string, units) {
          units = units || Infinity;
          var codePoint;
          var length = string.length;
          var leadSurrogate = null;
          var bytes = [];

          for (var i = 0; i < length; ++i) {
            codePoint = string.charCodeAt(i); // is surrogate component

            if (codePoint > 0xD7FF && codePoint < 0xE000) {
              // last char was a lead
              if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                  // unexpected trail
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                  continue;
                } else if (i + 1 === length) {
                  // unpaired lead
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                  continue;
                } // valid lead


                leadSurrogate = codePoint;
                continue;
              } // 2 leads in a row


              if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
              } // valid surrogate pair


              codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
            } else if (leadSurrogate) {
              // valid bmp char, but last char was a lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            }

            leadSurrogate = null; // encode utf8

            if (codePoint < 0x80) {
              if ((units -= 1) < 0) break;
              bytes.push(codePoint);
            } else if (codePoint < 0x800) {
              if ((units -= 2) < 0) break;
              bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
            } else if (codePoint < 0x10000) {
              if ((units -= 3) < 0) break;
              bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
            } else if (codePoint < 0x110000) {
              if ((units -= 4) < 0) break;
              bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
            } else {
              throw new Error('Invalid code point');
            }
          }

          return bytes;
        }

        function asciiToBytes(str) {
          var byteArray = [];

          for (var i = 0; i < str.length; ++i) {
            // Node's code seems to be doing this and not & 0x7F..
            byteArray.push(str.charCodeAt(i) & 0xFF);
          }

          return byteArray;
        }

        function utf16leToBytes(str, units) {
          var c, hi, lo;
          var byteArray = [];

          for (var i = 0; i < str.length; ++i) {
            if ((units -= 2) < 0) break;
            c = str.charCodeAt(i);
            hi = c >> 8;
            lo = c % 256;
            byteArray.push(lo);
            byteArray.push(hi);
          }

          return byteArray;
        }

        function base64ToBytes(str) {
          return base64.toByteArray(base64clean(str));
        }

        function blitBuffer(src, dst, offset, length) {
          for (var i = 0; i < length; ++i) {
            if (i + offset >= dst.length || i >= src.length) break;
            dst[i + offset] = src[i];
          }

          return i;
        } // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
        // the `instanceof` check but they should be treated as of that type.
        // See: https://github.com/feross/buffer/issues/166


        function isInstance(obj, type) {
          return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
        }

        function numberIsNaN(obj) {
          // For IE11 support
          return obj !== obj; // eslint-disable-line no-self-compare
        }
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "base64-js": 45,
    "buffer": 102,
    "ieee754": 215
  }],
  103: [function (require, module, exports) {
    'use strict';

    var ansiStyles = require('ansi-styles');

    var _require12 = require('supports-color'),
        stdoutColor = _require12.stdout,
        stderrColor = _require12.stderr;

    var _require13 = require('./util'),
        stringReplaceAll = _require13.stringReplaceAll,
        stringEncaseCRLFWithFirstIndex = _require13.stringEncaseCRLFWithFirstIndex;

    var isArray = Array.isArray; // `supportsColor.level` → `ansiStyles.color[name]` mapping

    var levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m'];
    var styles = Object.create(null);

    var applyOptions = function applyOptions(object) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
        throw new Error('The `level` option should be an integer from 0 to 3');
      } // Detect level if not set manually


      var colorLevel = stdoutColor ? stdoutColor.level : 0;
      object.level = options.level === undefined ? colorLevel : options.level;
    };

    var ChalkClass = function ChalkClass(options) {
      _classCallCheck2(this, ChalkClass);

      // eslint-disable-next-line no-constructor-return
      return chalkFactory(options);
    };

    var chalkFactory = function chalkFactory(options) {
      var chalk = {};
      applyOptions(chalk, options);

      chalk.template = function () {
        for (var _len4 = arguments.length, arguments_ = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          arguments_[_key4] = arguments[_key4];
        }

        return chalkTag.apply(void 0, [chalk.template].concat(arguments_));
      };

      Object.setPrototypeOf(chalk, Chalk.prototype);
      Object.setPrototypeOf(chalk.template, chalk);

      chalk.template.constructor = function () {
        throw new Error('`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.');
      };

      chalk.template.Instance = ChalkClass;
      return chalk.template;
    };

    function Chalk(options) {
      return chalkFactory(options);
    }

    var _loop = function _loop() {
      var _Object$entries4$_i = _slicedToArray(_Object$entries4[_i10], 2),
          styleName = _Object$entries4$_i[0],
          style = _Object$entries4$_i[1];

      styles[styleName] = {
        get: function get() {
          var builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
          Object.defineProperty(this, styleName, {
            value: builder
          });
          return builder;
        }
      };
    };

    for (var _i10 = 0, _Object$entries4 = Object.entries(ansiStyles); _i10 < _Object$entries4.length; _i10++) {
      _loop();
    }

    styles.visible = {
      get: function get() {
        var builder = createBuilder(this, this._styler, true);
        Object.defineProperty(this, 'visible', {
          value: builder
        });
        return builder;
      }
    };
    var usedModels = ['rgb', 'hex', 'keyword', 'hsl', 'hsv', 'hwb', 'ansi', 'ansi256'];

    var _loop2 = function _loop2() {
      var model = _usedModels[_i11];
      styles[model] = {
        get: function get() {
          var level = this.level;
          return function () {
            var _ansiStyles$color$lev;

            var styler = createStyler((_ansiStyles$color$lev = ansiStyles.color[levelMapping[level]])[model].apply(_ansiStyles$color$lev, arguments), ansiStyles.color.close, this._styler);
            return createBuilder(this, styler, this._isEmpty);
          };
        }
      };
    };

    for (var _i11 = 0, _usedModels = usedModels; _i11 < _usedModels.length; _i11++) {
      _loop2();
    }

    var _loop3 = function _loop3() {
      var model = _usedModels2[_i12];
      var bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);
      styles[bgModel] = {
        get: function get() {
          var level = this.level;
          return function () {
            var _ansiStyles$bgColor$l;

            var styler = createStyler((_ansiStyles$bgColor$l = ansiStyles.bgColor[levelMapping[level]])[model].apply(_ansiStyles$bgColor$l, arguments), ansiStyles.bgColor.close, this._styler);
            return createBuilder(this, styler, this._isEmpty);
          };
        }
      };
    };

    for (var _i12 = 0, _usedModels2 = usedModels; _i12 < _usedModels2.length; _i12++) {
      _loop3();
    }

    var proto = Object.defineProperties(function () {}, _objectSpread2(_objectSpread2({}, styles), {}, {
      level: {
        enumerable: true,
        get: function get() {
          return this._generator.level;
        },
        set: function set(level) {
          this._generator.level = level;
        }
      }
    }));

    var createStyler = function createStyler(open, close, parent) {
      var openAll;
      var closeAll;

      if (parent === undefined) {
        openAll = open;
        closeAll = close;
      } else {
        openAll = parent.openAll + open;
        closeAll = close + parent.closeAll;
      }

      return {
        open: open,
        close: close,
        openAll: openAll,
        closeAll: closeAll,
        parent: parent
      };
    };

    var createBuilder = function createBuilder(self, _styler, _isEmpty) {
      var builder = function builder() {
        for (var _len5 = arguments.length, arguments_ = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          arguments_[_key5] = arguments[_key5];
        }

        if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {
          // Called as a template literal, for example: chalk.red`2 + 3 = {bold ${2+3}}`
          return applyStyle(builder, chalkTag.apply(void 0, [builder].concat(arguments_)));
        } // Single argument is hot path, implicit coercion is faster than anything
        // eslint-disable-next-line no-implicit-coercion


        return applyStyle(builder, arguments_.length === 1 ? '' + arguments_[0] : arguments_.join(' '));
      }; // We alter the prototype because we must return a function, but there is
      // no way to create a function with a different prototype


      Object.setPrototypeOf(builder, proto);
      builder._generator = self;
      builder._styler = _styler;
      builder._isEmpty = _isEmpty;
      return builder;
    };

    var applyStyle = function applyStyle(self, string) {
      if (self.level <= 0 || !string) {
        return self._isEmpty ? '' : string;
      }

      var styler = self._styler;

      if (styler === undefined) {
        return string;
      }

      var _styler2 = styler,
          openAll = _styler2.openAll,
          closeAll = _styler2.closeAll;

      if (string.indexOf("\x1B") !== -1) {
        while (styler !== undefined) {
          // Replace any instances already present with a re-opening code
          // otherwise only the part of the string until said closing code
          // will be colored, and the rest will simply be 'plain'.
          string = stringReplaceAll(string, styler.close, styler.open);
          styler = styler.parent;
        }
      } // We can move both next actions out of loop, because remaining actions in loop won't have
      // any/visible effect on parts we add here. Close the styling before a linebreak and reopen
      // after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92


      var lfIndex = string.indexOf('\n');

      if (lfIndex !== -1) {
        string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
      }

      return openAll + string + closeAll;
    };

    var template;

    var chalkTag = function chalkTag(chalk) {
      for (var _len6 = arguments.length, strings = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
        strings[_key6 - 1] = arguments[_key6];
      }

      var firstString = strings[0];

      if (!isArray(firstString) || !isArray(firstString.raw)) {
        // If chalk() was called by itself or with a string,
        // return the string itself as a string.
        return strings.join(' ');
      }

      var arguments_ = strings.slice(1);
      var parts = [firstString.raw[0]];

      for (var i = 1; i < firstString.length; i++) {
        parts.push(String(arguments_[i - 1]).replace(/[{}\\]/g, '\\$&'), String(firstString.raw[i]));
      }

      if (template === undefined) {
        template = require('./templates');
      }

      return template(chalk, parts.join(''));
    };

    Object.defineProperties(Chalk.prototype, styles);
    var chalk = Chalk(); // eslint-disable-line new-cap

    chalk.supportsColor = stdoutColor;
    chalk.stderr = Chalk({
      level: stderrColor ? stderrColor.level : 0
    }); // eslint-disable-line new-cap

    chalk.stderr.supportsColor = stderrColor;
    module.exports = chalk;
  }, {
    "./templates": 104,
    "./util": 105,
    "ansi-styles": 28,
    "supports-color": 367
  }],
  104: [function (require, module, exports) {
    'use strict';

    var TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
    var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
    var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
    var ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
    var ESCAPES = new Map([['n', '\n'], ['r', '\r'], ['t', '\t'], ['b', '\b'], ['f', '\f'], ['v', '\v'], ['0', '\0'], ['\\', '\\'], ['e', "\x1B"], ['a', "\x07"]]);

    function unescape(c) {
      var u = c[0] === 'u';
      var bracket = c[1] === '{';

      if (u && !bracket && c.length === 5 || c[0] === 'x' && c.length === 3) {
        return String.fromCharCode(parseInt(c.slice(1), 16));
      }

      if (u && bracket) {
        return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
      }

      return ESCAPES.get(c) || c;
    }

    function parseArguments(name, arguments_) {
      var results = [];
      var chunks = arguments_.trim().split(/\s*,\s*/g);
      var matches;

      var _iterator = _createForOfIteratorHelper(chunks),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var chunk = _step.value;
          var number = Number(chunk);

          if (!Number.isNaN(number)) {
            results.push(number);
          } else if (matches = chunk.match(STRING_REGEX)) {
            results.push(matches[2].replace(ESCAPE_REGEX, function (m, escape, character) {
              return escape ? unescape(escape) : character;
            }));
          } else {
            throw new Error("Invalid Chalk template style argument: ".concat(chunk, " (in style '").concat(name, "')"));
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return results;
    }

    function parseStyle(style) {
      STYLE_REGEX.lastIndex = 0;
      var results = [];
      var matches;

      while ((matches = STYLE_REGEX.exec(style)) !== null) {
        var name = matches[1];

        if (matches[2]) {
          var args = parseArguments(name, matches[2]);
          results.push([name].concat(args));
        } else {
          results.push([name]);
        }
      }

      return results;
    }

    function buildStyle(chalk, styles) {
      var enabled = {};

      var _iterator2 = _createForOfIteratorHelper(styles),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var layer = _step2.value;

          var _iterator3 = _createForOfIteratorHelper(layer.styles),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var style = _step3.value;
              enabled[style[0]] = layer.inverse ? null : style.slice(1);
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      var current = chalk;

      for (var _i13 = 0, _Object$entries5 = Object.entries(enabled); _i13 < _Object$entries5.length; _i13++) {
        var _current;

        var _Object$entries5$_i = _slicedToArray(_Object$entries5[_i13], 2),
            styleName = _Object$entries5$_i[0],
            _styles = _Object$entries5$_i[1];

        if (!Array.isArray(_styles)) {
          continue;
        }

        if (!(styleName in current)) {
          throw new Error("Unknown Chalk style: ".concat(styleName));
        }

        current = _styles.length > 0 ? (_current = current)[styleName].apply(_current, _toConsumableArray(_styles)) : current[styleName];
      }

      return current;
    }

    module.exports = function (chalk, temporary) {
      var styles = [];
      var chunks = [];
      var chunk = []; // eslint-disable-next-line max-params

      temporary.replace(TEMPLATE_REGEX, function (m, escapeCharacter, inverse, style, close, character) {
        if (escapeCharacter) {
          chunk.push(unescape(escapeCharacter));
        } else if (style) {
          var string = chunk.join('');
          chunk = [];
          chunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));
          styles.push({
            inverse: inverse,
            styles: parseStyle(style)
          });
        } else if (close) {
          if (styles.length === 0) {
            throw new Error('Found extraneous } in Chalk template literal');
          }

          chunks.push(buildStyle(chalk, styles)(chunk.join('')));
          chunk = [];
          styles.pop();
        } else {
          chunk.push(character);
        }
      });
      chunks.push(chunk.join(''));

      if (styles.length > 0) {
        var errMessage = "Chalk template literal is missing ".concat(styles.length, " closing bracket").concat(styles.length === 1 ? '' : 's', " (`}`)");
        throw new Error(errMessage);
      }

      return chunks.join('');
    };
  }, {}],
  105: [function (require, module, exports) {
    'use strict';

    var stringReplaceAll = function stringReplaceAll(string, substring, replacer) {
      var index = string.indexOf(substring);

      if (index === -1) {
        return string;
      }

      var substringLength = substring.length;
      var endIndex = 0;
      var returnValue = '';

      do {
        returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
        endIndex = index + substringLength;
        index = string.indexOf(substring, endIndex);
      } while (index !== -1);

      returnValue += string.substr(endIndex);
      return returnValue;
    };

    var stringEncaseCRLFWithFirstIndex = function stringEncaseCRLFWithFirstIndex(string, prefix, postfix, index) {
      var endIndex = 0;
      var returnValue = '';

      do {
        var gotCR = string[index - 1] === '\r';
        returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? '\r\n' : '\n') + postfix;
        endIndex = index + 1;
        index = string.indexOf('\n', endIndex);
      } while (index !== -1);

      returnValue += string.substr(endIndex);
      return returnValue;
    };

    module.exports = {
      stringReplaceAll: stringReplaceAll,
      stringEncaseCRLFWithFirstIndex: stringEncaseCRLFWithFirstIndex
    };
  }, {}],
  106: [function (require, module, exports) {
    var Buffer = require('safe-buffer').Buffer;

    var Transform = require('stream').Transform;

    var StringDecoder = require('string_decoder').StringDecoder;

    var inherits = require('inherits');

    function CipherBase(hashMode) {
      Transform.call(this);
      this.hashMode = typeof hashMode === 'string';

      if (this.hashMode) {
        this[hashMode] = this._finalOrDigest;
      } else {
        this.final = this._finalOrDigest;
      }

      if (this._final) {
        this.__final = this._final;
        this._final = null;
      }

      this._decoder = null;
      this._encoding = null;
    }

    inherits(CipherBase, Transform);

    CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
      if (typeof data === 'string') {
        data = Buffer.from(data, inputEnc);
      }

      var outData = this._update(data);

      if (this.hashMode) return this;

      if (outputEnc) {
        outData = this._toString(outData, outputEnc);
      }

      return outData;
    };

    CipherBase.prototype.setAutoPadding = function () {};

    CipherBase.prototype.getAuthTag = function () {
      throw new Error('trying to get auth tag in unsupported state');
    };

    CipherBase.prototype.setAuthTag = function () {
      throw new Error('trying to set auth tag in unsupported state');
    };

    CipherBase.prototype.setAAD = function () {
      throw new Error('trying to set aad in unsupported state');
    };

    CipherBase.prototype._transform = function (data, _, next) {
      var err;

      try {
        if (this.hashMode) {
          this._update(data);
        } else {
          this.push(this._update(data));
        }
      } catch (e) {
        err = e;
      } finally {
        next(err);
      }
    };

    CipherBase.prototype._flush = function (done) {
      var err;

      try {
        this.push(this.__final());
      } catch (e) {
        err = e;
      }

      done(err);
    };

    CipherBase.prototype._finalOrDigest = function (outputEnc) {
      var outData = this.__final() || Buffer.alloc(0);

      if (outputEnc) {
        outData = this._toString(outData, outputEnc, true);
      }

      return outData;
    };

    CipherBase.prototype._toString = function (value, enc, fin) {
      if (!this._decoder) {
        this._decoder = new StringDecoder(enc);
        this._encoding = enc;
      }

      if (this._encoding !== enc) throw new Error('can\'t switch encodings');

      var out = this._decoder.write(value);

      if (fin) {
        out += this._decoder.end();
      }

      return out;
    };

    module.exports = CipherBase;
  }, {
    "inherits": 217,
    "safe-buffer": 314,
    "stream": 362,
    "string_decoder": 364
  }],
  107: [function (require, module, exports) {
    /* MIT license */

    /* eslint-disable no-mixed-operators */
    var cssKeywords = require('color-name'); // NOTE: conversions should only return primitive values (i.e. arrays, or
    //       values that give correct `typeof` results).
    //       do not use box values types (i.e. Number(), String(), etc.)


    var reverseKeywords = {};

    for (var _i14 = 0, _Object$keys = Object.keys(cssKeywords); _i14 < _Object$keys.length; _i14++) {
      var key = _Object$keys[_i14];
      reverseKeywords[cssKeywords[key]] = key;
    }

    var convert = {
      rgb: {
        channels: 3,
        labels: 'rgb'
      },
      hsl: {
        channels: 3,
        labels: 'hsl'
      },
      hsv: {
        channels: 3,
        labels: 'hsv'
      },
      hwb: {
        channels: 3,
        labels: 'hwb'
      },
      cmyk: {
        channels: 4,
        labels: 'cmyk'
      },
      xyz: {
        channels: 3,
        labels: 'xyz'
      },
      lab: {
        channels: 3,
        labels: 'lab'
      },
      lch: {
        channels: 3,
        labels: 'lch'
      },
      hex: {
        channels: 1,
        labels: ['hex']
      },
      keyword: {
        channels: 1,
        labels: ['keyword']
      },
      ansi16: {
        channels: 1,
        labels: ['ansi16']
      },
      ansi256: {
        channels: 1,
        labels: ['ansi256']
      },
      hcg: {
        channels: 3,
        labels: ['h', 'c', 'g']
      },
      apple: {
        channels: 3,
        labels: ['r16', 'g16', 'b16']
      },
      gray: {
        channels: 1,
        labels: ['gray']
      }
    };
    module.exports = convert; // Hide .channels and .labels properties

    for (var _i15 = 0, _Object$keys2 = Object.keys(convert); _i15 < _Object$keys2.length; _i15++) {
      var model = _Object$keys2[_i15];

      if (!('channels' in convert[model])) {
        throw new Error('missing channels property: ' + model);
      }

      if (!('labels' in convert[model])) {
        throw new Error('missing channel labels property: ' + model);
      }

      if (convert[model].labels.length !== convert[model].channels) {
        throw new Error('channel and label counts mismatch: ' + model);
      }

      var _convert$model = convert[model],
          channels = _convert$model.channels,
          labels = _convert$model.labels;
      delete convert[model].channels;
      delete convert[model].labels;
      Object.defineProperty(convert[model], 'channels', {
        value: channels
      });
      Object.defineProperty(convert[model], 'labels', {
        value: labels
      });
    }

    convert.rgb.hsl = function (rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var min = Math.min(r, g, b);
      var max = Math.max(r, g, b);
      var delta = max - min;
      var h;
      var s;

      if (max === min) {
        h = 0;
      } else if (r === max) {
        h = (g - b) / delta;
      } else if (g === max) {
        h = 2 + (b - r) / delta;
      } else if (b === max) {
        h = 4 + (r - g) / delta;
      }

      h = Math.min(h * 60, 360);

      if (h < 0) {
        h += 360;
      }

      var l = (min + max) / 2;

      if (max === min) {
        s = 0;
      } else if (l <= 0.5) {
        s = delta / (max + min);
      } else {
        s = delta / (2 - max - min);
      }

      return [h, s * 100, l * 100];
    };

    convert.rgb.hsv = function (rgb) {
      var rdif;
      var gdif;
      var bdif;
      var h;
      var s;
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var v = Math.max(r, g, b);
      var diff = v - Math.min(r, g, b);

      var diffc = function diffc(c) {
        return (v - c) / 6 / diff + 1 / 2;
      };

      if (diff === 0) {
        h = 0;
        s = 0;
      } else {
        s = diff / v;
        rdif = diffc(r);
        gdif = diffc(g);
        bdif = diffc(b);

        if (r === v) {
          h = bdif - gdif;
        } else if (g === v) {
          h = 1 / 3 + rdif - bdif;
        } else if (b === v) {
          h = 2 / 3 + gdif - rdif;
        }

        if (h < 0) {
          h += 1;
        } else if (h > 1) {
          h -= 1;
        }
      }

      return [h * 360, s * 100, v * 100];
    };

    convert.rgb.hwb = function (rgb) {
      var r = rgb[0];
      var g = rgb[1];
      var b = rgb[2];
      var h = convert.rgb.hsl(rgb)[0];
      var w = 1 / 255 * Math.min(r, Math.min(g, b));
      b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
      return [h, w * 100, b * 100];
    };

    convert.rgb.cmyk = function (rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var k = Math.min(1 - r, 1 - g, 1 - b);
      var c = (1 - r - k) / (1 - k) || 0;
      var m = (1 - g - k) / (1 - k) || 0;
      var y = (1 - b - k) / (1 - k) || 0;
      return [c * 100, m * 100, y * 100, k * 100];
    };

    function comparativeDistance(x, y) {
      /*
      	See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
      */
      return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
    }

    convert.rgb.keyword = function (rgb) {
      var reversed = reverseKeywords[rgb];

      if (reversed) {
        return reversed;
      }

      var currentClosestDistance = Infinity;
      var currentClosestKeyword;

      for (var _i16 = 0, _Object$keys3 = Object.keys(cssKeywords); _i16 < _Object$keys3.length; _i16++) {
        var keyword = _Object$keys3[_i16];
        var value = cssKeywords[keyword]; // Compute comparative distance

        var distance = comparativeDistance(rgb, value); // Check if its less, if so set as closest

        if (distance < currentClosestDistance) {
          currentClosestDistance = distance;
          currentClosestKeyword = keyword;
        }
      }

      return currentClosestKeyword;
    };

    convert.keyword.rgb = function (keyword) {
      return cssKeywords[keyword];
    };

    convert.rgb.xyz = function (rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255; // Assume sRGB

      r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
      g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
      b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
      var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
      var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
      var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
      return [x * 100, y * 100, z * 100];
    };

    convert.rgb.lab = function (rgb) {
      var xyz = convert.rgb.xyz(rgb);
      var x = xyz[0];
      var y = xyz[1];
      var z = xyz[2];
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      var l = 116 * y - 16;
      var a = 500 * (x - y);
      var b = 200 * (y - z);
      return [l, a, b];
    };

    convert.hsl.rgb = function (hsl) {
      var h = hsl[0] / 360;
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var t2;
      var t3;
      var val;

      if (s === 0) {
        val = l * 255;
        return [val, val, val];
      }

      if (l < 0.5) {
        t2 = l * (1 + s);
      } else {
        t2 = l + s - l * s;
      }

      var t1 = 2 * l - t2;
      var rgb = [0, 0, 0];

      for (var i = 0; i < 3; i++) {
        t3 = h + 1 / 3 * -(i - 1);

        if (t3 < 0) {
          t3++;
        }

        if (t3 > 1) {
          t3--;
        }

        if (6 * t3 < 1) {
          val = t1 + (t2 - t1) * 6 * t3;
        } else if (2 * t3 < 1) {
          val = t2;
        } else if (3 * t3 < 2) {
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
          val = t1;
        }

        rgb[i] = val * 255;
      }

      return rgb;
    };

    convert.hsl.hsv = function (hsl) {
      var h = hsl[0];
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var smin = s;
      var lmin = Math.max(l, 0.01);
      l *= 2;
      s *= l <= 1 ? l : 2 - l;
      smin *= lmin <= 1 ? lmin : 2 - lmin;
      var v = (l + s) / 2;
      var sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
      return [h, sv * 100, v * 100];
    };

    convert.hsv.rgb = function (hsv) {
      var h = hsv[0] / 60;
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var hi = Math.floor(h) % 6;
      var f = h - Math.floor(h);
      var p = 255 * v * (1 - s);
      var q = 255 * v * (1 - s * f);
      var t = 255 * v * (1 - s * (1 - f));
      v *= 255;

      switch (hi) {
        case 0:
          return [v, t, p];

        case 1:
          return [q, v, p];

        case 2:
          return [p, v, t];

        case 3:
          return [p, q, v];

        case 4:
          return [t, p, v];

        case 5:
          return [v, p, q];
      }
    };

    convert.hsv.hsl = function (hsv) {
      var h = hsv[0];
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var vmin = Math.max(v, 0.01);
      var sl;
      var l;
      l = (2 - s) * v;
      var lmin = (2 - s) * vmin;
      sl = s * vmin;
      sl /= lmin <= 1 ? lmin : 2 - lmin;
      sl = sl || 0;
      l /= 2;
      return [h, sl * 100, l * 100];
    }; // http://dev.w3.org/csswg/css-color/#hwb-to-rgb


    convert.hwb.rgb = function (hwb) {
      var h = hwb[0] / 360;
      var wh = hwb[1] / 100;
      var bl = hwb[2] / 100;
      var ratio = wh + bl;
      var f; // Wh + bl cant be > 1

      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }

      var i = Math.floor(6 * h);
      var v = 1 - bl;
      f = 6 * h - i;

      if ((i & 0x01) !== 0) {
        f = 1 - f;
      }

      var n = wh + f * (v - wh); // Linear interpolation

      var r;
      var g;
      var b;
      /* eslint-disable max-statements-per-line,no-multi-spaces */

      switch (i) {
        default:
        case 6:
        case 0:
          r = v;
          g = n;
          b = wh;
          break;

        case 1:
          r = n;
          g = v;
          b = wh;
          break;

        case 2:
          r = wh;
          g = v;
          b = n;
          break;

        case 3:
          r = wh;
          g = n;
          b = v;
          break;

        case 4:
          r = n;
          g = wh;
          b = v;
          break;

        case 5:
          r = v;
          g = wh;
          b = n;
          break;
      }
      /* eslint-enable max-statements-per-line,no-multi-spaces */


      return [r * 255, g * 255, b * 255];
    };

    convert.cmyk.rgb = function (cmyk) {
      var c = cmyk[0] / 100;
      var m = cmyk[1] / 100;
      var y = cmyk[2] / 100;
      var k = cmyk[3] / 100;
      var r = 1 - Math.min(1, c * (1 - k) + k);
      var g = 1 - Math.min(1, m * (1 - k) + k);
      var b = 1 - Math.min(1, y * (1 - k) + k);
      return [r * 255, g * 255, b * 255];
    };

    convert.xyz.rgb = function (xyz) {
      var x = xyz[0] / 100;
      var y = xyz[1] / 100;
      var z = xyz[2] / 100;
      var r;
      var g;
      var b;
      r = x * 3.2406 + y * -1.5372 + z * -0.4986;
      g = x * -0.9689 + y * 1.8758 + z * 0.0415;
      b = x * 0.0557 + y * -0.2040 + z * 1.0570; // Assume sRGB

      r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;
      g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;
      b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;
      r = Math.min(Math.max(0, r), 1);
      g = Math.min(Math.max(0, g), 1);
      b = Math.min(Math.max(0, b), 1);
      return [r * 255, g * 255, b * 255];
    };

    convert.xyz.lab = function (xyz) {
      var x = xyz[0];
      var y = xyz[1];
      var z = xyz[2];
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      var l = 116 * y - 16;
      var a = 500 * (x - y);
      var b = 200 * (y - z);
      return [l, a, b];
    };

    convert.lab.xyz = function (lab) {
      var l = lab[0];
      var a = lab[1];
      var b = lab[2];
      var x;
      var y;
      var z;
      y = (l + 16) / 116;
      x = a / 500 + y;
      z = y - b / 200;
      var y2 = Math.pow(y, 3);
      var x2 = Math.pow(x, 3);
      var z2 = Math.pow(z, 3);
      y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
      x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
      z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;
      x *= 95.047;
      y *= 100;
      z *= 108.883;
      return [x, y, z];
    };

    convert.lab.lch = function (lab) {
      var l = lab[0];
      var a = lab[1];
      var b = lab[2];
      var h;
      var hr = Math.atan2(b, a);
      h = hr * 360 / 2 / Math.PI;

      if (h < 0) {
        h += 360;
      }

      var c = Math.sqrt(a * a + b * b);
      return [l, c, h];
    };

    convert.lch.lab = function (lch) {
      var l = lch[0];
      var c = lch[1];
      var h = lch[2];
      var hr = h / 360 * 2 * Math.PI;
      var a = c * Math.cos(hr);
      var b = c * Math.sin(hr);
      return [l, a, b];
    };

    convert.rgb.ansi16 = function (args) {
      var saturation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      var _args22 = _slicedToArray(args, 3),
          r = _args22[0],
          g = _args22[1],
          b = _args22[2];

      var value = saturation === null ? convert.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization

      value = Math.round(value / 50);

      if (value === 0) {
        return 30;
      }

      var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));

      if (value === 2) {
        ansi += 60;
      }

      return ansi;
    };

    convert.hsv.ansi16 = function (args) {
      // Optimization here; we already know the value and don't need to get
      // it converted for us.
      return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };

    convert.rgb.ansi256 = function (args) {
      var r = args[0];
      var g = args[1];
      var b = args[2]; // We use the extended greyscale palette here, with the exception of
      // black and white. normal palette only has 4 greyscale shades.

      if (r === g && g === b) {
        if (r < 8) {
          return 16;
        }

        if (r > 248) {
          return 231;
        }

        return Math.round((r - 8) / 247 * 24) + 232;
      }

      var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
      return ansi;
    };

    convert.ansi16.rgb = function (args) {
      var color = args % 10; // Handle greyscale

      if (color === 0 || color === 7) {
        if (args > 50) {
          color += 3.5;
        }

        color = color / 10.5 * 255;
        return [color, color, color];
      }

      var mult = (~~(args > 50) + 1) * 0.5;
      var r = (color & 1) * mult * 255;
      var g = (color >> 1 & 1) * mult * 255;
      var b = (color >> 2 & 1) * mult * 255;
      return [r, g, b];
    };

    convert.ansi256.rgb = function (args) {
      // Handle greyscale
      if (args >= 232) {
        var c = (args - 232) * 10 + 8;
        return [c, c, c];
      }

      args -= 16;
      var rem;
      var r = Math.floor(args / 36) / 5 * 255;
      var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
      var b = rem % 6 / 5 * 255;
      return [r, g, b];
    };

    convert.rgb.hex = function (args) {
      var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);
      var string = integer.toString(16).toUpperCase();
      return '000000'.substring(string.length) + string;
    };

    convert.hex.rgb = function (args) {
      var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);

      if (!match) {
        return [0, 0, 0];
      }

      var colorString = match[0];

      if (match[0].length === 3) {
        colorString = colorString.split('').map(function (char) {
          return char + char;
        }).join('');
      }

      var integer = parseInt(colorString, 16);
      var r = integer >> 16 & 0xFF;
      var g = integer >> 8 & 0xFF;
      var b = integer & 0xFF;
      return [r, g, b];
    };

    convert.rgb.hcg = function (rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var max = Math.max(Math.max(r, g), b);
      var min = Math.min(Math.min(r, g), b);
      var chroma = max - min;
      var grayscale;
      var hue;

      if (chroma < 1) {
        grayscale = min / (1 - chroma);
      } else {
        grayscale = 0;
      }

      if (chroma <= 0) {
        hue = 0;
      } else if (max === r) {
        hue = (g - b) / chroma % 6;
      } else if (max === g) {
        hue = 2 + (b - r) / chroma;
      } else {
        hue = 4 + (r - g) / chroma;
      }

      hue /= 6;
      hue %= 1;
      return [hue * 360, chroma * 100, grayscale * 100];
    };

    convert.hsl.hcg = function (hsl) {
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var c = l < 0.5 ? 2.0 * s * l : 2.0 * s * (1.0 - l);
      var f = 0;

      if (c < 1.0) {
        f = (l - 0.5 * c) / (1.0 - c);
      }

      return [hsl[0], c * 100, f * 100];
    };

    convert.hsv.hcg = function (hsv) {
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var c = s * v;
      var f = 0;

      if (c < 1.0) {
        f = (v - c) / (1 - c);
      }

      return [hsv[0], c * 100, f * 100];
    };

    convert.hcg.rgb = function (hcg) {
      var h = hcg[0] / 360;
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;

      if (c === 0.0) {
        return [g * 255, g * 255, g * 255];
      }

      var pure = [0, 0, 0];
      var hi = h % 1 * 6;
      var v = hi % 1;
      var w = 1 - v;
      var mg = 0;
      /* eslint-disable max-statements-per-line */

      switch (Math.floor(hi)) {
        case 0:
          pure[0] = 1;
          pure[1] = v;
          pure[2] = 0;
          break;

        case 1:
          pure[0] = w;
          pure[1] = 1;
          pure[2] = 0;
          break;

        case 2:
          pure[0] = 0;
          pure[1] = 1;
          pure[2] = v;
          break;

        case 3:
          pure[0] = 0;
          pure[1] = w;
          pure[2] = 1;
          break;

        case 4:
          pure[0] = v;
          pure[1] = 0;
          pure[2] = 1;
          break;

        default:
          pure[0] = 1;
          pure[1] = 0;
          pure[2] = w;
      }
      /* eslint-enable max-statements-per-line */


      mg = (1.0 - c) * g;
      return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];
    };

    convert.hcg.hsv = function (hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var v = c + g * (1.0 - c);
      var f = 0;

      if (v > 0.0) {
        f = c / v;
      }

      return [hcg[0], f * 100, v * 100];
    };

    convert.hcg.hsl = function (hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var l = g * (1.0 - c) + 0.5 * c;
      var s = 0;

      if (l > 0.0 && l < 0.5) {
        s = c / (2 * l);
      } else if (l >= 0.5 && l < 1.0) {
        s = c / (2 * (1 - l));
      }

      return [hcg[0], s * 100, l * 100];
    };

    convert.hcg.hwb = function (hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var v = c + g * (1.0 - c);
      return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };

    convert.hwb.hcg = function (hwb) {
      var w = hwb[1] / 100;
      var b = hwb[2] / 100;
      var v = 1 - b;
      var c = v - w;
      var g = 0;

      if (c < 1) {
        g = (v - c) / (1 - c);
      }

      return [hwb[0], c * 100, g * 100];
    };

    convert.apple.rgb = function (apple) {
      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
    };

    convert.rgb.apple = function (rgb) {
      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
    };

    convert.gray.rgb = function (args) {
      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };

    convert.gray.hsl = function (args) {
      return [0, 0, args[0]];
    };

    convert.gray.hsv = convert.gray.hsl;

    convert.gray.hwb = function (gray) {
      return [0, 100, gray[0]];
    };

    convert.gray.cmyk = function (gray) {
      return [0, 0, 0, gray[0]];
    };

    convert.gray.lab = function (gray) {
      return [gray[0], 0, 0];
    };

    convert.gray.hex = function (gray) {
      var val = Math.round(gray[0] / 100 * 255) & 0xFF;
      var integer = (val << 16) + (val << 8) + val;
      var string = integer.toString(16).toUpperCase();
      return '000000'.substring(string.length) + string;
    };

    convert.rgb.gray = function (rgb) {
      var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
      return [val / 255 * 100];
    };
  }, {
    "color-name": 110
  }],
  108: [function (require, module, exports) {
    var conversions = require('./conversions');

    var route = require('./route');

    var convert = {};
    var models = Object.keys(conversions);

    function wrapRaw(fn) {
      var wrappedFn = function wrappedFn() {
        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          args[_key7] = arguments[_key7];
        }

        var arg0 = args[0];

        if (arg0 === undefined || arg0 === null) {
          return arg0;
        }

        if (arg0.length > 1) {
          args = arg0;
        }

        return fn(args);
      }; // Preserve .conversion property if there is one


      if ('conversion' in fn) {
        wrappedFn.conversion = fn.conversion;
      }

      return wrappedFn;
    }

    function wrapRounded(fn) {
      var wrappedFn = function wrappedFn() {
        for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
          args[_key8] = arguments[_key8];
        }

        var arg0 = args[0];

        if (arg0 === undefined || arg0 === null) {
          return arg0;
        }

        if (arg0.length > 1) {
          args = arg0;
        }

        var result = fn(args); // We're assuming the result is an array here.
        // see notice in conversions.js; don't use box types
        // in conversion functions.

        if (_typeof2(result) === 'object') {
          for (var len = result.length, i = 0; i < len; i++) {
            result[i] = Math.round(result[i]);
          }
        }

        return result;
      }; // Preserve .conversion property if there is one


      if ('conversion' in fn) {
        wrappedFn.conversion = fn.conversion;
      }

      return wrappedFn;
    }

    models.forEach(function (fromModel) {
      convert[fromModel] = {};
      Object.defineProperty(convert[fromModel], 'channels', {
        value: conversions[fromModel].channels
      });
      Object.defineProperty(convert[fromModel], 'labels', {
        value: conversions[fromModel].labels
      });
      var routes = route(fromModel);
      var routeModels = Object.keys(routes);
      routeModels.forEach(function (toModel) {
        var fn = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn);
        convert[fromModel][toModel].raw = wrapRaw(fn);
      });
    });
    module.exports = convert;
  }, {
    "./conversions": 107,
    "./route": 109
  }],
  109: [function (require, module, exports) {
    var conversions = require('./conversions');
    /*
    	This function routes a model to all other models.
    
    	all functions that are routed have a property `.conversion` attached
    	to the returned synthetic function. This property is an array
    	of strings, each with the steps in between the 'from' and 'to'
    	color models (inclusive).
    
    	conversions that are not possible simply are not included.
    */


    function buildGraph() {
      var graph = {}; // https://jsperf.com/object-keys-vs-for-in-with-closure/3

      var models = Object.keys(conversions);

      for (var len = models.length, i = 0; i < len; i++) {
        graph[models[i]] = {
          // http://jsperf.com/1-vs-infinity
          // micro-opt, but this is simple.
          distance: -1,
          parent: null
        };
      }

      return graph;
    } // https://en.wikipedia.org/wiki/Breadth-first_search


    function deriveBFS(fromModel) {
      var graph = buildGraph();
      var queue = [fromModel]; // Unshift -> queue -> pop

      graph[fromModel].distance = 0;

      while (queue.length) {
        var current = queue.pop();
        var adjacents = Object.keys(conversions[current]);

        for (var len = adjacents.length, i = 0; i < len; i++) {
          var adjacent = adjacents[i];
          var node = graph[adjacent];

          if (node.distance === -1) {
            node.distance = graph[current].distance + 1;
            node.parent = current;
            queue.unshift(adjacent);
          }
        }
      }

      return graph;
    }

    function link(from, to) {
      return function (args) {
        return to(from(args));
      };
    }

    function wrapConversion(toModel, graph) {
      var path = [graph[toModel].parent, toModel];
      var fn = conversions[graph[toModel].parent][toModel];
      var cur = graph[toModel].parent;

      while (graph[cur].parent) {
        path.unshift(graph[cur].parent);
        fn = link(conversions[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
      }

      fn.conversion = path;
      return fn;
    }

    module.exports = function (fromModel) {
      var graph = deriveBFS(fromModel);
      var conversion = {};
      var models = Object.keys(graph);

      for (var len = models.length, i = 0; i < len; i++) {
        var toModel = models[i];
        var node = graph[toModel];

        if (node.parent === null) {
          // No possible conversion, or this node is the source model.
          continue;
        }

        conversion[toModel] = wrapConversion(toModel, graph);
      }

      return conversion;
    };
  }, {
    "./conversions": 107
  }],
  110: [function (require, module, exports) {
    'use strict';

    module.exports = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
  }, {}],
  111: [function (require, module, exports) {
    /**
     * Slice reference.
     */
    var slice = [].slice;
    /**
     * Bind `obj` to `fn`.
     *
     * @param {Object} obj
     * @param {Function|String} fn or string
     * @return {Function}
     * @api public
     */

    module.exports = function (obj, fn) {
      if ('string' == typeof fn) fn = obj[fn];
      if ('function' != typeof fn) throw new Error('bind() requires a function');
      var args = slice.call(arguments, 2);
      return function () {
        return fn.apply(obj, args.concat(slice.call(arguments)));
      };
    };
  }, {}],
  112: [function (require, module, exports) {
    /**
     * Expose `Emitter`.
     */
    if (typeof module !== 'undefined') {
      module.exports = Emitter;
    }
    /**
     * Initialize a new `Emitter`.
     *
     * @api public
     */


    function Emitter(obj) {
      if (obj) return mixin(obj);
    }

    ;
    /**
     * Mixin the emitter properties.
     *
     * @param {Object} obj
     * @return {Object}
     * @api private
     */

    function mixin(obj) {
      for (var key in Emitter.prototype) {
        obj[key] = Emitter.prototype[key];
      }

      return obj;
    }
    /**
     * Listen on the given `event` with `fn`.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */


    Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
      this._callbacks = this._callbacks || {};
      (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
      return this;
    };
    /**
     * Adds an `event` listener that will be invoked a single
     * time then automatically removed.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */


    Emitter.prototype.once = function (event, fn) {
      function on() {
        this.off(event, on);
        fn.apply(this, arguments);
      }

      on.fn = fn;
      this.on(event, on);
      return this;
    };
    /**
     * Remove the given callback for `event` or all
     * registered callbacks.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */


    Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
      this._callbacks = this._callbacks || {}; // all

      if (0 == arguments.length) {
        this._callbacks = {};
        return this;
      } // specific event


      var callbacks = this._callbacks['$' + event];
      if (!callbacks) return this; // remove all handlers

      if (1 == arguments.length) {
        delete this._callbacks['$' + event];
        return this;
      } // remove specific handler


      var cb;

      for (var i = 0; i < callbacks.length; i++) {
        cb = callbacks[i];

        if (cb === fn || cb.fn === fn) {
          callbacks.splice(i, 1);
          break;
        }
      } // Remove event specific arrays for event types that no
      // one is subscribed for to avoid memory leak.


      if (callbacks.length === 0) {
        delete this._callbacks['$' + event];
      }

      return this;
    };
    /**
     * Emit `event` with the given args.
     *
     * @param {String} event
     * @param {Mixed} ...
     * @return {Emitter}
     */


    Emitter.prototype.emit = function (event) {
      this._callbacks = this._callbacks || {};
      var args = new Array(arguments.length - 1),
          callbacks = this._callbacks['$' + event];

      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }

      if (callbacks) {
        callbacks = callbacks.slice(0);

        for (var i = 0, len = callbacks.length; i < len; ++i) {
          callbacks[i].apply(this, args);
        }
      }

      return this;
    };
    /**
     * Return array of callbacks for `event`.
     *
     * @param {String} event
     * @return {Array}
     * @api public
     */


    Emitter.prototype.listeners = function (event) {
      this._callbacks = this._callbacks || {};
      return this._callbacks['$' + event] || [];
    };
    /**
     * Check if this emitter has `event` handlers.
     *
     * @param {String} event
     * @return {Boolean}
     * @api public
     */


    Emitter.prototype.hasListeners = function (event) {
      return !!this.listeners(event).length;
    };
  }, {}],
  113: [function (require, module, exports) {
    module.exports = function (a, b) {
      var fn = function fn() {};

      fn.prototype = b.prototype;
      a.prototype = new fn();
      a.prototype.constructor = a;
    };
  }, {}],
  114: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        // NOTE: These type checking functions intentionally don't use `instanceof`
        // because it is fragile and can be easily faked with `Object.create()`.
        function isArray(arg) {
          if (Array.isArray) {
            return Array.isArray(arg);
          }

          return objectToString(arg) === '[object Array]';
        }

        exports.isArray = isArray;

        function isBoolean(arg) {
          return typeof arg === 'boolean';
        }

        exports.isBoolean = isBoolean;

        function isNull(arg) {
          return arg === null;
        }

        exports.isNull = isNull;

        function isNullOrUndefined(arg) {
          return arg == null;
        }

        exports.isNullOrUndefined = isNullOrUndefined;

        function isNumber(arg) {
          return typeof arg === 'number';
        }

        exports.isNumber = isNumber;

        function isString(arg) {
          return typeof arg === 'string';
        }

        exports.isString = isString;

        function isSymbol(arg) {
          return _typeof2(arg) === 'symbol';
        }

        exports.isSymbol = isSymbol;

        function isUndefined(arg) {
          return arg === void 0;
        }

        exports.isUndefined = isUndefined;

        function isRegExp(re) {
          return objectToString(re) === '[object RegExp]';
        }

        exports.isRegExp = isRegExp;

        function isObject(arg) {
          return _typeof2(arg) === 'object' && arg !== null;
        }

        exports.isObject = isObject;

        function isDate(d) {
          return objectToString(d) === '[object Date]';
        }

        exports.isDate = isDate;

        function isError(e) {
          return objectToString(e) === '[object Error]' || e instanceof Error;
        }

        exports.isError = isError;

        function isFunction(arg) {
          return typeof arg === 'function';
        }

        exports.isFunction = isFunction;

        function isPrimitive(arg) {
          return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || _typeof2(arg) === 'symbol' || // ES6 symbol
          typeof arg === 'undefined';
        }

        exports.isPrimitive = isPrimitive;
        exports.isBuffer = Buffer.isBuffer;

        function objectToString(o) {
          return Object.prototype.toString.call(o);
        }
      }).call(this);
    }).call(this, {
      "isBuffer": require("../../is-buffer/index.js")
    });
  }, {
    "../../is-buffer/index.js": 218
  }],
  115: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        var elliptic = require('elliptic');

        var BN = require('bn.js');

        module.exports = function createECDH(curve) {
          return new ECDH(curve);
        };

        var aliases = {
          secp256k1: {
            name: 'secp256k1',
            byteLength: 32
          },
          secp224r1: {
            name: 'p224',
            byteLength: 28
          },
          prime256v1: {
            name: 'p256',
            byteLength: 32
          },
          prime192v1: {
            name: 'p192',
            byteLength: 24
          },
          ed25519: {
            name: 'ed25519',
            byteLength: 32
          },
          secp384r1: {
            name: 'p384',
            byteLength: 48
          },
          secp521r1: {
            name: 'p521',
            byteLength: 66
          }
        };
        aliases.p224 = aliases.secp224r1;
        aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
        aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
        aliases.p384 = aliases.secp384r1;
        aliases.p521 = aliases.secp521r1;

        function ECDH(curve) {
          this.curveType = aliases[curve];

          if (!this.curveType) {
            this.curveType = {
              name: curve
            };
          }

          this.curve = new elliptic.ec(this.curveType.name); // eslint-disable-line new-cap

          this.keys = void 0;
        }

        ECDH.prototype.generateKeys = function (enc, format) {
          this.keys = this.curve.genKeyPair();
          return this.getPublicKey(enc, format);
        };

        ECDH.prototype.computeSecret = function (other, inenc, enc) {
          inenc = inenc || 'utf8';

          if (!Buffer.isBuffer(other)) {
            other = new Buffer(other, inenc);
          }

          var otherPub = this.curve.keyFromPublic(other).getPublic();
          var out = otherPub.mul(this.keys.getPrivate()).getX();
          return formatReturnValue(out, enc, this.curveType.byteLength);
        };

        ECDH.prototype.getPublicKey = function (enc, format) {
          var key = this.keys.getPublic(format === 'compressed', true);

          if (format === 'hybrid') {
            if (key[key.length - 1] % 2) {
              key[0] = 7;
            } else {
              key[0] = 6;
            }
          }

          return formatReturnValue(key, enc);
        };

        ECDH.prototype.getPrivateKey = function (enc) {
          return formatReturnValue(this.keys.getPrivate(), enc);
        };

        ECDH.prototype.setPublicKey = function (pub, enc) {
          enc = enc || 'utf8';

          if (!Buffer.isBuffer(pub)) {
            pub = new Buffer(pub, enc);
          }

          this.keys._importPublic(pub);

          return this;
        };

        ECDH.prototype.setPrivateKey = function (priv, enc) {
          enc = enc || 'utf8';

          if (!Buffer.isBuffer(priv)) {
            priv = new Buffer(priv, enc);
          }

          var _priv = new BN(priv);

          _priv = _priv.toString(16);
          this.keys = this.curve.genKeyPair();

          this.keys._importPrivate(_priv);

          return this;
        };

        function formatReturnValue(bn, enc, len) {
          if (!Array.isArray(bn)) {
            bn = bn.toArray();
          }

          var buf = new Buffer(bn);

          if (len && buf.length < len) {
            var zeros = new Buffer(len - buf.length);
            zeros.fill(0);
            buf = Buffer.concat([zeros, buf]);
          }

          if (!enc) {
            return buf;
          } else {
            return buf.toString(enc);
          }
        }
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "bn.js": 54,
    "buffer": 102,
    "elliptic": 139
  }],
  116: [function (require, module, exports) {
    'use strict';

    var inherits = require('inherits');

    var MD5 = require('md5.js');

    var RIPEMD160 = require('ripemd160');

    var sha = require('sha.js');

    var Base = require('cipher-base');

    function Hash(hash) {
      Base.call(this, 'digest');
      this._hash = hash;
    }

    inherits(Hash, Base);

    Hash.prototype._update = function (data) {
      this._hash.update(data);
    };

    Hash.prototype._final = function () {
      return this._hash.digest();
    };

    module.exports = function createHash(alg) {
      alg = alg.toLowerCase();
      if (alg === 'md5') return new MD5();
      if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160();
      return new Hash(sha(alg));
    };
  }, {
    "cipher-base": 106,
    "inherits": 217,
    "md5.js": 243,
    "ripemd160": 312,
    "sha.js": 320
  }],
  117: [function (require, module, exports) {
    var MD5 = require('md5.js');

    module.exports = function (buffer) {
      return new MD5().update(buffer).digest();
    };
  }, {
    "md5.js": 243
  }],
  118: [function (require, module, exports) {
    'use strict';

    var inherits = require('inherits');

    var Legacy = require('./legacy');

    var Base = require('cipher-base');

    var Buffer = require('safe-buffer').Buffer;

    var md5 = require('create-hash/md5');

    var RIPEMD160 = require('ripemd160');

    var sha = require('sha.js');

    var ZEROS = Buffer.alloc(128);

    function Hmac(alg, key) {
      Base.call(this, 'digest');

      if (typeof key === 'string') {
        key = Buffer.from(key);
      }

      var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
      this._alg = alg;
      this._key = key;

      if (key.length > blocksize) {
        var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);
        key = hash.update(key).digest();
      } else if (key.length < blocksize) {
        key = Buffer.concat([key, ZEROS], blocksize);
      }

      var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
      var opad = this._opad = Buffer.allocUnsafe(blocksize);

      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
      }

      this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);

      this._hash.update(ipad);
    }

    inherits(Hmac, Base);

    Hmac.prototype._update = function (data) {
      this._hash.update(data);
    };

    Hmac.prototype._final = function () {
      var h = this._hash.digest();

      var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg);
      return hash.update(this._opad).update(h).digest();
    };

    module.exports = function createHmac(alg, key) {
      alg = alg.toLowerCase();

      if (alg === 'rmd160' || alg === 'ripemd160') {
        return new Hmac('rmd160', key);
      }

      if (alg === 'md5') {
        return new Legacy(md5, key);
      }

      return new Hmac(alg, key);
    };
  }, {
    "./legacy": 119,
    "cipher-base": 106,
    "create-hash/md5": 117,
    "inherits": 217,
    "ripemd160": 312,
    "safe-buffer": 314,
    "sha.js": 320
  }],
  119: [function (require, module, exports) {
    'use strict';

    var inherits = require('inherits');

    var Buffer = require('safe-buffer').Buffer;

    var Base = require('cipher-base');

    var ZEROS = Buffer.alloc(128);
    var blocksize = 64;

    function Hmac(alg, key) {
      Base.call(this, 'digest');

      if (typeof key === 'string') {
        key = Buffer.from(key);
      }

      this._alg = alg;
      this._key = key;

      if (key.length > blocksize) {
        key = alg(key);
      } else if (key.length < blocksize) {
        key = Buffer.concat([key, ZEROS], blocksize);
      }

      var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
      var opad = this._opad = Buffer.allocUnsafe(blocksize);

      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
      }

      this._hash = [ipad];
    }

    inherits(Hmac, Base);

    Hmac.prototype._update = function (data) {
      this._hash.push(data);
    };

    Hmac.prototype._final = function () {
      var h = this._alg(Buffer.concat(this._hash));

      return this._alg(Buffer.concat([this._opad, h]));
    };

    module.exports = Hmac;
  }, {
    "cipher-base": 106,
    "inherits": 217,
    "safe-buffer": 314
  }],
  120: [function (require, module, exports) {
    'use strict';

    exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes');
    exports.createHash = exports.Hash = require('create-hash');
    exports.createHmac = exports.Hmac = require('create-hmac');

    var algos = require('browserify-sign/algos');

    var algoKeys = Object.keys(algos);
    var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys);

    exports.getHashes = function () {
      return hashes;
    };

    var p = require('pbkdf2');

    exports.pbkdf2 = p.pbkdf2;
    exports.pbkdf2Sync = p.pbkdf2Sync;

    var aes = require('browserify-cipher');

    exports.Cipher = aes.Cipher;
    exports.createCipher = aes.createCipher;
    exports.Cipheriv = aes.Cipheriv;
    exports.createCipheriv = aes.createCipheriv;
    exports.Decipher = aes.Decipher;
    exports.createDecipher = aes.createDecipher;
    exports.Decipheriv = aes.Decipheriv;
    exports.createDecipheriv = aes.createDecipheriv;
    exports.getCiphers = aes.getCiphers;
    exports.listCiphers = aes.listCiphers;

    var dh = require('diffie-hellman');

    exports.DiffieHellmanGroup = dh.DiffieHellmanGroup;
    exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;
    exports.getDiffieHellman = dh.getDiffieHellman;
    exports.createDiffieHellman = dh.createDiffieHellman;
    exports.DiffieHellman = dh.DiffieHellman;

    var sign = require('browserify-sign');

    exports.createSign = sign.createSign;
    exports.Sign = sign.Sign;
    exports.createVerify = sign.createVerify;
    exports.Verify = sign.Verify;
    exports.createECDH = require('create-ecdh');

    var publicEncrypt = require('public-encrypt');

    exports.publicEncrypt = publicEncrypt.publicEncrypt;
    exports.privateEncrypt = publicEncrypt.privateEncrypt;
    exports.publicDecrypt = publicEncrypt.publicDecrypt;
    exports.privateDecrypt = publicEncrypt.privateDecrypt; // the least I can do is make error messages for the rest of the node.js/crypto api.
    // ;[
    //   'createCredentials'
    // ].forEach(function (name) {
    //   exports[name] = function () {
    //     throw new Error([
    //       'sorry, ' + name + ' is not implemented yet',
    //       'we accept pull requests',
    //       'https://github.com/crypto-browserify/crypto-browserify'
    //     ].join('\n'))
    //   }
    // })

    var rf = require('randomfill');

    exports.randomFill = rf.randomFill;
    exports.randomFillSync = rf.randomFillSync;

    exports.createCredentials = function () {
      throw new Error(['sorry, createCredentials is not implemented yet', 'we accept pull requests', 'https://github.com/crypto-browserify/crypto-browserify'].join('\n'));
    };

    exports.constants = {
      'DH_CHECK_P_NOT_SAFE_PRIME': 2,
      'DH_CHECK_P_NOT_PRIME': 1,
      'DH_UNABLE_TO_CHECK_GENERATOR': 4,
      'DH_NOT_SUITABLE_GENERATOR': 8,
      'NPN_ENABLED': 1,
      'ALPN_ENABLED': 1,
      'RSA_PKCS1_PADDING': 1,
      'RSA_SSLV23_PADDING': 2,
      'RSA_NO_PADDING': 3,
      'RSA_PKCS1_OAEP_PADDING': 4,
      'RSA_X931_PADDING': 5,
      'RSA_PKCS1_PSS_PADDING': 6,
      'POINT_CONVERSION_COMPRESSED': 2,
      'POINT_CONVERSION_UNCOMPRESSED': 4,
      'POINT_CONVERSION_HYBRID': 6
    };
  }, {
    "browserify-cipher": 74,
    "browserify-sign": 81,
    "browserify-sign/algos": 78,
    "create-ecdh": 115,
    "create-hash": 116,
    "create-hmac": 118,
    "diffie-hellman": 134,
    "pbkdf2": 269,
    "public-encrypt": 283,
    "randombytes": 291,
    "randomfill": 292
  }],
  121: [function (require, module, exports) {
    /**
     * cuid.js
     * Collision-resistant UID generator for browsers and node.
     * Sequential for fast db lookups and recency sorting.
     * Safe for element IDs and server-side lookups.
     *
     * Extracted from CLCTR
     *
     * Copyright (c) Eric Elliott 2012
     * MIT License
     */
    var fingerprint = require('./lib/fingerprint.js');

    var pad = require('./lib/pad.js');

    var getRandomValue = require('./lib/getRandomValue.js');

    var c = 0,
        blockSize = 4,
        base = 36,
        discreteValues = Math.pow(base, blockSize);

    function randomBlock() {
      return pad((getRandomValue() * discreteValues << 0).toString(base), blockSize);
    }

    function safeCounter() {
      c = c < discreteValues ? c : 0;
      c++; // this is not subliminal

      return c - 1;
    }

    function cuid() {
      // Starting with a lowercase letter makes
      // it HTML element ID friendly.
      var letter = 'c',
          // hard-coded allows for sequential access
      // timestamp
      // warning: this exposes the exact date and time
      // that the uid was created.
      timestamp = new Date().getTime().toString(base),
          // Prevent same-machine collisions.
      counter = pad(safeCounter().toString(base), blockSize),
          // A few chars to generate distinct ids for different
      // clients (so different computers are far less
      // likely to generate the same id)
      print = fingerprint(),
          // Grab some more chars from Math.random()
      random = randomBlock() + randomBlock();
      return letter + timestamp + counter + print + random;
    }

    cuid.slug = function slug() {
      var date = new Date().getTime().toString(36),
          counter = safeCounter().toString(36).slice(-4),
          print = fingerprint().slice(0, 1) + fingerprint().slice(-1),
          random = randomBlock().slice(-2);
      return date.slice(-2) + counter + print + random;
    };

    cuid.isCuid = function isCuid(stringToCheck) {
      if (typeof stringToCheck !== 'string') return false;
      if (stringToCheck.startsWith('c')) return true;
      return false;
    };

    cuid.isSlug = function isSlug(stringToCheck) {
      if (typeof stringToCheck !== 'string') return false;
      var stringLength = stringToCheck.length;
      if (stringLength >= 7 && stringLength <= 10) return true;
      return false;
    };

    cuid.fingerprint = fingerprint;
    module.exports = cuid;
  }, {
    "./lib/fingerprint.js": 122,
    "./lib/getRandomValue.js": 123,
    "./lib/pad.js": 124
  }],
  122: [function (require, module, exports) {
    var pad = require('./pad.js');

    var env = (typeof window === "undefined" ? "undefined" : _typeof2(window)) === 'object' ? window : self;
    var globalCount = Object.keys(env).length;
    var mimeTypesLength = navigator.mimeTypes ? navigator.mimeTypes.length : 0;
    var clientId = pad((mimeTypesLength + navigator.userAgent.length).toString(36) + globalCount.toString(36), 4);

    module.exports = function fingerprint() {
      return clientId;
    };
  }, {
    "./pad.js": 124
  }],
  123: [function (require, module, exports) {
    var getRandomValue;
    var crypto = typeof window !== 'undefined' && (window.crypto || window.msCrypto) || typeof self !== 'undefined' && self.crypto;

    if (crypto) {
      var lim = Math.pow(2, 32) - 1;

      getRandomValue = function getRandomValue() {
        return Math.abs(crypto.getRandomValues(new Uint32Array(1))[0] / lim);
      };
    } else {
      getRandomValue = Math.random;
    }

    module.exports = getRandomValue;
  }, {}],
  124: [function (require, module, exports) {
    module.exports = function pad(num, size) {
      var s = '000000000' + num;
      return s.substr(s.length - size);
    };
  }, {}],
  125: [function (require, module, exports) {
    (function (process) {
      (function () {
        /* eslint-env browser */

        /**
         * This is the web browser implementation of `debug()`.
         */
        exports.formatArgs = formatArgs;
        exports.save = save;
        exports.load = load;
        exports.useColors = useColors;
        exports.storage = localstorage();
        /**
         * Colors.
         */

        exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
        /**
         * Currently only WebKit-based Web Inspectors, Firefox >= v31,
         * and the Firebug extension (any Firefox version) are known
         * to support "%c" CSS customizations.
         *
         * TODO: add a `localStorage` variable to explicitly enable/disable colors
         */
        // eslint-disable-next-line complexity

        function useColors() {
          // NB: In an Electron preload script, document will be defined but not fully
          // initialized. Since we know we're in Chrome, we'll just detect this case
          // explicitly
          if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
            return true;
          } // Internet Explorer and Edge do not support colors.


          if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
            return false;
          } // Is webkit? http://stackoverflow.com/a/16459606/376773
          // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


          return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
          typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
          // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
          typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
          typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
        }
        /**
         * Colorize log arguments if enabled.
         *
         * @api public
         */


        function formatArgs(args) {
          args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

          if (!this.useColors) {
            return;
          }

          var c = 'color: ' + this.color;
          args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
          // arguments passed either before or after the %c, so we need to
          // figure out the correct index to insert the CSS into

          var index = 0;
          var lastC = 0;
          args[0].replace(/%[a-zA-Z%]/g, function (match) {
            if (match === '%%') {
              return;
            }

            index++;

            if (match === '%c') {
              // We only are interested in the *last* %c
              // (the user may have provided their own)
              lastC = index;
            }
          });
          args.splice(lastC, 0, c);
        }
        /**
         * Invokes `console.debug()` when available.
         * No-op when `console.debug` is not a "function".
         * If `console.debug` is not available, falls back
         * to `console.log`.
         *
         * @api public
         */


        exports.log = console.debug || console.log || function () {};
        /**
         * Save `namespaces`.
         *
         * @param {String} namespaces
         * @api private
         */


        function save(namespaces) {
          try {
            if (namespaces) {
              exports.storage.setItem('debug', namespaces);
            } else {
              exports.storage.removeItem('debug');
            }
          } catch (error) {// Swallow
            // XXX (@Qix-) should we be logging these?
          }
        }
        /**
         * Load `namespaces`.
         *
         * @return {String} returns the previously persisted debug modes
         * @api private
         */


        function load() {
          var r;

          try {
            r = exports.storage.getItem('debug');
          } catch (error) {// Swallow
            // XXX (@Qix-) should we be logging these?
          } // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


          if (!r && typeof process !== 'undefined' && 'env' in process) {
            r = undefined;
          }

          return r;
        }
        /**
         * Localstorage attempts to return the localstorage.
         *
         * This is necessary because safari throws
         * when a user disables cookies/localstorage
         * and you attempt to access it.
         *
         * @return {LocalStorage}
         * @api private
         */


        function localstorage() {
          try {
            // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
            // The Browser also has localStorage in the global context.
            return localStorage;
          } catch (error) {// Swallow
            // XXX (@Qix-) should we be logging these?
          }
        }

        module.exports = require('./common')(exports);
        var formatters = module.exports.formatters;
        /**
         * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
         */

        formatters.j = function (v) {
          try {
            return JSON.stringify(v);
          } catch (error) {
            return '[UnexpectedJSONParseError]: ' + error.message;
          }
        };
      }).call(this);
    }).call(this, require('_process'));
  }, {
    "./common": 126,
    "_process": 276
  }],
  126: [function (require, module, exports) {
    /**
     * This is the common logic for both the Node.js and web browser
     * implementations of `debug()`.
     */
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require('ms');
      Object.keys(env).forEach(function (key) {
        createDebug[key] = env[key];
      });
      /**
      * Active `debug` instances.
      */

      createDebug.instances = [];
      /**
      * The currently active debug mode names, and names to skip.
      */

      createDebug.names = [];
      createDebug.skips = [];
      /**
      * Map of special "%n" handling functions, for the debug "format" argument.
      *
      * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
      */

      createDebug.formatters = {};
      /**
      * Selects a color for a debug namespace
      * @param {String} namespace The namespace string for the for the debug instance to be colored
      * @return {Number|String} An ANSI color code for the given namespace
      * @api private
      */

      function selectColor(namespace) {
        var hash = 0;

        for (var i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0; // Convert to 32bit integer
        }

        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }

      createDebug.selectColor = selectColor;
      /**
      * Create a debugger with the given `namespace`.
      *
      * @param {String} namespace
      * @return {Function}
      * @api public
      */

      function createDebug(namespace) {
        var prevTime;

        function debug() {
          for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
            args[_key9] = arguments[_key9];
          }

          // Disabled?
          if (!debug.enabled) {
            return;
          }

          var self = debug; // Set `diff` timestamp

          var curr = Number(new Date());
          var ms = curr - (prevTime || curr);
          self.diff = ms;
          self.prev = prevTime;
          self.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);

          if (typeof args[0] !== 'string') {
            // Anything else let's inspect with %O
            args.unshift('%O');
          } // Apply any `formatters` transformations


          var index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
            // If we encounter an escaped % then don't increase the array index
            if (match === '%%') {
              return match;
            }

            index++;
            var formatter = createDebug.formatters[format];

            if (typeof formatter === 'function') {
              var val = args[index];
              match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

              args.splice(index, 1);
              index--;
            }

            return match;
          }); // Apply env-specific formatting (colors, etc.)

          createDebug.formatArgs.call(self, args);
          var logFn = self.log || createDebug.log;
          logFn.apply(self, args);
        }

        debug.namespace = namespace;
        debug.enabled = createDebug.enabled(namespace);
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.destroy = destroy;
        debug.extend = extend; // Env-specific initialization logic for debug instances

        if (typeof createDebug.init === 'function') {
          createDebug.init(debug);
        }

        createDebug.instances.push(debug);
        return debug;
      }

      function destroy() {
        var index = createDebug.instances.indexOf(this);

        if (index !== -1) {
          createDebug.instances.splice(index, 1);
          return true;
        }

        return false;
      }

      function extend(namespace, delimiter) {
        var newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      /**
      * Enables a debug mode by namespaces. This can include modes
      * separated by a colon and wildcards.
      *
      * @param {String} namespaces
      * @api public
      */


      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.names = [];
        createDebug.skips = [];
        var i;
        var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
        var len = split.length;

        for (i = 0; i < len; i++) {
          if (!split[i]) {
            // ignore empty strings
            continue;
          }

          namespaces = split[i].replace(/\*/g, '.*?');

          if (namespaces[0] === '-') {
            createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
          } else {
            createDebug.names.push(new RegExp('^' + namespaces + '$'));
          }
        }

        for (i = 0; i < createDebug.instances.length; i++) {
          var instance = createDebug.instances[i];
          instance.enabled = createDebug.enabled(instance.namespace);
        }
      }
      /**
      * Disable debug output.
      *
      * @return {String} namespaces
      * @api public
      */


      function disable() {
        var namespaces = [].concat(_toConsumableArray(createDebug.names.map(toNamespace)), _toConsumableArray(createDebug.skips.map(toNamespace).map(function (namespace) {
          return '-' + namespace;
        }))).join(',');
        createDebug.enable('');
        return namespaces;
      }
      /**
      * Returns true if the given mode name is enabled, false otherwise.
      *
      * @param {String} name
      * @return {Boolean}
      * @api public
      */


      function enabled(name) {
        if (name[name.length - 1] === '*') {
          return true;
        }

        var i;
        var len;

        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }

        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }

        return false;
      }
      /**
      * Convert regexp to namespace
      *
      * @param {RegExp} regxep
      * @return {String} namespace
      * @api private
      */


      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
      }
      /**
      * Coerce `val`.
      *
      * @param {Mixed} val
      * @return {Mixed}
      * @api private
      */


      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }

        return val;
      }

      createDebug.enable(createDebug.load());
      return createDebug;
    }

    module.exports = setup;
  }, {
    "ms": 248
  }],
  127: [function (require, module, exports) {
    'use strict'; // From https://github.com/sindresorhus/random-int/blob/c37741b56f76b9160b0b63dae4e9c64875128146/index.js#L13-L15

    var randomInteger = function randomInteger(minimum, maximum) {
      return Math.floor(Math.random() * (maximum - minimum + 1) + minimum);
    };

    var createAbortError = function createAbortError() {
      var error = new Error('Delay aborted');
      error.name = 'AbortError';
      return error;
    };

    var createDelay = function createDelay(_ref10) {
      var defaultClear = _ref10.clearTimeout,
          set = _ref10.setTimeout,
          willResolve = _ref10.willResolve;
      return function (ms) {
        var _ref11 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            value = _ref11.value,
            signal = _ref11.signal;

        if (signal && signal.aborted) {
          return Promise.reject(createAbortError());
        }

        var timeoutId;
        var settle;
        var rejectFn;
        var clear = defaultClear || clearTimeout;

        var signalListener = function signalListener() {
          clear(timeoutId);
          rejectFn(createAbortError());
        };

        var cleanup = function cleanup() {
          if (signal) {
            signal.removeEventListener('abort', signalListener);
          }
        };

        var delayPromise = new Promise(function (resolve, reject) {
          settle = function settle() {
            cleanup();

            if (willResolve) {
              resolve(value);
            } else {
              reject(value);
            }
          };

          rejectFn = reject;
          timeoutId = (set || setTimeout)(settle, ms);
        });

        if (signal) {
          signal.addEventListener('abort', signalListener, {
            once: true
          });
        }

        delayPromise.clear = function () {
          clear(timeoutId);
          timeoutId = null;
          settle();
        };

        return delayPromise;
      };
    };

    var delay = createDelay({
      willResolve: true
    });
    delay.reject = createDelay({
      willResolve: false
    });

    delay.range = function (minimum, maximum, options) {
      return delay(randomInteger(minimum, maximum), options);
    };

    delay.createWithTimers = function (_ref12) {
      var clearTimeout = _ref12.clearTimeout,
          setTimeout = _ref12.setTimeout;
      var delay = createDelay({
        clearTimeout: clearTimeout,
        setTimeout: setTimeout,
        willResolve: true
      });
      delay.reject = createDelay({
        clearTimeout: clearTimeout,
        setTimeout: setTimeout,
        willResolve: false
      });
      return delay;
    };

    module.exports = delay; // TODO: Remove this for the next major release

    module.exports.default = delay;
  }, {}],
  128: [function (require, module, exports) {
    'use strict';

    exports.utils = require('./des/utils');
    exports.Cipher = require('./des/cipher');
    exports.DES = require('./des/des');
    exports.CBC = require('./des/cbc');
    exports.EDE = require('./des/ede');
  }, {
    "./des/cbc": 129,
    "./des/cipher": 130,
    "./des/des": 131,
    "./des/ede": 132,
    "./des/utils": 133
  }],
  129: [function (require, module, exports) {
    'use strict';

    var assert = require('minimalistic-assert');

    var inherits = require('inherits');

    var proto = {};

    function CBCState(iv) {
      assert.equal(iv.length, 8, 'Invalid IV length');
      this.iv = new Array(8);

      for (var i = 0; i < this.iv.length; i++) {
        this.iv[i] = iv[i];
      }
    }

    function instantiate(Base) {
      function CBC(options) {
        Base.call(this, options);

        this._cbcInit();
      }

      inherits(CBC, Base);
      var keys = Object.keys(proto);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        CBC.prototype[key] = proto[key];
      }

      CBC.create = function create(options) {
        return new CBC(options);
      };

      return CBC;
    }

    exports.instantiate = instantiate;

    proto._cbcInit = function _cbcInit() {
      var state = new CBCState(this.options.iv);
      this._cbcState = state;
    };

    proto._update = function _update(inp, inOff, out, outOff) {
      var state = this._cbcState;
      var superProto = this.constructor.super_.prototype;
      var iv = state.iv;

      if (this.type === 'encrypt') {
        for (var i = 0; i < this.blockSize; i++) {
          iv[i] ^= inp[inOff + i];
        }

        superProto._update.call(this, iv, 0, out, outOff);

        for (var i = 0; i < this.blockSize; i++) {
          iv[i] = out[outOff + i];
        }
      } else {
        superProto._update.call(this, inp, inOff, out, outOff);

        for (var i = 0; i < this.blockSize; i++) {
          out[outOff + i] ^= iv[i];
        }

        for (var i = 0; i < this.blockSize; i++) {
          iv[i] = inp[inOff + i];
        }
      }
    };
  }, {
    "inherits": 217,
    "minimalistic-assert": 245
  }],
  130: [function (require, module, exports) {
    'use strict';

    var assert = require('minimalistic-assert');

    function Cipher(options) {
      this.options = options;
      this.type = this.options.type;
      this.blockSize = 8;

      this._init();

      this.buffer = new Array(this.blockSize);
      this.bufferOff = 0;
    }

    module.exports = Cipher;

    Cipher.prototype._init = function _init() {// Might be overrided
    };

    Cipher.prototype.update = function update(data) {
      if (data.length === 0) return [];
      if (this.type === 'decrypt') return this._updateDecrypt(data);else return this._updateEncrypt(data);
    };

    Cipher.prototype._buffer = function _buffer(data, off) {
      // Append data to buffer
      var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);

      for (var i = 0; i < min; i++) {
        this.buffer[this.bufferOff + i] = data[off + i];
      }

      this.bufferOff += min; // Shift next

      return min;
    };

    Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
      this._update(this.buffer, 0, out, off);

      this.bufferOff = 0;
      return this.blockSize;
    };

    Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
      var inputOff = 0;
      var outputOff = 0;
      var count = (this.bufferOff + data.length) / this.blockSize | 0;
      var out = new Array(count * this.blockSize);

      if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);
        if (this.bufferOff === this.buffer.length) outputOff += this._flushBuffer(out, outputOff);
      } // Write blocks


      var max = data.length - (data.length - inputOff) % this.blockSize;

      for (; inputOff < max; inputOff += this.blockSize) {
        this._update(data, inputOff, out, outputOff);

        outputOff += this.blockSize;
      } // Queue rest


      for (; inputOff < data.length; inputOff++, this.bufferOff++) {
        this.buffer[this.bufferOff] = data[inputOff];
      }

      return out;
    };

    Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
      var inputOff = 0;
      var outputOff = 0;
      var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
      var out = new Array(count * this.blockSize); // TODO(indutny): optimize it, this is far from optimal

      for (; count > 0; count--) {
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
      } // Buffer rest of the input


      inputOff += this._buffer(data, inputOff);
      return out;
    };

    Cipher.prototype.final = function final(buffer) {
      var first;
      if (buffer) first = this.update(buffer);
      var last;
      if (this.type === 'encrypt') last = this._finalEncrypt();else last = this._finalDecrypt();
      if (first) return first.concat(last);else return last;
    };

    Cipher.prototype._pad = function _pad(buffer, off) {
      if (off === 0) return false;

      while (off < buffer.length) {
        buffer[off++] = 0;
      }

      return true;
    };

    Cipher.prototype._finalEncrypt = function _finalEncrypt() {
      if (!this._pad(this.buffer, this.bufferOff)) return [];
      var out = new Array(this.blockSize);

      this._update(this.buffer, 0, out, 0);

      return out;
    };

    Cipher.prototype._unpad = function _unpad(buffer) {
      return buffer;
    };

    Cipher.prototype._finalDecrypt = function _finalDecrypt() {
      assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
      var out = new Array(this.blockSize);

      this._flushBuffer(out, 0);

      return this._unpad(out);
    };
  }, {
    "minimalistic-assert": 245
  }],
  131: [function (require, module, exports) {
    'use strict';

    var assert = require('minimalistic-assert');

    var inherits = require('inherits');

    var utils = require('./utils');

    var Cipher = require('./cipher');

    function DESState() {
      this.tmp = new Array(2);
      this.keys = null;
    }

    function DES(options) {
      Cipher.call(this, options);
      var state = new DESState();
      this._desState = state;
      this.deriveKeys(state, options.key);
    }

    inherits(DES, Cipher);
    module.exports = DES;

    DES.create = function create(options) {
      return new DES(options);
    };

    var shiftTable = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];

    DES.prototype.deriveKeys = function deriveKeys(state, key) {
      state.keys = new Array(16 * 2);
      assert.equal(key.length, this.blockSize, 'Invalid key length');
      var kL = utils.readUInt32BE(key, 0);
      var kR = utils.readUInt32BE(key, 4);
      utils.pc1(kL, kR, state.tmp, 0);
      kL = state.tmp[0];
      kR = state.tmp[1];

      for (var i = 0; i < state.keys.length; i += 2) {
        var shift = shiftTable[i >>> 1];
        kL = utils.r28shl(kL, shift);
        kR = utils.r28shl(kR, shift);
        utils.pc2(kL, kR, state.keys, i);
      }
    };

    DES.prototype._update = function _update(inp, inOff, out, outOff) {
      var state = this._desState;
      var l = utils.readUInt32BE(inp, inOff);
      var r = utils.readUInt32BE(inp, inOff + 4); // Initial Permutation

      utils.ip(l, r, state.tmp, 0);
      l = state.tmp[0];
      r = state.tmp[1];
      if (this.type === 'encrypt') this._encrypt(state, l, r, state.tmp, 0);else this._decrypt(state, l, r, state.tmp, 0);
      l = state.tmp[0];
      r = state.tmp[1];
      utils.writeUInt32BE(out, l, outOff);
      utils.writeUInt32BE(out, r, outOff + 4);
    };

    DES.prototype._pad = function _pad(buffer, off) {
      var value = buffer.length - off;

      for (var i = off; i < buffer.length; i++) {
        buffer[i] = value;
      }

      return true;
    };

    DES.prototype._unpad = function _unpad(buffer) {
      var pad = buffer[buffer.length - 1];

      for (var i = buffer.length - pad; i < buffer.length; i++) {
        assert.equal(buffer[i], pad);
      }

      return buffer.slice(0, buffer.length - pad);
    };

    DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
      var l = lStart;
      var r = rStart; // Apply f() x16 times

      for (var i = 0; i < state.keys.length; i += 2) {
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1]; // f(r, k)

        utils.expand(r, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
        var t = r;
        r = (l ^ f) >>> 0;
        l = t;
      } // Reverse Initial Permutation


      utils.rip(r, l, out, off);
    };

    DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
      var l = rStart;
      var r = lStart; // Apply f() x16 times

      for (var i = state.keys.length - 2; i >= 0; i -= 2) {
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1]; // f(r, k)

        utils.expand(l, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
        var t = l;
        l = (r ^ f) >>> 0;
        r = t;
      } // Reverse Initial Permutation


      utils.rip(l, r, out, off);
    };
  }, {
    "./cipher": 130,
    "./utils": 133,
    "inherits": 217,
    "minimalistic-assert": 245
  }],
  132: [function (require, module, exports) {
    'use strict';

    var assert = require('minimalistic-assert');

    var inherits = require('inherits');

    var Cipher = require('./cipher');

    var DES = require('./des');

    function EDEState(type, key) {
      assert.equal(key.length, 24, 'Invalid key length');
      var k1 = key.slice(0, 8);
      var k2 = key.slice(8, 16);
      var k3 = key.slice(16, 24);

      if (type === 'encrypt') {
        this.ciphers = [DES.create({
          type: 'encrypt',
          key: k1
        }), DES.create({
          type: 'decrypt',
          key: k2
        }), DES.create({
          type: 'encrypt',
          key: k3
        })];
      } else {
        this.ciphers = [DES.create({
          type: 'decrypt',
          key: k3
        }), DES.create({
          type: 'encrypt',
          key: k2
        }), DES.create({
          type: 'decrypt',
          key: k1
        })];
      }
    }

    function EDE(options) {
      Cipher.call(this, options);
      var state = new EDEState(this.type, this.options.key);
      this._edeState = state;
    }

    inherits(EDE, Cipher);
    module.exports = EDE;

    EDE.create = function create(options) {
      return new EDE(options);
    };

    EDE.prototype._update = function _update(inp, inOff, out, outOff) {
      var state = this._edeState;

      state.ciphers[0]._update(inp, inOff, out, outOff);

      state.ciphers[1]._update(out, outOff, out, outOff);

      state.ciphers[2]._update(out, outOff, out, outOff);
    };

    EDE.prototype._pad = DES.prototype._pad;
    EDE.prototype._unpad = DES.prototype._unpad;
  }, {
    "./cipher": 130,
    "./des": 131,
    "inherits": 217,
    "minimalistic-assert": 245
  }],
  133: [function (require, module, exports) {
    'use strict';

    exports.readUInt32BE = function readUInt32BE(bytes, off) {
      var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
      return res >>> 0;
    };

    exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
      bytes[0 + off] = value >>> 24;
      bytes[1 + off] = value >>> 16 & 0xff;
      bytes[2 + off] = value >>> 8 & 0xff;
      bytes[3 + off] = value & 0xff;
    };

    exports.ip = function ip(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;

      for (var i = 6; i >= 0; i -= 2) {
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inR >>> j + i & 1;
        }

        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inL >>> j + i & 1;
        }
      }

      for (var i = 6; i >= 0; i -= 2) {
        for (var j = 1; j <= 25; j += 8) {
          outR <<= 1;
          outR |= inR >>> j + i & 1;
        }

        for (var j = 1; j <= 25; j += 8) {
          outR <<= 1;
          outR |= inL >>> j + i & 1;
        }
      }

      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };

    exports.rip = function rip(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;

      for (var i = 0; i < 4; i++) {
        for (var j = 24; j >= 0; j -= 8) {
          outL <<= 1;
          outL |= inR >>> j + i & 1;
          outL <<= 1;
          outL |= inL >>> j + i & 1;
        }
      }

      for (var i = 4; i < 8; i++) {
        for (var j = 24; j >= 0; j -= 8) {
          outR <<= 1;
          outR |= inR >>> j + i & 1;
          outR <<= 1;
          outR |= inL >>> j + i & 1;
        }
      }

      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };

    exports.pc1 = function pc1(inL, inR, out, off) {
      var outL = 0;
      var outR = 0; // 7, 15, 23, 31, 39, 47, 55, 63
      // 6, 14, 22, 30, 39, 47, 55, 63
      // 5, 13, 21, 29, 39, 47, 55, 63
      // 4, 12, 20, 28

      for (var i = 7; i >= 5; i--) {
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inR >> j + i & 1;
        }

        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inL >> j + i & 1;
        }
      }

      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= inR >> j + i & 1;
      } // 1, 9, 17, 25, 33, 41, 49, 57
      // 2, 10, 18, 26, 34, 42, 50, 58
      // 3, 11, 19, 27, 35, 43, 51, 59
      // 36, 44, 52, 60


      for (var i = 1; i <= 3; i++) {
        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= inR >> j + i & 1;
        }

        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= inL >> j + i & 1;
        }
      }

      for (var j = 0; j <= 24; j += 8) {
        outR <<= 1;
        outR |= inL >> j + i & 1;
      }

      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };

    exports.r28shl = function r28shl(num, shift) {
      return num << shift & 0xfffffff | num >>> 28 - shift;
    };

    var pc2table = [// inL => outL
    14, 11, 17, 4, 27, 23, 25, 0, 13, 22, 7, 18, 5, 9, 16, 24, 2, 20, 12, 21, 1, 8, 15, 26, // inR => outR
    15, 4, 25, 19, 9, 1, 26, 16, 5, 11, 23, 8, 12, 7, 17, 0, 22, 3, 10, 14, 6, 20, 27, 24];

    exports.pc2 = function pc2(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
      var len = pc2table.length >>> 1;

      for (var i = 0; i < len; i++) {
        outL <<= 1;
        outL |= inL >>> pc2table[i] & 0x1;
      }

      for (var i = len; i < pc2table.length; i++) {
        outR <<= 1;
        outR |= inR >>> pc2table[i] & 0x1;
      }

      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };

    exports.expand = function expand(r, out, off) {
      var outL = 0;
      var outR = 0;
      outL = (r & 1) << 5 | r >>> 27;

      for (var i = 23; i >= 15; i -= 4) {
        outL <<= 6;
        outL |= r >>> i & 0x3f;
      }

      for (var i = 11; i >= 3; i -= 4) {
        outR |= r >>> i & 0x3f;
        outR <<= 6;
      }

      outR |= (r & 0x1f) << 1 | r >>> 31;
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };

    var sTable = [14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11];

    exports.substitute = function substitute(inL, inR) {
      var out = 0;

      for (var i = 0; i < 4; i++) {
        var b = inL >>> 18 - i * 6 & 0x3f;
        var sb = sTable[i * 0x40 + b];
        out <<= 4;
        out |= sb;
      }

      for (var i = 0; i < 4; i++) {
        var b = inR >>> 18 - i * 6 & 0x3f;
        var sb = sTable[4 * 0x40 + i * 0x40 + b];
        out <<= 4;
        out |= sb;
      }

      return out >>> 0;
    };

    var permuteTable = [16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7];

    exports.permute = function permute(num) {
      var out = 0;

      for (var i = 0; i < permuteTable.length; i++) {
        out <<= 1;
        out |= num >>> permuteTable[i] & 0x1;
      }

      return out >>> 0;
    };

    exports.padSplit = function padSplit(num, size, group) {
      var str = num.toString(2);

      while (str.length < size) {
        str = '0' + str;
      }

      var out = [];

      for (var i = 0; i < size; i += group) {
        out.push(str.slice(i, i + group));
      }

      return out.join(' ');
    };
  }, {}],
  134: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        var generatePrime = require('./lib/generatePrime');

        var primes = require('./lib/primes.json');

        var DH = require('./lib/dh');

        function getDiffieHellman(mod) {
          var prime = new Buffer(primes[mod].prime, 'hex');
          var gen = new Buffer(primes[mod].gen, 'hex');
          return new DH(prime, gen);
        }

        var ENCODINGS = {
          'binary': true,
          'hex': true,
          'base64': true
        };

        function createDiffieHellman(prime, enc, generator, genc) {
          if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
            return createDiffieHellman(prime, 'binary', enc, generator);
          }

          enc = enc || 'binary';
          genc = genc || 'binary';
          generator = generator || new Buffer([2]);

          if (!Buffer.isBuffer(generator)) {
            generator = new Buffer(generator, genc);
          }

          if (typeof prime === 'number') {
            return new DH(generatePrime(prime, generator), generator, true);
          }

          if (!Buffer.isBuffer(prime)) {
            prime = new Buffer(prime, enc);
          }

          return new DH(prime, generator, true);
        }

        exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
        exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "./lib/dh": 135,
    "./lib/generatePrime": 136,
    "./lib/primes.json": 137,
    "buffer": 102
  }],
  135: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        var BN = require('bn.js');

        var MillerRabin = require('miller-rabin');

        var millerRabin = new MillerRabin();
        var TWENTYFOUR = new BN(24);
        var ELEVEN = new BN(11);
        var TEN = new BN(10);
        var THREE = new BN(3);
        var SEVEN = new BN(7);

        var primes = require('./generatePrime');

        var randomBytes = require('randombytes');

        module.exports = DH;

        function setPublicKey(pub, enc) {
          enc = enc || 'utf8';

          if (!Buffer.isBuffer(pub)) {
            pub = new Buffer(pub, enc);
          }

          this._pub = new BN(pub);
          return this;
        }

        function setPrivateKey(priv, enc) {
          enc = enc || 'utf8';

          if (!Buffer.isBuffer(priv)) {
            priv = new Buffer(priv, enc);
          }

          this._priv = new BN(priv);
          return this;
        }

        var primeCache = {};

        function checkPrime(prime, generator) {
          var gen = generator.toString('hex');
          var hex = [gen, prime.toString(16)].join('_');

          if (hex in primeCache) {
            return primeCache[hex];
          }

          var error = 0;

          if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
            //not a prime so +1
            error += 1;

            if (gen === '02' || gen === '05') {
              // we'd be able to check the generator
              // it would fail so +8
              error += 8;
            } else {
              //we wouldn't be able to test the generator
              // so +4
              error += 4;
            }

            primeCache[hex] = error;
            return error;
          }

          if (!millerRabin.test(prime.shrn(1))) {
            //not a safe prime
            error += 2;
          }

          var rem;

          switch (gen) {
            case '02':
              if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
                // unsuidable generator
                error += 8;
              }

              break;

            case '05':
              rem = prime.mod(TEN);

              if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
                // prime mod 10 needs to equal 3 or 7
                error += 8;
              }

              break;

            default:
              error += 4;
          }

          primeCache[hex] = error;
          return error;
        }

        function DH(prime, generator, malleable) {
          this.setGenerator(generator);
          this.__prime = new BN(prime);
          this._prime = BN.mont(this.__prime);
          this._primeLen = prime.length;
          this._pub = undefined;
          this._priv = undefined;
          this._primeCode = undefined;

          if (malleable) {
            this.setPublicKey = setPublicKey;
            this.setPrivateKey = setPrivateKey;
          } else {
            this._primeCode = 8;
          }
        }

        Object.defineProperty(DH.prototype, 'verifyError', {
          enumerable: true,
          get: function get() {
            if (typeof this._primeCode !== 'number') {
              this._primeCode = checkPrime(this.__prime, this.__gen);
            }

            return this._primeCode;
          }
        });

        DH.prototype.generateKeys = function () {
          if (!this._priv) {
            this._priv = new BN(randomBytes(this._primeLen));
          }

          this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
          return this.getPublicKey();
        };

        DH.prototype.computeSecret = function (other) {
          other = new BN(other);
          other = other.toRed(this._prime);
          var secret = other.redPow(this._priv).fromRed();
          var out = new Buffer(secret.toArray());
          var prime = this.getPrime();

          if (out.length < prime.length) {
            var front = new Buffer(prime.length - out.length);
            front.fill(0);
            out = Buffer.concat([front, out]);
          }

          return out;
        };

        DH.prototype.getPublicKey = function getPublicKey(enc) {
          return formatReturnValue(this._pub, enc);
        };

        DH.prototype.getPrivateKey = function getPrivateKey(enc) {
          return formatReturnValue(this._priv, enc);
        };

        DH.prototype.getPrime = function (enc) {
          return formatReturnValue(this.__prime, enc);
        };

        DH.prototype.getGenerator = function (enc) {
          return formatReturnValue(this._gen, enc);
        };

        DH.prototype.setGenerator = function (gen, enc) {
          enc = enc || 'utf8';

          if (!Buffer.isBuffer(gen)) {
            gen = new Buffer(gen, enc);
          }

          this.__gen = gen;
          this._gen = new BN(gen);
          return this;
        };

        function formatReturnValue(bn, enc) {
          var buf = new Buffer(bn.toArray());

          if (!enc) {
            return buf;
          } else {
            return buf.toString(enc);
          }
        }
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "./generatePrime": 136,
    "bn.js": 54,
    "buffer": 102,
    "miller-rabin": 244,
    "randombytes": 291
  }],
  136: [function (require, module, exports) {
    var randomBytes = require('randombytes');

    module.exports = findPrime;
    findPrime.simpleSieve = simpleSieve;
    findPrime.fermatTest = fermatTest;

    var BN = require('bn.js');

    var TWENTYFOUR = new BN(24);

    var MillerRabin = require('miller-rabin');

    var millerRabin = new MillerRabin();
    var ONE = new BN(1);
    var TWO = new BN(2);
    var FIVE = new BN(5);
    var SIXTEEN = new BN(16);
    var EIGHT = new BN(8);
    var TEN = new BN(10);
    var THREE = new BN(3);
    var SEVEN = new BN(7);
    var ELEVEN = new BN(11);
    var FOUR = new BN(4);
    var TWELVE = new BN(12);
    var primes = null;

    function _getPrimes() {
      if (primes !== null) return primes;
      var limit = 0x100000;
      var res = [];
      res[0] = 2;

      for (var i = 1, k = 3; k < limit; k += 2) {
        var sqrt = Math.ceil(Math.sqrt(k));

        for (var j = 0; j < i && res[j] <= sqrt; j++) {
          if (k % res[j] === 0) break;
        }

        if (i !== j && res[j] <= sqrt) continue;
        res[i++] = k;
      }

      primes = res;
      return res;
    }

    function simpleSieve(p) {
      var primes = _getPrimes();

      for (var i = 0; i < primes.length; i++) {
        if (p.modn(primes[i]) === 0) {
          if (p.cmpn(primes[i]) === 0) {
            return true;
          } else {
            return false;
          }
        }
      }

      return true;
    }

    function fermatTest(p) {
      var red = BN.mont(p);
      return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
    }

    function findPrime(bits, gen) {
      if (bits < 16) {
        // this is what openssl does
        if (gen === 2 || gen === 5) {
          return new BN([0x8c, 0x7b]);
        } else {
          return new BN([0x8c, 0x27]);
        }
      }

      gen = new BN(gen);
      var num, n2;

      while (true) {
        num = new BN(randomBytes(Math.ceil(bits / 8)));

        while (num.bitLength() > bits) {
          num.ishrn(1);
        }

        if (num.isEven()) {
          num.iadd(ONE);
        }

        if (!num.testn(1)) {
          num.iadd(TWO);
        }

        if (!gen.cmp(TWO)) {
          while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
            num.iadd(FOUR);
          }
        } else if (!gen.cmp(FIVE)) {
          while (num.mod(TEN).cmp(THREE)) {
            num.iadd(FOUR);
          }
        }

        n2 = num.shrn(1);

        if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) {
          return num;
        }
      }
    }
  }, {
    "bn.js": 54,
    "miller-rabin": 244,
    "randombytes": 291
  }],
  137: [function (require, module, exports) {
    module.exports = {
      "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
      },
      "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
      },
      "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
      },
      "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
      },
      "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
      },
      "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
      },
      "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
      },
      "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
      }
    };
  }, {}],
  138: [function (require, module, exports) {
    (function (process, Buffer) {
      (function () {
        var stream = require('readable-stream');

        var eos = require('end-of-stream');

        var inherits = require('inherits');

        var shift = require('stream-shift');

        var SIGNAL_FLUSH = Buffer.from && Buffer.from !== Uint8Array.from ? Buffer.from([0]) : new Buffer([0]);

        var onuncork = function onuncork(self, fn) {
          if (self._corked) self.once('uncork', fn);else fn();
        };

        var autoDestroy = function autoDestroy(self, err) {
          if (self._autoDestroy) self.destroy(err);
        };

        var destroyer = function destroyer(self, end) {
          return function (err) {
            if (err) autoDestroy(self, err.message === 'premature close' ? null : err);else if (end && !self._ended) self.end();
          };
        };

        var end = function end(ws, fn) {
          if (!ws) return fn();
          if (ws._writableState && ws._writableState.finished) return fn();
          if (ws._writableState) return ws.end(fn);
          ws.end();
          fn();
        };

        var toStreams2 = function toStreams2(rs) {
          return new stream.Readable({
            objectMode: true,
            highWaterMark: 16
          }).wrap(rs);
        };

        var Duplexify = function Duplexify(writable, readable, opts) {
          if (!(this instanceof Duplexify)) return new Duplexify(writable, readable, opts);
          stream.Duplex.call(this, opts);
          this._writable = null;
          this._readable = null;
          this._readable2 = null;
          this._autoDestroy = !opts || opts.autoDestroy !== false;
          this._forwardDestroy = !opts || opts.destroy !== false;
          this._forwardEnd = !opts || opts.end !== false;
          this._corked = 1; // start corked

          this._ondrain = null;
          this._drained = false;
          this._forwarding = false;
          this._unwrite = null;
          this._unread = null;
          this._ended = false;
          this.destroyed = false;
          if (writable) this.setWritable(writable);
          if (readable) this.setReadable(readable);
        };

        inherits(Duplexify, stream.Duplex);

        Duplexify.obj = function (writable, readable, opts) {
          if (!opts) opts = {};
          opts.objectMode = true;
          opts.highWaterMark = 16;
          return new Duplexify(writable, readable, opts);
        };

        Duplexify.prototype.cork = function () {
          if (++this._corked === 1) this.emit('cork');
        };

        Duplexify.prototype.uncork = function () {
          if (this._corked && --this._corked === 0) this.emit('uncork');
        };

        Duplexify.prototype.setWritable = function (writable) {
          if (this._unwrite) this._unwrite();

          if (this.destroyed) {
            if (writable && writable.destroy) writable.destroy();
            return;
          }

          if (writable === null || writable === false) {
            this.end();
            return;
          }

          var self = this;
          var unend = eos(writable, {
            writable: true,
            readable: false
          }, destroyer(this, this._forwardEnd));

          var ondrain = function ondrain() {
            var ondrain = self._ondrain;
            self._ondrain = null;
            if (ondrain) ondrain();
          };

          var clear = function clear() {
            self._writable.removeListener('drain', ondrain);

            unend();
          };

          if (this._unwrite) process.nextTick(ondrain); // force a drain on stream reset to avoid livelocks

          this._writable = writable;

          this._writable.on('drain', ondrain);

          this._unwrite = clear;
          this.uncork(); // always uncork setWritable
        };

        Duplexify.prototype.setReadable = function (readable) {
          if (this._unread) this._unread();

          if (this.destroyed) {
            if (readable && readable.destroy) readable.destroy();
            return;
          }

          if (readable === null || readable === false) {
            this.push(null);
            this.resume();
            return;
          }

          var self = this;
          var unend = eos(readable, {
            writable: false,
            readable: true
          }, destroyer(this));

          var onreadable = function onreadable() {
            self._forward();
          };

          var onend = function onend() {
            self.push(null);
          };

          var clear = function clear() {
            self._readable2.removeListener('readable', onreadable);

            self._readable2.removeListener('end', onend);

            unend();
          };

          this._drained = true;
          this._readable = readable;
          this._readable2 = readable._readableState ? readable : toStreams2(readable);

          this._readable2.on('readable', onreadable);

          this._readable2.on('end', onend);

          this._unread = clear;

          this._forward();
        };

        Duplexify.prototype._read = function () {
          this._drained = true;

          this._forward();
        };

        Duplexify.prototype._forward = function () {
          if (this._forwarding || !this._readable2 || !this._drained) return;
          this._forwarding = true;
          var data;

          while (this._drained && (data = shift(this._readable2)) !== null) {
            if (this.destroyed) continue;
            this._drained = this.push(data);
          }

          this._forwarding = false;
        };

        Duplexify.prototype.destroy = function (err) {
          if (this.destroyed) return;
          this.destroyed = true;
          var self = this;
          process.nextTick(function () {
            self._destroy(err);
          });
        };

        Duplexify.prototype._destroy = function (err) {
          if (err) {
            var ondrain = this._ondrain;
            this._ondrain = null;
            if (ondrain) ondrain(err);else this.emit('error', err);
          }

          if (this._forwardDestroy) {
            if (this._readable && this._readable.destroy) this._readable.destroy();
            if (this._writable && this._writable.destroy) this._writable.destroy();
          }

          this.emit('close');
        };

        Duplexify.prototype._write = function (data, enc, cb) {
          if (this.destroyed) return cb();
          if (this._corked) return onuncork(this, this._write.bind(this, data, enc, cb));
          if (data === SIGNAL_FLUSH) return this._finish(cb);
          if (!this._writable) return cb();
          if (this._writable.write(data) === false) this._ondrain = cb;else cb();
        };

        Duplexify.prototype._finish = function (cb) {
          var self = this;
          this.emit('preend');
          onuncork(this, function () {
            end(self._forwardEnd && self._writable, function () {
              // haxx to not emit prefinish twice
              if (self._writableState.prefinished === false) self._writableState.prefinished = true;
              self.emit('prefinish');
              onuncork(self, cb);
            });
          });
        };

        Duplexify.prototype.end = function (data, enc, cb) {
          if (typeof data === 'function') return this.end(null, null, data);
          if (typeof enc === 'function') return this.end(data, null, enc);
          this._ended = true;
          if (data) this.write(data);
          if (!this._writableState.ending) this.write(SIGNAL_FLUSH);
          return stream.Writable.prototype.end.call(this, cb);
        };

        module.exports = Duplexify;
      }).call(this);
    }).call(this, require('_process'), require("buffer").Buffer);
  }, {
    "_process": 276,
    "buffer": 102,
    "end-of-stream": 156,
    "inherits": 217,
    "readable-stream": 307,
    "stream-shift": 363
  }],
  139: [function (require, module, exports) {
    'use strict';

    var elliptic = exports;
    elliptic.version = require('../package.json').version;
    elliptic.utils = require('./elliptic/utils');
    elliptic.rand = require('brorand');
    elliptic.curve = require('./elliptic/curve');
    elliptic.curves = require('./elliptic/curves'); // Protocols

    elliptic.ec = require('./elliptic/ec');
    elliptic.eddsa = require('./elliptic/eddsa');
  }, {
    "../package.json": 154,
    "./elliptic/curve": 142,
    "./elliptic/curves": 145,
    "./elliptic/ec": 146,
    "./elliptic/eddsa": 149,
    "./elliptic/utils": 153,
    "brorand": 55
  }],
  140: [function (require, module, exports) {
    'use strict';

    var BN = require('bn.js');

    var utils = require('../utils');

    var getNAF = utils.getNAF;
    var getJSF = utils.getJSF;
    var assert = utils.assert;

    function BaseCurve(type, conf) {
      this.type = type;
      this.p = new BN(conf.p, 16); // Use Montgomery, when there is no fast reduction for the prime

      this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p); // Useful for many curves

      this.zero = new BN(0).toRed(this.red);
      this.one = new BN(1).toRed(this.red);
      this.two = new BN(2).toRed(this.red); // Curve configuration, optional

      this.n = conf.n && new BN(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed); // Temporary arrays

      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);
      this._bitLength = this.n ? this.n.bitLength() : 0; // Generalized Greg Maxwell's trick

      var adjustCount = this.n && this.p.div(this.n);

      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }

    module.exports = BaseCurve;

    BaseCurve.prototype.point = function point() {
      throw new Error('Not implemented');
    };

    BaseCurve.prototype.validate = function validate() {
      throw new Error('Not implemented');
    };

    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert(p.precomputed);

      var doubles = p._getDoubles();

      var naf = getNAF(k, 1, this._bitLength);
      var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3; // Translate into more windowed form

      var repr = [];

      for (var j = 0; j < naf.length; j += doubles.step) {
        var nafW = 0;

        for (var k = j + doubles.step - 1; k >= j; k--) {
          nafW = (nafW << 1) + naf[k];
        }

        repr.push(nafW);
      }

      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);

      for (var i = I; i > 0; i--) {
        for (var j = 0; j < repr.length; j++) {
          var nafW = repr[j];
          if (nafW === i) b = b.mixedAdd(doubles.points[j]);else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
        }

        a = a.add(b);
      }

      return a.toP();
    };

    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4; // Precompute window

      var nafPoints = p._getNAFPoints(w);

      w = nafPoints.wnd;
      var wnd = nafPoints.points; // Get NAF form

      var naf = getNAF(k, w, this._bitLength); // Add `this`*(N+1) for every w-NAF index

      var acc = this.jpoint(null, null, null);

      for (var i = naf.length - 1; i >= 0; i--) {
        // Count zeroes
        for (var k = 0; i >= 0 && naf[i] === 0; i--) {
          k++;
        }

        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;
        var z = naf[i];
        assert(z !== 0);

        if (p.type === 'affine') {
          // J +- P
          if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else {
          // J +- J
          if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);else acc = acc.add(wnd[-z - 1 >> 1].neg());
        }
      }

      return p.type === 'affine' ? acc.toP() : acc;
    };

    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3; // Fill all arrays

      var max = 0;

      for (var i = 0; i < len; i++) {
        var p = points[i];

        var nafPoints = p._getNAFPoints(defW);

        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      } // Comb small window NAFs


      for (var i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;

        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }

        var comb = [points[a],
        /* 1 */
        null,
        /* 3 */
        null,
        /* 5 */
        points[b]
        /* 7 */
        ]; // Try to avoid Projective points, if possible

        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }

        var index = [-3,
        /* -1 -1 */
        -1,
        /* -1 0 */
        -5,
        /* -1 1 */
        -7,
        /* 0 -1 */
        0,
        /* 0 0 */
        7,
        /* 0 1 */
        5,
        /* 1 -1 */
        1,
        /* 1 0 */
        3
        /* 1 1 */
        ];
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);

        for (var j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;
          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }

      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;

      for (var i = max; i >= 0; i--) {
        var k = 0;

        while (i >= 0) {
          var zero = true;

          for (var j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0) zero = false;
          }

          if (!zero) break;
          k++;
          i--;
        }

        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;

        for (var j = 0; j < len; j++) {
          var z = tmp[j];
          var p;
          if (z === 0) continue;else if (z > 0) p = wnd[j][z - 1 >> 1];else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
          if (p.type === 'affine') acc = acc.mixedAdd(p);else acc = acc.add(p);
        }
      } // Zeroify references


      for (var i = 0; i < len; i++) {
        wnd[i] = null;
      }

      if (jacobianResult) return acc;else return acc.toP();
    };

    function BasePoint(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }

    BaseCurve.BasePoint = BasePoint;

    BasePoint.prototype.eq = function eq()
    /*other*/
    {
      throw new Error('Not implemented');
    };

    BasePoint.prototype.validate = function validate() {
      return this.curve.validate(this);
    };

    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils.toArray(bytes, enc);
      var len = this.p.byteLength(); // uncompressed, hybrid-odd, hybrid-even

      if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
      } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
      }

      throw new Error('Unknown point format');
    };

    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };

    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray('be', len);
      if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);
      return [0x04].concat(x, this.getY().toArray('be', len));
    };

    BasePoint.prototype.encode = function encode(enc, compact) {
      return utils.encode(this._encode(compact), enc);
    };

    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed) return this;
      var precomputed = {
        doubles: null,
        naf: null,
        beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
      return this;
    };

    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed) return false;
      var doubles = this.precomputed.doubles;
      if (!doubles) return false;
      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };

    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
      var doubles = [this];
      var acc = this;

      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++) {
          acc = acc.dbl();
        }

        doubles.push(acc);
      }

      return {
        step: step,
        points: doubles
      };
    };

    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
      var res = [this];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();

      for (var i = 1; i < max; i++) {
        res[i] = res[i - 1].add(dbl);
      }

      return {
        wnd: wnd,
        points: res
      };
    };

    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };

    BasePoint.prototype.dblp = function dblp(k) {
      var r = this;

      for (var i = 0; i < k; i++) {
        r = r.dbl();
      }

      return r;
    };
  }, {
    "../utils": 153,
    "bn.js": 54
  }],
  141: [function (require, module, exports) {
    'use strict';

    var utils = require('../utils');

    var BN = require('bn.js');

    var inherits = require('inherits');

    var Base = require('./base');

    var assert = utils.assert;

    function EdwardsCurve(conf) {
      // NOTE: Important as we are creating point in Base.call()
      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;
      Base.call(this, 'edwards', conf);
      this.a = new BN(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new BN(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new BN(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);
      assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
    }

    inherits(EdwardsCurve, Base);
    module.exports = EdwardsCurve;

    EdwardsCurve.prototype._mulA = function _mulA(num) {
      if (this.mOneA) return num.redNeg();else return this.a.redMul(num);
    };

    EdwardsCurve.prototype._mulC = function _mulC(num) {
      if (this.oneC) return num;else return this.c.redMul(num);
    }; // Just for compatibility with Short curve


    EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
      return this.point(x, y, z, t);
    };

    EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN(x, 16);
      if (!x.red) x = x.toRed(this.red);
      var x2 = x.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x2));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
      var y2 = rhs.redMul(lhs.redInvm());
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
      return this.point(x, y);
    };

    EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
      y = new BN(y, 16);
      if (!y.red) y = y.toRed(this.red); // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)

      var y2 = y.redSqr();
      var lhs = y2.redSub(this.c2);
      var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
      var x2 = lhs.redMul(rhs.redInvm());

      if (x2.cmp(this.zero) === 0) {
        if (odd) throw new Error('invalid point');else return this.point(this.zero, y);
      }

      var x = x2.redSqrt();
      if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error('invalid point');
      if (x.fromRed().isOdd() !== odd) x = x.redNeg();
      return this.point(x, y);
    };

    EdwardsCurve.prototype.validate = function validate(point) {
      if (point.isInfinity()) return true; // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)

      point.normalize();
      var x2 = point.x.redSqr();
      var y2 = point.y.redSqr();
      var lhs = x2.redMul(this.a).redAdd(y2);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
      return lhs.cmp(rhs) === 0;
    };

    function Point(curve, x, y, z, t) {
      Base.BasePoint.call(this, curve, 'projective');

      if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = z ? new BN(z, 16) : this.curve.one;
        this.t = t && new BN(t, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one; // Use extended coordinates

        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
        }
      }
    }

    inherits(Point, Base.BasePoint);

    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };

    EdwardsCurve.prototype.point = function point(x, y, z, t) {
      return new Point(this, x, y, z, t);
    };

    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1], obj[2]);
    };

    Point.prototype.inspect = function inspect() {
      if (this.isInfinity()) return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
    };

    Point.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
    };

    Point.prototype._extDbl = function _extDbl() {
      // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
      //     #doubling-dbl-2008-hwcd
      // 4M + 4S
      // A = X1^2
      var a = this.x.redSqr(); // B = Y1^2

      var b = this.y.redSqr(); // C = 2 * Z1^2

      var c = this.z.redSqr();
      c = c.redIAdd(c); // D = a * A

      var d = this.curve._mulA(a); // E = (X1 + Y1)^2 - A - B


      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b); // G = D + B

      var g = d.redAdd(b); // F = G - C

      var f = g.redSub(c); // H = D - B

      var h = d.redSub(b); // X3 = E * F

      var nx = e.redMul(f); // Y3 = G * H

      var ny = g.redMul(h); // T3 = E * H

      var nt = e.redMul(h); // Z3 = F * G

      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };

    Point.prototype._projDbl = function _projDbl() {
      // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
      //     #doubling-dbl-2008-bbjlp
      //     #doubling-dbl-2007-bl
      // and others
      // Generally 3M + 4S or 2M + 4S
      // B = (X1 + Y1)^2
      var b = this.x.redAdd(this.y).redSqr(); // C = X1^2

      var c = this.x.redSqr(); // D = Y1^2

      var d = this.y.redSqr();
      var nx;
      var ny;
      var nz;

      if (this.curve.twisted) {
        // E = a * C
        var e = this.curve._mulA(c); // F = E + D


        var f = e.redAdd(d);

        if (this.zOne) {
          // X3 = (B - C - D) * (F - 2)
          nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two)); // Y3 = F * (E - D)

          ny = f.redMul(e.redSub(d)); // Z3 = F^2 - 2 * F

          nz = f.redSqr().redSub(f).redSub(f);
        } else {
          // H = Z1^2
          var h = this.z.redSqr(); // J = F - 2 * H

          var j = f.redSub(h).redISub(h); // X3 = (B-C-D)*J

          nx = b.redSub(c).redISub(d).redMul(j); // Y3 = F * (E - D)

          ny = f.redMul(e.redSub(d)); // Z3 = F * J

          nz = f.redMul(j);
        }
      } else {
        // E = C + D
        var e = c.redAdd(d); // H = (c * Z1)^2

        var h = this.curve._mulC(this.z).redSqr(); // J = E - 2 * H


        var j = e.redSub(h).redSub(h); // X3 = c * (B - E) * J

        nx = this.curve._mulC(b.redISub(e)).redMul(j); // Y3 = c * E * (C - D)

        ny = this.curve._mulC(e).redMul(c.redISub(d)); // Z3 = E * J

        nz = e.redMul(j);
      }

      return this.curve.point(nx, ny, nz);
    };

    Point.prototype.dbl = function dbl() {
      if (this.isInfinity()) return this; // Double in extended coordinates

      if (this.curve.extended) return this._extDbl();else return this._projDbl();
    };

    Point.prototype._extAdd = function _extAdd(p) {
      // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
      //     #addition-add-2008-hwcd-3
      // 8M
      // A = (Y1 - X1) * (Y2 - X2)
      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x)); // B = (Y1 + X1) * (Y2 + X2)

      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x)); // C = T1 * k * T2

      var c = this.t.redMul(this.curve.dd).redMul(p.t); // D = Z1 * 2 * Z2

      var d = this.z.redMul(p.z.redAdd(p.z)); // E = B - A

      var e = b.redSub(a); // F = D - C

      var f = d.redSub(c); // G = D + C

      var g = d.redAdd(c); // H = B + A

      var h = b.redAdd(a); // X3 = E * F

      var nx = e.redMul(f); // Y3 = G * H

      var ny = g.redMul(h); // T3 = E * H

      var nt = e.redMul(h); // Z3 = F * G

      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };

    Point.prototype._projAdd = function _projAdd(p) {
      // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
      //     #addition-add-2008-bbjlp
      //     #addition-add-2007-bl
      // 10M + 1S
      // A = Z1 * Z2
      var a = this.z.redMul(p.z); // B = A^2

      var b = a.redSqr(); // C = X1 * X2

      var c = this.x.redMul(p.x); // D = Y1 * Y2

      var d = this.y.redMul(p.y); // E = d * C * D

      var e = this.curve.d.redMul(c).redMul(d); // F = B - E

      var f = b.redSub(e); // G = B + E

      var g = b.redAdd(e); // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)

      var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
      var nx = a.redMul(f).redMul(tmp);
      var ny;
      var nz;

      if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c))); // Z3 = F * G

        nz = f.redMul(g);
      } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c)); // Z3 = c * F * G

        nz = this.curve._mulC(f).redMul(g);
      }

      return this.curve.point(nx, ny, nz);
    };

    Point.prototype.add = function add(p) {
      if (this.isInfinity()) return p;
      if (p.isInfinity()) return this;
      if (this.curve.extended) return this._extAdd(p);else return this._projAdd(p);
    };

    Point.prototype.mul = function mul(k) {
      if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else return this.curve._wnafMul(this, k);
    };

    Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
    };

    Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
    };

    Point.prototype.normalize = function normalize() {
      if (this.zOne) return this; // Normalize coordinates

      var zi = this.z.redInvm();
      this.x = this.x.redMul(zi);
      this.y = this.y.redMul(zi);
      if (this.t) this.t = this.t.redMul(zi);
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };

    Point.prototype.neg = function neg() {
      return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
    };

    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };

    Point.prototype.getY = function getY() {
      this.normalize();
      return this.y.fromRed();
    };

    Point.prototype.eq = function eq(other) {
      return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
    };

    Point.prototype.eqXToP = function eqXToP(x) {
      var rx = x.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0) return true;
      var xc = x.clone();
      var t = this.curve.redN.redMul(this.z);

      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
      }
    }; // Compatibility with BaseCurve


    Point.prototype.toP = Point.prototype.normalize;
    Point.prototype.mixedAdd = Point.prototype.add;
  }, {
    "../utils": 153,
    "./base": 140,
    "bn.js": 54,
    "inherits": 217
  }],
  142: [function (require, module, exports) {
    'use strict';

    var curve = exports;
    curve.base = require('./base');
    curve.short = require('./short');
    curve.mont = require('./mont');
    curve.edwards = require('./edwards');
  }, {
    "./base": 140,
    "./edwards": 141,
    "./mont": 143,
    "./short": 144
  }],
  143: [function (require, module, exports) {
    'use strict';

    var BN = require('bn.js');

    var inherits = require('inherits');

    var Base = require('./base');

    var utils = require('../utils');

    function MontCurve(conf) {
      Base.call(this, 'mont', conf);
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.i4 = new BN(4).toRed(this.red).redInvm();
      this.two = new BN(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }

    inherits(MontCurve, Base);
    module.exports = MontCurve;

    MontCurve.prototype.validate = function validate(point) {
      var x = point.normalize().x;
      var x2 = x.redSqr();
      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
      var y = rhs.redSqrt();
      return y.redSqr().cmp(rhs) === 0;
    };

    function Point(curve, x, z) {
      Base.BasePoint.call(this, curve, 'projective');

      if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new BN(x, 16);
        this.z = new BN(z, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
      }
    }

    inherits(Point, Base.BasePoint);

    MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      return this.point(utils.toArray(bytes, enc), 1);
    };

    MontCurve.prototype.point = function point(x, z) {
      return new Point(this, x, z);
    };

    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };

    Point.prototype.precompute = function precompute() {// No-op
    };

    Point.prototype._encode = function _encode() {
      return this.getX().toArray('be', this.curve.p.byteLength());
    };

    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1] || curve.one);
    };

    Point.prototype.inspect = function inspect() {
      if (this.isInfinity()) return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
    };

    Point.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };

    Point.prototype.dbl = function dbl() {
      // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
      // 2M + 2S + 4A
      // A = X1 + Z1
      var a = this.x.redAdd(this.z); // AA = A^2

      var aa = a.redSqr(); // B = X1 - Z1

      var b = this.x.redSub(this.z); // BB = B^2

      var bb = b.redSqr(); // C = AA - BB

      var c = aa.redSub(bb); // X3 = AA * BB

      var nx = aa.redMul(bb); // Z3 = C * (BB + A24 * C)

      var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
      return this.curve.point(nx, nz);
    };

    Point.prototype.add = function add() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point.prototype.diffAdd = function diffAdd(p, diff) {
      // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
      // 4M + 2S + 6A
      // A = X2 + Z2
      var a = this.x.redAdd(this.z); // B = X2 - Z2

      var b = this.x.redSub(this.z); // C = X3 + Z3

      var c = p.x.redAdd(p.z); // D = X3 - Z3

      var d = p.x.redSub(p.z); // DA = D * A

      var da = d.redMul(a); // CB = C * B

      var cb = c.redMul(b); // X5 = Z1 * (DA + CB)^2

      var nx = diff.z.redMul(da.redAdd(cb).redSqr()); // Z5 = X1 * (DA - CB)^2

      var nz = diff.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };

    Point.prototype.mul = function mul(k) {
      var t = k.clone();
      var a = this; // (N / 2) * Q + Q

      var b = this.curve.point(null, null); // (N / 2) * Q

      var c = this; // Q

      for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1)) {
        bits.push(t.andln(1));
      }

      for (var i = bits.length - 1; i >= 0; i--) {
        if (bits[i] === 0) {
          // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
          a = a.diffAdd(b, c); // N * Q = 2 * ((N / 2) * Q + Q))

          b = b.dbl();
        } else {
          // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
          b = a.diffAdd(b, c); // N * Q + Q = 2 * ((N / 2) * Q + Q)

          a = a.dbl();
        }
      }

      return b;
    };

    Point.prototype.mulAdd = function mulAdd() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point.prototype.jumlAdd = function jumlAdd() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point.prototype.eq = function eq(other) {
      return this.getX().cmp(other.getX()) === 0;
    };

    Point.prototype.normalize = function normalize() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };

    Point.prototype.getX = function getX() {
      // Normalize coordinates
      this.normalize();
      return this.x.fromRed();
    };
  }, {
    "../utils": 153,
    "./base": 140,
    "bn.js": 54,
    "inherits": 217
  }],
  144: [function (require, module, exports) {
    'use strict';

    var utils = require('../utils');

    var BN = require('bn.js');

    var inherits = require('inherits');

    var Base = require('./base');

    var assert = utils.assert;

    function ShortCurve(conf) {
      Base.call(this, 'short', conf);
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();
      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0; // If the curve is endomorphic, precalculate beta and lambda

      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }

    inherits(ShortCurve, Base);
    module.exports = ShortCurve;

    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      // No efficient endomorphism
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return; // Compute beta and lambda, that lambda * P = (beta * Px; Py)

      var beta;
      var lambda;

      if (conf.beta) {
        beta = new BN(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p); // Choose the smallest beta


        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }

      if (conf.lambda) {
        lambda = new BN(conf.lambda, 16);
      } else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);

        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      } // Get basis vectors, used for balanced length-two representation


      var basis;

      if (conf.basis) {
        basis = conf.basis.map(function (vec) {
          return {
            a: new BN(vec.a, 16),
            b: new BN(vec.b, 16)
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }

      return {
        beta: beta,
        lambda: lambda,
        basis: basis
      };
    };

    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      // Find roots of for x^2 + x + 1 in F
      // Root = (-1 +- Sqrt(-3)) / 2
      //
      var red = num === this.p ? this.red : BN.mont(num);
      var tinv = new BN(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
      var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [l1, l2];
    };

    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      // aprxSqrt >= sqrt(this.n)
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2)); // 3.74
      // Run EGCD, until r(L + 1) < aprxSqrt

      var u = lambda;
      var v = this.n.clone();
      var x1 = new BN(1);
      var y1 = new BN(0);
      var x2 = new BN(0);
      var y2 = new BN(1); // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)

      var a0;
      var b0; // First vector

      var a1;
      var b1; // Second vector

      var a2;
      var b2;
      var prevR;
      var i = 0;
      var r;
      var x;

      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));

        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }

        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }

      a2 = r.neg();
      b2 = x;
      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());

      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      } // Normalize signs


      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }

      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }

      return [{
        a: a1,
        b: b1
      }, {
        a: a2,
        b: b2
      }];
    };

    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];
      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);
      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b); // Calculate answer

      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return {
        k1: k1,
        k2: k2
      };
    };

    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN(x, 16);
      if (!x.red) x = x.toRed(this.red);
      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point'); // XXX Is there any way to tell if the number is odd without converting it
      // to non-red form?

      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
      return this.point(x, y);
    };

    ShortCurve.prototype.validate = function validate(point) {
      if (point.inf) return true;
      var x = point.x;
      var y = point.y;
      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };

    ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;

      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);

        var p = points[i];

        var beta = p._getBeta();

        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }

        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }

        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }

      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult); // Clean-up references to points and coefficients


      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }

      return res;
    };

    function Point(curve, x, y, isRed) {
      Base.BasePoint.call(this, curve, 'affine');

      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16); // Force redgomery representation when loading from JSON

        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }

        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }

    inherits(Point, Base.BasePoint);

    ShortCurve.prototype.point = function point(x, y, isRed) {
      return new Point(this, x, y, isRed);
    };

    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };

    Point.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo) return;
      var pre = this.precomputed;
      if (pre && pre.beta) return pre.beta;
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);

      if (pre) {
        var curve = this.curve;

        var endoMul = function endoMul(p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };

        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul)
          }
        };
      }

      return beta;
    };

    Point.prototype.toJSON = function toJSON() {
      if (!this.precomputed) return [this.x, this.y];
      return [this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1)
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1)
        }
      }];
    };

    Point.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === 'string') obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2]) return res;

      function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
      }

      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [res].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [res].concat(pre.naf.points.map(obj2point))
        }
      };
      return res;
    };

    Point.prototype.inspect = function inspect() {
      if (this.isInfinity()) return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
    };

    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };

    Point.prototype.add = function add(p) {
      // O + P = P
      if (this.inf) return p; // P + O = P

      if (p.inf) return this; // P + P = 2P

      if (this.eq(p)) return this.dbl(); // P + (-P) = O

      if (this.neg().eq(p)) return this.curve.point(null, null); // P + Q = O

      if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point.prototype.dbl = function dbl() {
      if (this.inf) return this; // 2P = O

      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
      var a = this.curve.a;
      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };

    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };

    Point.prototype.mul = function mul(k) {
      k = new BN(k, 16);
      if (this.isInfinity()) return this;else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k]);else return this.curve._wnafMul(this, k);
    };

    Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);else return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };

    Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };

    Point.prototype.eq = function eq(p) {
      return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };

    Point.prototype.neg = function neg(_precompute) {
      if (this.inf) return this;
      var res = this.curve.point(this.x, this.y.redNeg());

      if (_precompute && this.precomputed) {
        var pre = this.precomputed;

        var negate = function negate(p) {
          return p.neg();
        };

        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate)
          }
        };
      }

      return res;
    };

    Point.prototype.toJ = function toJ() {
      if (this.inf) return this.curve.jpoint(null, null, null);
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };

    function JPoint(curve, x, y, z) {
      Base.BasePoint.call(this, curve, 'jacobian');

      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = new BN(z, 16);
      }

      if (!this.x.red) this.x = this.x.toRed(this.curve.red);
      if (!this.y.red) this.y = this.y.toRed(this.curve.red);
      if (!this.z.red) this.z = this.z.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
    }

    inherits(JPoint, Base.BasePoint);

    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint(this, x, y, z);
    };

    JPoint.prototype.toP = function toP() {
      if (this.isInfinity()) return this.curve.point(null, null);
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
      return this.curve.point(ax, ay);
    };

    JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };

    JPoint.prototype.add = function add(p) {
      // O + P = P
      if (this.isInfinity()) return p; // P + O = P

      if (p.isInfinity()) return this; // 12M + 4S + 7A

      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);

      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.mixedAdd = function mixedAdd(p) {
      // O + P = P
      if (this.isInfinity()) return p.toJ(); // P + O = P

      if (p.isInfinity()) return this; // 8M + 3S + 7A

      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);

      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.dblp = function dblp(pow) {
      if (pow === 0) return this;
      if (this.isInfinity()) return this;
      if (!pow) return this.dbl();

      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;

        for (var i = 0; i < pow; i++) {
          r = r.dbl();
        }

        return r;
      } // 1M + 2S + 1A + N * (4S + 5M + 8A)
      // N = 1 => 6M + 6S + 9A


      var a = this.curve.a;
      var tinv = this.curve.tinv;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr(); // Reuse results

      var jyd = jy.redAdd(jy);

      for (var i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
      }

      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };

    JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity()) return this;
      if (this.curve.zeroA) return this._zeroDbl();else if (this.curve.threeA) return this._threeDbl();else return this._dbl();
    };

    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz; // Z = 1

      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A
        // XX = X1^2
        var xx = this.x.redSqr(); // YY = Y1^2

        var yy = this.y.redSqr(); // YYYY = YY^2

        var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)

        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s); // M = 3 * XX + a; a = 0

        var m = xx.redAdd(xx).redIAdd(xx); // T = M ^ 2 - 2*S

        var t = m.redSqr().redISub(s).redISub(s); // 8 * YYYY

        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8); // X3 = T

        nx = t; // Y3 = M * (S - T) - 8 * YYYY

        ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2*Y1

        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A
        // A = X1^2
        var a = this.x.redSqr(); // B = Y1^2

        var b = this.y.redSqr(); // C = B^2

        var c = b.redSqr(); // D = 2 * ((X1 + B)^2 - A - C)

        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d); // E = 3 * A

        var e = a.redAdd(a).redIAdd(a); // F = E^2

        var f = e.redSqr(); // 8 * C

        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8); // X3 = F - 2 * D

        nx = f.redISub(d).redISub(d); // Y3 = E * (D - X3) - 8 * C

        ny = e.redMul(d.redISub(nx)).redISub(c8); // Z3 = 2 * Y1 * Z1

        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz; // Z = 1

      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A
        // XX = X1^2
        var xx = this.x.redSqr(); // YY = Y1^2

        var yy = this.y.redSqr(); // YYYY = YY^2

        var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)

        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s); // M = 3 * XX + a

        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a); // T = M^2 - 2 * S

        var t = m.redSqr().redISub(s).redISub(s); // X3 = T

        nx = t; // Y3 = M * (S - T) - 8 * YYYY

        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2 * Y1

        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S
        // delta = Z1^2
        var delta = this.z.redSqr(); // gamma = Y1^2

        var gamma = this.y.redSqr(); // beta = X1 * gamma

        var beta = this.x.redMul(gamma); // alpha = 3 * (X1 - delta) * (X1 + delta)

        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha); // X3 = alpha^2 - 8 * beta

        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8); // Z3 = (Y1 + Z1)^2 - gamma - delta

        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta); // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2

        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a; // 4M + 6S + 10A

      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA) return this.dbl().add(this); // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
      // 5M + 10S + ...
      // XX = X1^2

      var xx = this.x.redSqr(); // YY = Y1^2

      var yy = this.y.redSqr(); // ZZ = Z1^2

      var zz = this.z.redSqr(); // YYYY = YY^2

      var yyyy = yy.redSqr(); // M = 3 * XX + a * ZZ2; a = 0

      var m = xx.redAdd(xx).redIAdd(xx); // MM = M^2

      var mm = m.redSqr(); // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM

      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm); // EE = E^2

      var ee = e.redSqr(); // T = 16*YYYY

      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t); // U = (M + E)^2 - MM - EE - T

      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t); // X3 = 4 * (X1 * EE - 4 * YY * U)

      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx); // Y3 = 8 * Y1 * (U * (T - U) - E * EE)

      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny); // Z3 = (Z1 + E)^2 - ZZ - EE

      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.mul = function mul(k, kbase) {
      k = new BN(k, kbase);
      return this.curve._wnafMul(this, k);
    };

    JPoint.prototype.eq = function eq(p) {
      if (p.type === 'affine') return this.eq(p.toJ());
      if (this === p) return true; // x1 * z2^2 == x2 * z1^2

      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false; // y1 * z2^3 == y2 * z1^3

      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };

    JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0) return true;
      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);

      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
      }
    };

    JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity()) return '<EC JPoint Infinity>';
      return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
    };

    JPoint.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };
  }, {
    "../utils": 153,
    "./base": 140,
    "bn.js": 54,
    "inherits": 217
  }],
  145: [function (require, module, exports) {
    'use strict';

    var curves = exports;

    var hash = require('hash.js');

    var curve = require('./curve');

    var utils = require('./utils');

    var assert = utils.assert;

    function PresetCurve(options) {
      if (options.type === 'short') this.curve = new curve.short(options);else if (options.type === 'edwards') this.curve = new curve.edwards(options);else this.curve = new curve.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
      assert(this.g.validate(), 'Invalid curve');
      assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
    }

    curves.PresetCurve = PresetCurve;

    function defineCurve(name, options) {
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function get() {
          var curve = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve
          });
          return curve;
        }
      });
    }

    defineCurve('p192', {
      type: 'short',
      prime: 'p192',
      p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
      b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
      n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
      hash: hash.sha256,
      gRed: false,
      g: ['188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012', '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811']
    });
    defineCurve('p224', {
      type: 'short',
      prime: 'p224',
      p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
      b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
      n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
      hash: hash.sha256,
      gRed: false,
      g: ['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21', 'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34']
    });
    defineCurve('p256', {
      type: 'short',
      prime: null,
      p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
      a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
      b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
      n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
      hash: hash.sha256,
      gRed: false,
      g: ['6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296', '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5']
    });
    defineCurve('p384', {
      type: 'short',
      prime: null,
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 ffffffff',
      a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 fffffffc',
      b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' + '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
      n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' + 'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
      hash: hash.sha384,
      gRed: false,
      g: ['aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' + '5502f25d bf55296c 3a545e38 72760ab7', '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' + '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f']
    });
    defineCurve('p521', {
      type: 'short',
      prime: null,
      p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff',
      a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff fffffffc',
      b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' + '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' + '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
      n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' + 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
      hash: hash.sha512,
      gRed: false,
      g: ['000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' + '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' + 'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66', '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' + '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' + '3fad0761 353c7086 a272c240 88be9476 9fd16650']
    });
    defineCurve('curve25519', {
      type: 'mont',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '76d06',
      b: '1',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash.sha256,
      gRed: false,
      g: ['9']
    });
    defineCurve('ed25519', {
      type: 'edwards',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '-1',
      c: '1',
      // -121665 * (121666^(-1)) (mod P)
      d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash.sha256,
      gRed: false,
      g: ['216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a', // 4/5
      '6666666666666666666666666666666666666666666666666666666666666658']
    });
    var pre;

    try {
      pre = require('./precomputed/secp256k1');
    } catch (e) {
      pre = undefined;
    }

    defineCurve('secp256k1', {
      type: 'short',
      prime: 'k256',
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
      a: '0',
      b: '7',
      n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
      h: '1',
      hash: hash.sha256,
      // Precomputed endomorphism
      beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
      lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
      basis: [{
        a: '3086d221a7d46bcde86c90e49284eb15',
        b: '-e4437ed6010e88286f547fa90abfe4c3'
      }, {
        a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
        b: '3086d221a7d46bcde86c90e49284eb15'
      }],
      gRed: false,
      g: ['79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798', '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8', pre]
    });
  }, {
    "./curve": 142,
    "./precomputed/secp256k1": 152,
    "./utils": 153,
    "hash.js": 196
  }],
  146: [function (require, module, exports) {
    'use strict';

    var BN = require('bn.js');

    var HmacDRBG = require('hmac-drbg');

    var utils = require('../utils');

    var curves = require('../curves');

    var rand = require('brorand');

    var assert = utils.assert;

    var KeyPair = require('./key');

    var Signature = require('./signature');

    function EC(options) {
      if (!(this instanceof EC)) return new EC(options); // Shortcut `elliptic.ec(curve-name)`

      if (typeof options === 'string') {
        assert(curves.hasOwnProperty(options), 'Unknown curve ' + options);
        options = curves[options];
      } // Shortcut for `elliptic.ec(elliptic.curves.curveName)`


      if (options instanceof curves.PresetCurve) options = {
        curve: options
      };
      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g; // Point on curve

      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1); // Hash for function for DRBG

      this.hash = options.hash || options.curve.hash;
    }

    module.exports = EC;

    EC.prototype.keyPair = function keyPair(options) {
      return new KeyPair(this, options);
    };

    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return KeyPair.fromPrivate(this, priv, enc);
    };

    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return KeyPair.fromPublic(this, pub, enc);
    };

    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options) options = {}; // Instantiate Hmac_DRBG

      var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray()
      });
      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new BN(2));

      do {
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0) continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      } while (true);
    };

    EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0) msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);else return msg;
    };

    EC.prototype.sign = function sign(msg, key, enc, options) {
      if (_typeof2(enc) === 'object') {
        options = enc;
        enc = null;
      }

      if (!options) options = {};
      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(new BN(msg, 16)); // Zero-extend key to provide enough entropy

      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray('be', bytes); // Zero-extend nonce to have the same byte size as N

      var nonce = msg.toArray('be', bytes); // Instantiate Hmac_DRBG

      var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8'
      }); // Number of bytes to generate

      var ns1 = this.n.sub(new BN(1));

      for (var iter = 0; true; iter++) {
        var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity()) continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0) continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0) continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0); // Use complement of `s`, if it is > `n / 2`

        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }

        return new Signature({
          r: r,
          s: s,
          recoveryParam: recoveryParam
        });
      }
    };

    EC.prototype.verify = function verify(msg, signature, key, enc) {
      msg = this._truncateToN(new BN(msg, 16));
      key = this.keyFromPublic(key, enc);
      signature = new Signature(signature, 'hex'); // Perform primitive values validation

      var r = signature.r;
      var s = signature.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false; // Validate signature

      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);

      if (!this.curve._maxwellTrick) {
        var p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity()) return false;
        return p.getX().umod(this.n).cmp(r) === 0;
      } // NOTE: Greg Maxwell's trick, inspired by:
      // https://git.io/vad3K


      var p = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity()) return false; // Compare `p.x` of Jacobian point with `r`,
      // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
      // inverse of `p.z^2`

      return p.eqXToP(r);
    };

    EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
      assert((3 & j) === j, 'The recovery param is more than two bits');
      signature = new Signature(signature, enc);
      var n = this.n;
      var e = new BN(msg);
      var r = signature.r;
      var s = signature.s; // A set LSB signifies that the y-coordinate is odd

      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate'); // 1.1. Let x = r + jn.

      if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);else r = this.curve.pointFromX(r, isYOdd);
      var rInv = signature.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n); // 1.6.1 Compute Q = r^-1 (sR -  eG)
      //               Q = r^-1 (sR + -eG)

      return this.g.mulAdd(s1, r, s2);
    };

    EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
      signature = new Signature(signature, enc);
      if (signature.recoveryParam !== null) return signature.recoveryParam;

      for (var i = 0; i < 4; i++) {
        var Qprime;

        try {
          Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
          continue;
        }

        if (Qprime.eq(Q)) return i;
      }

      throw new Error('Unable to find valid recovery factor');
    };
  }, {
    "../curves": 145,
    "../utils": 153,
    "./key": 147,
    "./signature": 148,
    "bn.js": 54,
    "brorand": 55,
    "hmac-drbg": 208
  }],
  147: [function (require, module, exports) {
    'use strict';

    var BN = require('bn.js');

    var utils = require('../utils');

    var assert = utils.assert;

    function KeyPair(ec, options) {
      this.ec = ec;
      this.priv = null;
      this.pub = null; // KeyPair(ec, { priv: ..., pub: ... })

      if (options.priv) this._importPrivate(options.priv, options.privEnc);
      if (options.pub) this._importPublic(options.pub, options.pubEnc);
    }

    module.exports = KeyPair;

    KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
      if (pub instanceof KeyPair) return pub;
      return new KeyPair(ec, {
        pub: pub,
        pubEnc: enc
      });
    };

    KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
      if (priv instanceof KeyPair) return priv;
      return new KeyPair(ec, {
        priv: priv,
        privEnc: enc
      });
    };

    KeyPair.prototype.validate = function validate() {
      var pub = this.getPublic();
      if (pub.isInfinity()) return {
        result: false,
        reason: 'Invalid public key'
      };
      if (!pub.validate()) return {
        result: false,
        reason: 'Public key is not a point'
      };
      if (!pub.mul(this.ec.curve.n).isInfinity()) return {
        result: false,
        reason: 'Public key * N != O'
      };
      return {
        result: true,
        reason: null
      };
    };

    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      // compact is optional argument
      if (typeof compact === 'string') {
        enc = compact;
        compact = null;
      }

      if (!this.pub) this.pub = this.ec.g.mul(this.priv);
      if (!enc) return this.pub;
      return this.pub.encode(enc, compact);
    };

    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === 'hex') return this.priv.toString(16, 2);else return this.priv;
    };

    KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new BN(key, enc || 16); // Ensure that the priv won't be bigger than n, otherwise we may fail
      // in fixed multiplication method

      this.priv = this.priv.umod(this.ec.curve.n);
    };

    KeyPair.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') {
          assert(key.x, 'Need x coordinate');
        } else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') {
          assert(key.x && key.y, 'Need both x and y coordinate');
        }

        this.pub = this.ec.curve.point(key.x, key.y);
        return;
      }

      this.pub = this.ec.curve.decodePoint(key, enc);
    }; // ECDH


    KeyPair.prototype.derive = function derive(pub) {
      return pub.mul(this.priv).getX();
    }; // ECDSA


    KeyPair.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };

    KeyPair.prototype.verify = function verify(msg, signature) {
      return this.ec.verify(msg, signature, this);
    };

    KeyPair.prototype.inspect = function inspect() {
      return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
    };
  }, {
    "../utils": 153,
    "bn.js": 54
  }],
  148: [function (require, module, exports) {
    'use strict';

    var BN = require('bn.js');

    var utils = require('../utils');

    var assert = utils.assert;

    function Signature(options, enc) {
      if (options instanceof Signature) return options;
      if (this._importDER(options, enc)) return;
      assert(options.r && options.s, 'Signature without r or s');
      this.r = new BN(options.r, 16);
      this.s = new BN(options.s, 16);
      if (options.recoveryParam === undefined) this.recoveryParam = null;else this.recoveryParam = options.recoveryParam;
    }

    module.exports = Signature;

    function Position() {
      this.place = 0;
    }

    function getLength(buf, p) {
      var initial = buf[p.place++];

      if (!(initial & 0x80)) {
        return initial;
      }

      var octetLen = initial & 0xf; // Indefinite length or overflow

      if (octetLen === 0 || octetLen > 4) {
        return false;
      }

      var val = 0;

      for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      } // Leading zeroes


      if (val <= 0x7f) {
        return false;
      }

      p.place = off;
      return val;
    }

    function rmPadding(buf) {
      var i = 0;
      var len = buf.length - 1;

      while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
        i++;
      }

      if (i === 0) {
        return buf;
      }

      return buf.slice(i);
    }

    Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils.toArray(data, enc);
      var p = new Position();

      if (data[p.place++] !== 0x30) {
        return false;
      }

      var len = getLength(data, p);

      if (len === false) {
        return false;
      }

      if (len + p.place !== data.length) {
        return false;
      }

      if (data[p.place++] !== 0x02) {
        return false;
      }

      var rlen = getLength(data, p);

      if (rlen === false) {
        return false;
      }

      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;

      if (data[p.place++] !== 0x02) {
        return false;
      }

      var slen = getLength(data, p);

      if (slen === false) {
        return false;
      }

      if (data.length !== slen + p.place) {
        return false;
      }

      var s = data.slice(p.place, slen + p.place);

      if (r[0] === 0) {
        if (r[1] & 0x80) {
          r = r.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }

      if (s[0] === 0) {
        if (s[1] & 0x80) {
          s = s.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }

      this.r = new BN(r);
      this.s = new BN(s);
      this.recoveryParam = null;
      return true;
    };

    function constructLength(arr, len) {
      if (len < 0x80) {
        arr.push(len);
        return;
      }

      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 0x80);

      while (--octets) {
        arr.push(len >>> (octets << 3) & 0xff);
      }

      arr.push(len);
    }

    Signature.prototype.toDER = function toDER(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray(); // Pad values

      if (r[0] & 0x80) r = [0].concat(r); // Pad values

      if (s[0] & 0x80) s = [0].concat(s);
      r = rmPadding(r);
      s = rmPadding(s);

      while (!s[0] && !(s[1] & 0x80)) {
        s = s.slice(1);
      }

      var arr = [0x02];
      constructLength(arr, r.length);
      arr = arr.concat(r);
      arr.push(0x02);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [0x30];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils.encode(res, enc);
    };
  }, {
    "../utils": 153,
    "bn.js": 54
  }],
  149: [function (require, module, exports) {
    'use strict';

    var hash = require('hash.js');

    var curves = require('../curves');

    var utils = require('../utils');

    var assert = utils.assert;
    var parseBytes = utils.parseBytes;

    var KeyPair = require('./key');

    var Signature = require('./signature');

    function EDDSA(curve) {
      assert(curve === 'ed25519', 'only tested with ed25519 so far');
      if (!(this instanceof EDDSA)) return new EDDSA(curve);
      var curve = curves[curve].curve;
      this.curve = curve;
      this.g = curve.g;
      this.g.precompute(curve.n.bitLength() + 1);
      this.pointClass = curve.point().constructor;
      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
      this.hash = hash.sha512;
    }

    module.exports = EDDSA;
    /**
    * @param {Array|String} message - message bytes
    * @param {Array|String|KeyPair} secret - secret bytes or a keypair
    * @returns {Signature} - signature
    */

    EDDSA.prototype.sign = function sign(message, secret) {
      message = parseBytes(message);
      var key = this.keyFromSecret(secret);
      var r = this.hashInt(key.messagePrefix(), message);
      var R = this.g.mul(r);
      var Rencoded = this.encodePoint(R);
      var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
      var S = r.add(s_).umod(this.curve.n);
      return this.makeSignature({
        R: R,
        S: S,
        Rencoded: Rencoded
      });
    };
    /**
    * @param {Array} message - message bytes
    * @param {Array|String|Signature} sig - sig bytes
    * @param {Array|String|Point|KeyPair} pub - public key
    * @returns {Boolean} - true if public key matches sig of message
    */


    EDDSA.prototype.verify = function verify(message, sig, pub) {
      message = parseBytes(message);
      sig = this.makeSignature(sig);
      var key = this.keyFromPublic(pub);
      var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key.pub().mul(h));
      return RplusAh.eq(SG);
    };

    EDDSA.prototype.hashInt = function hashInt() {
      var hash = this.hash();

      for (var i = 0; i < arguments.length; i++) {
        hash.update(arguments[i]);
      }

      return utils.intFromLE(hash.digest()).umod(this.curve.n);
    };

    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
      return KeyPair.fromPublic(this, pub);
    };

    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return KeyPair.fromSecret(this, secret);
    };

    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof Signature) return sig;
      return new Signature(this, sig);
    };
    /**
    * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
    *
    * EDDSA defines methods for encoding and decoding points and integers. These are
    * helper convenience methods, that pass along to utility functions implied
    * parameters.
    *
    */


    EDDSA.prototype.encodePoint = function encodePoint(point) {
      var enc = point.getY().toArray('le', this.encodingLength);
      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
      return enc;
    };

    EDDSA.prototype.decodePoint = function decodePoint(bytes) {
      bytes = utils.parseBytes(bytes);
      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
      var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
      var y = utils.intFromLE(normed);
      return this.curve.pointFromY(y, xIsOdd);
    };

    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray('le', this.encodingLength);
    };

    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
      return utils.intFromLE(bytes);
    };

    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };
  }, {
    "../curves": 145,
    "../utils": 153,
    "./key": 150,
    "./signature": 151,
    "hash.js": 196
  }],
  150: [function (require, module, exports) {
    'use strict';

    var utils = require('../utils');

    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var cachedProperty = utils.cachedProperty;
    /**
    * @param {EDDSA} eddsa - instance
    * @param {Object} params - public/private key parameters
    *
    * @param {Array<Byte>} [params.secret] - secret seed bytes
    * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
    * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
    *
    */

    function KeyPair(eddsa, params) {
      this.eddsa = eddsa;
      this._secret = parseBytes(params.secret);
      if (eddsa.isPoint(params.pub)) this._pub = params.pub;else this._pubBytes = parseBytes(params.pub);
    }

    KeyPair.fromPublic = function fromPublic(eddsa, pub) {
      if (pub instanceof KeyPair) return pub;
      return new KeyPair(eddsa, {
        pub: pub
      });
    };

    KeyPair.fromSecret = function fromSecret(eddsa, secret) {
      if (secret instanceof KeyPair) return secret;
      return new KeyPair(eddsa, {
        secret: secret
      });
    };

    KeyPair.prototype.secret = function secret() {
      return this._secret;
    };

    cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });
    cachedProperty(KeyPair, 'pub', function pub() {
      if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });
    cachedProperty(KeyPair, 'privBytes', function privBytes() {
      var eddsa = this.eddsa;
      var hash = this.hash();
      var lastIx = eddsa.encodingLength - 1;
      var a = hash.slice(0, eddsa.encodingLength);
      a[0] &= 248;
      a[lastIx] &= 127;
      a[lastIx] |= 64;
      return a;
    });
    cachedProperty(KeyPair, 'priv', function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });
    cachedProperty(KeyPair, 'hash', function hash() {
      return this.eddsa.hash().update(this.secret()).digest();
    });
    cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
      return this.hash().slice(this.eddsa.encodingLength);
    });

    KeyPair.prototype.sign = function sign(message) {
      assert(this._secret, 'KeyPair can only verify');
      return this.eddsa.sign(message, this);
    };

    KeyPair.prototype.verify = function verify(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };

    KeyPair.prototype.getSecret = function getSecret(enc) {
      assert(this._secret, 'KeyPair is public only');
      return utils.encode(this.secret(), enc);
    };

    KeyPair.prototype.getPublic = function getPublic(enc) {
      return utils.encode(this.pubBytes(), enc);
    };

    module.exports = KeyPair;
  }, {
    "../utils": 153
  }],
  151: [function (require, module, exports) {
    'use strict';

    var BN = require('bn.js');

    var utils = require('../utils');

    var assert = utils.assert;
    var cachedProperty = utils.cachedProperty;
    var parseBytes = utils.parseBytes;
    /**
    * @param {EDDSA} eddsa - eddsa instance
    * @param {Array<Bytes>|Object} sig -
    * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
    * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
    * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
    * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
    */

    function Signature(eddsa, sig) {
      this.eddsa = eddsa;
      if (_typeof2(sig) !== 'object') sig = parseBytes(sig);

      if (Array.isArray(sig)) {
        sig = {
          R: sig.slice(0, eddsa.encodingLength),
          S: sig.slice(eddsa.encodingLength)
        };
      }

      assert(sig.R && sig.S, 'Signature without R or S');
      if (eddsa.isPoint(sig.R)) this._R = sig.R;
      if (sig.S instanceof BN) this._S = sig.S;
      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }

    cachedProperty(Signature, 'S', function S() {
      return this.eddsa.decodeInt(this.Sencoded());
    });
    cachedProperty(Signature, 'R', function R() {
      return this.eddsa.decodePoint(this.Rencoded());
    });
    cachedProperty(Signature, 'Rencoded', function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });
    cachedProperty(Signature, 'Sencoded', function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });

    Signature.prototype.toBytes = function toBytes() {
      return this.Rencoded().concat(this.Sencoded());
    };

    Signature.prototype.toHex = function toHex() {
      return utils.encode(this.toBytes(), 'hex').toUpperCase();
    };

    module.exports = Signature;
  }, {
    "../utils": 153,
    "bn.js": 54
  }],
  152: [function (require, module, exports) {
    module.exports = {
      doubles: {
        step: 4,
        points: [['e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a', 'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'], ['8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508', '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'], ['175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739', 'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'], ['363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640', '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'], ['8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c', '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'], ['723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda', '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'], ['eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa', '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'], ['100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0', 'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'], ['e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d', '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'], ['feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d', 'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'], ['da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1', '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'], ['53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0', '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'], ['8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047', '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'], ['385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862', '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'], ['6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7', '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'], ['3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd', '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'], ['85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83', '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'], ['948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a', '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'], ['6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8', 'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'], ['e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d', '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'], ['e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725', '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'], ['213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754', '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'], ['4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c', '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'], ['fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6', '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'], ['76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39', 'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'], ['c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891', '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'], ['d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b', 'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'], ['b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03', '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'], ['e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d', 'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'], ['a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070', '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'], ['90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4', 'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'], ['8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da', '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'], ['e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11', '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'], ['8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e', 'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'], ['e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41', '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'], ['b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef', '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'], ['d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8', 'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'], ['324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d', '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'], ['4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96', '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'], ['9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd', 'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'], ['6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5', '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'], ['a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266', '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'], ['7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71', '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'], ['928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac', 'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'], ['85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751', '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'], ['ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e', '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'], ['827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241', 'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'], ['eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3', 'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'], ['e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f', '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'], ['1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19', 'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'], ['146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be', 'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'], ['fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9', '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'], ['da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2', '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'], ['a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13', '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'], ['174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c', 'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'], ['959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba', '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'], ['d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151', 'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'], ['64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073', 'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'], ['8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458', '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'], ['13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b', '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'], ['bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366', 'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'], ['8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa', '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'], ['8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0', '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'], ['dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787', '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'], ['f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e', 'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82']]
      },
      naf: {
        wnd: 7,
        points: [['f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9', '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'], ['2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4', 'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'], ['5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc', '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'], ['acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe', 'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'], ['774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb', 'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'], ['f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8', 'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'], ['d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e', '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'], ['defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34', '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'], ['2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c', '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'], ['352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5', '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'], ['2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f', '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'], ['9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714', '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'], ['daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729', 'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'], ['c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db', '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'], ['6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4', 'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'], ['1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5', 'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'], ['605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479', '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'], ['62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d', '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'], ['80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f', '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'], ['7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb', 'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'], ['d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9', 'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'], ['49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963', '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'], ['77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74', '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'], ['f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530', 'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'], ['463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b', '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'], ['f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247', 'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'], ['caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1', 'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'], ['2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120', '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'], ['7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435', '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'], ['754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18', '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'], ['e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8', '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'], ['186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb', '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'], ['df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f', '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'], ['5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143', 'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'], ['290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba', 'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'], ['af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45', 'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'], ['766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a', '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'], ['59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e', 'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'], ['f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8', 'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'], ['7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c', '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'], ['948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519', 'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'], ['7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab', '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'], ['3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca', 'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'], ['d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf', '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'], ['1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610', '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'], ['733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4', 'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'], ['15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c', 'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'], ['a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940', 'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'], ['e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980', 'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'], ['311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3', '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'], ['34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf', '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'], ['f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63', '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'], ['d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448', 'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'], ['32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf', '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'], ['7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5', '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'], ['ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6', '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'], ['16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5', '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'], ['eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99', 'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'], ['78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51', 'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'], ['494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5', '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'], ['a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5', '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'], ['c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997', '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'], ['841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881', '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'], ['5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5', '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'], ['36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66', 'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'], ['336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726', 'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'], ['8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede', '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'], ['1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94', '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'], ['85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31', '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'], ['29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51', 'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'], ['a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252', 'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'], ['4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5', 'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'], ['d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b', '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'], ['ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4', '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'], ['af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f', '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'], ['e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889', '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'], ['591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246', 'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'], ['11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984', '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'], ['3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a', 'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'], ['cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030', 'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'], ['c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197', '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'], ['c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593', 'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'], ['a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef', '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'], ['347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38', '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'], ['da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a', '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'], ['c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111', '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'], ['4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502', '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'], ['3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea', 'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'], ['cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26', '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'], ['b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986', '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'], ['d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e', '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'], ['48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4', '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'], ['dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda', 'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'], ['6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859', 'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'], ['e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f', 'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'], ['eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c', '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'], ['13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942', 'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'], ['ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a', '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'], ['b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80', '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'], ['ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d', '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'], ['8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1', 'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'], ['52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63', 'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'], ['e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352', '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'], ['7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193', 'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'], ['5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00', '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'], ['32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58', 'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'], ['e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7', 'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'], ['8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8', 'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'], ['4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e', '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'], ['3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d', 'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'], ['674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b', '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'], ['d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f', 'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'], ['30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6', '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'], ['be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297', '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'], ['93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a', '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'], ['b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c', 'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'], ['d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52', '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'], ['d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb', 'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'], ['463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065', 'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'], ['7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917', '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'], ['74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9', 'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'], ['30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3', '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'], ['9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57', '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'], ['176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66', 'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'], ['75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8', '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'], ['809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721', '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'], ['1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180', '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9']]
      }
    };
  }, {}],
  153: [function (require, module, exports) {
    'use strict';

    var utils = exports;

    var BN = require('bn.js');

    var minAssert = require('minimalistic-assert');

    var minUtils = require('minimalistic-crypto-utils');

    utils.assert = minAssert;
    utils.toArray = minUtils.toArray;
    utils.zero2 = minUtils.zero2;
    utils.toHex = minUtils.toHex;
    utils.encode = minUtils.encode; // Represent num in a w-NAF form

    function getNAF(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      naf.fill(0);
      var ws = 1 << w + 1;
      var k = num.clone();

      for (var i = 0; i < naf.length; i++) {
        var z;
        var mod = k.andln(ws - 1);

        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;else z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }

        naf[i] = z;
        k.iushrn(1);
      }

      return naf;
    }

    utils.getNAF = getNAF; // Represent k1, k2 in a Joint Sparse Form

    function getJSF(k1, k2) {
      var jsf = [[], []];
      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;

      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        // First phase
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3) m14 = -1;
        if (m24 === 3) m24 = -1;
        var u1;

        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          var m8 = k1.andln(7) + d1 & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;
        }

        jsf[0].push(u1);
        var u2;

        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          var m8 = k2.andln(7) + d2 & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;else u2 = m24;
        }

        jsf[1].push(u2); // Second phase

        if (2 * d1 === u1 + 1) d1 = 1 - d1;
        if (2 * d2 === u2 + 1) d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }

      return jsf;
    }

    utils.getJSF = getJSF;

    function cachedProperty(obj, name, computer) {
      var key = '_' + name;

      obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
      };
    }

    utils.cachedProperty = cachedProperty;

    function parseBytes(bytes) {
      return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;
    }

    utils.parseBytes = parseBytes;

    function intFromLE(bytes) {
      return new BN(bytes, 'hex', 'le');
    }

    utils.intFromLE = intFromLE;
  }, {
    "bn.js": 54,
    "minimalistic-assert": 245,
    "minimalistic-crypto-utils": 246
  }],
  154: [function (require, module, exports) {
    module.exports = {
      "name": "elliptic",
      "version": "6.5.3",
      "description": "EC cryptography",
      "main": "lib/elliptic.js",
      "files": ["lib"],
      "scripts": {
        "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
        "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
        "lint": "npm run jscs && npm run jshint",
        "unit": "istanbul test _mocha --reporter=spec test/index.js",
        "test": "npm run lint && npm run unit",
        "version": "grunt dist && git add dist/"
      },
      "repository": {
        "type": "git",
        "url": "git@github.com:indutny/elliptic"
      },
      "keywords": ["EC", "Elliptic", "curve", "Cryptography"],
      "author": "Fedor Indutny <fedor@indutny.com>",
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/indutny/elliptic/issues"
      },
      "homepage": "https://github.com/indutny/elliptic",
      "devDependencies": {
        "brfs": "^1.4.3",
        "coveralls": "^3.0.8",
        "grunt": "^1.0.4",
        "grunt-browserify": "^5.0.0",
        "grunt-cli": "^1.2.0",
        "grunt-contrib-connect": "^1.0.0",
        "grunt-contrib-copy": "^1.0.0",
        "grunt-contrib-uglify": "^1.0.1",
        "grunt-mocha-istanbul": "^3.0.1",
        "grunt-saucelabs": "^9.0.1",
        "istanbul": "^0.4.2",
        "jscs": "^3.0.7",
        "jshint": "^2.10.3",
        "mocha": "^6.2.2"
      },
      "dependencies": {
        "bn.js": "^4.4.0",
        "brorand": "^1.0.1",
        "hash.js": "^1.0.0",
        "hmac-drbg": "^1.0.0",
        "inherits": "^2.0.1",
        "minimalistic-assert": "^1.0.0",
        "minimalistic-crypto-utils": "^1.0.0"
      }
    };
  }, {}],
  155: [function (require, module, exports) {
    var eos = require('end-of-stream');

    module.exports = function eosp(stream) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return new Promise(function (resolve, reject) {
        function cb(err) {
          if (err) reject(err);else resolve();
        }

        eos(stream, opts, cb);
      });
    };
  }, {
    "end-of-stream": 156
  }],
  156: [function (require, module, exports) {
    (function (process) {
      (function () {
        var once = require('once');

        var noop = function noop() {};

        var isRequest = function isRequest(stream) {
          return stream.setHeader && typeof stream.abort === 'function';
        };

        var isChildProcess = function isChildProcess(stream) {
          return stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3;
        };

        var eos = function eos(stream, opts, callback) {
          if (typeof opts === 'function') return eos(stream, null, opts);
          if (!opts) opts = {};
          callback = once(callback || noop);
          var ws = stream._writableState;
          var rs = stream._readableState;
          var readable = opts.readable || opts.readable !== false && stream.readable;
          var writable = opts.writable || opts.writable !== false && stream.writable;
          var cancelled = false;

          var onlegacyfinish = function onlegacyfinish() {
            if (!stream.writable) onfinish();
          };

          var onfinish = function onfinish() {
            writable = false;
            if (!readable) callback.call(stream);
          };

          var onend = function onend() {
            readable = false;
            if (!writable) callback.call(stream);
          };

          var onexit = function onexit(exitCode) {
            callback.call(stream, exitCode ? new Error('exited with error code: ' + exitCode) : null);
          };

          var onerror = function onerror(err) {
            callback.call(stream, err);
          };

          var onclose = function onclose() {
            process.nextTick(onclosenexttick);
          };

          var onclosenexttick = function onclosenexttick() {
            if (cancelled) return;
            if (readable && !(rs && rs.ended && !rs.destroyed)) return callback.call(stream, new Error('premature close'));
            if (writable && !(ws && ws.ended && !ws.destroyed)) return callback.call(stream, new Error('premature close'));
          };

          var onrequest = function onrequest() {
            stream.req.on('finish', onfinish);
          };

          if (isRequest(stream)) {
            stream.on('complete', onfinish);
            stream.on('abort', onclose);
            if (stream.req) onrequest();else stream.on('request', onrequest);
          } else if (writable && !ws) {
            // legacy streams
            stream.on('end', onlegacyfinish);
            stream.on('close', onlegacyfinish);
          }

          if (isChildProcess(stream)) stream.on('exit', onexit);
          stream.on('end', onend);
          stream.on('finish', onfinish);
          if (opts.error !== false) stream.on('error', onerror);
          stream.on('close', onclose);
          return function () {
            cancelled = true;
            stream.removeListener('complete', onfinish);
            stream.removeListener('abort', onclose);
            stream.removeListener('request', onrequest);
            if (stream.req) stream.req.removeListener('finish', onfinish);
            stream.removeListener('end', onlegacyfinish);
            stream.removeListener('close', onlegacyfinish);
            stream.removeListener('finish', onfinish);
            stream.removeListener('exit', onexit);
            stream.removeListener('end', onend);
            stream.removeListener('error', onerror);
            stream.removeListener('close', onclose);
          };
        };

        module.exports = eos;
      }).call(this);
    }).call(this, require('_process'));
  }, {
    "_process": 276,
    "once": 253
  }],
  157: [function (require, module, exports) {
    module.exports = function () {
      if (typeof self !== 'undefined') {
        return self;
      } else if (typeof window !== 'undefined') {
        return window;
      } else {
        return Function('return this')(); // eslint-disable-line no-new-func
      }
    }();
  }, {}],
  158: [function (require, module, exports) {
    module.exports = require('./socket');
    /**
     * Exports parser
     *
     * @api public
     *
     */

    module.exports.parser = require('engine.io-parser');
  }, {
    "./socket": 159,
    "engine.io-parser": 170
  }],
  159: [function (require, module, exports) {
    /**
     * Module dependencies.
     */
    var transports = require('./transports/index');

    var Emitter = require('component-emitter');

    var debug = require('debug')('engine.io-client:socket');

    var index = require('indexof');

    var parser = require('engine.io-parser');

    var parseuri = require('parseuri');

    var parseqs = require('parseqs');
    /**
     * Module exports.
     */


    module.exports = Socket;
    /**
     * Socket constructor.
     *
     * @param {String|Object} uri or options
     * @param {Object} options
     * @api public
     */

    function Socket(uri, opts) {
      if (!(this instanceof Socket)) return new Socket(uri, opts);
      opts = opts || {};

      if (uri && 'object' === _typeof2(uri)) {
        opts = uri;
        uri = null;
      }

      if (uri) {
        uri = parseuri(uri);
        opts.hostname = uri.host;
        opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
        opts.port = uri.port;
        if (uri.query) opts.query = uri.query;
      } else if (opts.host) {
        opts.hostname = parseuri(opts.host).host;
      }

      this.secure = null != opts.secure ? opts.secure : typeof location !== 'undefined' && 'https:' === location.protocol;

      if (opts.hostname && !opts.port) {
        // if no port is specified manually, use the protocol default
        opts.port = this.secure ? '443' : '80';
      }

      this.agent = opts.agent || false;
      this.hostname = opts.hostname || (typeof location !== 'undefined' ? location.hostname : 'localhost');
      this.port = opts.port || (typeof location !== 'undefined' && location.port ? location.port : this.secure ? 443 : 80);
      this.query = opts.query || {};
      if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
      this.upgrade = false !== opts.upgrade;
      this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
      this.forceJSONP = !!opts.forceJSONP;
      this.jsonp = false !== opts.jsonp;
      this.forceBase64 = !!opts.forceBase64;
      this.enablesXDR = !!opts.enablesXDR;
      this.withCredentials = false !== opts.withCredentials;
      this.timestampParam = opts.timestampParam || 't';
      this.timestampRequests = opts.timestampRequests;
      this.transports = opts.transports || ['polling', 'websocket'];
      this.transportOptions = opts.transportOptions || {};
      this.readyState = '';
      this.writeBuffer = [];
      this.prevBufferLen = 0;
      this.policyPort = opts.policyPort || 843;
      this.rememberUpgrade = opts.rememberUpgrade || false;
      this.binaryType = null;
      this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
      this.perMessageDeflate = false !== opts.perMessageDeflate ? opts.perMessageDeflate || {} : false;
      if (true === this.perMessageDeflate) this.perMessageDeflate = {};

      if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
        this.perMessageDeflate.threshold = 1024;
      } // SSL options for Node.js client


      this.pfx = opts.pfx || null;
      this.key = opts.key || null;
      this.passphrase = opts.passphrase || null;
      this.cert = opts.cert || null;
      this.ca = opts.ca || null;
      this.ciphers = opts.ciphers || null;
      this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
      this.forceNode = !!opts.forceNode; // detect ReactNative environment

      this.isReactNative = typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative'; // other options for Node.js or ReactNative client

      if (typeof self === 'undefined' || this.isReactNative) {
        if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
          this.extraHeaders = opts.extraHeaders;
        }

        if (opts.localAddress) {
          this.localAddress = opts.localAddress;
        }
      } // set on handshake


      this.id = null;
      this.upgrades = null;
      this.pingInterval = null;
      this.pingTimeout = null; // set on heartbeat

      this.pingIntervalTimer = null;
      this.pingTimeoutTimer = null;
      this.open();
    }

    Socket.priorWebsocketSuccess = false;
    /**
     * Mix in `Emitter`.
     */

    Emitter(Socket.prototype);
    /**
     * Protocol version.
     *
     * @api public
     */

    Socket.protocol = parser.protocol; // this is an int

    /**
     * Expose deps for legacy compatibility
     * and standalone browser access.
     */

    Socket.Socket = Socket;
    Socket.Transport = require('./transport');
    Socket.transports = require('./transports/index');
    Socket.parser = require('engine.io-parser');
    /**
     * Creates transport of the given type.
     *
     * @param {String} transport name
     * @return {Transport}
     * @api private
     */

    Socket.prototype.createTransport = function (name) {
      debug('creating transport "%s"', name);
      var query = clone(this.query); // append engine.io protocol identifier

      query.EIO = parser.protocol; // transport name

      query.transport = name; // per-transport options

      var options = this.transportOptions[name] || {}; // session id if we already have one

      if (this.id) query.sid = this.id;
      var transport = new transports[name]({
        query: query,
        socket: this,
        agent: options.agent || this.agent,
        hostname: options.hostname || this.hostname,
        port: options.port || this.port,
        secure: options.secure || this.secure,
        path: options.path || this.path,
        forceJSONP: options.forceJSONP || this.forceJSONP,
        jsonp: options.jsonp || this.jsonp,
        forceBase64: options.forceBase64 || this.forceBase64,
        enablesXDR: options.enablesXDR || this.enablesXDR,
        withCredentials: options.withCredentials || this.withCredentials,
        timestampRequests: options.timestampRequests || this.timestampRequests,
        timestampParam: options.timestampParam || this.timestampParam,
        policyPort: options.policyPort || this.policyPort,
        pfx: options.pfx || this.pfx,
        key: options.key || this.key,
        passphrase: options.passphrase || this.passphrase,
        cert: options.cert || this.cert,
        ca: options.ca || this.ca,
        ciphers: options.ciphers || this.ciphers,
        rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,
        perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,
        extraHeaders: options.extraHeaders || this.extraHeaders,
        forceNode: options.forceNode || this.forceNode,
        localAddress: options.localAddress || this.localAddress,
        requestTimeout: options.requestTimeout || this.requestTimeout,
        protocols: options.protocols || void 0,
        isReactNative: this.isReactNative
      });
      return transport;
    };

    function clone(obj) {
      var o = {};

      for (var i in obj) {
        if (obj.hasOwnProperty(i)) {
          o[i] = obj[i];
        }
      }

      return o;
    }
    /**
     * Initializes transport to use and starts probe.
     *
     * @api private
     */


    Socket.prototype.open = function () {
      var transport;

      if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
        transport = 'websocket';
      } else if (0 === this.transports.length) {
        // Emit error on next tick so it can be listened to
        var self = this;
        setTimeout(function () {
          self.emit('error', 'No transports available');
        }, 0);
        return;
      } else {
        transport = this.transports[0];
      }

      this.readyState = 'opening'; // Retry with the next transport if the transport is disabled (jsonp: false)

      try {
        transport = this.createTransport(transport);
      } catch (e) {
        this.transports.shift();
        this.open();
        return;
      }

      transport.open();
      this.setTransport(transport);
    };
    /**
     * Sets the current transport. Disables the existing one (if any).
     *
     * @api private
     */


    Socket.prototype.setTransport = function (transport) {
      debug('setting transport %s', transport.name);
      var self = this;

      if (this.transport) {
        debug('clearing existing transport %s', this.transport.name);
        this.transport.removeAllListeners();
      } // set up transport


      this.transport = transport; // set up transport listeners

      transport.on('drain', function () {
        self.onDrain();
      }).on('packet', function (packet) {
        self.onPacket(packet);
      }).on('error', function (e) {
        self.onError(e);
      }).on('close', function () {
        self.onClose('transport close');
      });
    };
    /**
     * Probes a transport.
     *
     * @param {String} transport name
     * @api private
     */


    Socket.prototype.probe = function (name) {
      debug('probing transport "%s"', name);
      var transport = this.createTransport(name, {
        probe: 1
      });
      var failed = false;
      var self = this;
      Socket.priorWebsocketSuccess = false;

      function onTransportOpen() {
        if (self.onlyBinaryUpgrades) {
          var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
          failed = failed || upgradeLosesBinary;
        }

        if (failed) return;
        debug('probe transport "%s" opened', name);
        transport.send([{
          type: 'ping',
          data: 'probe'
        }]);
        transport.once('packet', function (msg) {
          if (failed) return;

          if ('pong' === msg.type && 'probe' === msg.data) {
            debug('probe transport "%s" pong', name);
            self.upgrading = true;
            self.emit('upgrading', transport);
            if (!transport) return;
            Socket.priorWebsocketSuccess = 'websocket' === transport.name;
            debug('pausing current transport "%s"', self.transport.name);
            self.transport.pause(function () {
              if (failed) return;
              if ('closed' === self.readyState) return;
              debug('changing transport and sending upgrade packet');
              cleanup();
              self.setTransport(transport);
              transport.send([{
                type: 'upgrade'
              }]);
              self.emit('upgrade', transport);
              transport = null;
              self.upgrading = false;
              self.flush();
            });
          } else {
            debug('probe transport "%s" failed', name);
            var err = new Error('probe error');
            err.transport = transport.name;
            self.emit('upgradeError', err);
          }
        });
      }

      function freezeTransport() {
        if (failed) return; // Any callback called by transport should be ignored since now

        failed = true;
        cleanup();
        transport.close();
        transport = null;
      } // Handle any error that happens while probing


      function onerror(err) {
        var error = new Error('probe error: ' + err);
        error.transport = transport.name;
        freezeTransport();
        debug('probe transport "%s" failed because of error: %s', name, err);
        self.emit('upgradeError', error);
      }

      function onTransportClose() {
        onerror('transport closed');
      } // When the socket is closed while we're probing


      function onclose() {
        onerror('socket closed');
      } // When the socket is upgraded while we're probing


      function onupgrade(to) {
        if (transport && to.name !== transport.name) {
          debug('"%s" works - aborting "%s"', to.name, transport.name);
          freezeTransport();
        }
      } // Remove all listeners on the transport and on self


      function cleanup() {
        transport.removeListener('open', onTransportOpen);
        transport.removeListener('error', onerror);
        transport.removeListener('close', onTransportClose);
        self.removeListener('close', onclose);
        self.removeListener('upgrading', onupgrade);
      }

      transport.once('open', onTransportOpen);
      transport.once('error', onerror);
      transport.once('close', onTransportClose);
      this.once('close', onclose);
      this.once('upgrading', onupgrade);
      transport.open();
    };
    /**
     * Called when connection is deemed open.
     *
     * @api public
     */


    Socket.prototype.onOpen = function () {
      debug('socket open');
      this.readyState = 'open';
      Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
      this.emit('open');
      this.flush(); // we check for `readyState` in case an `open`
      // listener already closed the socket

      if ('open' === this.readyState && this.upgrade && this.transport.pause) {
        debug('starting upgrade probes');

        for (var i = 0, l = this.upgrades.length; i < l; i++) {
          this.probe(this.upgrades[i]);
        }
      }
    };
    /**
     * Handles a packet.
     *
     * @api private
     */


    Socket.prototype.onPacket = function (packet) {
      if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
        debug('socket receive: type "%s", data "%s"', packet.type, packet.data);
        this.emit('packet', packet); // Socket is live - any packet counts

        this.emit('heartbeat');

        switch (packet.type) {
          case 'open':
            this.onHandshake(JSON.parse(packet.data));
            break;

          case 'pong':
            this.setPing();
            this.emit('pong');
            break;

          case 'error':
            var err = new Error('server error');
            err.code = packet.data;
            this.onError(err);
            break;

          case 'message':
            this.emit('data', packet.data);
            this.emit('message', packet.data);
            break;
        }
      } else {
        debug('packet received with socket readyState "%s"', this.readyState);
      }
    };
    /**
     * Called upon handshake completion.
     *
     * @param {Object} handshake obj
     * @api private
     */


    Socket.prototype.onHandshake = function (data) {
      this.emit('handshake', data);
      this.id = data.sid;
      this.transport.query.sid = data.sid;
      this.upgrades = this.filterUpgrades(data.upgrades);
      this.pingInterval = data.pingInterval;
      this.pingTimeout = data.pingTimeout;
      this.onOpen(); // In case open handler closes socket

      if ('closed' === this.readyState) return;
      this.setPing(); // Prolong liveness of socket on heartbeat

      this.removeListener('heartbeat', this.onHeartbeat);
      this.on('heartbeat', this.onHeartbeat);
    };
    /**
     * Resets ping timeout.
     *
     * @api private
     */


    Socket.prototype.onHeartbeat = function (timeout) {
      clearTimeout(this.pingTimeoutTimer);
      var self = this;
      self.pingTimeoutTimer = setTimeout(function () {
        if ('closed' === self.readyState) return;
        self.onClose('ping timeout');
      }, timeout || self.pingInterval + self.pingTimeout);
    };
    /**
     * Pings server every `this.pingInterval` and expects response
     * within `this.pingTimeout` or closes connection.
     *
     * @api private
     */


    Socket.prototype.setPing = function () {
      var self = this;
      clearTimeout(self.pingIntervalTimer);
      self.pingIntervalTimer = setTimeout(function () {
        debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
        self.ping();
        self.onHeartbeat(self.pingTimeout);
      }, self.pingInterval);
    };
    /**
    * Sends a ping packet.
    *
    * @api private
    */


    Socket.prototype.ping = function () {
      var self = this;
      this.sendPacket('ping', function () {
        self.emit('ping');
      });
    };
    /**
     * Called on `drain` event
     *
     * @api private
     */


    Socket.prototype.onDrain = function () {
      this.writeBuffer.splice(0, this.prevBufferLen); // setting prevBufferLen = 0 is very important
      // for example, when upgrading, upgrade packet is sent over,
      // and a nonzero prevBufferLen could cause problems on `drain`

      this.prevBufferLen = 0;

      if (0 === this.writeBuffer.length) {
        this.emit('drain');
      } else {
        this.flush();
      }
    };
    /**
     * Flush write buffers.
     *
     * @api private
     */


    Socket.prototype.flush = function () {
      if ('closed' !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
        debug('flushing %d packets in socket', this.writeBuffer.length);
        this.transport.send(this.writeBuffer); // keep track of current length of writeBuffer
        // splice writeBuffer and callbackBuffer on `drain`

        this.prevBufferLen = this.writeBuffer.length;
        this.emit('flush');
      }
    };
    /**
     * Sends a message.
     *
     * @param {String} message.
     * @param {Function} callback function.
     * @param {Object} options.
     * @return {Socket} for chaining.
     * @api public
     */


    Socket.prototype.write = Socket.prototype.send = function (msg, options, fn) {
      this.sendPacket('message', msg, options, fn);
      return this;
    };
    /**
     * Sends a packet.
     *
     * @param {String} packet type.
     * @param {String} data.
     * @param {Object} options.
     * @param {Function} callback function.
     * @api private
     */


    Socket.prototype.sendPacket = function (type, data, options, fn) {
      if ('function' === typeof data) {
        fn = data;
        data = undefined;
      }

      if ('function' === typeof options) {
        fn = options;
        options = null;
      }

      if ('closing' === this.readyState || 'closed' === this.readyState) {
        return;
      }

      options = options || {};
      options.compress = false !== options.compress;
      var packet = {
        type: type,
        data: data,
        options: options
      };
      this.emit('packetCreate', packet);
      this.writeBuffer.push(packet);
      if (fn) this.once('flush', fn);
      this.flush();
    };
    /**
     * Closes the connection.
     *
     * @api private
     */


    Socket.prototype.close = function () {
      if ('opening' === this.readyState || 'open' === this.readyState) {
        this.readyState = 'closing';
        var self = this;

        if (this.writeBuffer.length) {
          this.once('drain', function () {
            if (this.upgrading) {
              waitForUpgrade();
            } else {
              close();
            }
          });
        } else if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      }

      function close() {
        self.onClose('forced close');
        debug('socket closing - telling transport to close');
        self.transport.close();
      }

      function cleanupAndClose() {
        self.removeListener('upgrade', cleanupAndClose);
        self.removeListener('upgradeError', cleanupAndClose);
        close();
      }

      function waitForUpgrade() {
        // wait for upgrade to finish since we can't send packets while pausing a transport
        self.once('upgrade', cleanupAndClose);
        self.once('upgradeError', cleanupAndClose);
      }

      return this;
    };
    /**
     * Called upon transport error
     *
     * @api private
     */


    Socket.prototype.onError = function (err) {
      debug('socket error %j', err);
      Socket.priorWebsocketSuccess = false;
      this.emit('error', err);
      this.onClose('transport error', err);
    };
    /**
     * Called upon transport close.
     *
     * @api private
     */


    Socket.prototype.onClose = function (reason, desc) {
      if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
        debug('socket close with reason: "%s"', reason);
        var self = this; // clear timers

        clearTimeout(this.pingIntervalTimer);
        clearTimeout(this.pingTimeoutTimer); // stop event from firing again for transport

        this.transport.removeAllListeners('close'); // ensure transport won't stay open

        this.transport.close(); // ignore further transport communication

        this.transport.removeAllListeners(); // set ready state

        this.readyState = 'closed'; // clear session id

        this.id = null; // emit close event

        this.emit('close', reason, desc); // clean buffers after, so users can still
        // grab the buffers on `close` event

        self.writeBuffer = [];
        self.prevBufferLen = 0;
      }
    };
    /**
     * Filters upgrades, returning only those matching client transports.
     *
     * @param {Array} server upgrades
     * @api private
     *
     */


    Socket.prototype.filterUpgrades = function (upgrades) {
      var filteredUpgrades = [];

      for (var i = 0, j = upgrades.length; i < j; i++) {
        if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
      }

      return filteredUpgrades;
    };
  }, {
    "./transport": 160,
    "./transports/index": 161,
    "component-emitter": 112,
    "debug": 167,
    "engine.io-parser": 170,
    "indexof": 216,
    "parseqs": 266,
    "parseuri": 267
  }],
  160: [function (require, module, exports) {
    /**
     * Module dependencies.
     */
    var parser = require('engine.io-parser');

    var Emitter = require('component-emitter');
    /**
     * Module exports.
     */


    module.exports = Transport;
    /**
     * Transport abstract constructor.
     *
     * @param {Object} options.
     * @api private
     */

    function Transport(opts) {
      this.path = opts.path;
      this.hostname = opts.hostname;
      this.port = opts.port;
      this.secure = opts.secure;
      this.query = opts.query;
      this.timestampParam = opts.timestampParam;
      this.timestampRequests = opts.timestampRequests;
      this.readyState = '';
      this.agent = opts.agent || false;
      this.socket = opts.socket;
      this.enablesXDR = opts.enablesXDR;
      this.withCredentials = opts.withCredentials; // SSL options for Node.js client

      this.pfx = opts.pfx;
      this.key = opts.key;
      this.passphrase = opts.passphrase;
      this.cert = opts.cert;
      this.ca = opts.ca;
      this.ciphers = opts.ciphers;
      this.rejectUnauthorized = opts.rejectUnauthorized;
      this.forceNode = opts.forceNode; // results of ReactNative environment detection

      this.isReactNative = opts.isReactNative; // other options for Node.js client

      this.extraHeaders = opts.extraHeaders;
      this.localAddress = opts.localAddress;
    }
    /**
     * Mix in `Emitter`.
     */


    Emitter(Transport.prototype);
    /**
     * Emits an error.
     *
     * @param {String} str
     * @return {Transport} for chaining
     * @api public
     */

    Transport.prototype.onError = function (msg, desc) {
      var err = new Error(msg);
      err.type = 'TransportError';
      err.description = desc;
      this.emit('error', err);
      return this;
    };
    /**
     * Opens the transport.
     *
     * @api public
     */


    Transport.prototype.open = function () {
      if ('closed' === this.readyState || '' === this.readyState) {
        this.readyState = 'opening';
        this.doOpen();
      }

      return this;
    };
    /**
     * Closes the transport.
     *
     * @api private
     */


    Transport.prototype.close = function () {
      if ('opening' === this.readyState || 'open' === this.readyState) {
        this.doClose();
        this.onClose();
      }

      return this;
    };
    /**
     * Sends multiple packets.
     *
     * @param {Array} packets
     * @api private
     */


    Transport.prototype.send = function (packets) {
      if ('open' === this.readyState) {
        this.write(packets);
      } else {
        throw new Error('Transport not open');
      }
    };
    /**
     * Called upon open
     *
     * @api private
     */


    Transport.prototype.onOpen = function () {
      this.readyState = 'open';
      this.writable = true;
      this.emit('open');
    };
    /**
     * Called with data.
     *
     * @param {String} data
     * @api private
     */


    Transport.prototype.onData = function (data) {
      var packet = parser.decodePacket(data, this.socket.binaryType);
      this.onPacket(packet);
    };
    /**
     * Called with a decoded packet.
     */


    Transport.prototype.onPacket = function (packet) {
      this.emit('packet', packet);
    };
    /**
     * Called upon close.
     *
     * @api private
     */


    Transport.prototype.onClose = function () {
      this.readyState = 'closed';
      this.emit('close');
    };
  }, {
    "component-emitter": 112,
    "engine.io-parser": 170
  }],
  161: [function (require, module, exports) {
    /**
     * Module dependencies
     */
    var XMLHttpRequest = require('xmlhttprequest-ssl');

    var XHR = require('./polling-xhr');

    var JSONP = require('./polling-jsonp');

    var websocket = require('./websocket');
    /**
     * Export transports.
     */


    exports.polling = polling;
    exports.websocket = websocket;
    /**
     * Polling transport polymorphic constructor.
     * Decides on xhr vs jsonp based on feature detection.
     *
     * @api private
     */

    function polling(opts) {
      var xhr;
      var xd = false;
      var xs = false;
      var jsonp = false !== opts.jsonp;

      if (typeof location !== 'undefined') {
        var isSSL = 'https:' === location.protocol;
        var port = location.port; // some user agents have empty `location.port`

        if (!port) {
          port = isSSL ? 443 : 80;
        }

        xd = opts.hostname !== location.hostname || port !== opts.port;
        xs = opts.secure !== isSSL;
      }

      opts.xdomain = xd;
      opts.xscheme = xs;
      xhr = new XMLHttpRequest(opts);

      if ('open' in xhr && !opts.forceJSONP) {
        return new XHR(opts);
      } else {
        if (!jsonp) throw new Error('JSONP disabled');
        return new JSONP(opts);
      }
    }
  }, {
    "./polling-jsonp": 162,
    "./polling-xhr": 163,
    "./websocket": 165,
    "xmlhttprequest-ssl": 166
  }],
  162: [function (require, module, exports) {
    /**
     * Module requirements.
     */
    var Polling = require('./polling');

    var inherit = require('component-inherit');

    var globalThis = require('../globalThis');
    /**
     * Module exports.
     */


    module.exports = JSONPPolling;
    /**
     * Cached regular expressions.
     */

    var rNewline = /\n/g;
    var rEscapedNewline = /\\n/g;
    /**
     * Global JSONP callbacks.
     */

    var callbacks;
    /**
     * Noop.
     */

    function empty() {}
    /**
     * JSONP Polling constructor.
     *
     * @param {Object} opts.
     * @api public
     */


    function JSONPPolling(opts) {
      Polling.call(this, opts);
      this.query = this.query || {}; // define global callbacks array if not present
      // we do this here (lazily) to avoid unneeded global pollution

      if (!callbacks) {
        // we need to consider multiple engines in the same page
        callbacks = globalThis.___eio = globalThis.___eio || [];
      } // callback identifier


      this.index = callbacks.length; // add callback to jsonp global

      var self = this;
      callbacks.push(function (msg) {
        self.onData(msg);
      }); // append to query string

      this.query.j = this.index; // prevent spurious errors from being emitted when the window is unloaded

      if (typeof addEventListener === 'function') {
        addEventListener('beforeunload', function () {
          if (self.script) self.script.onerror = empty;
        }, false);
      }
    }
    /**
     * Inherits from Polling.
     */


    inherit(JSONPPolling, Polling);
    /*
     * JSONP only supports binary as base64 encoded strings
     */

    JSONPPolling.prototype.supportsBinary = false;
    /**
     * Closes the socket.
     *
     * @api private
     */

    JSONPPolling.prototype.doClose = function () {
      if (this.script) {
        this.script.parentNode.removeChild(this.script);
        this.script = null;
      }

      if (this.form) {
        this.form.parentNode.removeChild(this.form);
        this.form = null;
        this.iframe = null;
      }

      Polling.prototype.doClose.call(this);
    };
    /**
     * Starts a poll cycle.
     *
     * @api private
     */


    JSONPPolling.prototype.doPoll = function () {
      var self = this;
      var script = document.createElement('script');

      if (this.script) {
        this.script.parentNode.removeChild(this.script);
        this.script = null;
      }

      script.async = true;
      script.src = this.uri();

      script.onerror = function (e) {
        self.onError('jsonp poll error', e);
      };

      var insertAt = document.getElementsByTagName('script')[0];

      if (insertAt) {
        insertAt.parentNode.insertBefore(script, insertAt);
      } else {
        (document.head || document.body).appendChild(script);
      }

      this.script = script;
      var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

      if (isUAgecko) {
        setTimeout(function () {
          var iframe = document.createElement('iframe');
          document.body.appendChild(iframe);
          document.body.removeChild(iframe);
        }, 100);
      }
    };
    /**
     * Writes with a hidden iframe.
     *
     * @param {String} data to send
     * @param {Function} called upon flush.
     * @api private
     */


    JSONPPolling.prototype.doWrite = function (data, fn) {
      var self = this;

      if (!this.form) {
        var form = document.createElement('form');
        var area = document.createElement('textarea');
        var id = this.iframeId = 'eio_iframe_' + this.index;
        var iframe;
        form.className = 'socketio';
        form.style.position = 'absolute';
        form.style.top = '-1000px';
        form.style.left = '-1000px';
        form.target = id;
        form.method = 'POST';
        form.setAttribute('accept-charset', 'utf-8');
        area.name = 'd';
        form.appendChild(area);
        document.body.appendChild(form);
        this.form = form;
        this.area = area;
      }

      this.form.action = this.uri();

      function complete() {
        initIframe();
        fn();
      }

      function initIframe() {
        if (self.iframe) {
          try {
            self.form.removeChild(self.iframe);
          } catch (e) {
            self.onError('jsonp polling iframe removal error', e);
          }
        }

        try {
          // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
          var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
          iframe = document.createElement(html);
        } catch (e) {
          iframe = document.createElement('iframe');
          iframe.name = self.iframeId;
          iframe.src = 'javascript:0';
        }

        iframe.id = self.iframeId;
        self.form.appendChild(iframe);
        self.iframe = iframe;
      }

      initIframe(); // escape \n to prevent it from being converted into \r\n by some UAs
      // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side

      data = data.replace(rEscapedNewline, '\\\n');
      this.area.value = data.replace(rNewline, '\\n');

      try {
        this.form.submit();
      } catch (e) {}

      if (this.iframe.attachEvent) {
        this.iframe.onreadystatechange = function () {
          if (self.iframe.readyState === 'complete') {
            complete();
          }
        };
      } else {
        this.iframe.onload = complete;
      }
    };
  }, {
    "../globalThis": 157,
    "./polling": 164,
    "component-inherit": 113
  }],
  163: [function (require, module, exports) {
    /* global attachEvent */

    /**
     * Module requirements.
     */
    var XMLHttpRequest = require('xmlhttprequest-ssl');

    var Polling = require('./polling');

    var Emitter = require('component-emitter');

    var inherit = require('component-inherit');

    var debug = require('debug')('engine.io-client:polling-xhr');

    var globalThis = require('../globalThis');
    /**
     * Module exports.
     */


    module.exports = XHR;
    module.exports.Request = Request;
    /**
     * Empty function
     */

    function empty() {}
    /**
     * XHR Polling constructor.
     *
     * @param {Object} opts
     * @api public
     */


    function XHR(opts) {
      Polling.call(this, opts);
      this.requestTimeout = opts.requestTimeout;
      this.extraHeaders = opts.extraHeaders;

      if (typeof location !== 'undefined') {
        var isSSL = 'https:' === location.protocol;
        var port = location.port; // some user agents have empty `location.port`

        if (!port) {
          port = isSSL ? 443 : 80;
        }

        this.xd = typeof location !== 'undefined' && opts.hostname !== location.hostname || port !== opts.port;
        this.xs = opts.secure !== isSSL;
      }
    }
    /**
     * Inherits from Polling.
     */


    inherit(XHR, Polling);
    /**
     * XHR supports binary
     */

    XHR.prototype.supportsBinary = true;
    /**
     * Creates a request.
     *
     * @param {String} method
     * @api private
     */

    XHR.prototype.request = function (opts) {
      opts = opts || {};
      opts.uri = this.uri();
      opts.xd = this.xd;
      opts.xs = this.xs;
      opts.agent = this.agent || false;
      opts.supportsBinary = this.supportsBinary;
      opts.enablesXDR = this.enablesXDR;
      opts.withCredentials = this.withCredentials; // SSL options for Node.js client

      opts.pfx = this.pfx;
      opts.key = this.key;
      opts.passphrase = this.passphrase;
      opts.cert = this.cert;
      opts.ca = this.ca;
      opts.ciphers = this.ciphers;
      opts.rejectUnauthorized = this.rejectUnauthorized;
      opts.requestTimeout = this.requestTimeout; // other options for Node.js client

      opts.extraHeaders = this.extraHeaders;
      return new Request(opts);
    };
    /**
     * Sends data.
     *
     * @param {String} data to send.
     * @param {Function} called upon flush.
     * @api private
     */


    XHR.prototype.doWrite = function (data, fn) {
      var isBinary = typeof data !== 'string' && data !== undefined;
      var req = this.request({
        method: 'POST',
        data: data,
        isBinary: isBinary
      });
      var self = this;
      req.on('success', fn);
      req.on('error', function (err) {
        self.onError('xhr post error', err);
      });
      this.sendXhr = req;
    };
    /**
     * Starts a poll cycle.
     *
     * @api private
     */


    XHR.prototype.doPoll = function () {
      debug('xhr poll');
      var req = this.request();
      var self = this;
      req.on('data', function (data) {
        self.onData(data);
      });
      req.on('error', function (err) {
        self.onError('xhr poll error', err);
      });
      this.pollXhr = req;
    };
    /**
     * Request constructor
     *
     * @param {Object} options
     * @api public
     */


    function Request(opts) {
      this.method = opts.method || 'GET';
      this.uri = opts.uri;
      this.xd = !!opts.xd;
      this.xs = !!opts.xs;
      this.async = false !== opts.async;
      this.data = undefined !== opts.data ? opts.data : null;
      this.agent = opts.agent;
      this.isBinary = opts.isBinary;
      this.supportsBinary = opts.supportsBinary;
      this.enablesXDR = opts.enablesXDR;
      this.withCredentials = opts.withCredentials;
      this.requestTimeout = opts.requestTimeout; // SSL options for Node.js client

      this.pfx = opts.pfx;
      this.key = opts.key;
      this.passphrase = opts.passphrase;
      this.cert = opts.cert;
      this.ca = opts.ca;
      this.ciphers = opts.ciphers;
      this.rejectUnauthorized = opts.rejectUnauthorized; // other options for Node.js client

      this.extraHeaders = opts.extraHeaders;
      this.create();
    }
    /**
     * Mix in `Emitter`.
     */


    Emitter(Request.prototype);
    /**
     * Creates the XHR object and sends the request.
     *
     * @api private
     */

    Request.prototype.create = function () {
      var opts = {
        agent: this.agent,
        xdomain: this.xd,
        xscheme: this.xs,
        enablesXDR: this.enablesXDR
      }; // SSL options for Node.js client

      opts.pfx = this.pfx;
      opts.key = this.key;
      opts.passphrase = this.passphrase;
      opts.cert = this.cert;
      opts.ca = this.ca;
      opts.ciphers = this.ciphers;
      opts.rejectUnauthorized = this.rejectUnauthorized;
      var xhr = this.xhr = new XMLHttpRequest(opts);
      var self = this;

      try {
        debug('xhr open %s: %s', this.method, this.uri);
        xhr.open(this.method, this.uri, this.async);

        try {
          if (this.extraHeaders) {
            xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);

            for (var i in this.extraHeaders) {
              if (this.extraHeaders.hasOwnProperty(i)) {
                xhr.setRequestHeader(i, this.extraHeaders[i]);
              }
            }
          }
        } catch (e) {}

        if ('POST' === this.method) {
          try {
            if (this.isBinary) {
              xhr.setRequestHeader('Content-type', 'application/octet-stream');
            } else {
              xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
            }
          } catch (e) {}
        }

        try {
          xhr.setRequestHeader('Accept', '*/*');
        } catch (e) {} // ie6 check


        if ('withCredentials' in xhr) {
          xhr.withCredentials = this.withCredentials;
        }

        if (this.requestTimeout) {
          xhr.timeout = this.requestTimeout;
        }

        if (this.hasXDR()) {
          xhr.onload = function () {
            self.onLoad();
          };

          xhr.onerror = function () {
            self.onError(xhr.responseText);
          };
        } else {
          xhr.onreadystatechange = function () {
            if (xhr.readyState === 2) {
              try {
                var contentType = xhr.getResponseHeader('Content-Type');

                if (self.supportsBinary && contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {
                  xhr.responseType = 'arraybuffer';
                }
              } catch (e) {}
            }

            if (4 !== xhr.readyState) return;

            if (200 === xhr.status || 1223 === xhr.status) {
              self.onLoad();
            } else {
              // make sure the `error` event handler that's user-set
              // does not throw in the same tick and gets caught here
              setTimeout(function () {
                self.onError(typeof xhr.status === 'number' ? xhr.status : 0);
              }, 0);
            }
          };
        }

        debug('xhr data %s', this.data);
        xhr.send(this.data);
      } catch (e) {
        // Need to defer since .create() is called directly fhrom the constructor
        // and thus the 'error' event can only be only bound *after* this exception
        // occurs.  Therefore, also, we cannot throw here at all.
        setTimeout(function () {
          self.onError(e);
        }, 0);
        return;
      }

      if (typeof document !== 'undefined') {
        this.index = Request.requestsCount++;
        Request.requests[this.index] = this;
      }
    };
    /**
     * Called upon successful response.
     *
     * @api private
     */


    Request.prototype.onSuccess = function () {
      this.emit('success');
      this.cleanup();
    };
    /**
     * Called if we have data.
     *
     * @api private
     */


    Request.prototype.onData = function (data) {
      this.emit('data', data);
      this.onSuccess();
    };
    /**
     * Called upon error.
     *
     * @api private
     */


    Request.prototype.onError = function (err) {
      this.emit('error', err);
      this.cleanup(true);
    };
    /**
     * Cleans up house.
     *
     * @api private
     */


    Request.prototype.cleanup = function (fromError) {
      if ('undefined' === typeof this.xhr || null === this.xhr) {
        return;
      } // xmlhttprequest


      if (this.hasXDR()) {
        this.xhr.onload = this.xhr.onerror = empty;
      } else {
        this.xhr.onreadystatechange = empty;
      }

      if (fromError) {
        try {
          this.xhr.abort();
        } catch (e) {}
      }

      if (typeof document !== 'undefined') {
        delete Request.requests[this.index];
      }

      this.xhr = null;
    };
    /**
     * Called upon load.
     *
     * @api private
     */


    Request.prototype.onLoad = function () {
      var data;

      try {
        var contentType;

        try {
          contentType = this.xhr.getResponseHeader('Content-Type');
        } catch (e) {}

        if (contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {
          data = this.xhr.response || this.xhr.responseText;
        } else {
          data = this.xhr.responseText;
        }
      } catch (e) {
        this.onError(e);
      }

      if (null != data) {
        this.onData(data);
      }
    };
    /**
     * Check if it has XDomainRequest.
     *
     * @api private
     */


    Request.prototype.hasXDR = function () {
      return typeof XDomainRequest !== 'undefined' && !this.xs && this.enablesXDR;
    };
    /**
     * Aborts the request.
     *
     * @api public
     */


    Request.prototype.abort = function () {
      this.cleanup();
    };
    /**
     * Aborts pending requests when unloading the window. This is needed to prevent
     * memory leaks (e.g. when using IE) and to ensure that no spurious error is
     * emitted.
     */


    Request.requestsCount = 0;
    Request.requests = {};

    if (typeof document !== 'undefined') {
      if (typeof attachEvent === 'function') {
        attachEvent('onunload', unloadHandler);
      } else if (typeof addEventListener === 'function') {
        var terminationEvent = 'onpagehide' in globalThis ? 'pagehide' : 'unload';
        addEventListener(terminationEvent, unloadHandler, false);
      }
    }

    function unloadHandler() {
      for (var i in Request.requests) {
        if (Request.requests.hasOwnProperty(i)) {
          Request.requests[i].abort();
        }
      }
    }
  }, {
    "../globalThis": 157,
    "./polling": 164,
    "component-emitter": 112,
    "component-inherit": 113,
    "debug": 167,
    "xmlhttprequest-ssl": 166
  }],
  164: [function (require, module, exports) {
    /**
     * Module dependencies.
     */
    var Transport = require('../transport');

    var parseqs = require('parseqs');

    var parser = require('engine.io-parser');

    var inherit = require('component-inherit');

    var yeast = require('yeast');

    var debug = require('debug')('engine.io-client:polling');
    /**
     * Module exports.
     */


    module.exports = Polling;
    /**
     * Is XHR2 supported?
     */

    var hasXHR2 = function () {
      var XMLHttpRequest = require('xmlhttprequest-ssl');

      var xhr = new XMLHttpRequest({
        xdomain: false
      });
      return null != xhr.responseType;
    }();
    /**
     * Polling interface.
     *
     * @param {Object} opts
     * @api private
     */


    function Polling(opts) {
      var forceBase64 = opts && opts.forceBase64;

      if (!hasXHR2 || forceBase64) {
        this.supportsBinary = false;
      }

      Transport.call(this, opts);
    }
    /**
     * Inherits from Transport.
     */


    inherit(Polling, Transport);
    /**
     * Transport name.
     */

    Polling.prototype.name = 'polling';
    /**
     * Opens the socket (triggers polling). We write a PING message to determine
     * when the transport is open.
     *
     * @api private
     */

    Polling.prototype.doOpen = function () {
      this.poll();
    };
    /**
     * Pauses polling.
     *
     * @param {Function} callback upon buffers are flushed and transport is paused
     * @api private
     */


    Polling.prototype.pause = function (onPause) {
      var self = this;
      this.readyState = 'pausing';

      function pause() {
        debug('paused');
        self.readyState = 'paused';
        onPause();
      }

      if (this.polling || !this.writable) {
        var total = 0;

        if (this.polling) {
          debug('we are currently polling - waiting to pause');
          total++;
          this.once('pollComplete', function () {
            debug('pre-pause polling complete');
            --total || pause();
          });
        }

        if (!this.writable) {
          debug('we are currently writing - waiting to pause');
          total++;
          this.once('drain', function () {
            debug('pre-pause writing complete');
            --total || pause();
          });
        }
      } else {
        pause();
      }
    };
    /**
     * Starts polling cycle.
     *
     * @api public
     */


    Polling.prototype.poll = function () {
      debug('polling');
      this.polling = true;
      this.doPoll();
      this.emit('poll');
    };
    /**
     * Overloads onData to detect payloads.
     *
     * @api private
     */


    Polling.prototype.onData = function (data) {
      var self = this;
      debug('polling got data %s', data);

      var callback = function callback(packet, index, total) {
        // if its the first message we consider the transport open
        if ('opening' === self.readyState) {
          self.onOpen();
        } // if its a close packet, we close the ongoing requests


        if ('close' === packet.type) {
          self.onClose();
          return false;
        } // otherwise bypass onData and handle the message


        self.onPacket(packet);
      }; // decode payload


      parser.decodePayload(data, this.socket.binaryType, callback); // if an event did not trigger closing

      if ('closed' !== this.readyState) {
        // if we got data we're not polling
        this.polling = false;
        this.emit('pollComplete');

        if ('open' === this.readyState) {
          this.poll();
        } else {
          debug('ignoring poll - transport state "%s"', this.readyState);
        }
      }
    };
    /**
     * For polling, send a close packet.
     *
     * @api private
     */


    Polling.prototype.doClose = function () {
      var self = this;

      function close() {
        debug('writing close packet');
        self.write([{
          type: 'close'
        }]);
      }

      if ('open' === this.readyState) {
        debug('transport open - closing');
        close();
      } else {
        // in case we're trying to close while
        // handshaking is in progress (GH-164)
        debug('transport not open - deferring close');
        this.once('open', close);
      }
    };
    /**
     * Writes a packets payload.
     *
     * @param {Array} data packets
     * @param {Function} drain callback
     * @api private
     */


    Polling.prototype.write = function (packets) {
      var self = this;
      this.writable = false;

      var callbackfn = function callbackfn() {
        self.writable = true;
        self.emit('drain');
      };

      parser.encodePayload(packets, this.supportsBinary, function (data) {
        self.doWrite(data, callbackfn);
      });
    };
    /**
     * Generates uri for connection.
     *
     * @api private
     */


    Polling.prototype.uri = function () {
      var query = this.query || {};
      var schema = this.secure ? 'https' : 'http';
      var port = ''; // cache busting is forced

      if (false !== this.timestampRequests) {
        query[this.timestampParam] = yeast();
      }

      if (!this.supportsBinary && !query.sid) {
        query.b64 = 1;
      }

      query = parseqs.encode(query); // avoid port if default for schema

      if (this.port && ('https' === schema && Number(this.port) !== 443 || 'http' === schema && Number(this.port) !== 80)) {
        port = ':' + this.port;
      } // prepend ? to query


      if (query.length) {
        query = '?' + query;
      }

      var ipv6 = this.hostname.indexOf(':') !== -1;
      return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
    };
  }, {
    "../transport": 160,
    "component-inherit": 113,
    "debug": 167,
    "engine.io-parser": 170,
    "parseqs": 266,
    "xmlhttprequest-ssl": 166,
    "yeast": 428
  }],
  165: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        /**
         * Module dependencies.
         */
        var Transport = require('../transport');

        var parser = require('engine.io-parser');

        var parseqs = require('parseqs');

        var inherit = require('component-inherit');

        var yeast = require('yeast');

        var debug = require('debug')('engine.io-client:websocket');

        var BrowserWebSocket, NodeWebSocket;

        if (typeof WebSocket !== 'undefined') {
          BrowserWebSocket = WebSocket;
        } else if (typeof self !== 'undefined') {
          BrowserWebSocket = self.WebSocket || self.MozWebSocket;
        }

        if (typeof window === 'undefined') {
          try {
            NodeWebSocket = require('ws');
          } catch (e) {}
        }
        /**
         * Get either the `WebSocket` or `MozWebSocket` globals
         * in the browser or try to resolve WebSocket-compatible
         * interface exposed by `ws` for Node-like environment.
         */


        var WebSocketImpl = BrowserWebSocket || NodeWebSocket;
        /**
         * Module exports.
         */

        module.exports = WS;
        /**
         * WebSocket transport constructor.
         *
         * @api {Object} connection options
         * @api public
         */

        function WS(opts) {
          var forceBase64 = opts && opts.forceBase64;

          if (forceBase64) {
            this.supportsBinary = false;
          }

          this.perMessageDeflate = opts.perMessageDeflate;
          this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
          this.protocols = opts.protocols;

          if (!this.usingBrowserWebSocket) {
            WebSocketImpl = NodeWebSocket;
          }

          Transport.call(this, opts);
        }
        /**
         * Inherits from Transport.
         */


        inherit(WS, Transport);
        /**
         * Transport name.
         *
         * @api public
         */

        WS.prototype.name = 'websocket';
        /*
         * WebSockets support binary
         */

        WS.prototype.supportsBinary = true;
        /**
         * Opens socket.
         *
         * @api private
         */

        WS.prototype.doOpen = function () {
          if (!this.check()) {
            // let probe timeout
            return;
          }

          var uri = this.uri();
          var protocols = this.protocols;
          var opts = {};

          if (!this.isReactNative) {
            opts.agent = this.agent;
            opts.perMessageDeflate = this.perMessageDeflate; // SSL options for Node.js client

            opts.pfx = this.pfx;
            opts.key = this.key;
            opts.passphrase = this.passphrase;
            opts.cert = this.cert;
            opts.ca = this.ca;
            opts.ciphers = this.ciphers;
            opts.rejectUnauthorized = this.rejectUnauthorized;
          }

          if (this.extraHeaders) {
            opts.headers = this.extraHeaders;
          }

          if (this.localAddress) {
            opts.localAddress = this.localAddress;
          }

          try {
            this.ws = this.usingBrowserWebSocket && !this.isReactNative ? protocols ? new WebSocketImpl(uri, protocols) : new WebSocketImpl(uri) : new WebSocketImpl(uri, protocols, opts);
          } catch (err) {
            return this.emit('error', err);
          }

          if (this.ws.binaryType === undefined) {
            this.supportsBinary = false;
          }

          if (this.ws.supports && this.ws.supports.binary) {
            this.supportsBinary = true;
            this.ws.binaryType = 'nodebuffer';
          } else {
            this.ws.binaryType = 'arraybuffer';
          }

          this.addEventListeners();
        };
        /**
         * Adds event listeners to the socket
         *
         * @api private
         */


        WS.prototype.addEventListeners = function () {
          var self = this;

          this.ws.onopen = function () {
            self.onOpen();
          };

          this.ws.onclose = function () {
            self.onClose();
          };

          this.ws.onmessage = function (ev) {
            self.onData(ev.data);
          };

          this.ws.onerror = function (e) {
            self.onError('websocket error', e);
          };
        };
        /**
         * Writes data to socket.
         *
         * @param {Array} array of packets.
         * @api private
         */


        WS.prototype.write = function (packets) {
          var self = this;
          this.writable = false; // encodePacket efficient as it uses WS framing
          // no need for encodePayload

          var total = packets.length;

          for (var i = 0, l = total; i < l; i++) {
            (function (packet) {
              parser.encodePacket(packet, self.supportsBinary, function (data) {
                if (!self.usingBrowserWebSocket) {
                  // always create a new object (GH-437)
                  var opts = {};

                  if (packet.options) {
                    opts.compress = packet.options.compress;
                  }

                  if (self.perMessageDeflate) {
                    var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;

                    if (len < self.perMessageDeflate.threshold) {
                      opts.compress = false;
                    }
                  }
                } // Sometimes the websocket has already been closed but the browser didn't
                // have a chance of informing us about it yet, in that case send will
                // throw an error


                try {
                  if (self.usingBrowserWebSocket) {
                    // TypeError is thrown when passing the second argument on Safari
                    self.ws.send(data);
                  } else {
                    self.ws.send(data, opts);
                  }
                } catch (e) {
                  debug('websocket closed before onclose event');
                }

                --total || done();
              });
            })(packets[i]);
          }

          function done() {
            self.emit('flush'); // fake drain
            // defer to next tick to allow Socket to clear writeBuffer

            setTimeout(function () {
              self.writable = true;
              self.emit('drain');
            }, 0);
          }
        };
        /**
         * Called upon close
         *
         * @api private
         */


        WS.prototype.onClose = function () {
          Transport.prototype.onClose.call(this);
        };
        /**
         * Closes socket.
         *
         * @api private
         */


        WS.prototype.doClose = function () {
          if (typeof this.ws !== 'undefined') {
            this.ws.close();
          }
        };
        /**
         * Generates uri for connection.
         *
         * @api private
         */


        WS.prototype.uri = function () {
          var query = this.query || {};
          var schema = this.secure ? 'wss' : 'ws';
          var port = ''; // avoid port if default for schema

          if (this.port && ('wss' === schema && Number(this.port) !== 443 || 'ws' === schema && Number(this.port) !== 80)) {
            port = ':' + this.port;
          } // append timestamp to URI


          if (this.timestampRequests) {
            query[this.timestampParam] = yeast();
          } // communicate binary support capabilities


          if (!this.supportsBinary) {
            query.b64 = 1;
          }

          query = parseqs.encode(query); // prepend ? to query

          if (query.length) {
            query = '?' + query;
          }

          var ipv6 = this.hostname.indexOf(':') !== -1;
          return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
        };
        /**
         * Feature detection for WebSocket.
         *
         * @return {Boolean} whether this transport is available.
         * @api public
         */


        WS.prototype.check = function () {
          return !!WebSocketImpl && !('__initialize' in WebSocketImpl && this.name === WS.prototype.name);
        };
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "../transport": 160,
    "buffer": 102,
    "component-inherit": 113,
    "debug": 167,
    "engine.io-parser": 170,
    "parseqs": 266,
    "ws": 56,
    "yeast": 428
  }],
  166: [function (require, module, exports) {
    // browser shim for xmlhttprequest module
    var hasCORS = require('has-cors');

    var globalThis = require('./globalThis');

    module.exports = function (opts) {
      var xdomain = opts.xdomain; // scheme must be same when usign XDomainRequest
      // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx

      var xscheme = opts.xscheme; // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
      // https://github.com/Automattic/engine.io-client/pull/217

      var enablesXDR = opts.enablesXDR; // XMLHttpRequest can be disabled on IE

      try {
        if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
          return new XMLHttpRequest();
        }
      } catch (e) {} // Use XDomainRequest for IE8 if enablesXDR is true
      // because loading bar keeps flashing when using jsonp-polling
      // https://github.com/yujiosaka/socke.io-ie8-loading-example


      try {
        if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
          return new XDomainRequest();
        }
      } catch (e) {}

      if (!xdomain) {
        try {
          return new globalThis[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
        } catch (e) {}
      }
    };
  }, {
    "./globalThis": 157,
    "has-cors": 179
  }],
  167: [function (require, module, exports) {
    (function (process) {
      (function () {
        /**
         * This is the web browser implementation of `debug()`.
         *
         * Expose `debug()` as the module.
         */
        exports = module.exports = require('./debug');
        exports.log = log;
        exports.formatArgs = formatArgs;
        exports.save = save;
        exports.load = load;
        exports.useColors = useColors;
        exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();
        /**
         * Colors.
         */

        exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
        /**
         * Currently only WebKit-based Web Inspectors, Firefox >= v31,
         * and the Firebug extension (any Firefox version) are known
         * to support "%c" CSS customizations.
         *
         * TODO: add a `localStorage` variable to explicitly enable/disable colors
         */

        function useColors() {
          // NB: In an Electron preload script, document will be defined but not fully
          // initialized. Since we know we're in Chrome, we'll just detect this case
          // explicitly
          if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
            return true;
          } // Internet Explorer and Edge do not support colors.


          if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
            return false;
          } // is webkit? http://stackoverflow.com/a/16459606/376773
          // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


          return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // is firebug? http://stackoverflow.com/a/398120/376773
          typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // is firefox >= v31?
          // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
          typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // double check webkit in userAgent just in case we are in a worker
          typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
        }
        /**
         * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
         */


        exports.formatters.j = function (v) {
          try {
            return JSON.stringify(v);
          } catch (err) {
            return '[UnexpectedJSONParseError]: ' + err.message;
          }
        };
        /**
         * Colorize log arguments if enabled.
         *
         * @api public
         */


        function formatArgs(args) {
          var useColors = this.useColors;
          args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);
          if (!useColors) return;
          var c = 'color: ' + this.color;
          args.splice(1, 0, c, 'color: inherit'); // the final "%c" is somewhat tricky, because there could be other
          // arguments passed either before or after the %c, so we need to
          // figure out the correct index to insert the CSS into

          var index = 0;
          var lastC = 0;
          args[0].replace(/%[a-zA-Z%]/g, function (match) {
            if ('%%' === match) return;
            index++;

            if ('%c' === match) {
              // we only are interested in the *last* %c
              // (the user may have provided their own)
              lastC = index;
            }
          });
          args.splice(lastC, 0, c);
        }
        /**
         * Invokes `console.log()` when available.
         * No-op when `console.log` is not a "function".
         *
         * @api public
         */


        function log() {
          // this hackery is required for IE8/9, where
          // the `console.log` function doesn't have 'apply'
          return 'object' === (typeof console === "undefined" ? "undefined" : _typeof2(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
        }
        /**
         * Save `namespaces`.
         *
         * @param {String} namespaces
         * @api private
         */


        function save(namespaces) {
          try {
            if (null == namespaces) {
              exports.storage.removeItem('debug');
            } else {
              exports.storage.debug = namespaces;
            }
          } catch (e) {}
        }
        /**
         * Load `namespaces`.
         *
         * @return {String} returns the previously persisted debug modes
         * @api private
         */


        function load() {
          var r;

          try {
            r = exports.storage.debug;
          } catch (e) {} // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


          if (!r && typeof process !== 'undefined' && 'env' in process) {
            r = undefined;
          }

          return r;
        }
        /**
         * Enable namespaces listed in `localStorage.debug` initially.
         */


        exports.enable(load());
        /**
         * Localstorage attempts to return the localstorage.
         *
         * This is necessary because safari throws
         * when a user disables cookies/localstorage
         * and you attempt to access it.
         *
         * @return {LocalStorage}
         * @api private
         */

        function localstorage() {
          try {
            return window.localStorage;
          } catch (e) {}
        }
      }).call(this);
    }).call(this, require('_process'));
  }, {
    "./debug": 168,
    "_process": 276
  }],
  168: [function (require, module, exports) {
    /**
     * This is the common logic for both the Node.js and web browser
     * implementations of `debug()`.
     *
     * Expose `debug()` as the module.
     */
    exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
    exports.coerce = coerce;
    exports.disable = disable;
    exports.enable = enable;
    exports.enabled = enabled;
    exports.humanize = require('ms');
    /**
     * Active `debug` instances.
     */

    exports.instances = [];
    /**
     * The currently active debug mode names, and names to skip.
     */

    exports.names = [];
    exports.skips = [];
    /**
     * Map of special "%n" handling functions, for the debug "format" argument.
     *
     * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
     */

    exports.formatters = {};
    /**
     * Select a color.
     * @param {String} namespace
     * @return {Number}
     * @api private
     */

    function selectColor(namespace) {
      var hash = 0,
          i;

      for (i in namespace) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0; // Convert to 32bit integer
      }

      return exports.colors[Math.abs(hash) % exports.colors.length];
    }
    /**
     * Create a debugger with the given `namespace`.
     *
     * @param {String} namespace
     * @return {Function}
     * @api public
     */


    function createDebug(namespace) {
      var prevTime;

      function debug() {
        // disabled?
        if (!debug.enabled) return;
        var self = debug; // set `diff` timestamp

        var curr = +new Date();
        var ms = curr - (prevTime || curr);
        self.diff = ms;
        self.prev = prevTime;
        self.curr = curr;
        prevTime = curr; // turn the `arguments` into a proper Array

        var args = new Array(arguments.length);

        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }

        args[0] = exports.coerce(args[0]);

        if ('string' !== typeof args[0]) {
          // anything else let's inspect with %O
          args.unshift('%O');
        } // apply any `formatters` transformations


        var index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
          // if we encounter an escaped % then don't increase the array index
          if (match === '%%') return match;
          index++;
          var formatter = exports.formatters[format];

          if ('function' === typeof formatter) {
            var val = args[index];
            match = formatter.call(self, val); // now we need to remove `args[index]` since it's inlined in the `format`

            args.splice(index, 1);
            index--;
          }

          return match;
        }); // apply env-specific formatting (colors, etc.)

        exports.formatArgs.call(self, args);
        var logFn = debug.log || exports.log || console.log.bind(console);
        logFn.apply(self, args);
      }

      debug.namespace = namespace;
      debug.enabled = exports.enabled(namespace);
      debug.useColors = exports.useColors();
      debug.color = selectColor(namespace);
      debug.destroy = destroy; // env-specific initialization logic for debug instances

      if ('function' === typeof exports.init) {
        exports.init(debug);
      }

      exports.instances.push(debug);
      return debug;
    }

    function destroy() {
      var index = exports.instances.indexOf(this);

      if (index !== -1) {
        exports.instances.splice(index, 1);
        return true;
      } else {
        return false;
      }
    }
    /**
     * Enables a debug mode by namespaces. This can include modes
     * separated by a colon and wildcards.
     *
     * @param {String} namespaces
     * @api public
     */


    function enable(namespaces) {
      exports.save(namespaces);
      exports.names = [];
      exports.skips = [];
      var i;
      var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
      var len = split.length;

      for (i = 0; i < len; i++) {
        if (!split[i]) continue; // ignore empty strings

        namespaces = split[i].replace(/\*/g, '.*?');

        if (namespaces[0] === '-') {
          exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
        } else {
          exports.names.push(new RegExp('^' + namespaces + '$'));
        }
      }

      for (i = 0; i < exports.instances.length; i++) {
        var instance = exports.instances[i];
        instance.enabled = exports.enabled(instance.namespace);
      }
    }
    /**
     * Disable debug output.
     *
     * @api public
     */


    function disable() {
      exports.enable('');
    }
    /**
     * Returns true if the given mode name is enabled, false otherwise.
     *
     * @param {String} name
     * @return {Boolean}
     * @api public
     */


    function enabled(name) {
      if (name[name.length - 1] === '*') {
        return true;
      }

      var i, len;

      for (i = 0, len = exports.skips.length; i < len; i++) {
        if (exports.skips[i].test(name)) {
          return false;
        }
      }

      for (i = 0, len = exports.names.length; i < len; i++) {
        if (exports.names[i].test(name)) {
          return true;
        }
      }

      return false;
    }
    /**
     * Coerce `val`.
     *
     * @param {Mixed} val
     * @return {Mixed}
     * @api private
     */


    function coerce(val) {
      if (val instanceof Error) return val.stack || val.message;
      return val;
    }
  }, {
    "ms": 169
  }],
  169: [function (require, module, exports) {
    /**
     * Helpers.
     */
    var s = 1000;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var y = d * 365.25;
    /**
     * Parse or format the given `val`.
     *
     * Options:
     *
     *  - `long` verbose formatting [false]
     *
     * @param {String|Number} val
     * @param {Object} [options]
     * @throws {Error} throw an error if val is not a non-empty string or a number
     * @return {String|Number}
     * @api public
     */

    module.exports = function (val, options) {
      options = options || {};

      var type = _typeof2(val);

      if (type === 'string' && val.length > 0) {
        return parse(val);
      } else if (type === 'number' && isNaN(val) === false) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }

      throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
    };
    /**
     * Parse the given `str` and return milliseconds.
     *
     * @param {String} str
     * @return {Number}
     * @api private
     */


    function parse(str) {
      str = String(str);

      if (str.length > 100) {
        return;
      }

      var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);

      if (!match) {
        return;
      }

      var n = parseFloat(match[1]);
      var type = (match[2] || 'ms').toLowerCase();

      switch (type) {
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
          return n * y;

        case 'days':
        case 'day':
        case 'd':
          return n * d;

        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
          return n * h;

        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
          return n * m;

        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
          return n * s;

        case 'milliseconds':
        case 'millisecond':
        case 'msecs':
        case 'msec':
        case 'ms':
          return n;

        default:
          return undefined;
      }
    }
    /**
     * Short format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */


    function fmtShort(ms) {
      if (ms >= d) {
        return Math.round(ms / d) + 'd';
      }

      if (ms >= h) {
        return Math.round(ms / h) + 'h';
      }

      if (ms >= m) {
        return Math.round(ms / m) + 'm';
      }

      if (ms >= s) {
        return Math.round(ms / s) + 's';
      }

      return ms + 'ms';
    }
    /**
     * Long format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */


    function fmtLong(ms) {
      return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
    }
    /**
     * Pluralization helper.
     */


    function plural(ms, n, name) {
      if (ms < n) {
        return;
      }

      if (ms < n * 1.5) {
        return Math.floor(ms / n) + ' ' + name;
      }

      return Math.ceil(ms / n) + ' ' + name + 's';
    }
  }, {}],
  170: [function (require, module, exports) {
    /**
     * Module dependencies.
     */
    var keys = require('./keys');

    var hasBinary = require('has-binary2');

    var sliceBuffer = require('arraybuffer.slice');

    var after = require('after');

    var utf8 = require('./utf8');

    var base64encoder;

    if (typeof ArrayBuffer !== 'undefined') {
      base64encoder = require('base64-arraybuffer');
    }
    /**
     * Check if we are running an android browser. That requires us to use
     * ArrayBuffer with polling transports...
     *
     * http://ghinda.net/jpeg-blob-ajax-android/
     */


    var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);
    /**
     * Check if we are running in PhantomJS.
     * Uploading a Blob with PhantomJS does not work correctly, as reported here:
     * https://github.com/ariya/phantomjs/issues/11395
     * @type boolean
     */

    var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);
    /**
     * When true, avoids using Blobs to encode payloads.
     * @type boolean
     */

    var dontSendBlobs = isAndroid || isPhantomJS;
    /**
     * Current protocol version.
     */

    exports.protocol = 3;
    /**
     * Packet types.
     */

    var packets = exports.packets = {
      open: 0 // non-ws
      ,
      close: 1 // non-ws
      ,
      ping: 2,
      pong: 3,
      message: 4,
      upgrade: 5,
      noop: 6
    };
    var packetslist = keys(packets);
    /**
     * Premade error packet.
     */

    var err = {
      type: 'error',
      data: 'parser error'
    };
    /**
     * Create a blob api even for blob builder when vendor prefixes exist
     */

    var Blob = require('blob');
    /**
     * Encodes a packet.
     *
     *     <packet type id> [ <data> ]
     *
     * Example:
     *
     *     5hello world
     *     3
     *     4
     *
     * Binary is encoded in an identical principle
     *
     * @api private
     */


    exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
      if (typeof supportsBinary === 'function') {
        callback = supportsBinary;
        supportsBinary = false;
      }

      if (typeof utf8encode === 'function') {
        callback = utf8encode;
        utf8encode = null;
      }

      var data = packet.data === undefined ? undefined : packet.data.buffer || packet.data;

      if (typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) {
        return encodeArrayBuffer(packet, supportsBinary, callback);
      } else if (typeof Blob !== 'undefined' && data instanceof Blob) {
        return encodeBlob(packet, supportsBinary, callback);
      } // might be an object with { base64: true, data: dataAsBase64String }


      if (data && data.base64) {
        return encodeBase64Object(packet, callback);
      } // Sending data as a utf-8 string


      var encoded = packets[packet.type]; // data fragment is optional

      if (undefined !== packet.data) {
        encoded += utf8encode ? utf8.encode(String(packet.data), {
          strict: false
        }) : String(packet.data);
      }

      return callback('' + encoded);
    };

    function encodeBase64Object(packet, callback) {
      // packet data is an object { base64: true, data: dataAsBase64String }
      var message = 'b' + exports.packets[packet.type] + packet.data.data;
      return callback(message);
    }
    /**
     * Encode packet helpers for binary types
     */


    function encodeArrayBuffer(packet, supportsBinary, callback) {
      if (!supportsBinary) {
        return exports.encodeBase64Packet(packet, callback);
      }

      var data = packet.data;
      var contentArray = new Uint8Array(data);
      var resultBuffer = new Uint8Array(1 + data.byteLength);
      resultBuffer[0] = packets[packet.type];

      for (var i = 0; i < contentArray.length; i++) {
        resultBuffer[i + 1] = contentArray[i];
      }

      return callback(resultBuffer.buffer);
    }

    function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
      if (!supportsBinary) {
        return exports.encodeBase64Packet(packet, callback);
      }

      var fr = new FileReader();

      fr.onload = function () {
        exports.encodePacket({
          type: packet.type,
          data: fr.result
        }, supportsBinary, true, callback);
      };

      return fr.readAsArrayBuffer(packet.data);
    }

    function encodeBlob(packet, supportsBinary, callback) {
      if (!supportsBinary) {
        return exports.encodeBase64Packet(packet, callback);
      }

      if (dontSendBlobs) {
        return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
      }

      var length = new Uint8Array(1);
      length[0] = packets[packet.type];
      var blob = new Blob([length.buffer, packet.data]);
      return callback(blob);
    }
    /**
     * Encodes a packet with binary data in a base64 string
     *
     * @param {Object} packet, has `type` and `data`
     * @return {String} base64 encoded message
     */


    exports.encodeBase64Packet = function (packet, callback) {
      var message = 'b' + exports.packets[packet.type];

      if (typeof Blob !== 'undefined' && packet.data instanceof Blob) {
        var fr = new FileReader();

        fr.onload = function () {
          var b64 = fr.result.split(',')[1];
          callback(message + b64);
        };

        return fr.readAsDataURL(packet.data);
      }

      var b64data;

      try {
        b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
      } catch (e) {
        // iPhone Safari doesn't let you apply with typed arrays
        var typed = new Uint8Array(packet.data);
        var basic = new Array(typed.length);

        for (var i = 0; i < typed.length; i++) {
          basic[i] = typed[i];
        }

        b64data = String.fromCharCode.apply(null, basic);
      }

      message += btoa(b64data);
      return callback(message);
    };
    /**
     * Decodes a packet. Changes format to Blob if requested.
     *
     * @return {Object} with `type` and `data` (if any)
     * @api private
     */


    exports.decodePacket = function (data, binaryType, utf8decode) {
      if (data === undefined) {
        return err;
      } // String data


      if (typeof data === 'string') {
        if (data.charAt(0) === 'b') {
          return exports.decodeBase64Packet(data.substr(1), binaryType);
        }

        if (utf8decode) {
          data = tryDecode(data);

          if (data === false) {
            return err;
          }
        }

        var type = data.charAt(0);

        if (Number(type) != type || !packetslist[type]) {
          return err;
        }

        if (data.length > 1) {
          return {
            type: packetslist[type],
            data: data.substring(1)
          };
        } else {
          return {
            type: packetslist[type]
          };
        }
      }

      var asArray = new Uint8Array(data);
      var type = asArray[0];
      var rest = sliceBuffer(data, 1);

      if (Blob && binaryType === 'blob') {
        rest = new Blob([rest]);
      }

      return {
        type: packetslist[type],
        data: rest
      };
    };

    function tryDecode(data) {
      try {
        data = utf8.decode(data, {
          strict: false
        });
      } catch (e) {
        return false;
      }

      return data;
    }
    /**
     * Decodes a packet encoded in a base64 string
     *
     * @param {String} base64 encoded message
     * @return {Object} with `type` and `data` (if any)
     */


    exports.decodeBase64Packet = function (msg, binaryType) {
      var type = packetslist[msg.charAt(0)];

      if (!base64encoder) {
        return {
          type: type,
          data: {
            base64: true,
            data: msg.substr(1)
          }
        };
      }

      var data = base64encoder.decode(msg.substr(1));

      if (binaryType === 'blob' && Blob) {
        data = new Blob([data]);
      }

      return {
        type: type,
        data: data
      };
    };
    /**
     * Encodes multiple messages (payload).
     *
     *     <length>:data
     *
     * Example:
     *
     *     11:hello world2:hi
     *
     * If any contents are binary, they will be encoded as base64 strings. Base64
     * encoded strings are marked with a b before the length specifier
     *
     * @param {Array} packets
     * @api private
     */


    exports.encodePayload = function (packets, supportsBinary, callback) {
      if (typeof supportsBinary === 'function') {
        callback = supportsBinary;
        supportsBinary = null;
      }

      var isBinary = hasBinary(packets);

      if (supportsBinary && isBinary) {
        if (Blob && !dontSendBlobs) {
          return exports.encodePayloadAsBlob(packets, callback);
        }

        return exports.encodePayloadAsArrayBuffer(packets, callback);
      }

      if (!packets.length) {
        return callback('0:');
      }

      function setLengthHeader(message) {
        return message.length + ':' + message;
      }

      function encodeOne(packet, doneCallback) {
        exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function (message) {
          doneCallback(null, setLengthHeader(message));
        });
      }

      map(packets, encodeOne, function (err, results) {
        return callback(results.join(''));
      });
    };
    /**
     * Async array map using after
     */


    function map(ary, each, done) {
      var result = new Array(ary.length);
      var next = after(ary.length, done);

      var eachWithIndex = function eachWithIndex(i, el, cb) {
        each(el, function (error, msg) {
          result[i] = msg;
          cb(error, result);
        });
      };

      for (var i = 0; i < ary.length; i++) {
        eachWithIndex(i, ary[i], next);
      }
    }
    /*
     * Decodes data when a payload is maybe expected. Possible binary contents are
     * decoded from their base64 representation
     *
     * @param {String} data, callback method
     * @api public
     */


    exports.decodePayload = function (data, binaryType, callback) {
      if (typeof data !== 'string') {
        return exports.decodePayloadAsBinary(data, binaryType, callback);
      }

      if (typeof binaryType === 'function') {
        callback = binaryType;
        binaryType = null;
      }

      var packet;

      if (data === '') {
        // parser error - ignoring payload
        return callback(err, 0, 1);
      }

      var length = '',
          n,
          msg;

      for (var i = 0, l = data.length; i < l; i++) {
        var chr = data.charAt(i);

        if (chr !== ':') {
          length += chr;
          continue;
        }

        if (length === '' || length != (n = Number(length))) {
          // parser error - ignoring payload
          return callback(err, 0, 1);
        }

        msg = data.substr(i + 1, n);

        if (length != msg.length) {
          // parser error - ignoring payload
          return callback(err, 0, 1);
        }

        if (msg.length) {
          packet = exports.decodePacket(msg, binaryType, false);

          if (err.type === packet.type && err.data === packet.data) {
            // parser error in individual packet - ignoring payload
            return callback(err, 0, 1);
          }

          var ret = callback(packet, i + n, l);
          if (false === ret) return;
        } // advance cursor


        i += n;
        length = '';
      }

      if (length !== '') {
        // parser error - ignoring payload
        return callback(err, 0, 1);
      }
    };
    /**
     * Encodes multiple messages (payload) as binary.
     *
     * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
     * 255><data>
     *
     * Example:
     * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
     *
     * @param {Array} packets
     * @return {ArrayBuffer} encoded payload
     * @api private
     */


    exports.encodePayloadAsArrayBuffer = function (packets, callback) {
      if (!packets.length) {
        return callback(new ArrayBuffer(0));
      }

      function encodeOne(packet, doneCallback) {
        exports.encodePacket(packet, true, true, function (data) {
          return doneCallback(null, data);
        });
      }

      map(packets, encodeOne, function (err, encodedPackets) {
        var totalLength = encodedPackets.reduce(function (acc, p) {
          var len;

          if (typeof p === 'string') {
            len = p.length;
          } else {
            len = p.byteLength;
          }

          return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
        }, 0);
        var resultArray = new Uint8Array(totalLength);
        var bufferIndex = 0;
        encodedPackets.forEach(function (p) {
          var isString = typeof p === 'string';
          var ab = p;

          if (isString) {
            var view = new Uint8Array(p.length);

            for (var i = 0; i < p.length; i++) {
              view[i] = p.charCodeAt(i);
            }

            ab = view.buffer;
          }

          if (isString) {
            // not true binary
            resultArray[bufferIndex++] = 0;
          } else {
            // true binary
            resultArray[bufferIndex++] = 1;
          }

          var lenStr = ab.byteLength.toString();

          for (var i = 0; i < lenStr.length; i++) {
            resultArray[bufferIndex++] = parseInt(lenStr[i]);
          }

          resultArray[bufferIndex++] = 255;
          var view = new Uint8Array(ab);

          for (var i = 0; i < view.length; i++) {
            resultArray[bufferIndex++] = view[i];
          }
        });
        return callback(resultArray.buffer);
      });
    };
    /**
     * Encode as Blob
     */


    exports.encodePayloadAsBlob = function (packets, callback) {
      function encodeOne(packet, doneCallback) {
        exports.encodePacket(packet, true, true, function (encoded) {
          var binaryIdentifier = new Uint8Array(1);
          binaryIdentifier[0] = 1;

          if (typeof encoded === 'string') {
            var view = new Uint8Array(encoded.length);

            for (var i = 0; i < encoded.length; i++) {
              view[i] = encoded.charCodeAt(i);
            }

            encoded = view.buffer;
            binaryIdentifier[0] = 0;
          }

          var len = encoded instanceof ArrayBuffer ? encoded.byteLength : encoded.size;
          var lenStr = len.toString();
          var lengthAry = new Uint8Array(lenStr.length + 1);

          for (var i = 0; i < lenStr.length; i++) {
            lengthAry[i] = parseInt(lenStr[i]);
          }

          lengthAry[lenStr.length] = 255;

          if (Blob) {
            var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
            doneCallback(null, blob);
          }
        });
      }

      map(packets, encodeOne, function (err, results) {
        return callback(new Blob(results));
      });
    };
    /*
     * Decodes data when a payload is maybe expected. Strings are decoded by
     * interpreting each byte as a key code for entries marked to start with 0. See
     * description of encodePayloadAsBinary
     *
     * @param {ArrayBuffer} data, callback method
     * @api public
     */


    exports.decodePayloadAsBinary = function (data, binaryType, callback) {
      if (typeof binaryType === 'function') {
        callback = binaryType;
        binaryType = null;
      }

      var bufferTail = data;
      var buffers = [];

      while (bufferTail.byteLength > 0) {
        var tailArray = new Uint8Array(bufferTail);
        var isString = tailArray[0] === 0;
        var msgLength = '';

        for (var i = 1;; i++) {
          if (tailArray[i] === 255) break; // 310 = char length of Number.MAX_VALUE

          if (msgLength.length > 310) {
            return callback(err, 0, 1);
          }

          msgLength += tailArray[i];
        }

        bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
        msgLength = parseInt(msgLength);
        var msg = sliceBuffer(bufferTail, 0, msgLength);

        if (isString) {
          try {
            msg = String.fromCharCode.apply(null, new Uint8Array(msg));
          } catch (e) {
            // iPhone Safari doesn't let you apply to typed arrays
            var typed = new Uint8Array(msg);
            msg = '';

            for (var i = 0; i < typed.length; i++) {
              msg += String.fromCharCode(typed[i]);
            }
          }
        }

        buffers.push(msg);
        bufferTail = sliceBuffer(bufferTail, msgLength);
      }

      var total = buffers.length;
      buffers.forEach(function (buffer, i) {
        callback(exports.decodePacket(buffer, binaryType, true), i, total);
      });
    };
  }, {
    "./keys": 171,
    "./utf8": 172,
    "after": 27,
    "arraybuffer.slice": 29,
    "base64-arraybuffer": 173,
    "blob": 53,
    "has-binary2": 178
  }],
  171: [function (require, module, exports) {
    /**
     * Gets the keys for an object.
     *
     * @return {Array} keys
     * @api private
     */
    module.exports = Object.keys || function keys(obj) {
      var arr = [];
      var has = Object.prototype.hasOwnProperty;

      for (var i in obj) {
        if (has.call(obj, i)) {
          arr.push(i);
        }
      }

      return arr;
    };
  }, {}],
  172: [function (require, module, exports) {
    /*! https://mths.be/utf8js v2.1.2 by @mathias */
    var stringFromCharCode = String.fromCharCode; // Taken from https://mths.be/punycode

    function ucs2decode(string) {
      var output = [];
      var counter = 0;
      var length = string.length;
      var value;
      var extra;

      while (counter < length) {
        value = string.charCodeAt(counter++);

        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
          // high surrogate, and there is a next character
          extra = string.charCodeAt(counter++);

          if ((extra & 0xFC00) == 0xDC00) {
            // low surrogate
            output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
          } else {
            // unmatched surrogate; only append this code unit, in case the next
            // code unit is the high surrogate of a surrogate pair
            output.push(value);
            counter--;
          }
        } else {
          output.push(value);
        }
      }

      return output;
    } // Taken from https://mths.be/punycode


    function ucs2encode(array) {
      var length = array.length;
      var index = -1;
      var value;
      var output = '';

      while (++index < length) {
        value = array[index];

        if (value > 0xFFFF) {
          value -= 0x10000;
          output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
          value = 0xDC00 | value & 0x3FF;
        }

        output += stringFromCharCode(value);
      }

      return output;
    }

    function checkScalarValue(codePoint, strict) {
      if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
        if (strict) {
          throw Error('Lone surrogate U+' + codePoint.toString(16).toUpperCase() + ' is not a scalar value');
        }

        return false;
      }

      return true;
    }
    /*--------------------------------------------------------------------------*/


    function createByte(codePoint, shift) {
      return stringFromCharCode(codePoint >> shift & 0x3F | 0x80);
    }

    function encodeCodePoint(codePoint, strict) {
      if ((codePoint & 0xFFFFFF80) == 0) {
        // 1-byte sequence
        return stringFromCharCode(codePoint);
      }

      var symbol = '';

      if ((codePoint & 0xFFFFF800) == 0) {
        // 2-byte sequence
        symbol = stringFromCharCode(codePoint >> 6 & 0x1F | 0xC0);
      } else if ((codePoint & 0xFFFF0000) == 0) {
        // 3-byte sequence
        if (!checkScalarValue(codePoint, strict)) {
          codePoint = 0xFFFD;
        }

        symbol = stringFromCharCode(codePoint >> 12 & 0x0F | 0xE0);
        symbol += createByte(codePoint, 6);
      } else if ((codePoint & 0xFFE00000) == 0) {
        // 4-byte sequence
        symbol = stringFromCharCode(codePoint >> 18 & 0x07 | 0xF0);
        symbol += createByte(codePoint, 12);
        symbol += createByte(codePoint, 6);
      }

      symbol += stringFromCharCode(codePoint & 0x3F | 0x80);
      return symbol;
    }

    function utf8encode(string, opts) {
      opts = opts || {};
      var strict = false !== opts.strict;
      var codePoints = ucs2decode(string);
      var length = codePoints.length;
      var index = -1;
      var codePoint;
      var byteString = '';

      while (++index < length) {
        codePoint = codePoints[index];
        byteString += encodeCodePoint(codePoint, strict);
      }

      return byteString;
    }
    /*--------------------------------------------------------------------------*/


    function readContinuationByte() {
      if (byteIndex >= byteCount) {
        throw Error('Invalid byte index');
      }

      var continuationByte = byteArray[byteIndex] & 0xFF;
      byteIndex++;

      if ((continuationByte & 0xC0) == 0x80) {
        return continuationByte & 0x3F;
      } // If we end up here, it’s not a continuation byte


      throw Error('Invalid continuation byte');
    }

    function decodeSymbol(strict) {
      var byte1;
      var byte2;
      var byte3;
      var byte4;
      var codePoint;

      if (byteIndex > byteCount) {
        throw Error('Invalid byte index');
      }

      if (byteIndex == byteCount) {
        return false;
      } // Read first byte


      byte1 = byteArray[byteIndex] & 0xFF;
      byteIndex++; // 1-byte sequence (no continuation bytes)

      if ((byte1 & 0x80) == 0) {
        return byte1;
      } // 2-byte sequence


      if ((byte1 & 0xE0) == 0xC0) {
        byte2 = readContinuationByte();
        codePoint = (byte1 & 0x1F) << 6 | byte2;

        if (codePoint >= 0x80) {
          return codePoint;
        } else {
          throw Error('Invalid continuation byte');
        }
      } // 3-byte sequence (may include unpaired surrogates)


      if ((byte1 & 0xF0) == 0xE0) {
        byte2 = readContinuationByte();
        byte3 = readContinuationByte();
        codePoint = (byte1 & 0x0F) << 12 | byte2 << 6 | byte3;

        if (codePoint >= 0x0800) {
          return checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;
        } else {
          throw Error('Invalid continuation byte');
        }
      } // 4-byte sequence


      if ((byte1 & 0xF8) == 0xF0) {
        byte2 = readContinuationByte();
        byte3 = readContinuationByte();
        byte4 = readContinuationByte();
        codePoint = (byte1 & 0x07) << 0x12 | byte2 << 0x0C | byte3 << 0x06 | byte4;

        if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
          return codePoint;
        }
      }

      throw Error('Invalid UTF-8 detected');
    }

    var byteArray;
    var byteCount;
    var byteIndex;

    function utf8decode(byteString, opts) {
      opts = opts || {};
      var strict = false !== opts.strict;
      byteArray = ucs2decode(byteString);
      byteCount = byteArray.length;
      byteIndex = 0;
      var codePoints = [];
      var tmp;

      while ((tmp = decodeSymbol(strict)) !== false) {
        codePoints.push(tmp);
      }

      return ucs2encode(codePoints);
    }

    module.exports = {
      version: '2.1.2',
      encode: utf8encode,
      decode: utf8decode
    };
  }, {}],
  173: [function (require, module, exports) {
    /*
     * base64-arraybuffer
     * https://github.com/niklasvh/base64-arraybuffer
     *
     * Copyright (c) 2012 Niklas von Hertzen
     * Licensed under the MIT license.
     */
    (function (chars) {
      "use strict";

      exports.encode = function (arraybuffer) {
        var bytes = new Uint8Array(arraybuffer),
            i,
            len = bytes.length,
            base64 = "";

        for (i = 0; i < len; i += 3) {
          base64 += chars[bytes[i] >> 2];
          base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
          base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
          base64 += chars[bytes[i + 2] & 63];
        }

        if (len % 3 === 2) {
          base64 = base64.substring(0, base64.length - 1) + "=";
        } else if (len % 3 === 1) {
          base64 = base64.substring(0, base64.length - 2) + "==";
        }

        return base64;
      };

      exports.decode = function (base64) {
        var bufferLength = base64.length * 0.75,
            len = base64.length,
            i,
            p = 0,
            encoded1,
            encoded2,
            encoded3,
            encoded4;

        if (base64[base64.length - 1] === "=") {
          bufferLength--;

          if (base64[base64.length - 2] === "=") {
            bufferLength--;
          }
        }

        var arraybuffer = new ArrayBuffer(bufferLength),
            bytes = new Uint8Array(arraybuffer);

        for (i = 0; i < len; i += 4) {
          encoded1 = chars.indexOf(base64[i]);
          encoded2 = chars.indexOf(base64[i + 1]);
          encoded3 = chars.indexOf(base64[i + 2]);
          encoded4 = chars.indexOf(base64[i + 3]);
          bytes[p++] = encoded1 << 2 | encoded2 >> 4;
          bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
          bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
        }

        return arraybuffer;
      };
    })("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
  }, {}],
  174: [function (require, module, exports) {
    'use strict';

    var has = Object.prototype.hasOwnProperty,
        prefix = '~';
    /**
     * Constructor to create a storage for our `EE` objects.
     * An `Events` instance is a plain object whose properties are event names.
     *
     * @constructor
     * @private
     */

    function Events() {} //
    // We try to not inherit from `Object.prototype`. In some engines creating an
    // instance in this way is faster than calling `Object.create(null)` directly.
    // If `Object.create(null)` is not supported we prefix the event names with a
    // character to make sure that the built-in object properties are not
    // overridden or used as an attack vector.
    //


    if (Object.create) {
      Events.prototype = Object.create(null); //
      // This hack is needed because the `__proto__` property is still inherited in
      // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
      //

      if (!new Events().__proto__) prefix = false;
    }
    /**
     * Representation of a single event listener.
     *
     * @param {Function} fn The listener function.
     * @param {*} context The context to invoke the listener with.
     * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
     * @constructor
     * @private
     */


    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    /**
     * Add a listener for a given event.
     *
     * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} context The context to invoke the listener with.
     * @param {Boolean} once Specify if the listener is a one-time listener.
     * @returns {EventEmitter}
     * @private
     */


    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== 'function') {
        throw new TypeError('The listener must be a function');
      }

      var listener = new EE(fn, context || emitter, once),
          evt = prefix ? prefix + event : event;
      if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);else emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    /**
     * Clear event by name.
     *
     * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
     * @param {(String|Symbol)} evt The Event name.
     * @private
     */


    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0) emitter._events = new Events();else delete emitter._events[evt];
    }
    /**
     * Minimal `EventEmitter` interface that is molded against the Node.js
     * `EventEmitter` interface.
     *
     * @constructor
     * @public
     */


    function EventEmitter() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    /**
     * Return an array listing the events for which the emitter has registered
     * listeners.
     *
     * @returns {Array}
     * @public
     */


    EventEmitter.prototype.eventNames = function eventNames() {
      var names = [],
          events,
          name;
      if (this._eventsCount === 0) return names;

      for (name in events = this._events) {
        if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
      }

      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }

      return names;
    };
    /**
     * Return the listeners registered for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Array} The registered listeners.
     * @public
     */


    EventEmitter.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event,
          handlers = this._events[evt];
      if (!handlers) return [];
      if (handlers.fn) return [handlers.fn];

      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }

      return ee;
    };
    /**
     * Return the number of listeners listening to a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Number} The number of listeners.
     * @public
     */


    EventEmitter.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event,
          listeners = this._events[evt];
      if (!listeners) return 0;
      if (listeners.fn) return 1;
      return listeners.length;
    };
    /**
     * Calls each of the listeners registered for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Boolean} `true` if the event had listeners, else `false`.
     * @public
     */


    EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt]) return false;
      var listeners = this._events[evt],
          len = arguments.length,
          args,
          i;

      if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;

          case 2:
            return listeners.fn.call(listeners.context, a1), true;

          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;

          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;

          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;

          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }

        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }

        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length,
            j;

        for (i = 0; i < length; i++) {
          if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;

            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;

            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;

            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;

            default:
              if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
                args[j - 1] = arguments[j];
              }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }

      return true;
    };
    /**
     * Add a listener for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} `this`.
     * @public
     */


    EventEmitter.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };
    /**
     * Add a one-time listener for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} `this`.
     * @public
     */


    EventEmitter.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };
    /**
     * Remove the listeners of a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn Only remove the listeners that match this function.
     * @param {*} context Only remove the listeners that have this context.
     * @param {Boolean} once Only remove one-time listeners.
     * @returns {EventEmitter} `this`.
     * @public
     */


    EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt]) return this;

      if (!fn) {
        clearEvent(this, evt);
        return this;
      }

      var listeners = this._events[evt];

      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        } //
        // Reset the array, or remove it completely if we have no more listeners.
        //


        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;else clearEvent(this, evt);
      }

      return this;
    };
    /**
     * Remove all listeners, or those of the specified event.
     *
     * @param {(String|Symbol)} [event] The event name.
     * @returns {EventEmitter} `this`.
     * @public
     */


    EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;

      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt]) clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }

      return this;
    }; //
    // Alias methods names because people roll like that.
    //


    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.addListener = EventEmitter.prototype.on; //
    // Expose the prefix.
    //

    EventEmitter.prefixed = prefix; //
    // Allow `EventEmitter` to be imported as module namespace.
    //

    EventEmitter.EventEmitter = EventEmitter; //
    // Expose the module.
    //

    if ('undefined' !== typeof module) {
      module.exports = EventEmitter;
    }
  }, {}],
  175: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    var objectCreate = Object.create || objectCreatePolyfill;
    var objectKeys = Object.keys || objectKeysPolyfill;
    var bind = Function.prototype.bind || functionBindPolyfill;

    function EventEmitter() {
      if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
        this._events = objectCreate(null);
        this._eventsCount = 0;
      }

      this._maxListeners = this._maxListeners || undefined;
    }

    module.exports = EventEmitter; // Backwards-compat with node 0.10.x

    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.

    var defaultMaxListeners = 10;
    var hasDefineProperty;

    try {
      var o = {};
      if (Object.defineProperty) Object.defineProperty(o, 'x', {
        value: 0
      });
      hasDefineProperty = o.x === 0;
    } catch (err) {
      hasDefineProperty = false;
    }

    if (hasDefineProperty) {
      Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
        enumerable: true,
        get: function get() {
          return defaultMaxListeners;
        },
        set: function set(arg) {
          // check whether the input is a positive number (whose value is zero or
          // greater and not a NaN).
          if (typeof arg !== 'number' || arg < 0 || arg !== arg) throw new TypeError('"defaultMaxListeners" must be a positive number');
          defaultMaxListeners = arg;
        }
      });
    } else {
      EventEmitter.defaultMaxListeners = defaultMaxListeners;
    } // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.


    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== 'number' || n < 0 || isNaN(n)) throw new TypeError('"n" argument must be a positive number');
      this._maxListeners = n;
      return this;
    };

    function $getMaxListeners(that) {
      if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }

    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return $getMaxListeners(this);
    }; // These standalone emit* functions are used to optimize calling of event
    // handlers for fast cases because emit() itself often has a variable number of
    // arguments and can be deoptimized because of that. These functions always have
    // the same number of arguments and thus do not get deoptimized, so the code
    // inside them can execute faster.


    function emitNone(handler, isFn, self) {
      if (isFn) handler.call(self);else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);

        for (var i = 0; i < len; ++i) {
          listeners[i].call(self);
        }
      }
    }

    function emitOne(handler, isFn, self, arg1) {
      if (isFn) handler.call(self, arg1);else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);

        for (var i = 0; i < len; ++i) {
          listeners[i].call(self, arg1);
        }
      }
    }

    function emitTwo(handler, isFn, self, arg1, arg2) {
      if (isFn) handler.call(self, arg1, arg2);else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);

        for (var i = 0; i < len; ++i) {
          listeners[i].call(self, arg1, arg2);
        }
      }
    }

    function emitThree(handler, isFn, self, arg1, arg2, arg3) {
      if (isFn) handler.call(self, arg1, arg2, arg3);else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);

        for (var i = 0; i < len; ++i) {
          listeners[i].call(self, arg1, arg2, arg3);
        }
      }
    }

    function emitMany(handler, isFn, self, args) {
      if (isFn) handler.apply(self, args);else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);

        for (var i = 0; i < len; ++i) {
          listeners[i].apply(self, args);
        }
      }
    }

    EventEmitter.prototype.emit = function emit(type) {
      var er, handler, len, args, i, events;
      var doError = type === 'error';
      events = this._events;
      if (events) doError = doError && events.error == null;else if (!doError) return false; // If there is no 'error' event listener then throw.

      if (doError) {
        if (arguments.length > 1) er = arguments[1];

        if (er instanceof Error) {
          throw er; // Unhandled 'error' event
        } else {
          // At least give some kind of context to the user
          var err = new Error('Unhandled "error" event. (' + er + ')');
          err.context = er;
          throw err;
        }

        return false;
      }

      handler = events[type];
      if (!handler) return false;
      var isFn = typeof handler === 'function';
      len = arguments.length;

      switch (len) {
        // fast cases
        case 1:
          emitNone(handler, isFn, this);
          break;

        case 2:
          emitOne(handler, isFn, this, arguments[1]);
          break;

        case 3:
          emitTwo(handler, isFn, this, arguments[1], arguments[2]);
          break;

        case 4:
          emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
          break;
        // slower

        default:
          args = new Array(len - 1);

          for (i = 1; i < len; i++) {
            args[i - 1] = arguments[i];
          }

          emitMany(handler, isFn, this, args);
      }

      return true;
    };

    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;
      if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
      events = target._events;

      if (!events) {
        events = target._events = objectCreate(null);
        target._eventsCount = 0;
      } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener) {
          target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
          // this._events to be assigned to a new object

          events = target._events;
        }

        existing = events[type];
      }

      if (!existing) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === 'function') {
          // Adding the second element, need to change to array.
          existing = events[type] = prepend ? [listener, existing] : [existing, listener];
        } else {
          // If we've already got an array, just append.
          if (prepend) {
            existing.unshift(listener);
          } else {
            existing.push(listener);
          }
        } // Check for listener leak


        if (!existing.warned) {
          m = $getMaxListeners(target);

          if (m && m > 0 && existing.length > m) {
            existing.warned = true;
            var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' "' + String(type) + '" listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit.');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;

            if ((typeof console === "undefined" ? "undefined" : _typeof2(console)) === 'object' && console.warn) {
              console.warn('%s: %s', w.name, w.message);
            }
          }
        }
      }

      return target;
    }

    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };

    EventEmitter.prototype.on = EventEmitter.prototype.addListener;

    EventEmitter.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;

        switch (arguments.length) {
          case 0:
            return this.listener.call(this.target);

          case 1:
            return this.listener.call(this.target, arguments[0]);

          case 2:
            return this.listener.call(this.target, arguments[0], arguments[1]);

          case 3:
            return this.listener.call(this.target, arguments[0], arguments[1], arguments[2]);

          default:
            var args = new Array(arguments.length);

            for (var i = 0; i < args.length; ++i) {
              args[i] = arguments[i];
            }

            this.listener.apply(this.target, args);
        }
      }
    }

    function _onceWrap(target, type, listener) {
      var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
      };
      var wrapped = bind.call(onceWrapper, state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }

    EventEmitter.prototype.once = function once(type, listener) {
      if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };

    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    }; // Emits a 'removeListener' event if and only if the listener was removed.


    EventEmitter.prototype.removeListener = function removeListener(type, listener) {
      var list, events, position, i, originalListener;
      if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
      events = this._events;
      if (!events) return this;
      list = events[type];
      if (!list) return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = objectCreate(null);else {
          delete events[type];
          if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0) return this;
        if (position === 0) list.shift();else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener) this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
      var listeners, events, i;
      events = this._events;
      if (!events) return this; // not listening for removeListener, no need to emit

      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0) this._events = objectCreate(null);else delete events[type];
        }

        return this;
      } // emit removeListener for all listeners on all events


      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;

        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }

        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

    function _listeners(target, type, unwrap) {
      var events = target._events;
      if (!events) return [];
      var evlistener = events[type];
      if (!evlistener) return [];
      if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }

    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };

    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };

    EventEmitter.listenerCount = function (emitter, type) {
      if (typeof emitter.listenerCount === 'function') {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };

    EventEmitter.prototype.listenerCount = listenerCount;

    function listenerCount(type) {
      var events = this._events;

      if (events) {
        var evlistener = events[type];

        if (typeof evlistener === 'function') {
          return 1;
        } else if (evlistener) {
          return evlistener.length;
        }
      }

      return 0;
    }

    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
    }; // About 1.5x faster than the two-arg version of Array#splice().


    function spliceOne(list, index) {
      for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
        list[i] = list[k];
      }

      list.pop();
    }

    function arrayClone(arr, n) {
      var copy = new Array(n);

      for (var i = 0; i < n; ++i) {
        copy[i] = arr[i];
      }

      return copy;
    }

    function unwrapListeners(arr) {
      var ret = new Array(arr.length);

      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }

      return ret;
    }

    function objectCreatePolyfill(proto) {
      var F = function F() {};

      F.prototype = proto;
      return new F();
    }

    function objectKeysPolyfill(obj) {
      var keys = [];

      for (var k in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, k)) {
          keys.push(k);
        }
      }

      return k;
    }

    function functionBindPolyfill(context) {
      var fn = this;
      return function () {
        return fn.apply(context, arguments);
      };
    }
  }, {}],
  176: [function (require, module, exports) {
    var Buffer = require('safe-buffer').Buffer;

    var MD5 = require('md5.js');
    /* eslint-disable camelcase */


    function EVP_BytesToKey(password, salt, keyBits, ivLen) {
      if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary');

      if (salt) {
        if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary');
        if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length');
      }

      var keyLen = keyBits / 8;
      var key = Buffer.alloc(keyLen);
      var iv = Buffer.alloc(ivLen || 0);
      var tmp = Buffer.alloc(0);

      while (keyLen > 0 || ivLen > 0) {
        var hash = new MD5();
        hash.update(tmp);
        hash.update(password);
        if (salt) hash.update(salt);
        tmp = hash.digest();
        var used = 0;

        if (keyLen > 0) {
          var keyStart = key.length - keyLen;
          used = Math.min(keyLen, tmp.length);
          tmp.copy(key, keyStart, 0, used);
          keyLen -= used;
        }

        if (used < tmp.length && ivLen > 0) {
          var ivStart = iv.length - ivLen;
          var length = Math.min(ivLen, tmp.length - used);
          tmp.copy(iv, ivStart, used, used + length);
          ivLen -= length;
        }
      }

      tmp.fill(0);
      return {
        key: key,
        iv: iv
      };
    }

    module.exports = EVP_BytesToKey;
  }, {
    "md5.js": 243,
    "safe-buffer": 314
  }],
  177: [function (require, module, exports) {
    // originally pulled out of simple-peer
    module.exports = function getBrowserRTC() {
      if (typeof window === 'undefined') return null;
      var wrtc = {
        RTCPeerConnection: window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection,
        RTCSessionDescription: window.RTCSessionDescription || window.mozRTCSessionDescription || window.webkitRTCSessionDescription,
        RTCIceCandidate: window.RTCIceCandidate || window.mozRTCIceCandidate || window.webkitRTCIceCandidate
      };
      if (!wrtc.RTCPeerConnection) return null;
      return wrtc;
    };
  }, {}],
  178: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        /* global Blob File */

        /*
         * Module requirements.
         */
        var isArray = require('isarray');

        var toString = Object.prototype.toString;
        var withNativeBlob = typeof Blob === 'function' || typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]';
        var withNativeFile = typeof File === 'function' || typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]';
        /**
         * Module exports.
         */

        module.exports = hasBinary;
        /**
         * Checks for binary data.
         *
         * Supports Buffer, ArrayBuffer, Blob and File.
         *
         * @param {Object} anything
         * @api public
         */

        function hasBinary(obj) {
          if (!obj || _typeof2(obj) !== 'object') {
            return false;
          }

          if (isArray(obj)) {
            for (var i = 0, l = obj.length; i < l; i++) {
              if (hasBinary(obj[i])) {
                return true;
              }
            }

            return false;
          }

          if (typeof Buffer === 'function' && Buffer.isBuffer && Buffer.isBuffer(obj) || typeof ArrayBuffer === 'function' && obj instanceof ArrayBuffer || withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File) {
            return true;
          } // see: https://github.com/Automattic/has-binary/pull/4


          if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
            return hasBinary(obj.toJSON(), true);
          }

          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
              return true;
            }
          }

          return false;
        }
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "buffer": 102,
    "isarray": 219
  }],
  179: [function (require, module, exports) {
    /**
     * Module exports.
     *
     * Logic borrowed from Modernizr:
     *
     *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
     */
    try {
      module.exports = typeof XMLHttpRequest !== 'undefined' && 'withCredentials' in new XMLHttpRequest();
    } catch (err) {
      // if XMLHttp support is disabled in IE then it will throw
      // when trying to create
      module.exports = false;
    }
  }, {}],
  180: [function (require, module, exports) {
    'use strict';

    var Buffer = require('safe-buffer').Buffer;

    var Transform = require('readable-stream').Transform;

    var inherits = require('inherits');

    function throwIfNotStringOrBuffer(val, prefix) {
      if (!Buffer.isBuffer(val) && typeof val !== 'string') {
        throw new TypeError(prefix + ' must be a string or a buffer');
      }
    }

    function HashBase(blockSize) {
      Transform.call(this);
      this._block = Buffer.allocUnsafe(blockSize);
      this._blockSize = blockSize;
      this._blockOffset = 0;
      this._length = [0, 0, 0, 0];
      this._finalized = false;
    }

    inherits(HashBase, Transform);

    HashBase.prototype._transform = function (chunk, encoding, callback) {
      var error = null;

      try {
        this.update(chunk, encoding);
      } catch (err) {
        error = err;
      }

      callback(error);
    };

    HashBase.prototype._flush = function (callback) {
      var error = null;

      try {
        this.push(this.digest());
      } catch (err) {
        error = err;
      }

      callback(error);
    };

    HashBase.prototype.update = function (data, encoding) {
      throwIfNotStringOrBuffer(data, 'Data');
      if (this._finalized) throw new Error('Digest already called');
      if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding); // consume data

      var block = this._block;
      var offset = 0;

      while (this._blockOffset + data.length - offset >= this._blockSize) {
        for (var i = this._blockOffset; i < this._blockSize;) {
          block[i++] = data[offset++];
        }

        this._update();

        this._blockOffset = 0;
      }

      while (offset < data.length) {
        block[this._blockOffset++] = data[offset++];
      } // update length


      for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
        this._length[j] += carry;
        carry = this._length[j] / 0x0100000000 | 0;
        if (carry > 0) this._length[j] -= 0x0100000000 * carry;
      }

      return this;
    };

    HashBase.prototype._update = function () {
      throw new Error('_update is not implemented');
    };

    HashBase.prototype.digest = function (encoding) {
      if (this._finalized) throw new Error('Digest already called');
      this._finalized = true;

      var digest = this._digest();

      if (encoding !== undefined) digest = digest.toString(encoding); // reset state

      this._block.fill(0);

      this._blockOffset = 0;

      for (var i = 0; i < 4; ++i) {
        this._length[i] = 0;
      }

      return digest;
    };

    HashBase.prototype._digest = function () {
      throw new Error('_digest is not implemented');
    };

    module.exports = HashBase;
  }, {
    "inherits": 217,
    "readable-stream": 195,
    "safe-buffer": 314
  }],
  181: [function (require, module, exports) {
    arguments[4][7][0].apply(exports, arguments);
  }, {
    "dup": 7
  }],
  182: [function (require, module, exports) {
    arguments[4][8][0].apply(exports, arguments);
  }, {
    "./_stream_readable": 184,
    "./_stream_writable": 186,
    "_process": 276,
    "dup": 8,
    "inherits": 217
  }],
  183: [function (require, module, exports) {
    arguments[4][9][0].apply(exports, arguments);
  }, {
    "./_stream_transform": 185,
    "dup": 9,
    "inherits": 217
  }],
  184: [function (require, module, exports) {
    arguments[4][10][0].apply(exports, arguments);
  }, {
    "../errors": 181,
    "./_stream_duplex": 182,
    "./internal/streams/async_iterator": 187,
    "./internal/streams/buffer_list": 188,
    "./internal/streams/destroy": 189,
    "./internal/streams/from": 191,
    "./internal/streams/state": 193,
    "./internal/streams/stream": 194,
    "_process": 276,
    "buffer": 102,
    "dup": 10,
    "events": 175,
    "inherits": 217,
    "string_decoder/": 364,
    "util": 56
  }],
  185: [function (require, module, exports) {
    arguments[4][11][0].apply(exports, arguments);
  }, {
    "../errors": 181,
    "./_stream_duplex": 182,
    "dup": 11,
    "inherits": 217
  }],
  186: [function (require, module, exports) {
    arguments[4][12][0].apply(exports, arguments);
  }, {
    "../errors": 181,
    "./_stream_duplex": 182,
    "./internal/streams/destroy": 189,
    "./internal/streams/state": 193,
    "./internal/streams/stream": 194,
    "_process": 276,
    "buffer": 102,
    "dup": 12,
    "inherits": 217,
    "util-deprecate": 400
  }],
  187: [function (require, module, exports) {
    arguments[4][13][0].apply(exports, arguments);
  }, {
    "./end-of-stream": 190,
    "_process": 276,
    "dup": 13
  }],
  188: [function (require, module, exports) {
    arguments[4][14][0].apply(exports, arguments);
  }, {
    "buffer": 102,
    "dup": 14,
    "util": 56
  }],
  189: [function (require, module, exports) {
    arguments[4][15][0].apply(exports, arguments);
  }, {
    "_process": 276,
    "dup": 15
  }],
  190: [function (require, module, exports) {
    arguments[4][16][0].apply(exports, arguments);
  }, {
    "../../../errors": 181,
    "dup": 16
  }],
  191: [function (require, module, exports) {
    arguments[4][17][0].apply(exports, arguments);
  }, {
    "dup": 17
  }],
  192: [function (require, module, exports) {
    arguments[4][18][0].apply(exports, arguments);
  }, {
    "../../../errors": 181,
    "./end-of-stream": 190,
    "dup": 18
  }],
  193: [function (require, module, exports) {
    arguments[4][19][0].apply(exports, arguments);
  }, {
    "../../../errors": 181,
    "dup": 19
  }],
  194: [function (require, module, exports) {
    arguments[4][20][0].apply(exports, arguments);
  }, {
    "dup": 20,
    "events": 175
  }],
  195: [function (require, module, exports) {
    arguments[4][21][0].apply(exports, arguments);
  }, {
    "./lib/_stream_duplex.js": 182,
    "./lib/_stream_passthrough.js": 183,
    "./lib/_stream_readable.js": 184,
    "./lib/_stream_transform.js": 185,
    "./lib/_stream_writable.js": 186,
    "./lib/internal/streams/end-of-stream.js": 190,
    "./lib/internal/streams/pipeline.js": 192,
    "dup": 21
  }],
  196: [function (require, module, exports) {
    var hash = exports;
    hash.utils = require('./hash/utils');
    hash.common = require('./hash/common');
    hash.sha = require('./hash/sha');
    hash.ripemd = require('./hash/ripemd');
    hash.hmac = require('./hash/hmac'); // Proxy hash functions to the main object

    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
  }, {
    "./hash/common": 197,
    "./hash/hmac": 198,
    "./hash/ripemd": 199,
    "./hash/sha": 200,
    "./hash/utils": 207
  }],
  197: [function (require, module, exports) {
    'use strict';

    var utils = require('./utils');

    var assert = require('minimalistic-assert');

    function BlockHash() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = 'big';
      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }

    exports.BlockHash = BlockHash;

    BlockHash.prototype.update = function update(msg, enc) {
      // Convert message to array, pad it, and join into 32bit blocks
      msg = utils.toArray(msg, enc);
      if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length; // Enough data, try updating

      if (this.pending.length >= this._delta8) {
        msg = this.pending; // Process pending data in blocks

        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0) this.pending = null;
        msg = utils.join32(msg, 0, msg.length - r, this.endian);

        for (var i = 0; i < msg.length; i += this._delta32) {
          this._update(msg, i, i + this._delta32);
        }
      }

      return this;
    };

    BlockHash.prototype.digest = function digest(enc) {
      this.update(this._pad());
      assert(this.pending === null);
      return this._digest(enc);
    };

    BlockHash.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - (len + this.padLength) % bytes;
      var res = new Array(k + this.padLength);
      res[0] = 0x80;

      for (var i = 1; i < k; i++) {
        res[i] = 0;
      } // Append length


      len <<= 3;

      if (this.endian === 'big') {
        for (var t = 8; t < this.padLength; t++) {
          res[i++] = 0;
        }

        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len & 0xff;
      } else {
        res[i++] = len & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;

        for (t = 8; t < this.padLength; t++) {
          res[i++] = 0;
        }
      }

      return res;
    };
  }, {
    "./utils": 207,
    "minimalistic-assert": 245
  }],
  198: [function (require, module, exports) {
    'use strict';

    var utils = require('./utils');

    var assert = require('minimalistic-assert');

    function Hmac(hash, key, enc) {
      if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;

      this._init(utils.toArray(key, enc));
    }

    module.exports = Hmac;

    Hmac.prototype._init = function init(key) {
      // Shorten key, if needed
      if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
      assert(key.length <= this.blockSize); // Add padding to key

      for (var i = key.length; i < this.blockSize; i++) {
        key.push(0);
      }

      for (i = 0; i < key.length; i++) {
        key[i] ^= 0x36;
      }

      this.inner = new this.Hash().update(key); // 0x36 ^ 0x5c = 0x6a

      for (i = 0; i < key.length; i++) {
        key[i] ^= 0x6a;
      }

      this.outer = new this.Hash().update(key);
    };

    Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };

    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };
  }, {
    "./utils": 207,
    "minimalistic-assert": 245
  }],
  199: [function (require, module, exports) {
    'use strict';

    var utils = require('./utils');

    var common = require('./common');

    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_3 = utils.sum32_3;
    var sum32_4 = utils.sum32_4;
    var BlockHash = common.BlockHash;

    function RIPEMD160() {
      if (!(this instanceof RIPEMD160)) return new RIPEMD160();
      BlockHash.call(this);
      this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
      this.endian = 'little';
    }

    utils.inherits(RIPEMD160, BlockHash);
    exports.ripemd160 = RIPEMD160;
    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;

    RIPEMD160.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;

      for (var j = 0; j < 80; j++) {
        var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
      }

      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
    };

    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === 'hex') return utils.toHex32(this.h, 'little');else return utils.split32(this.h, 'little');
    };

    function f(j, x, y, z) {
      if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);
    }

    function K(j) {
      if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;
    }

    function Kh(j) {
      if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;
    }

    var r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
    var rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
    var s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
    var sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
  }, {
    "./common": 197,
    "./utils": 207
  }],
  200: [function (require, module, exports) {
    'use strict';

    exports.sha1 = require('./sha/1');
    exports.sha224 = require('./sha/224');
    exports.sha256 = require('./sha/256');
    exports.sha384 = require('./sha/384');
    exports.sha512 = require('./sha/512');
  }, {
    "./sha/1": 201,
    "./sha/224": 202,
    "./sha/256": 203,
    "./sha/384": 204,
    "./sha/512": 205
  }],
  201: [function (require, module, exports) {
    'use strict';

    var utils = require('../utils');

    var common = require('../common');

    var shaCommon = require('./common');

    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_5 = utils.sum32_5;
    var ft_1 = shaCommon.ft_1;
    var BlockHash = common.BlockHash;
    var sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];

    function SHA1() {
      if (!(this instanceof SHA1)) return new SHA1();
      BlockHash.call(this);
      this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
      this.W = new Array(80);
    }

    utils.inherits(SHA1, BlockHash);
    module.exports = SHA1;
    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;

    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++) {
        W[i] = msg[start + i];
      }

      for (; i < W.length; i++) {
        W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
      }

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];

      for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
      }

      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
    };

    SHA1.prototype._digest = function digest(enc) {
      if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
    };
  }, {
    "../common": 197,
    "../utils": 207,
    "./common": 206
  }],
  202: [function (require, module, exports) {
    'use strict';

    var utils = require('../utils');

    var SHA256 = require('./256');

    function SHA224() {
      if (!(this instanceof SHA224)) return new SHA224();
      SHA256.call(this);
      this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];
    }

    utils.inherits(SHA224, SHA256);
    module.exports = SHA224;
    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;

    SHA224.prototype._digest = function digest(enc) {
      // Just truncate output
      if (enc === 'hex') return utils.toHex32(this.h.slice(0, 7), 'big');else return utils.split32(this.h.slice(0, 7), 'big');
    };
  }, {
    "../utils": 207,
    "./256": 203
  }],
  203: [function (require, module, exports) {
    'use strict';

    var utils = require('../utils');

    var common = require('../common');

    var shaCommon = require('./common');

    var assert = require('minimalistic-assert');

    var sum32 = utils.sum32;
    var sum32_4 = utils.sum32_4;
    var sum32_5 = utils.sum32_5;
    var ch32 = shaCommon.ch32;
    var maj32 = shaCommon.maj32;
    var s0_256 = shaCommon.s0_256;
    var s1_256 = shaCommon.s1_256;
    var g0_256 = shaCommon.g0_256;
    var g1_256 = shaCommon.g1_256;
    var BlockHash = common.BlockHash;
    var sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

    function SHA256() {
      if (!(this instanceof SHA256)) return new SHA256();
      BlockHash.call(this);
      this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];
      this.k = sha256_K;
      this.W = new Array(64);
    }

    utils.inherits(SHA256, BlockHash);
    module.exports = SHA256;
    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;

    SHA256.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++) {
        W[i] = msg[start + i];
      }

      for (; i < W.length; i++) {
        W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
      }

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];
      assert(this.k.length === W.length);

      for (i = 0; i < W.length; i++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
      }

      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
      this.h[5] = sum32(this.h[5], f);
      this.h[6] = sum32(this.h[6], g);
      this.h[7] = sum32(this.h[7], h);
    };

    SHA256.prototype._digest = function digest(enc) {
      if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
    };
  }, {
    "../common": 197,
    "../utils": 207,
    "./common": 206,
    "minimalistic-assert": 245
  }],
  204: [function (require, module, exports) {
    'use strict';

    var utils = require('../utils');

    var SHA512 = require('./512');

    function SHA384() {
      if (!(this instanceof SHA384)) return new SHA384();
      SHA512.call(this);
      this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];
    }

    utils.inherits(SHA384, SHA512);
    module.exports = SHA384;
    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;

    SHA384.prototype._digest = function digest(enc) {
      if (enc === 'hex') return utils.toHex32(this.h.slice(0, 12), 'big');else return utils.split32(this.h.slice(0, 12), 'big');
    };
  }, {
    "../utils": 207,
    "./512": 205
  }],
  205: [function (require, module, exports) {
    'use strict';

    var utils = require('../utils');

    var common = require('../common');

    var assert = require('minimalistic-assert');

    var rotr64_hi = utils.rotr64_hi;
    var rotr64_lo = utils.rotr64_lo;
    var shr64_hi = utils.shr64_hi;
    var shr64_lo = utils.shr64_lo;
    var sum64 = utils.sum64;
    var sum64_hi = utils.sum64_hi;
    var sum64_lo = utils.sum64_lo;
    var sum64_4_hi = utils.sum64_4_hi;
    var sum64_4_lo = utils.sum64_4_lo;
    var sum64_5_hi = utils.sum64_5_hi;
    var sum64_5_lo = utils.sum64_5_lo;
    var BlockHash = common.BlockHash;
    var sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];

    function SHA512() {
      if (!(this instanceof SHA512)) return new SHA512();
      BlockHash.call(this);
      this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];
      this.k = sha512_K;
      this.W = new Array(160);
    }

    utils.inherits(SHA512, BlockHash);
    module.exports = SHA512;
    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;

    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W; // 32 x 32bit words

      for (var i = 0; i < 32; i++) {
        W[i] = msg[start + i];
      }

      for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2

        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14]; // i - 7

        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15

        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32]; // i - 16

        var c3_lo = W[i - 31];
        W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
      }
    };

    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);

      var W = this.W;
      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];
      assert(this.k.length === W.length);

      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }

      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };

    SHA512.prototype._digest = function digest(enc) {
      if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
    };

    function ch64_hi(xh, xl, yh, yl, zh) {
      var r = xh & yh ^ ~xh & zh;
      if (r < 0) r += 0x100000000;
      return r;
    }

    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r = xl & yl ^ ~xl & zl;
      if (r < 0) r += 0x100000000;
      return r;
    }

    function maj64_hi(xh, xl, yh, yl, zh) {
      var r = xh & yh ^ xh & zh ^ yh & zh;
      if (r < 0) r += 0x100000000;
      return r;
    }

    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r = xl & yl ^ xl & zl ^ yl & zl;
      if (r < 0) r += 0x100000000;
      return r;
    }

    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2); // 34

      var c2_hi = rotr64_hi(xl, xh, 7); // 39

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0) r += 0x100000000;
      return r;
    }

    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2); // 34

      var c2_lo = rotr64_lo(xl, xh, 7); // 39

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0) r += 0x100000000;
      return r;
    }

    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9); // 41

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0) r += 0x100000000;
      return r;
    }

    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9); // 41

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0) r += 0x100000000;
      return r;
    }

    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0) r += 0x100000000;
      return r;
    }

    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0) r += 0x100000000;
      return r;
    }

    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29); // 61

      var c2_hi = shr64_hi(xh, xl, 6);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0) r += 0x100000000;
      return r;
    }

    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29); // 61

      var c2_lo = shr64_lo(xh, xl, 6);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0) r += 0x100000000;
      return r;
    }
  }, {
    "../common": 197,
    "../utils": 207,
    "minimalistic-assert": 245
  }],
  206: [function (require, module, exports) {
    'use strict';

    var utils = require('../utils');

    var rotr32 = utils.rotr32;

    function ft_1(s, x, y, z) {
      if (s === 0) return ch32(x, y, z);
      if (s === 1 || s === 3) return p32(x, y, z);
      if (s === 2) return maj32(x, y, z);
    }

    exports.ft_1 = ft_1;

    function ch32(x, y, z) {
      return x & y ^ ~x & z;
    }

    exports.ch32 = ch32;

    function maj32(x, y, z) {
      return x & y ^ x & z ^ y & z;
    }

    exports.maj32 = maj32;

    function p32(x, y, z) {
      return x ^ y ^ z;
    }

    exports.p32 = p32;

    function s0_256(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
    }

    exports.s0_256 = s0_256;

    function s1_256(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
    }

    exports.s1_256 = s1_256;

    function g0_256(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
    }

    exports.g0_256 = g0_256;

    function g1_256(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
    }

    exports.g1_256 = g1_256;
  }, {
    "../utils": 207
  }],
  207: [function (require, module, exports) {
    'use strict';

    var assert = require('minimalistic-assert');

    var inherits = require('inherits');

    exports.inherits = inherits;

    function isSurrogatePair(msg, i) {
      if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
        return false;
      }

      if (i < 0 || i + 1 >= msg.length) {
        return false;
      }

      return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
    }

    function toArray(msg, enc) {
      if (Array.isArray(msg)) return msg.slice();
      if (!msg) return [];
      var res = [];

      if (typeof msg === 'string') {
        if (!enc) {
          // Inspired by stringToUtf8ByteArray() in closure-library by Google
          // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
          // Apache License 2.0
          // https://github.com/google/closure-library/blob/master/LICENSE
          var p = 0;

          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);

            if (c < 128) {
              res[p++] = c;
            } else if (c < 2048) {
              res[p++] = c >> 6 | 192;
              res[p++] = c & 63 | 128;
            } else if (isSurrogatePair(msg, i)) {
              c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
              res[p++] = c >> 18 | 240;
              res[p++] = c >> 12 & 63 | 128;
              res[p++] = c >> 6 & 63 | 128;
              res[p++] = c & 63 | 128;
            } else {
              res[p++] = c >> 12 | 224;
              res[p++] = c >> 6 & 63 | 128;
              res[p++] = c & 63 | 128;
            }
          }
        } else if (enc === 'hex') {
          msg = msg.replace(/[^a-z0-9]+/ig, '');
          if (msg.length % 2 !== 0) msg = '0' + msg;

          for (i = 0; i < msg.length; i += 2) {
            res.push(parseInt(msg[i] + msg[i + 1], 16));
          }
        }
      } else {
        for (i = 0; i < msg.length; i++) {
          res[i] = msg[i] | 0;
        }
      }

      return res;
    }

    exports.toArray = toArray;

    function toHex(msg) {
      var res = '';

      for (var i = 0; i < msg.length; i++) {
        res += zero2(msg[i].toString(16));
      }

      return res;
    }

    exports.toHex = toHex;

    function htonl(w) {
      var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
      return res >>> 0;
    }

    exports.htonl = htonl;

    function toHex32(msg, endian) {
      var res = '';

      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === 'little') w = htonl(w);
        res += zero8(w.toString(16));
      }

      return res;
    }

    exports.toHex32 = toHex32;

    function zero2(word) {
      if (word.length === 1) return '0' + word;else return word;
    }

    exports.zero2 = zero2;

    function zero8(word) {
      if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;
    }

    exports.zero8 = zero8;

    function join32(msg, start, end, endian) {
      var len = end - start;
      assert(len % 4 === 0);
      var res = new Array(len / 4);

      for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
      }

      return res;
    }

    exports.join32 = join32;

    function split32(msg, endian) {
      var res = new Array(msg.length * 4);

      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];

        if (endian === 'big') {
          res[k] = m >>> 24;
          res[k + 1] = m >>> 16 & 0xff;
          res[k + 2] = m >>> 8 & 0xff;
          res[k + 3] = m & 0xff;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = m >>> 16 & 0xff;
          res[k + 1] = m >>> 8 & 0xff;
          res[k] = m & 0xff;
        }
      }

      return res;
    }

    exports.split32 = split32;

    function rotr32(w, b) {
      return w >>> b | w << 32 - b;
    }

    exports.rotr32 = rotr32;

    function rotl32(w, b) {
      return w << b | w >>> 32 - b;
    }

    exports.rotl32 = rotl32;

    function sum32(a, b) {
      return a + b >>> 0;
    }

    exports.sum32 = sum32;

    function sum32_3(a, b, c) {
      return a + b + c >>> 0;
    }

    exports.sum32_3 = sum32_3;

    function sum32_4(a, b, c, d) {
      return a + b + c + d >>> 0;
    }

    exports.sum32_4 = sum32_4;

    function sum32_5(a, b, c, d, e) {
      return a + b + c + d + e >>> 0;
    }

    exports.sum32_5 = sum32_5;

    function sum64(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }

    exports.sum64 = sum64;

    function sum64_hi(ah, al, bh, bl) {
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }

    exports.sum64_hi = sum64_hi;

    function sum64_lo(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }

    exports.sum64_lo = sum64_lo;

    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }

    exports.sum64_4_hi = sum64_4_hi;

    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }

    exports.sum64_4_lo = sum64_4_lo;

    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = lo + el >>> 0;
      carry += lo < el ? 1 : 0;
      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }

    exports.sum64_5_hi = sum64_5_hi;

    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;
      return lo >>> 0;
    }

    exports.sum64_5_lo = sum64_5_lo;

    function rotr64_hi(ah, al, num) {
      var r = al << 32 - num | ah >>> num;
      return r >>> 0;
    }

    exports.rotr64_hi = rotr64_hi;

    function rotr64_lo(ah, al, num) {
      var r = ah << 32 - num | al >>> num;
      return r >>> 0;
    }

    exports.rotr64_lo = rotr64_lo;

    function shr64_hi(ah, al, num) {
      return ah >>> num;
    }

    exports.shr64_hi = shr64_hi;

    function shr64_lo(ah, al, num) {
      var r = ah << 32 - num | al >>> num;
      return r >>> 0;
    }

    exports.shr64_lo = shr64_lo;
  }, {
    "inherits": 217,
    "minimalistic-assert": 245
  }],
  208: [function (require, module, exports) {
    'use strict';

    var hash = require('hash.js');

    var utils = require('minimalistic-crypto-utils');

    var assert = require('minimalistic-assert');

    function HmacDRBG(options) {
      if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;
      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;
      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;
      var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
      var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
      var pers = utils.toArray(options.pers, options.persEnc || 'hex');
      assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

      this._init(entropy, nonce, pers);
    }

    module.exports = HmacDRBG;

    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);
      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);

      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0x00;
        this.V[i] = 0x01;
      }

      this._update(seed);

      this._reseed = 1;
      this.reseedInterval = 0x1000000000000; // 2^48
    };

    HmacDRBG.prototype._hmac = function hmac() {
      return new hash.hmac(this.hash, this.K);
    };

    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac().update(this.V).update([0x00]);

      if (seed) kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed) return;
      this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();
      this.V = this._hmac().update(this.V).digest();
    };

    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      // Optional entropy enc
      if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }

      entropy = utils.toArray(entropy, entropyEnc);
      add = utils.toArray(add, addEnc);
      assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

      this._update(entropy.concat(add || []));

      this._reseed = 1;
    };

    HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval) throw new Error('Reseed is required'); // Optional encoding

      if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
      } // Optional additional data


      if (add) {
        add = utils.toArray(add, addEnc || 'hex');

        this._update(add);
      }

      var temp = [];

      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }

      var res = temp.slice(0, len);

      this._update(add);

      this._reseed++;
      return utils.encode(res, enc);
    };
  }, {
    "hash.js": 196,
    "minimalistic-assert": 245,
    "minimalistic-crypto-utils": 246
  }],
  209: [function (require, module, exports) {
    var HyperswarmProxyClient = require('hyperswarm-proxy/client');

    var websocket = require('websocket-stream');

    var DEFAULT_PORT = '4977'; // HYPR on a cellphone keypad

    var LOCAL_PROXY = "ws://localhost:".concat(DEFAULT_PORT);
    var DEFAULT_PROXY = [LOCAL_PROXY];
    var DEFAULT_RECONNECT_DELAY = 1000;

    var HyperswarmProxyWSClient = /*#__PURE__*/function (_HyperswarmProxyClien) {
      _inherits(HyperswarmProxyWSClient, _HyperswarmProxyClien);

      var _super8 = _createSuper(HyperswarmProxyWSClient);

      function HyperswarmProxyWSClient() {
        var _this24;

        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck2(this, HyperswarmProxyWSClient);

        _this24 = _super8.call(this, opts);
        var _opts$proxy = opts.proxy,
            proxy = _opts$proxy === void 0 ? DEFAULT_PROXY : _opts$proxy,
            _opts$reconnectDelay = opts.reconnectDelay,
            reconnectDelay = _opts$reconnectDelay === void 0 ? DEFAULT_RECONNECT_DELAY : _opts$reconnectDelay;
        _this24.reconnectDelay = reconnectDelay;
        _this24.proxy = null;
        _this24._urls = typeof proxy === 'string' ? [proxy] : proxy;
        _this24._urlIndex = 0;

        _this24.reconnect();

        return _this24;
      }

      _createClass2(HyperswarmProxyWSClient, [{
        key: "reconnect",
        value: function reconnect() {
          var _this25 = this;

          this._nextUrl();

          var localSocket = websocket(LOCAL_PROXY); // Re-emit errors

          localSocket.on('error', function (e) {
            return _this25.emit('connection-error', e);
          });
          localSocket.once('error', function () {
            // Couldn't connect to a local proxy
            // Attempt to connect to the internet proxy
            var proxySocket = websocket(_this25.proxy); // Re-emit errors

            proxySocket.on('error', function (e) {
              return _this25.emit('connection-error', e);
            });
            proxySocket.once('close', function () {
              setTimeout(function () {
                if (_this25.destroyed) return;

                _this25.reconnect();
              }, _this25.reconnectDelay);
            });

            _get2(_getPrototypeOf(HyperswarmProxyWSClient.prototype), "reconnect", _this25).call(_this25, proxySocket);
          });

          _get2(_getPrototypeOf(HyperswarmProxyWSClient.prototype), "reconnect", this).call(this, localSocket);
        }
      }, {
        key: "_nextUrl",
        value: function _nextUrl() {
          this.proxy = this._urls[this._urlIndex++ % this._urls.length];
          return this.proxy;
        }
      }]);

      return HyperswarmProxyWSClient;
    }(HyperswarmProxyClient);

    module.exports = HyperswarmProxyWSClient;
  }, {
    "hyperswarm-proxy/client": 210,
    "websocket-stream": 423
  }],
  210: [function (require, module, exports) {
    (function (process) {
      (function () {
        var EventEmitter = require('events');

        var HyperswarmProxyStream = require('./');

        var NOT_CONNECTED = 'Not connected to proxy';

        module.exports = /*#__PURE__*/function (_EventEmitter6) {
          _inherits(HyperswarmProxyClient, _EventEmitter6);

          var _super9 = _createSuper(HyperswarmProxyClient);

          function HyperswarmProxyClient() {
            var _this26;

            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            _classCallCheck2(this, HyperswarmProxyClient);

            _this26 = _super9.call(this);
            var connection = options.connection,
                _options$autoconnect = options.autoconnect,
                autoconnect = _options$autoconnect === void 0 ? true : _options$autoconnect,
                _options$maxPeers = options.maxPeers,
                maxPeers = _options$maxPeers === void 0 ? 24 : _options$maxPeers;
            _this26.maxPeers = maxPeers;
            _this26._handleStream = _this26._handleStream.bind(_assertThisInitialized(_this26));
            _this26._handleClose = _this26._handleClose.bind(_assertThisInitialized(_this26));
            _this26._handlePeer = _this26._handlePeer.bind(_assertThisInitialized(_this26));
            _this26._handleError = _this26._handleError.bind(_assertThisInitialized(_this26));
            _this26._reJoin = _this26._reJoin.bind(_assertThisInitialized(_this26));
            _this26._protocol = null;
            _this26._connection = null;
            _this26._topics = [];
            _this26._connectedPeers = new Set();
            _this26._seenPeers = [];
            _this26._autoconnect = autoconnect;
            _this26.destroyed = false;

            if (connection) {
              _this26.reconnect(connection);
            }

            return _this26;
          }

          _createClass2(HyperswarmProxyClient, [{
            key: "disconnect",
            value: function disconnect() {
              if (!this._protocol) {
                return;
              }

              this._protocol.removeListener('close', this._handleClose);

              this._connection.end();

              this._protocol.end();

              this._connection = null;
              this._protocol = null;
            }
          }, {
            key: "reconnect",
            value: function reconnect(connection) {
              this.disconnect();
              this._connection = connection;
              this._protocol = new HyperswarmProxyStream(connection);

              this._protocol.on('stream', this._handleStream);

              this._protocol.on('on_peer', this._handlePeer);

              this._protocol.once('close', this._handleClose);

              this._protocol.on('error', this._handleError); // Once the other side is ready, re-join known topics


              this._protocol.once('ready', this._reJoin);

              this._protocol.ready();
            }
          }, {
            key: "_handleStream",
            value: function _handleStream(stream, _ref13) {
              var _this27 = this;

              var topic = _ref13.topic,
                  peer = _ref13.peer;

              if (this.destroyed) {
                // Already destroyed
                stream.end();
                return;
              }

              var details = new Details(peer, topic);

              this._connectedPeers.add(peer);

              this.emit('connection', stream, details);
              stream.once('close', function () {
                if (_this27.destroyed) {
                  return;
                }

                _this27.emit('disconnection', stream, details);

                _this27._connectedPeers.delete(peer);
              });
            }
          }, {
            key: "_handleClose",
            value: function _handleClose() {
              this._protocol = null;

              var _iterator4 = _createForOfIteratorHelper(this._connectedPeers),
                  _step4;

              try {
                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                  var peer = _step4.value;
                  peer.end();
                }
              } catch (err) {
                _iterator4.e(err);
              } finally {
                _iterator4.f();
              }

              this.emit('disconnected');
            }
          }, {
            key: "_handleError",
            value: function _handleError(e) {
              this.emit('error', e);
            }
          }, {
            key: "_handlePeer",
            value: function _handlePeer(_ref14) {
              var topic = _ref14.topic,
                  peer = _ref14.peer;
              var peerData = {
                host: peer,
                port: 0,
                local: false,
                topic: topic
              };
              this.emit('peer', peerData);

              var hasConnected = this._connectedPeers.has(peer);

              var hasMaxPeers = this._connectedPeers.size >= this.maxPeers;
              var shouldConnect = this._autoconnect && !hasConnected && !hasMaxPeers;

              if (shouldConnect) {
                this.connect(peerData);
              } else if (!this._seenPeers.find(function (data) {
                return data.peer === peer;
              })) {
                // TODO: Do something with this, like connect to them after disconnection
                this._seenPeers.push(peerData);
              }
            }
          }, {
            key: "_reJoin",
            value: function _reJoin() {
              var _iterator5 = _createForOfIteratorHelper(this._topics),
                  _step5;

              try {
                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                  var topic = _step5.value;
                  this.join(topic);
                }
              } catch (err) {
                _iterator5.e(err);
              } finally {
                _iterator5.f();
              }
            }
          }, {
            key: "join",
            value: function join(topic) {
              if (!this._protocol) throw new Error(NOT_CONNECTED);

              this._protocol.join(topic);

              var hasSeen = this._topics.some(function (other) {
                return other.equals(topic);
              });

              if (!hasSeen) {
                this._topics.push(topic);
              }
            }
          }, {
            key: "leave",
            value: function leave(topic) {
              if (!this._protocol) throw new Error(NOT_CONNECTED);

              this._protocol.leave(topic);

              this._topics = this._topics.filter(function (other) {
                return !other.equals(topic);
              });
              this._seenPeers = this._seenPeers.filter(function (_ref15) {
                var other = _ref15.topic;
                return !other.equals(topic);
              });
            }
          }, {
            key: "connect",
            value: function connect(peer) {
              var _this28 = this;

              var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
              if (!this._protocol) return setTimeout(function () {
                return cb(new Error(NOT_CONNECTED));
              }, 0);
              var id = peer.host;

              var listenStreams = function listenStreams(stream, details) {
                var foundId = details.peer.host;
                if (foundId !== id) return;
                cb(null, stream, details);

                _this28.removeListener('connection', listenStreams);
              };

              if (cb) {
                this.on('connection', listenStreams);
              }

              this._protocol.connect(id);
            }
          }, {
            key: "flush",
            value: function flush() {
              var cb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : noop;
              // No clue how to implement this.
              if (cb) process.nextTick(cb);
            }
          }, {
            key: "status",
            value: function status() {
              // Hardcoded since we only do lookups through the proxy
              return {
                lookup: true,
                announce: false
              };
            }
          }, {
            key: "destroy",
            value: function destroy(cb) {
              this.destroyed = true;
              this.disconnect();
              this._topics = null;
              this._connectedPeers = null;
              this._seenPeers = null;
              if (cb) process.nextTick(cb);
            }
          }, {
            key: "connections",
            get: function get() {
              if (!this._protocol) return new Set();
              return this._protocol.connections;
            }
          }]);

          return HyperswarmProxyClient;
        }(EventEmitter);

        function noop() {}

        var Details = /*#__PURE__*/function () {
          function Details(peer, topic) {
            _classCallCheck2(this, Details);

            this.type = 'proxy';
            this.client = true;
            this.peer = {
              host: peer,
              port: 0,
              local: false,
              topic: topic
            };
          } // Can't easily deduplicate yet?


          _createClass2(Details, [{
            key: "deduplicate",
            value: function deduplicate() {
              return false;
            }
          }]);

          return Details;
        }();
      }).call(this);
    }).call(this, require('_process'));
  }, {
    "./": 211,
    "_process": 276,
    "events": 175
  }],
  211: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        var Duplex = require('stream').Duplex;

        var lps = require('length-prefixed-stream');

        var _require14 = require('./messages'),
            SwarmEvent = _require14.SwarmEvent,
            EventType = _require14.EventType;

        var ProxyStream = require('./proxystream');

        var pump = require('pump');

        module.exports = /*#__PURE__*/function (_Duplex) {
          _inherits(HyperswarmProxyStream, _Duplex);

          var _super10 = _createSuper(HyperswarmProxyStream);

          function HyperswarmProxyStream(stream) {
            var _this29;

            _classCallCheck2(this, HyperswarmProxyStream);

            _this29 = _super10.call(this, {
              emitClose: true
            });
            _this29.connections = new Set(); // There's going to be a lot of listeners

            _this29.setMaxListeners(256);

            pump(stream, lps.decode(), _assertThisInitialized(_this29), lps.encode(), stream, function () {
              _this29._closeAllStreams();
            });

            _this29.on('on_stream_open', _this29._handleStreamOpen.bind(_assertThisInitialized(_this29)));

            return _this29;
          }

          _createClass2(HyperswarmProxyStream, [{
            key: "ready",
            value: function ready() {
              this.sendMessage('READY');
            }
          }, {
            key: "join",
            value: function join(topic) {
              this.sendMessage('JOIN', {
                topic: topic
              });
            }
          }, {
            key: "leave",
            value: function leave(topic) {
              this.sendMessage('LEAVE', {
                topic: topic
              });
            }
          }, {
            key: "onPeer",
            value: function onPeer(topic, peer) {
              this.sendMessage('ON_PEER', {
                topic: topic,
                peer: peer
              });
            }
          }, {
            key: "connect",
            value: function connect(peer) {
              this.sendMessage('CONNECT', {
                peer: peer
              });
            }
          }, {
            key: "onStreamOpen",
            value: function onStreamOpen(topic, peer, stream) {
              this.sendMessage('ON_STREAM_OPEN', {
                topic: topic,
                peer: peer,
                stream: stream
              });
            }
          }, {
            key: "onStreamData",
            value: function onStreamData(stream, data) {
              if (typeof data === 'string') {
                data = Buffer.from(data, 'utf8');
              }

              this.sendMessage('ON_STREAM_DATA', {
                stream: stream,
                data: data
              });
            }
          }, {
            key: "onStreamClose",
            value: function onStreamClose(stream) {
              this.sendMessage('ON_STREAM_CLOSE', {
                stream: stream
              });
            }
          }, {
            key: "onStreamError",
            value: function onStreamError(stream, message, peer) {
              var data = Buffer.from(message, 'utf8');
              this.sendMessage('ON_STREAM_ERROR', {
                stream: stream,
                data: data
              });
            }
          }, {
            key: "openStream",
            value: function openStream(topic, peer, stream) {
              var proxy = new ProxyStream(this, stream);

              this._addStream(proxy);

              this.onStreamOpen(topic, peer, stream);
              return proxy;
            }
          }, {
            key: "_closeAllStreams",
            value: function _closeAllStreams() {
              var _iterator6 = _createForOfIteratorHelper(this.connections),
                  _step6;

              try {
                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                  var connection = _step6.value;
                  connection.end();
                }
              } catch (err) {
                _iterator6.e(err);
              } finally {
                _iterator6.f();
              }
            }
          }, {
            key: "_addStream",
            value: function _addStream(stream) {
              var _this30 = this;

              this.connections.add(stream);
              stream.once('close', function () {
                _this30.connections.delete(stream);
              });
            }
          }, {
            key: "_handleStreamOpen",
            value: function _handleStreamOpen(_ref16) {
              var topic = _ref16.topic,
                  peer = _ref16.peer,
                  stream = _ref16.stream;
              var proxy = new ProxyStream(this, stream);

              this._addStream(proxy);

              this.emit('stream', proxy, {
                topic: topic,
                peer: peer
              });
            }
          }, {
            key: "sendMessage",
            value: function sendMessage(type) {
              var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              this.push(SwarmEvent.encode(_objectSpread2({
                type: EventType[type]
              }, data)));
            }
          }, {
            key: "_write",
            value: function _write(chunk, encoding, callback) {
              try {
                var decoded = SwarmEvent.decode(chunk);
                var type = decoded.type;

                for (var _i17 = 0, _Object$keys4 = Object.keys(EventType); _i17 < _Object$keys4.length; _i17++) {
                  var name = _Object$keys4[_i17];

                  if (EventType[name] === type) {
                    this.emit(name.toLowerCase(), decoded);
                  }
                }

                callback();
              } catch (e) {
                callback(e);
              }
            } // NOOP

          }, {
            key: "_read",
            value: function _read() {}
          }]);

          return HyperswarmProxyStream;
        }(Duplex);
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "./messages": 212,
    "./proxystream": 213,
    "buffer": 102,
    "length-prefixed-stream": 226,
    "pump": 289,
    "stream": 362
  }],
  212: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        // This file is auto generated by the protocol-buffers compiler

        /* eslint-disable quotes */

        /* eslint-disable indent */

        /* eslint-disable no-redeclare */

        /* eslint-disable camelcase */
        // Remember to `npm install --save protocol-buffers-encodings`
        var encodings = require('protocol-buffers-encodings');

        var varint = encodings.varint;
        var skip = encodings.skip;
        exports.EventType = {
          READY: 1,
          JOIN: 2,
          LEAVE: 3,
          ON_STREAM_OPEN: 4,
          ON_STREAM_CLOSE: 5,
          ON_STREAM_DATA: 6,
          ON_STREAM_ERROR: 7,
          ON_PEER: 8,
          CONNECT: 9
        };
        var SwarmEvent = exports.SwarmEvent = {
          buffer: true,
          encodingLength: null,
          encode: null,
          decode: null
        };
        defineSwarmEvent();

        function defineSwarmEvent() {
          var enc = [encodings.enum, encodings.bytes, encodings.string, encodings.int32];
          SwarmEvent.encodingLength = encodingLength;
          SwarmEvent.encode = encode;
          SwarmEvent.decode = decode;

          function encodingLength(obj) {
            var length = 0;
            if (!defined(obj.type)) throw new Error("type is required");
            var len = enc[0].encodingLength(obj.type);
            length += 1 + len;

            if (defined(obj.topic)) {
              var len = enc[1].encodingLength(obj.topic);
              length += 1 + len;
            }

            if (defined(obj.data)) {
              var len = enc[1].encodingLength(obj.data);
              length += 1 + len;
            }

            if (defined(obj.peer)) {
              var len = enc[2].encodingLength(obj.peer);
              length += 1 + len;
            }

            if (defined(obj.stream)) {
              var len = enc[3].encodingLength(obj.stream);
              length += 1 + len;
            }

            return length;
          }

          function encode(obj, buf, offset) {
            if (!offset) offset = 0;
            if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj));
            var oldOffset = offset;
            if (!defined(obj.type)) throw new Error("type is required");
            buf[offset++] = 8;
            enc[0].encode(obj.type, buf, offset);
            offset += enc[0].encode.bytes;

            if (defined(obj.topic)) {
              buf[offset++] = 18;
              enc[1].encode(obj.topic, buf, offset);
              offset += enc[1].encode.bytes;
            }

            if (defined(obj.data)) {
              buf[offset++] = 26;
              enc[1].encode(obj.data, buf, offset);
              offset += enc[1].encode.bytes;
            }

            if (defined(obj.peer)) {
              buf[offset++] = 34;
              enc[2].encode(obj.peer, buf, offset);
              offset += enc[2].encode.bytes;
            }

            if (defined(obj.stream)) {
              buf[offset++] = 40;
              enc[3].encode(obj.stream, buf, offset);
              offset += enc[3].encode.bytes;
            }

            encode.bytes = offset - oldOffset;
            return buf;
          }

          function decode(buf, offset, end) {
            if (!offset) offset = 0;
            if (!end) end = buf.length;
            if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid");
            var oldOffset = offset;
            var obj = {
              type: 1,
              topic: null,
              data: null,
              peer: "",
              stream: 0
            };
            var found0 = false;

            while (true) {
              if (end <= offset) {
                if (!found0) throw new Error("Decoded message is not valid");
                decode.bytes = offset - oldOffset;
                return obj;
              }

              var prefix = varint.decode(buf, offset);
              offset += varint.decode.bytes;
              var tag = prefix >> 3;

              switch (tag) {
                case 1:
                  obj.type = enc[0].decode(buf, offset);
                  offset += enc[0].decode.bytes;
                  found0 = true;
                  break;

                case 2:
                  obj.topic = enc[1].decode(buf, offset);
                  offset += enc[1].decode.bytes;
                  break;

                case 3:
                  obj.data = enc[1].decode(buf, offset);
                  offset += enc[1].decode.bytes;
                  break;

                case 4:
                  obj.peer = enc[2].decode(buf, offset);
                  offset += enc[2].decode.bytes;
                  break;

                case 5:
                  obj.stream = enc[3].decode(buf, offset);
                  offset += enc[3].decode.bytes;
                  break;

                default:
                  offset = skip(prefix & 7, buf, offset);
              }
            }
          }
        }

        function defined(val) {
          return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val));
        }
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "buffer": 102,
    "protocol-buffers-encodings": 278
  }],
  213: [function (require, module, exports) {
    var Duplex = require('stream').Duplex;

    module.exports = /*#__PURE__*/function (_Duplex2) {
      _inherits(ProxyStream, _Duplex2);

      var _super11 = _createSuper(ProxyStream);

      function ProxyStream(protocol, id) {
        var _this31;

        _classCallCheck2(this, ProxyStream);

        _this31 = _super11.call(this, {
          emitClose: true
        });
        _this31._secretId = Math.random();
        _this31._id = id;
        _this31._protocol = protocol;
        _this31._isClosed = false;
        _this31._handle_data = _this31._handleData.bind(_assertThisInitialized(_this31));
        _this31._handle_close = _this31._handleClose.bind(_assertThisInitialized(_this31));
        _this31._handle_error = _this31._handleError.bind(_assertThisInitialized(_this31));

        _this31._protocol.on('on_stream_data', _this31._handle_data);

        _this31._protocol.on('on_stream_close', _this31._handle_close);

        _this31._protocol.on('on_stream_error', _this31._handle_error);

        return _this31;
      }

      _createClass2(ProxyStream, [{
        key: "_handleData",
        value: function _handleData(_ref17) {
          var stream = _ref17.stream,
              data = _ref17.data;

          // See if the event was for this stream
          if (this._isId(stream)) {
            this.push(data);
          }
        }
      }, {
        key: "_handleClose",
        value: function _handleClose(_ref18) {
          var stream = _ref18.stream;

          if (this._isId(stream)) {
            this.destroy();

            this._cleanup();
          }
        }
      }, {
        key: "_handleError",
        value: function _handleError(_ref19) {
          var stream = _ref19.stream,
              data = _ref19.data;

          if (this._isId(stream)) {
            var message = data.toString('utf8');
            this.emit('error', new Error(message));
            this.destroy();

            this._cleanup();
          }
        }
      }, {
        key: "_cleanup",
        value: function _cleanup() {
          this._isClosed = true;

          this._protocol.removeListener('on_stream_data', this._handle_data);

          this._protocol.removeListener('on_stream_close', this._handle_close);

          this._protocol.removeListener('on_stream_error', this._handle_error);
        }
      }, {
        key: "_isId",
        value: function _isId(streamid) {
          return streamid === this._id;
        }
      }, {
        key: "_read",
        value: function _read() {}
      }, {
        key: "_write",
        value: function _write(chunk, encoding, callback) {
          this._protocol.onStreamData(this._id, chunk);

          callback();
        }
      }, {
        key: "_final",
        value: function _final(callback) {
          if (!this._isClosed) {
            this._protocol.onStreamClose(this._id);

            this._cleanup();
          }

          callback();
        }
      }]);

      return ProxyStream;
    }(Duplex);
  }, {
    "stream": 362
  }],
  214: [function (require, module, exports) {
    (function (process) {
      (function () {
        var _require15 = require('events'),
            EventEmitter = _require15.EventEmitter;

        var webRTCSwarm = require('@geut/discovery-swarm-webrtc');

        var HyperswarmClient = require('hyperswarm-proxy-ws/client');

        var DEFAULT_WEBRTC_BOOTSTRAP = ['https://geut-webrtc-signal.herokuapp.com/'];
        var DEFAULT_PROXY_SERVER = 'wss://hyperswarm.mauve.moe';

        module.exports = function swarm(opts) {
          return new HyperswarmWeb(opts);
        };

        var HyperswarmWeb = /*#__PURE__*/function (_EventEmitter7) {
          _inherits(HyperswarmWeb, _EventEmitter7);

          var _super12 = _createSuper(HyperswarmWeb);

          function HyperswarmWeb() {
            var _this32;

            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            _classCallCheck2(this, HyperswarmWeb);

            _this32 = _super12.call(this);
            var maxPeers = opts.maxPeers,
                webrtcBootstrap = opts.webrtcBootstrap,
                wsProxy = opts.wsProxy,
                simplePeer = opts.simplePeer,
                wsReconnectDelay = opts.wsReconnectDelay;
            _this32.webrtcOpts = {
              maxPeers: maxPeers,
              simplePeer: simplePeer,
              bootstrap: webrtcBootstrap || DEFAULT_WEBRTC_BOOTSTRAP
            };
            _this32.wsOpts = {
              maxPeers: maxPeers,
              proxy: wsProxy || DEFAULT_PROXY_SERVER
            };

            if (wsReconnectDelay) {
              _this32.wsOpts.reconnectDelay = wsReconnectDelay;
            }

            _this32.isListening = false;
            _this32.destroyed = false;
            return _this32;
          }

          _createClass2(HyperswarmWeb, [{
            key: "_handleWS",
            value: function _handleWS(connection, info) {
              this.emit('connection', connection, info);
            }
          }, {
            key: "_handleWebRTC",
            value: function _handleWebRTC(connection, discoveryInfo) {
              var info = new WebRTCInfo(discoveryInfo);
              this.emit('connection', connection, info);
            }
          }, {
            key: "address",
            value: function address() {
              // TODO: What could possibly go here?!?!?!
              return {
                port: 0,
                family: 'IPv4',
                address: '127.0.0.1'
              };
            }
          }, {
            key: "listen",
            value: function listen(port, cb) {
              var _this33 = this;

              if (this.isListening) return setTimeout(cb, 0);
              this.isListening = true;
              this.webrtc = webRTCSwarm(this.webrtcOpts);
              this.ws = new HyperswarmClient(this.wsOpts);
              this.ws.on('connection', function (connection, info) {
                return _this33._handleWS(connection, info);
              });
              this.webrtc.on('connection', function (connection, info) {
                return _this33._handleWebRTC(connection, info);
              });
            }
          }, {
            key: "join",
            value: function join(key, opts) {
              this.listen();
              this.webrtc.join(key);
              this.ws.join(key, opts);
            }
          }, {
            key: "leave",
            value: function leave(key) {
              this.listen();
              this.webrtc.leave(key);
              this.ws.leave(key);
            }
          }, {
            key: "connect",
            value: function connect(peer, cb) {
              this.listen();
              this.ws.connect(peer, cb);
            }
          }, {
            key: "connectivity",
            value: function connectivity(cb) {
              this.listen(function () {
                cb(null, {
                  bound: true,
                  bootstrapped: true,
                  holepunched: true
                });
              });
            } // No clue how to implement this, it's undocumented

          }, {
            key: "flush",
            value: function flush(cb) {
              process.nextTick(cb);
            } // Always return that we're looking up and not announcing

          }, {
            key: "status",
            value: function status() {
              return {
                lookup: true,
                announce: false
              };
            }
          }, {
            key: "destroy",
            value: function destroy(cb) {
              var _this34 = this;

              this.destroyed = true;
              this.ws.destroy(function () {
                _this34.webrtc.close().then(cb, cb);
              });
            }
          }]);

          return HyperswarmWeb;
        }(EventEmitter);

        var WebRTCInfo = /*#__PURE__*/function () {
          function WebRTCInfo(_ref20) {
            var id = _ref20.id,
                channel = _ref20.channel,
                initiator = _ref20.initiator;

            _classCallCheck2(this, WebRTCInfo);

            this.type = 'webrtc';
            this.client = initiator;
            this.peer = {
              port: 0,
              host: id,
              topic: channel
            };
          } // Can't backoff with WebRTC


          _createClass2(WebRTCInfo, [{
            key: "backoff",
            value: function backoff() {
              return false;
            } // Can't easily deduplicate yet

          }, {
            key: "deduplicate",
            value: function deduplicate() {
              return false;
            }
          }]);

          return WebRTCInfo;
        }();
      }).call(this);
    }).call(this, require('_process'));
  }, {
    "@geut/discovery-swarm-webrtc": 22,
    "_process": 276,
    "events": 175,
    "hyperswarm-proxy-ws/client": 209
  }],
  215: [function (require, module, exports) {
    exports.read = function (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;

      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;

      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }

      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };

    exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);

        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }

        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }

        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = e << mLen | m;
      eLen += mLen;

      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    };
  }, {}],
  216: [function (require, module, exports) {
    var indexOf = [].indexOf;

    module.exports = function (arr, obj) {
      if (indexOf) return arr.indexOf(obj);

      for (var i = 0; i < arr.length; ++i) {
        if (arr[i] === obj) return i;
      }

      return -1;
    };
  }, {}],
  217: [function (require, module, exports) {
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;

          var TempCtor = function TempCtor() {};

          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }, {}],
  218: [function (require, module, exports) {
    /*!
     * Determine if an object is a Buffer
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     */
    // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    module.exports = function (obj) {
      return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
    };

    function isBuffer(obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
    } // For Node v0.10 support. Remove this eventually.


    function isSlowBuffer(obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));
    }
  }, {}],
  219: [function (require, module, exports) {
    var toString = {}.toString;

    module.exports = Array.isArray || function (arr) {
      return toString.call(arr) == '[object Array]';
    };
  }, {}],
  220: [function (require, module, exports) {
    /*
    index.js - Kademlia DHT K-bucket implementation as a binary tree.
    
    The MIT License (MIT)
    
    Copyright (c) 2013-2018 Tristan Slominski
    
    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:
    
    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.
    */
    'use strict';

    var randomBytes = require('randombytes');

    var _require16 = require('events'),
        EventEmitter = _require16.EventEmitter;
    /**
     * @param  {Uint8Array} array1
     * @param  {Uint8Array} array2
     * @return {Boolean}
     */


    function arrayEquals(array1, array2) {
      if (array1 === array2) {
        return true;
      }

      if (array1.length !== array2.length) {
        return false;
      }

      for (var i = 0, length = array1.length; i < length; ++i) {
        if (array1[i] !== array2[i]) {
          return false;
        }
      }

      return true;
    }

    function createNode() {
      return {
        contacts: [],
        dontSplit: false,
        left: null,
        right: null
      };
    }

    function ensureInt8(name, val) {
      if (!(val instanceof Uint8Array)) {
        throw new TypeError(name + ' is not a Uint8Array');
      }
    }
    /**
     * Implementation of a Kademlia DHT k-bucket used for storing
     * contact (peer node) information.
     *
     * @extends EventEmitter
     */


    var KBucket = /*#__PURE__*/function (_EventEmitter8) {
      _inherits(KBucket, _EventEmitter8);

      var _super13 = _createSuper(KBucket);

      /**
       * `options`:
       *   `distance`: _Function_
       *     `function (firstId, secondId) { return distance }` An optional
       *     `distance` function that gets two `id` Uint8Arrays
       *     and return distance (as number) between them.
       *   `arbiter`: _Function_ _(Default: vectorClock arbiter)_
       *     `function (incumbent, candidate) { return contact; }` An optional
       *     `arbiter` function that givent two `contact` objects with the same `id`
       *     returns the desired object to be used for updating the k-bucket. For
       *     more details, see [arbiter function](#arbiter-function).
       *   `localNodeId`: _Uint8Array_ An optional Uint8Array representing the local node id.
       *     If not provided, a local node id will be created via `randomBytes(20)`.
       *     `metadata`: _Object_ _(Default: {})_ Optional satellite data to include
       *     with the k-bucket. `metadata` property is guaranteed not be altered by,
       *     it is provided as an explicit container for users of k-bucket to store
       *     implementation-specific data.
       *   `numberOfNodesPerKBucket`: _Integer_ _(Default: 20)_ The number of nodes
       *     that a k-bucket can contain before being full or split.
       *     `numberOfNodesToPing`: _Integer_ _(Default: 3)_ The number of nodes to
       *     ping when a bucket that should not be split becomes full. KBucket will
       *     emit a `ping` event that contains `numberOfNodesToPing` nodes that have
       *     not been contacted the longest.
       *
       * @param {Object=} options optional
       */
      function KBucket() {
        var _this35;

        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck2(this, KBucket);

        _this35 = _super13.call(this);
        _this35.localNodeId = options.localNodeId || randomBytes(20);
        _this35.numberOfNodesPerKBucket = options.numberOfNodesPerKBucket || 20;
        _this35.numberOfNodesToPing = options.numberOfNodesToPing || 3;
        _this35.distance = options.distance || KBucket.distance; // use an arbiter from options or vectorClock arbiter by default

        _this35.arbiter = options.arbiter || KBucket.arbiter;
        _this35.metadata = Object.assign({}, options.metadata);
        ensureInt8('option.localNodeId as parameter 1', _this35.localNodeId);
        _this35.root = createNode();
        return _this35;
      }
      /**
       * Default arbiter function for contacts with the same id. Uses
       * contact.vectorClock to select which contact to update the k-bucket with.
       * Contact with larger vectorClock field will be selected. If vectorClock is
       * the same, candidat will be selected.
       *
       * @param  {Object} incumbent Contact currently stored in the k-bucket.
       * @param  {Object} candidate Contact being added to the k-bucket.
       * @return {Object}           Contact to updated the k-bucket with.
       */


      _createClass2(KBucket, [{
        key: "add",

        /**
         * Adds a contact to the k-bucket.
         *
         * @param {Object} contact the contact object to add
         */
        value: function add(contact) {
          ensureInt8('contact.id', (contact || {}).id);
          var bitIndex = 0;
          var node = this.root;

          while (node.contacts === null) {
            // this is not a leaf node but an inner node with 'low' and 'high'
            // branches; we will check the appropriate bit of the identifier and
            // delegate to the appropriate node for further processing
            node = this._determineNode(node, contact.id, bitIndex++);
          } // check if the contact already exists


          var index = this._indexOf(node, contact.id);

          if (index >= 0) {
            this._update(node, index, contact);

            return this;
          }

          if (node.contacts.length < this.numberOfNodesPerKBucket) {
            node.contacts.push(contact);
            this.emit('added', contact);
            return this;
          } // the bucket is full


          if (node.dontSplit) {
            // we are not allowed to split the bucket
            // we need to ping the first this.numberOfNodesToPing
            // in order to determine if they are alive
            // only if one of the pinged nodes does not respond, can the new contact
            // be added (this prevents DoS flodding with new invalid contacts)
            this.emit('ping', node.contacts.slice(0, this.numberOfNodesToPing), contact);
            return this;
          }

          this._split(node, bitIndex);

          return this.add(contact);
        }
        /**
         * Get the n closest contacts to the provided node id. "Closest" here means:
         * closest according to the XOR metric of the contact node id.
         *
         * @param  {Uint8Array} id  Contact node id
         * @param  {Number=} n      Integer (Default: Infinity) The maximum number of
         *                          closest contacts to return
         * @return {Array}          Array Maximum of n closest contacts to the node id
         */

      }, {
        key: "closest",
        value: function closest(id) {
          var _this36 = this;

          var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;
          ensureInt8('id', id);

          if (!Number.isInteger(n) && n !== Infinity || n <= 0) {
            throw new TypeError('n is not positive number');
          }

          var contacts = [];

          for (var nodes = [this.root], bitIndex = 0; nodes.length > 0 && contacts.length < n;) {
            var node = nodes.pop();

            if (node.contacts === null) {
              var detNode = this._determineNode(node, id, bitIndex++);

              nodes.push(node.left === detNode ? node.right : node.left);
              nodes.push(detNode);
            } else {
              contacts = contacts.concat(node.contacts);
            }
          }

          return contacts.map(function (a) {
            return [_this36.distance(a.id, id), a];
          }).sort(function (a, b) {
            return a[0] - b[0];
          }).slice(0, n).map(function (a) {
            return a[1];
          });
        }
        /**
         * Counts the total number of contacts in the tree.
         *
         * @return {Number} The number of contacts held in the tree
         */

      }, {
        key: "count",
        value: function count() {
          // return this.toArray().length
          var count = 0;

          for (var nodes = [this.root]; nodes.length > 0;) {
            var node = nodes.pop();
            if (node.contacts === null) nodes.push(node.right, node.left);else count += node.contacts.length;
          }

          return count;
        }
        /**
         * Determines whether the id at the bitIndex is 0 or 1.
         * Return left leaf if `id` at `bitIndex` is 0, right leaf otherwise
         *
         * @param  {Object} node     internal object that has 2 leafs: left and right
         * @param  {Uint8Array} id   Id to compare localNodeId with.
         * @param  {Number} bitIndex Integer (Default: 0) The bit index to which bit
         *                           to check in the id Uint8Array.
         * @return {Object}          left leaf if id at bitIndex is 0, right leaf otherwise.
         */

      }, {
        key: "_determineNode",
        value: function _determineNode(node, id, bitIndex) {
          // **NOTE** remember that id is a Uint8Array and has granularity of
          // bytes (8 bits), whereas the bitIndex is the _bit_ index (not byte)
          // id's that are too short are put in low bucket (1 byte = 8 bits)
          // (bitIndex >> 3) finds how many bytes the bitIndex describes
          // bitIndex % 8 checks if we have extra bits beyond byte multiples
          // if number of bytes is <= no. of bytes described by bitIndex and there
          // are extra bits to consider, this means id has less bits than what
          // bitIndex describes, id therefore is too short, and will be put in low
          // bucket
          var bytesDescribedByBitIndex = bitIndex >> 3;
          var bitIndexWithinByte = bitIndex % 8;

          if (id.length <= bytesDescribedByBitIndex && bitIndexWithinByte !== 0) {
            return node.left;
          }

          var byteUnderConsideration = id[bytesDescribedByBitIndex]; // byteUnderConsideration is an integer from 0 to 255 represented by 8 bits
          // where 255 is 11111111 and 0 is 00000000
          // in order to find out whether the bit at bitIndexWithinByte is set
          // we construct (1 << (7 - bitIndexWithinByte)) which will consist
          // of all bits being 0, with only one bit set to 1
          // for example, if bitIndexWithinByte is 3, we will construct 00010000 by
          // (1 << (7 - 3)) -> (1 << 4) -> 16

          if (byteUnderConsideration & 1 << 7 - bitIndexWithinByte) {
            return node.right;
          }

          return node.left;
        }
        /**
         * Get a contact by its exact ID.
         * If this is a leaf, loop through the bucket contents and return the correct
         * contact if we have it or null if not. If this is an inner node, determine
         * which branch of the tree to traverse and repeat.
         *
         * @param  {Uint8Array} id The ID of the contact to fetch.
         * @return {Object|Null}   The contact if available, otherwise null
         */

      }, {
        key: "get",
        value: function get(id) {
          ensureInt8('id', id);
          var bitIndex = 0;
          var node = this.root;

          while (node.contacts === null) {
            node = this._determineNode(node, id, bitIndex++);
          } // index of uses contact id for matching


          var index = this._indexOf(node, id);

          return index >= 0 ? node.contacts[index] : null;
        }
        /**
         * Returns the index of the contact with provided
         * id if it exists, returns -1 otherwise.
         *
         * @param  {Object} node    internal object that has 2 leafs: left and right
         * @param  {Uint8Array} id  Contact node id.
         * @return {Number}         Integer Index of contact with provided id if it
         *                          exists, -1 otherwise.
         */

      }, {
        key: "_indexOf",
        value: function _indexOf(node, id) {
          for (var i = 0; i < node.contacts.length; ++i) {
            if (arrayEquals(node.contacts[i].id, id)) return i;
          }

          return -1;
        }
        /**
         * Removes contact with the provided id.
         *
         * @param  {Uint8Array} id The ID of the contact to remove.
         * @return {Object}        The k-bucket itself.
         */

      }, {
        key: "remove",
        value: function remove(id) {
          ensureInt8('the id as parameter 1', id);
          var bitIndex = 0;
          var node = this.root;

          while (node.contacts === null) {
            node = this._determineNode(node, id, bitIndex++);
          }

          var index = this._indexOf(node, id);

          if (index >= 0) {
            var contact = node.contacts.splice(index, 1)[0];
            this.emit('removed', contact);
          }

          return this;
        }
        /**
         * Splits the node, redistributes contacts to the new nodes, and marks the
         * node that was split as an inner node of the binary tree of nodes by
         * setting this.root.contacts = null
         *
         * @param  {Object} node     node for splitting
         * @param  {Number} bitIndex the bitIndex to which byte to check in the
         *                           Uint8Array for navigating the binary tree
         */

      }, {
        key: "_split",
        value: function _split(node, bitIndex) {
          node.left = createNode();
          node.right = createNode(); // redistribute existing contacts amongst the two newly created nodes

          var _iterator7 = _createForOfIteratorHelper(node.contacts),
              _step7;

          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              var contact = _step7.value;

              this._determineNode(node, contact.id, bitIndex).contacts.push(contact);
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }

          node.contacts = null; // mark as inner tree node
          // don't split the "far away" node
          // we check where the local node would end up and mark the other one as
          // "dontSplit" (i.e. "far away")

          var detNode = this._determineNode(node, this.localNodeId, bitIndex);

          var otherNode = node.left === detNode ? node.right : node.left;
          otherNode.dontSplit = true;
        }
        /**
         * Returns all the contacts contained in the tree as an array.
         * If this is a leaf, return a copy of the bucket. `slice` is used so that we
         * don't accidentally leak an internal reference out that might be
         * accidentally misused. If this is not a leaf, return the union of the low
         * and high branches (themselves also as arrays).
         *
         * @return {Array} All of the contacts in the tree, as an array
         */

      }, {
        key: "toArray",
        value: function toArray() {
          var result = [];

          for (var nodes = [this.root]; nodes.length > 0;) {
            var node = nodes.pop();
            if (node.contacts === null) nodes.push(node.right, node.left);else result = result.concat(node.contacts);
          }

          return result;
        }
        /**
         * Updates the contact selected by the arbiter.
         * If the selection is our old contact and the candidate is some new contact
         * then the new contact is abandoned (not added).
         * If the selection is our old contact and the candidate is our old contact
         * then we are refreshing the contact and it is marked as most recently
         * contacted (by being moved to the right/end of the bucket array).
         * If the selection is our new contact, the old contact is removed and the new
         * contact is marked as most recently contacted.
         *
         * @param  {Object} node    internal object that has 2 leafs: left and right
         * @param  {Number} index   the index in the bucket where contact exists
         *                          (index has already been computed in a previous
         *                          calculation)
         * @param  {Object} contact The contact object to update.
         */

      }, {
        key: "_update",
        value: function _update(node, index, contact) {
          // sanity check
          if (!arrayEquals(node.contacts[index].id, contact.id)) {
            throw new Error('wrong index for _update');
          }

          var incumbent = node.contacts[index];
          var selection = this.arbiter(incumbent, contact); // if the selection is our old contact and the candidate is some new
          // contact, then there is nothing to do

          if (selection === incumbent && incumbent !== contact) return;
          node.contacts.splice(index, 1); // remove old contact

          node.contacts.push(selection); // add more recent contact version

          this.emit('updated', incumbent, selection);
        }
      }], [{
        key: "arbiter",
        value: function arbiter(incumbent, candidate) {
          return incumbent.vectorClock > candidate.vectorClock ? incumbent : candidate;
        }
        /**
         * Default distance function. Finds the XOR
         * distance between firstId and secondId.
         *
         * @param  {Uint8Array} firstId  Uint8Array containing first id.
         * @param  {Uint8Array} secondId Uint8Array containing second id.
         * @return {Number}              Integer The XOR distance between firstId
         *                               and secondId.
         */

      }, {
        key: "distance",
        value: function distance(firstId, secondId) {
          var distance = 0;
          var i = 0;
          var min = Math.min(firstId.length, secondId.length);
          var max = Math.max(firstId.length, secondId.length);

          for (; i < min; ++i) {
            distance = distance * 256 + (firstId[i] ^ secondId[i]);
          }

          for (; i < max; ++i) {
            distance = distance * 256 + 255;
          }

          return distance;
        }
      }]);

      return KBucket;
    }(EventEmitter);

    module.exports = KBucket;
  }, {
    "events": 175,
    "randombytes": 291
  }],
  221: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        var dgram = require('dgram');

        var bencode = require('bencode');

        var isIP = require('net').isIP;

        var dns = require('dns');

        var util = require('util');

        var events = require('events');

        var ETIMEDOUT = new Error('Query timed out');
        ETIMEDOUT.code = 'ETIMEDOUT';
        var EUNEXPECTEDNODE = new Error('Unexpected node id');
        EUNEXPECTEDNODE.code = 'EUNEXPECTEDNODE';
        module.exports = RPC;

        function RPC(opts) {
          if (!(this instanceof RPC)) return new RPC(opts);
          if (!opts) opts = {};
          var self = this;
          this.timeout = opts.timeout || 2000;
          this.inflight = 0;
          this.destroyed = false;
          this.isIP = opts.isIP || isIP;
          this.socket = opts.socket || dgram.createSocket('udp4');
          this.socket.on('message', onmessage);
          this.socket.on('error', onerror);
          this.socket.on('listening', onlistening);
          this._tick = 0;
          this._ids = [];
          this._reqs = [];
          this._timer = setInterval(check, Math.floor(this.timeout / 4));
          events.EventEmitter.call(this);

          function check() {
            var missing = self.inflight;
            if (!missing) return;

            for (var i = 0; i < self._reqs.length; i++) {
              var req = self._reqs[i];
              if (!req) continue;
              if (req.ttl) req.ttl--;else self._cancel(i, ETIMEDOUT);
              if (! --missing) return;
            }
          }

          function onlistening() {
            self.emit('listening');
          }

          function onerror(err) {
            if (err.code === 'EACCES' || err.code === 'EADDRINUSE') self.emit('error', err);else self.emit('warning', err);
          }

          function onmessage(buf, rinfo) {
            if (self.destroyed) return;
            if (!rinfo.port) return; // seems like a node bug that this is nessesary?

            try {
              var message = bencode.decode(buf);
            } catch (e) {
              return self.emit('warning', e);
            }

            var type = message && message.y && message.y.toString();

            if (type === 'r' || type === 'e') {
              if (!Buffer.isBuffer(message.t)) return;

              try {
                var tid = message.t.readUInt16BE(0);
              } catch (err) {
                return self.emit('warning', err);
              }

              var index = self._ids.indexOf(tid);

              if (index === -1 || tid === 0) {
                self.emit('response', message, rinfo);
                self.emit('warning', new Error('Unexpected transaction id: ' + tid));
                return;
              }

              var req = self._reqs[index];

              if (req.peer.host !== rinfo.address) {
                self.emit('response', message, rinfo);
                self.emit('warning', new Error('Out of order response'));
                return;
              }

              self._ids[index] = 0;
              self._reqs[index] = null;
              self.inflight--;

              if (type === 'e') {
                var isArray = Array.isArray(message.e);
                var err = new Error(isArray ? message.e.join(' ') : 'Unknown error');
                err.code = isArray && message.e.length && typeof message.e[0] === 'number' ? message.e[0] : 0;
                req.callback(err, message, rinfo, req.message);
                self.emit('update');
                self.emit('postupdate');
                return;
              }

              var rid = message.r && message.r.id;

              if (req.peer && req.peer.id && rid && !req.peer.id.equals(rid)) {
                req.callback(EUNEXPECTEDNODE, null, rinfo);
                self.emit('update');
                self.emit('postupdate');
                return;
              }

              req.callback(null, message, rinfo, req.message);
              self.emit('update');
              self.emit('postupdate');
              self.emit('response', message, rinfo);
            } else if (type === 'q') {
              self.emit('query', message, rinfo);
            } else {
              self.emit('warning', new Error('Unknown type: ' + type));
            }
          }
        }

        util.inherits(RPC, events.EventEmitter);

        RPC.prototype.address = function () {
          return this.socket.address();
        };

        RPC.prototype.response = function (peer, req, res, cb) {
          this.send(peer, {
            t: req.t,
            y: 'r',
            r: res
          }, cb);
        };

        RPC.prototype.error = function (peer, req, error, cb) {
          this.send(peer, {
            t: req.t,
            y: 'e',
            e: [].concat(error.message || error)
          }, cb);
        };

        RPC.prototype.send = function (peer, message, cb) {
          var buf = bencode.encode(message);
          this.socket.send(buf, 0, buf.length, peer.port, peer.address || peer.host, cb || noop);
        }; // bind([port], [address], [callback])


        RPC.prototype.bind = function () {
          this.socket.bind.apply(this.socket, arguments);
        };

        RPC.prototype.destroy = function (cb) {
          this.destroyed = true;
          clearInterval(this._timer);
          if (cb) this.socket.on('close', cb);

          for (var i = 0; i < this._ids.length; i++) {
            this._cancel(i);
          }

          this.socket.close();
        };

        RPC.prototype.query = function (peer, query, cb) {
          if (!cb) cb = noop;
          if (!this.isIP(peer.host)) return this._resolveAndQuery(peer, query, cb);
          var message = {
            t: Buffer.allocUnsafe(2),
            y: 'q',
            q: query.q,
            a: query.a
          };
          var req = {
            ttl: 4,
            peer: peer,
            message: message,
            callback: cb
          };
          if (this._tick === 65535) this._tick = 0;
          var tid = ++this._tick;

          var free = this._ids.indexOf(0);

          if (free === -1) free = this._ids.push(0) - 1;
          this._ids[free] = tid;

          while (this._reqs.length < free) {
            this._reqs.push(null);
          }

          this._reqs[free] = req;
          this.inflight++;
          message.t.writeUInt16BE(tid, 0);
          this.send(peer, message);
          return tid;
        };

        RPC.prototype.cancel = function (tid, err) {
          var index = this._ids.indexOf(tid);

          if (index > -1) this._cancel(index, err);
        };

        RPC.prototype._cancel = function (index, err) {
          var req = this._reqs[index];
          this._ids[index] = 0;
          this._reqs[index] = null;

          if (req) {
            this.inflight--;
            req.callback(err || new Error('Query was cancelled'), null, req.peer);
            this.emit('update');
            this.emit('postupdate');
          }
        };

        RPC.prototype._resolveAndQuery = function (peer, query, cb) {
          var self = this;
          dns.lookup(peer.host, function (err, ip) {
            if (err) return cb(err);
            if (self.destroyed) return cb(new Error('k-rpc-socket is destroyed'));
            self.query({
              host: ip,
              port: peer.port
            }, query, cb);
          });
        };

        function noop() {}
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "bencode": 48,
    "buffer": 102,
    "dgram": 100,
    "dns": 100,
    "events": 175,
    "net": 100,
    "util": 403
  }],
  222: [function (require, module, exports) {
    (function (process, Buffer) {
      (function () {
        var socket = require('k-rpc-socket');

        var KBucket = require('k-bucket');

        var events = require('events');

        var randombytes = require('randombytes');

        var util = require('util');

        var K = 20;
        var MAX_CONCURRENCY = 16;
        var BOOTSTRAP_NODES = [{
          host: 'router.bittorrent.com',
          port: 6881
        }, {
          host: 'router.utorrent.com',
          port: 6881
        }, {
          host: 'dht.transmissionbt.com',
          port: 6881
        }];
        module.exports = RPC;

        function RPC(opts) {
          if (!(this instanceof RPC)) return new RPC(opts);
          if (!opts) opts = {};
          var self = this;
          this._idLength = opts.idLength || 20;
          this.id = toBuffer(opts.id || opts.nodeId || randombytes(this._idLength));
          this.socket = opts.krpcSocket || socket(opts);
          this.bootstrap = toBootstrapArray(opts.nodes || opts.bootstrap);
          this.concurrency = opts.concurrency || MAX_CONCURRENCY;
          this.backgroundConcurrency = opts.backgroundConcurrency || this.concurrency / 4 | 0;
          this.k = opts.k || K;
          this.destroyed = false;
          this.pending = [];
          this.nodes = null;
          this.socket.setMaxListeners(0);
          this.socket.on('query', onquery);
          this.socket.on('response', onresponse);
          this.socket.on('warning', onwarning);
          this.socket.on('error', onerror);
          this.socket.on('update', onupdate);
          this.socket.on('listening', onlistening);
          events.EventEmitter.call(this);
          this.clear();

          function onupdate() {
            while (self.pending.length && self.socket.inflight < self.concurrency) {
              var next = self.pending.shift();
              self.query(next[0], next[1], next[2]);
            }
          }

          function onerror(err) {
            self.emit('error', err);
          }

          function onlistening() {
            self.emit('listening');
          }

          function onwarning(err) {
            self.emit('warning', err);
          }

          function onquery(query, peer) {
            addNode(query.a, peer);
            self.emit('query', query, peer);
          }

          function onresponse(reply, peer) {
            addNode(reply.r, peer);
          }

          function addNode(data, peer) {
            if (data && isNodeId(data.id, self._idLength) && !data.id.equals(self.id)) {
              var old = self.nodes.get(data.id);

              if (old) {
                old.seen = Date.now();
                return;
              }

              self._addNode({
                id: data.id,
                host: peer.address || peer.host,
                port: peer.port,
                distance: 0,
                seen: Date.now()
              });
            }
          }
        }

        util.inherits(RPC, events.EventEmitter);

        RPC.prototype.response = function (node, query, response, nodes, cb) {
          if (typeof nodes === 'function') {
            cb = nodes;
            nodes = null;
          }

          if (!response.id) response.id = this.id;
          if (nodes) response.nodes = encodeNodes(nodes, this._idLength);
          this.socket.response(node, query, response, cb);
        };

        RPC.prototype.error = function (node, query, error, cb) {
          this.socket.error(node, query, error, cb);
        }; // bind([port], [address], [callback])


        RPC.prototype.bind = function () {
          this.socket.bind.apply(this.socket, arguments);
        };

        RPC.prototype.address = function () {
          return this.socket.address();
        };

        RPC.prototype.queryAll = function (nodes, message, visit, cb) {
          if (!message.a) message.a = {};
          if (!message.a.id) message.a.id = this.id;
          var stop = false;
          var missing = nodes.length;
          var hits = 0;
          var error = null;
          if (!missing) return cb(new Error('No nodes to query'), 0);

          for (var i = 0; i < nodes.length; i++) {
            this.query(nodes[i], message, done);
          }

          function done(err, res, peer) {
            if (!err) hits++;else if (err.code >= 300 && err.code < 400) error = err;

            if (!err && !stop) {
              if (visit && visit(res, peer) === false) stop = true;
            }

            if (! --missing) cb(hits ? null : error || new Error('All queries failed'), hits);
          }
        };

        RPC.prototype.query = function (node, message, cb) {
          if (this.socket.inflight >= this.concurrency) {
            this.pending.push([node, message, cb]);
          } else {
            if (!message.a) message.a = {};
            if (!message.a.id) message.a.id = this.id;
            if (node.token) message.a.token = node.token;
            this.socket.query(node, message, cb);
          }
        };

        RPC.prototype.destroy = function (cb) {
          this.destroyed = true;
          this.socket.destroy(cb);
        };

        RPC.prototype.clear = function () {
          var self = this;
          this.nodes = new KBucket({
            localNodeId: this.id,
            numberOfNodesPerKBucket: this.k,
            numberOfNodesToPing: this.concurrency
          });
          this.nodes.on('ping', onping);

          function onping(older, newer) {
            self.emit('ping', older, function swap(deadNode) {
              if (!deadNode) return;
              if (deadNode.id) self.nodes.remove(deadNode.id);

              self._addNode(newer);
            });
          }
        };

        RPC.prototype.populate = function (target, message, cb) {
          this._closest(target, message, true, null, cb);
        };

        RPC.prototype.closest = function (target, message, visit, cb) {
          this._closest(target, message, false, visit, cb);
        };

        RPC.prototype._addNode = function (node) {
          var old = this.nodes.get(node.id);
          this.nodes.add(node);
          if (!old) this.emit('node', node);
        };

        RPC.prototype._closest = function (target, message, background, visit, cb) {
          if (!cb) cb = noop;
          var self = this;
          var count = 0;
          var queried = {};
          var pending = 0;
          var once = true;
          var stop = false;
          if (!message.a) message.a = {};
          if (!message.a.id) message.a.id = this.id;
          var table = new KBucket({
            localNodeId: target,
            numberOfNodesPerKBucket: this.k,
            numberOfNodesToPing: this.concurrency
          });
          var evt = background ? 'postupdate' : 'update';
          this.socket.on(evt, kick);
          kick();

          function kick() {
            if (self.destroyed || self.socket.inflight >= self.concurrency) return;
            var otherInflight = self.pending.length + self.socket.inflight - pending;
            if (background && self.socket.inflight >= self.backgroundConcurrency && otherInflight) return;
            var closest = table.closest(target, self.k);

            if (!closest.length || closest.length < self.bootstrap.length) {
              closest = self.nodes.closest(target, self.k);
              if (!closest.length || closest.length < self.bootstrap.length) bootstrap();
            }

            for (var i = 0; i < closest.length; i++) {
              if (stop) break;
              if (self.socket.inflight >= self.concurrency) return;
              var peer = closest[i];
              var id = peer.host + ':' + peer.port;
              if (queried[id]) continue;
              queried[id] = true;
              pending++;
              self.socket.query(peer, message, afterQuery);
            }

            if (!pending) {
              self.socket.removeListener(evt, kick);
              process.nextTick(done);
            }
          }

          function done() {
            cb(null, count);
          }

          function bootstrap() {
            if (!once) return;
            once = false;
            self.bootstrap.forEach(function (peer) {
              pending++;
              self.socket.query(peer, message, afterQuery);
            });
          }

          function afterQuery(err, res, peer) {
            pending--;
            if (peer) queried[(peer.address || peer.host) + ':' + peer.port] = true; // need this for bootstrap nodes

            if (peer && peer.id && self.nodes.get(peer.id)) {
              if (err && (err.code === 'EUNEXPECTEDNODE' || err.code === 'ETIMEDOUT')) {
                self.nodes.remove(peer.id);
              }
            }

            var r = res && res.r;
            if (!r) return kick();

            if (!err && isNodeId(r.id, self._idLength)) {
              count++;
              add({
                id: r.id,
                port: peer.port,
                host: peer.host || peer.address,
                distance: 0
              });
            }

            var nodes = r.nodes ? parseNodes(r.nodes, self._idLength) : [];

            for (var i = 0; i < nodes.length; i++) {
              add(nodes[i]);
            }

            if (visit && visit(res, peer) === false) stop = true;
            kick();
          }

          function add(node) {
            if (node.id.equals(self.id)) return;
            table.add(node);
          }
        };

        function toBootstrapArray(val) {
          if (val === false) return [];
          if (val === true) return BOOTSTRAP_NODES;
          return [].concat(val || BOOTSTRAP_NODES).map(parsePeer);
        }

        function isNodeId(id, idLength) {
          return id && Buffer.isBuffer(id) && id.length === idLength;
        }

        function encodeNodes(nodes, idLength) {
          var buf = Buffer.allocUnsafe(nodes.length * (idLength + 6));
          var ptr = 0;

          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (!isNodeId(node.id, idLength)) continue;
            node.id.copy(buf, ptr);
            ptr += idLength;
            var ip = (node.host || node.address).split('.');

            for (var j = 0; j < 4; j++) {
              buf[ptr++] = parseInt(ip[j] || 0, 10);
            }

            buf.writeUInt16BE(node.port, ptr);
            ptr += 2;
          }

          if (ptr === buf.length) return buf;
          return buf.slice(0, ptr);
        }

        function parseNodes(buf, idLength) {
          var contacts = [];

          try {
            for (var i = 0; i < buf.length; i += idLength + 6) {
              var port = buf.readUInt16BE(i + (idLength + 4));
              if (!port) continue;
              contacts.push({
                id: buf.slice(i, i + idLength),
                host: parseIp(buf, i + idLength),
                port: port,
                distance: 0,
                token: null
              });
            }
          } catch (err) {// do nothing
          }

          return contacts;
        }

        function parseIp(buf, offset) {
          return buf[offset++] + '.' + buf[offset++] + '.' + buf[offset++] + '.' + buf[offset++];
        }

        function parsePeer(peer) {
          if (typeof peer === 'string') return {
            host: peer.split(':')[0],
            port: Number(peer.split(':')[1])
          };
          return peer;
        }

        function noop() {}

        function toBuffer(str) {
          if (Buffer.isBuffer(str)) return str;
          if (ArrayBuffer.isView(str)) return Buffer.from(str.buffer, str.byteOffset, str.byteLength);
          if (typeof str === 'string') return Buffer.from(str, 'hex');
          throw new Error('Pass a buffer or a string');
        }
      }).call(this);
    }).call(this, require('_process'), require("buffer").Buffer);
  }, {
    "_process": 276,
    "buffer": 102,
    "events": 175,
    "k-bucket": 220,
    "k-rpc-socket": 221,
    "randombytes": 291,
    "util": 403
  }],
  223: [function (require, module, exports) {
    module.exports = function (work) {
      var pending = null;
      var callback = null;
      var callbacks = null;
      var next = null;
      return function (val, cb) {
        next = val;
        update(cb || noop);
      };

      function update(cb) {
        if (callback) {
          if (!pending) pending = [];
          pending.push(cb);
          return;
        }

        var val = next;
        next = null;
        callback = cb;
        work(val, done);
      }

      function done(err) {
        var cb = callback;
        var cbs = callbacks;
        callbacks = null;
        callback = null;

        if (pending) {
          callbacks = pending;
          pending = null;
          update(noop);
        }

        if (cbs) {
          for (var i = 0; i < cbs.length; i++) {
            cbs[i](err);
          }
        }

        cb(err);
      }
    };

    function noop(_) {}
  }, {}],
  224: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        var varint = require('varint');

        var stream = require('readable-stream');

        var inherits = require('inherits');

        var Decoder = function Decoder(opts) {
          if (!(this instanceof Decoder)) return new Decoder(opts);
          stream.Transform.call(this);
          this._destroyed = false;
          this._missing = 0;
          this._message = null;
          this._limit = opts && opts.limit || 0;
          this._allowEmpty = !!(opts && opts.allowEmpty);
          this._prefix = Buffer.allocUnsafe(this._limit ? varint.encodingLength(this._limit) : 100);
          this._ptr = 0;

          if (this._allowEmpty) {
            this._readableState.highWaterMark = 16;
            this._readableState.objectMode = true;
          }
        };

        inherits(Decoder, stream.Transform);

        Decoder.prototype._push = function (message) {
          this._ptr = 0;
          this._missing = 0;
          this._message = null;
          this.push(message);
        };

        Decoder.prototype._parseLength = function (data, offset) {
          for (offset; offset < data.length; offset++) {
            if (this._ptr >= this._prefix.length) return this._prefixError(data);
            this._prefix[this._ptr++] = data[offset];

            if (!(data[offset] & 0x80)) {
              this._missing = varint.decode(this._prefix);
              if (this._limit && this._missing > this._limit) return this._prefixError(data);
              if (!this._missing && this._allowEmpty) this._push(Buffer.alloc(0));
              this._ptr = 0;
              return offset + 1;
            }
          }

          return data.length;
        };

        Decoder.prototype._prefixError = function (data) {
          this.destroy(new Error('Message is larger than max length'));
          return data.length;
        };

        Decoder.prototype._parseMessage = function (data, offset) {
          var free = data.length - offset;
          var missing = this._missing;

          if (!this._message) {
            if (missing <= free) {
              // fast track - no copy
              this._push(data.slice(offset, offset + missing));

              return offset + missing;
            }

            this._message = Buffer.allocUnsafe(missing);
          } // TODO: add opt-in "partial mode" to completely avoid copys


          data.copy(this._message, this._ptr, offset, offset + missing);

          if (missing <= free) {
            this._push(this._message);

            return offset + missing;
          }

          this._missing -= free;
          this._ptr += free;
          return data.length;
        };

        Decoder.prototype._transform = function (data, enc, cb) {
          var offset = 0;

          while (!this._destroyed && offset < data.length) {
            if (this._missing) offset = this._parseMessage(data, offset);else offset = this._parseLength(data, offset);
          }

          cb();
        };

        Decoder.prototype.destroy = function (err) {
          if (this._destroyed) return;
          this._destroyed = true;
          if (err) this.emit('error', err);
          this.emit('close');
        };

        module.exports = Decoder;
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "buffer": 102,
    "inherits": 217,
    "readable-stream": 241,
    "varint": 421
  }],
  225: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        var varint = require('varint');

        var stream = require('readable-stream');

        var inherits = require('inherits');

        var pool = Buffer.allocUnsafe(10 * 1024);
        var used = 0;

        var Encoder = function Encoder() {
          if (!(this instanceof Encoder)) return new Encoder();
          stream.Transform.call(this);
          this._destroyed = false;
        };

        inherits(Encoder, stream.Transform);

        Encoder.prototype._transform = function (data, enc, cb) {
          if (this._destroyed) return cb();
          varint.encode(data.length, pool, used);
          used += varint.encode.bytes;
          this.push(pool.slice(used - varint.encode.bytes, used));
          this.push(data);

          if (pool.length - used < 100) {
            pool = Buffer.allocUnsafe(10 * 1024);
            used = 0;
          }

          cb();
        };

        Encoder.prototype.destroy = function (err) {
          if (this._destroyed) return;
          this._destroyed = true;
          if (err) this.emit('error', err);
          this.emit('close');
        };

        module.exports = Encoder;
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "buffer": 102,
    "inherits": 217,
    "readable-stream": 241,
    "varint": 421
  }],
  226: [function (require, module, exports) {
    exports.encode = require('./encode');
    exports.decode = require('./decode');
  }, {
    "./decode": 224,
    "./encode": 225
  }],
  227: [function (require, module, exports) {
    arguments[4][7][0].apply(exports, arguments);
  }, {
    "dup": 7
  }],
  228: [function (require, module, exports) {
    arguments[4][8][0].apply(exports, arguments);
  }, {
    "./_stream_readable": 230,
    "./_stream_writable": 232,
    "_process": 276,
    "dup": 8,
    "inherits": 217
  }],
  229: [function (require, module, exports) {
    arguments[4][9][0].apply(exports, arguments);
  }, {
    "./_stream_transform": 231,
    "dup": 9,
    "inherits": 217
  }],
  230: [function (require, module, exports) {
    arguments[4][10][0].apply(exports, arguments);
  }, {
    "../errors": 227,
    "./_stream_duplex": 228,
    "./internal/streams/async_iterator": 233,
    "./internal/streams/buffer_list": 234,
    "./internal/streams/destroy": 235,
    "./internal/streams/from": 237,
    "./internal/streams/state": 239,
    "./internal/streams/stream": 240,
    "_process": 276,
    "buffer": 102,
    "dup": 10,
    "events": 175,
    "inherits": 217,
    "string_decoder/": 364,
    "util": 56
  }],
  231: [function (require, module, exports) {
    arguments[4][11][0].apply(exports, arguments);
  }, {
    "../errors": 227,
    "./_stream_duplex": 228,
    "dup": 11,
    "inherits": 217
  }],
  232: [function (require, module, exports) {
    arguments[4][12][0].apply(exports, arguments);
  }, {
    "../errors": 227,
    "./_stream_duplex": 228,
    "./internal/streams/destroy": 235,
    "./internal/streams/state": 239,
    "./internal/streams/stream": 240,
    "_process": 276,
    "buffer": 102,
    "dup": 12,
    "inherits": 217,
    "util-deprecate": 400
  }],
  233: [function (require, module, exports) {
    arguments[4][13][0].apply(exports, arguments);
  }, {
    "./end-of-stream": 236,
    "_process": 276,
    "dup": 13
  }],
  234: [function (require, module, exports) {
    arguments[4][14][0].apply(exports, arguments);
  }, {
    "buffer": 102,
    "dup": 14,
    "util": 56
  }],
  235: [function (require, module, exports) {
    arguments[4][15][0].apply(exports, arguments);
  }, {
    "_process": 276,
    "dup": 15
  }],
  236: [function (require, module, exports) {
    arguments[4][16][0].apply(exports, arguments);
  }, {
    "../../../errors": 227,
    "dup": 16
  }],
  237: [function (require, module, exports) {
    arguments[4][17][0].apply(exports, arguments);
  }, {
    "dup": 17
  }],
  238: [function (require, module, exports) {
    arguments[4][18][0].apply(exports, arguments);
  }, {
    "../../../errors": 227,
    "./end-of-stream": 236,
    "dup": 18
  }],
  239: [function (require, module, exports) {
    arguments[4][19][0].apply(exports, arguments);
  }, {
    "../../../errors": 227,
    "dup": 19
  }],
  240: [function (require, module, exports) {
    arguments[4][20][0].apply(exports, arguments);
  }, {
    "dup": 20,
    "events": 175
  }],
  241: [function (require, module, exports) {
    arguments[4][21][0].apply(exports, arguments);
  }, {
    "./lib/_stream_duplex.js": 228,
    "./lib/_stream_passthrough.js": 229,
    "./lib/_stream_readable.js": 230,
    "./lib/_stream_transform.js": 231,
    "./lib/_stream_writable.js": 232,
    "./lib/internal/streams/end-of-stream.js": 236,
    "./lib/internal/streams/pipeline.js": 238,
    "dup": 21
  }],
  242: [function (require, module, exports) {
    var events = require('events');

    var inherits = require('inherits');

    module.exports = LRU;

    function LRU(opts) {
      if (!(this instanceof LRU)) return new LRU(opts);
      if (typeof opts === 'number') opts = {
        max: opts
      };
      if (!opts) opts = {};
      events.EventEmitter.call(this);
      this.cache = {};
      this.head = this.tail = null;
      this.length = 0;
      this.max = opts.max || 1000;
      this.maxAge = opts.maxAge || 0;
    }

    inherits(LRU, events.EventEmitter);
    Object.defineProperty(LRU.prototype, 'keys', {
      get: function get() {
        return Object.keys(this.cache);
      }
    });

    LRU.prototype.clear = function () {
      this.cache = {};
      this.head = this.tail = null;
      this.length = 0;
    };

    LRU.prototype.remove = function (key) {
      if (typeof key !== 'string') key = '' + key;
      if (!this.cache.hasOwnProperty(key)) return;
      var element = this.cache[key];
      delete this.cache[key];

      this._unlink(key, element.prev, element.next);

      return element.value;
    };

    LRU.prototype._unlink = function (key, prev, next) {
      this.length--;

      if (this.length === 0) {
        this.head = this.tail = null;
      } else {
        if (this.head === key) {
          this.head = prev;
          this.cache[this.head].next = null;
        } else if (this.tail === key) {
          this.tail = next;
          this.cache[this.tail].prev = null;
        } else {
          this.cache[prev].next = next;
          this.cache[next].prev = prev;
        }
      }
    };

    LRU.prototype.peek = function (key) {
      if (!this.cache.hasOwnProperty(key)) return;
      var element = this.cache[key];
      if (!this._checkAge(key, element)) return;
      return element.value;
    };

    LRU.prototype.set = function (key, value) {
      if (typeof key !== 'string') key = '' + key;
      var element;

      if (this.cache.hasOwnProperty(key)) {
        element = this.cache[key];
        element.value = value;
        if (this.maxAge) element.modified = Date.now(); // If it's already the head, there's nothing more to do:

        if (key === this.head) return value;

        this._unlink(key, element.prev, element.next);
      } else {
        element = {
          value: value,
          modified: 0,
          next: null,
          prev: null
        };
        if (this.maxAge) element.modified = Date.now();
        this.cache[key] = element; // Eviction is only possible if the key didn't already exist:

        if (this.length === this.max) this.evict();
      }

      this.length++;
      element.next = null;
      element.prev = this.head;
      if (this.head) this.cache[this.head].next = key;
      this.head = key;
      if (!this.tail) this.tail = key;
      return value;
    };

    LRU.prototype._checkAge = function (key, element) {
      if (this.maxAge && Date.now() - element.modified > this.maxAge) {
        this.remove(key);
        this.emit('evict', {
          key: key,
          value: element.value
        });
        return false;
      }

      return true;
    };

    LRU.prototype.get = function (key) {
      if (typeof key !== 'string') key = '' + key;
      if (!this.cache.hasOwnProperty(key)) return;
      var element = this.cache[key];
      if (!this._checkAge(key, element)) return;

      if (this.head !== key) {
        if (key === this.tail) {
          this.tail = element.next;
          this.cache[this.tail].prev = null;
        } else {
          // Set prev.next -> element.next:
          this.cache[element.prev].next = element.next;
        } // Set element.next.prev -> element.prev:


        this.cache[element.next].prev = element.prev; // Element is the new head

        this.cache[this.head].next = key;
        element.prev = this.head;
        element.next = null;
        this.head = key;
      }

      return element.value;
    };

    LRU.prototype.evict = function () {
      if (!this.tail) return;
      var key = this.tail;
      var value = this.remove(this.tail);
      this.emit('evict', {
        key: key,
        value: value
      });
    };
  }, {
    "events": 175,
    "inherits": 217
  }],
  243: [function (require, module, exports) {
    'use strict';

    var inherits = require('inherits');

    var HashBase = require('hash-base');

    var Buffer = require('safe-buffer').Buffer;

    var ARRAY16 = new Array(16);

    function MD5() {
      HashBase.call(this, 64); // state

      this._a = 0x67452301;
      this._b = 0xefcdab89;
      this._c = 0x98badcfe;
      this._d = 0x10325476;
    }

    inherits(MD5, HashBase);

    MD5.prototype._update = function () {
      var M = ARRAY16;

      for (var i = 0; i < 16; ++i) {
        M[i] = this._block.readInt32LE(i * 4);
      }

      var a = this._a;
      var b = this._b;
      var c = this._c;
      var d = this._d;
      a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
      d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
      c = fnF(c, d, a, b, M[2], 0x242070db, 17);
      b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
      a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
      d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
      c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
      b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
      a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
      d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
      c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
      b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
      a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
      d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
      c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
      b = fnF(b, c, d, a, M[15], 0x49b40821, 22);
      a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
      d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
      c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
      b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
      a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
      d = fnG(d, a, b, c, M[10], 0x02441453, 9);
      c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
      b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
      a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
      d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
      c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
      b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
      a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
      d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
      c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
      b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);
      a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
      d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
      c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
      b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
      a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
      d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
      c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
      b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
      a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
      d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
      c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
      b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
      a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
      d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
      c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
      b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);
      a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
      d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
      c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
      b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
      a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
      d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
      c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
      b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
      a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
      d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
      c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
      b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
      a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
      d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
      c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
      b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);
      this._a = this._a + a | 0;
      this._b = this._b + b | 0;
      this._c = this._c + c | 0;
      this._d = this._d + d | 0;
    };

    MD5.prototype._digest = function () {
      // create padding and handle blocks
      this._block[this._blockOffset++] = 0x80;

      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);

        this._update();

        this._blockOffset = 0;
      }

      this._block.fill(0, this._blockOffset, 56);

      this._block.writeUInt32LE(this._length[0], 56);

      this._block.writeUInt32LE(this._length[1], 60);

      this._update(); // produce result


      var buffer = Buffer.allocUnsafe(16);
      buffer.writeInt32LE(this._a, 0);
      buffer.writeInt32LE(this._b, 4);
      buffer.writeInt32LE(this._c, 8);
      buffer.writeInt32LE(this._d, 12);
      return buffer;
    };

    function rotl(x, n) {
      return x << n | x >>> 32 - n;
    }

    function fnF(a, b, c, d, m, k, s) {
      return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
    }

    function fnG(a, b, c, d, m, k, s) {
      return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
    }

    function fnH(a, b, c, d, m, k, s) {
      return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
    }

    function fnI(a, b, c, d, m, k, s) {
      return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
    }

    module.exports = MD5;
  }, {
    "hash-base": 180,
    "inherits": 217,
    "safe-buffer": 314
  }],
  244: [function (require, module, exports) {
    var bn = require('bn.js');

    var brorand = require('brorand');

    function MillerRabin(rand) {
      this.rand = rand || new brorand.Rand();
    }

    module.exports = MillerRabin;

    MillerRabin.create = function create(rand) {
      return new MillerRabin(rand);
    };

    MillerRabin.prototype._randbelow = function _randbelow(n) {
      var len = n.bitLength();
      var min_bytes = Math.ceil(len / 8); // Generage random bytes until a number less than n is found.
      // This ensures that 0..n-1 have an equal probability of being selected.

      do {
        var a = new bn(this.rand.generate(min_bytes));
      } while (a.cmp(n) >= 0);

      return a;
    };

    MillerRabin.prototype._randrange = function _randrange(start, stop) {
      // Generate a random number greater than or equal to start and less than stop.
      var size = stop.sub(start);
      return start.add(this._randbelow(size));
    };

    MillerRabin.prototype.test = function test(n, k, cb) {
      var len = n.bitLength();
      var red = bn.mont(n);
      var rone = new bn(1).toRed(red);
      if (!k) k = Math.max(1, len / 48 | 0); // Find d and s, (n - 1) = (2 ^ s) * d;

      var n1 = n.subn(1);

      for (var s = 0; !n1.testn(s); s++) {}

      var d = n.shrn(s);
      var rn1 = n1.toRed(red);
      var prime = true;

      for (; k > 0; k--) {
        var a = this._randrange(new bn(2), n1);

        if (cb) cb(a);
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;

        for (var i = 1; i < s; i++) {
          x = x.redSqr();
          if (x.cmp(rone) === 0) return false;
          if (x.cmp(rn1) === 0) break;
        }

        if (i === s) return false;
      }

      return prime;
    };

    MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
      var len = n.bitLength();
      var red = bn.mont(n);
      var rone = new bn(1).toRed(red);
      if (!k) k = Math.max(1, len / 48 | 0); // Find d and s, (n - 1) = (2 ^ s) * d;

      var n1 = n.subn(1);

      for (var s = 0; !n1.testn(s); s++) {}

      var d = n.shrn(s);
      var rn1 = n1.toRed(red);

      for (; k > 0; k--) {
        var a = this._randrange(new bn(2), n1);

        var g = n.gcd(a);
        if (g.cmpn(1) !== 0) return g;
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;

        for (var i = 1; i < s; i++) {
          x = x.redSqr();
          if (x.cmp(rone) === 0) return x.fromRed().subn(1).gcd(n);
          if (x.cmp(rn1) === 0) break;
        }

        if (i === s) {
          x = x.redSqr();
          return x.fromRed().subn(1).gcd(n);
        }
      }

      return false;
    };
  }, {
    "bn.js": 54,
    "brorand": 55
  }],
  245: [function (require, module, exports) {
    module.exports = assert;

    function assert(val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    assert.equal = function assertEqual(l, r, msg) {
      if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
    };
  }, {}],
  246: [function (require, module, exports) {
    'use strict';

    var utils = exports;

    function toArray(msg, enc) {
      if (Array.isArray(msg)) return msg.slice();
      if (!msg) return [];
      var res = [];

      if (typeof msg !== 'string') {
        for (var i = 0; i < msg.length; i++) {
          res[i] = msg[i] | 0;
        }

        return res;
      }

      if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0) msg = '0' + msg;

        for (var i = 0; i < msg.length; i += 2) {
          res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 0xff;
          if (hi) res.push(hi, lo);else res.push(lo);
        }
      }

      return res;
    }

    utils.toArray = toArray;

    function zero2(word) {
      if (word.length === 1) return '0' + word;else return word;
    }

    utils.zero2 = zero2;

    function toHex(msg) {
      var res = '';

      for (var i = 0; i < msg.length; i++) {
        res += zero2(msg[i].toString(16));
      }

      return res;
    }

    utils.toHex = toHex;

    utils.encode = function encode(arr, enc) {
      if (enc === 'hex') return toHex(arr);else return arr;
    };
  }, {}],
  247: [function (require, module, exports) {
    var delay = require('delay');

    var eos = require('end-of-stream-promise');

    var defer = require('promise-defer');

    var randomize = require('randomize-array');

    var distance = require('xor-distance');

    var PQueue = require('p-queue').default;

    var EventEmitter = require('events');

    var DEFAULT_SAMPLE_SIZE = 10;
    var DEFAULT_PERCENT_FAR = 0.33;
    var DEFAULT_LOOKUP_TIMEOUT = 1000;
    var DEFAULT_MAX_PEERS = 4;

    module.exports = /*#__PURE__*/function (_EventEmitter9) {
      _inherits(MMST, _EventEmitter9);

      var _super14 = _createSuper(MMST);

      function MMST(_ref21) {
        var _this37;

        var id = _ref21.id,
            lookup = _ref21.lookup,
            connect = _ref21.connect,
            _ref21$sampleSize = _ref21.sampleSize,
            sampleSize = _ref21$sampleSize === void 0 ? DEFAULT_SAMPLE_SIZE : _ref21$sampleSize,
            _ref21$percentFar = _ref21.percentFar,
            percentFar = _ref21$percentFar === void 0 ? DEFAULT_PERCENT_FAR : _ref21$percentFar,
            _ref21$maxPeers = _ref21.maxPeers,
            maxPeers = _ref21$maxPeers === void 0 ? DEFAULT_MAX_PEERS : _ref21$maxPeers,
            _ref21$lookupTimeout = _ref21.lookupTimeout,
            lookupTimeout = _ref21$lookupTimeout === void 0 ? DEFAULT_LOOKUP_TIMEOUT : _ref21$lookupTimeout,
            _ref21$queueTimeout = _ref21.queueTimeout,
            queueTimeout = _ref21$queueTimeout === void 0 ? lookupTimeout + 2 * 1000 : _ref21$queueTimeout;

        _classCallCheck2(this, MMST);

        _this37 = _super14.call(this);
        _this37.id = id;
        _this37._lookup = lookup;
        _this37._connect = connect;
        _this37.sampleSize = sampleSize;
        _this37.percentFar = percentFar;
        _this37.maxPeers = maxPeers;

        if (lookupTimeout > queueTimeout) {
          throw new Error('queueTimeout must be higher than lookupTimeout');
        }

        _this37.lookupTimeout = lookupTimeout;
        _this37.queue = new PQueue({
          concurrency: 1,
          timeout: queueTimeout
        });
        _this37.connectedPeers = new Set();
        _this37.hasConnectedFar = false;
        _this37.destroyed = false;
        return _this37;
      }

      _createClass2(MMST, [{
        key: "shouldHandleIncoming",
        value: function shouldHandleIncoming() {
          return this.connectedPeers.size < this.maxPeers;
        } // This should be invoked when there's an incoming connection

      }, {
        key: "handleIncoming",
        value: function handleIncoming(id, connection) {
          // If we reached our max number of connections disconnect new peers
          if (!this.shouldHandleIncoming(id)) {
            connection.close();
            return;
          }

          this.addConnection(id, connection);
        } // Used internally

      }, {
        key: "addConnection",
        value: function addConnection(id, connection) {
          var _this38 = this;

          var stringId = id.toString('hex');
          this.connectedPeers.add(stringId);
          connection.once('close', function () {
            _this38.connectedPeers.delete(stringId);

            _this38.queue.add(function () {
              return _this38.run();
            });
          });
        } // Run the algorithm

      }, {
        key: "run",
        value: function () {
          var _run3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {
            var _this39 = this;

            var found, stream, gotEnough, finish, sample, connected, _iterator8, _step8, peer, stringId, connection, chanceFar, _iterator9, _step9, _peer, _stringId, _connection;

            return regeneratorRuntime.wrap(function _callee22$(_context22) {
              while (1) {
                switch (_context22.prev = _context22.next) {
                  case 0:
                    if (this.shouldHandleIncoming()) {
                      _context22.next = 2;
                      break;
                    }

                    return _context22.abrupt("return");

                  case 2:
                    if (!this.destroyed) {
                      _context22.next = 4;
                      break;
                    }

                    return _context22.abrupt("return");

                  case 4:
                    found = [];
                    stream = this._lookup();
                    gotEnough = defer();
                    finish = Promise.race([eos(stream), delay(this.lookupTimeout), gotEnough.promise]);
                    stream.on('data', function (peers) {
                      // Build up array of peers
                      found.push.apply(found, _toConsumableArray(peers)); // Once the array has `sampleSize`, start connecting

                      if (found.length >= _this39.sampleSize) gotEnough.resolve();
                    }); // Start looking up peers, with timeout

                    _context22.next = 11;
                    return finish;

                  case 11:
                    if (!this.destroyed) {
                      _context22.next = 13;
                      break;
                    }

                    return _context22.abrupt("return");

                  case 13:
                    // Prep the peer sample
                    sample = found.slice(); // If it's more than `sampleSize`, randomize the list and take sampleSize

                    if (sample.length > this.sampleSize) {
                      sample = randomize(found).slice(0, this.sampleSize);
                    } // Sort by XOR distance, closest peers first


                    sample.sort(function (a, b) {
                      return distance.gt(distance(_this39.id, a), distance(_this39.id, b));
                    });
                    connected = false; // Connect to closest peer that isn't connected

                    _iterator8 = _createForOfIteratorHelper(sample);
                    _context22.prev = 18;

                    _iterator8.s();

                  case 20:
                    if ((_step8 = _iterator8.n()).done) {
                      _context22.next = 40;
                      break;
                    }

                    peer = _step8.value;

                    if (!this.destroyed) {
                      _context22.next = 24;
                      break;
                    }

                    return _context22.abrupt("return");

                  case 24:
                    stringId = peer.toString('hex');

                    if (!this.connectedPeers.has(stringId)) {
                      _context22.next = 27;
                      break;
                    }

                    return _context22.abrupt("continue", 38);

                  case 27:
                    _context22.prev = 27;
                    _context22.next = 30;
                    return this._connect(peer);

                  case 30:
                    connection = _context22.sent;
                    connected = true;
                    this.addConnection(peer, connection);
                    return _context22.abrupt("break", 40);

                  case 36:
                    _context22.prev = 36;
                    _context22.t0 = _context22["catch"](27);

                  case 38:
                    _context22.next = 20;
                    break;

                  case 40:
                    _context22.next = 45;
                    break;

                  case 42:
                    _context22.prev = 42;
                    _context22.t1 = _context22["catch"](18);

                    _iterator8.e(_context22.t1);

                  case 45:
                    _context22.prev = 45;

                    _iterator8.f();

                    return _context22.finish(45);

                  case 48:
                    if (connected) {
                      _context22.next = 51;
                      break;
                    }

                    // Let the application know that we were unable to connect to any peer
                    this.emit('nopeers');
                    return _context22.abrupt("return");

                  case 51:
                    if (!this.hasConnectedFar) {
                      _context22.next = 53;
                      break;
                    }

                    return _context22.abrupt("return");

                  case 53:
                    if (!(this.connectedPeers.size >= this.maxPeers)) {
                      _context22.next = 55;
                      break;
                    }

                    return _context22.abrupt("return");

                  case 55:
                    // Generate a random number [0, 1)
                    chanceFar = Math.random(); // If > `percentFar` return

                    if (!(chanceFar > this.percentFar)) {
                      _context22.next = 58;
                      break;
                    }

                    return _context22.abrupt("return");

                  case 58:
                    // Order peers to have furthest first
                    sample.reverse(); // Find furthest peer that isn't already connected

                    _iterator9 = _createForOfIteratorHelper(sample);
                    _context22.prev = 60;

                    _iterator9.s();

                  case 62:
                    if ((_step9 = _iterator9.n()).done) {
                      _context22.next = 83;
                      break;
                    }

                    _peer = _step9.value;

                    if (!this.destroyed) {
                      _context22.next = 66;
                      break;
                    }

                    return _context22.abrupt("return");

                  case 66:
                    _stringId = _peer.toString('hex');

                    if (!this.connectedPeers.has(_stringId)) {
                      _context22.next = 69;
                      break;
                    }

                    return _context22.abrupt("continue", 81);

                  case 69:
                    _context22.prev = 69;
                    _context22.next = 72;
                    return this._connect(_peer);

                  case 72:
                    _connection = _context22.sent;
                    this.addConnection(_peer, _connection);
                    this.hasConnectedFar = true; // Listen on connection close and set `hasConnectedFar` false

                    _connection.once('close', function () {
                      _this39.hasConnectedFar = false;
                    });

                    return _context22.abrupt("break", 83);

                  case 79:
                    _context22.prev = 79;
                    _context22.t2 = _context22["catch"](69);

                  case 81:
                    _context22.next = 62;
                    break;

                  case 83:
                    _context22.next = 88;
                    break;

                  case 85:
                    _context22.prev = 85;
                    _context22.t3 = _context22["catch"](60);

                    _iterator9.e(_context22.t3);

                  case 88:
                    _context22.prev = 88;

                    _iterator9.f();

                    return _context22.finish(88);

                  case 91:
                  case "end":
                    return _context22.stop();
                }
              }
            }, _callee22, this, [[18, 42, 45, 48], [27, 36], [60, 85, 88, 91], [69, 79]]);
          }));

          function run() {
            return _run3.apply(this, arguments);
          }

          return run;
        }()
      }, {
        key: "destroy",
        value: function () {
          var _destroy = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23() {
            return regeneratorRuntime.wrap(function _callee23$(_context23) {
              while (1) {
                switch (_context23.prev = _context23.next) {
                  case 0:
                    // Set flag saying that this is destroyed to prevent looping
                    this.destroyed = true;

                  case 1:
                  case "end":
                    return _context23.stop();
                }
              }
            }, _callee23, this);
          }));

          function destroy() {
            return _destroy.apply(this, arguments);
          }

          return destroy;
        }()
      }]);

      return MMST;
    }(EventEmitter);
  }, {
    "delay": 127,
    "end-of-stream-promise": 155,
    "events": 175,
    "p-queue": 257,
    "promise-defer": 277,
    "randomize-array": 293,
    "xor-distance": 427
  }],
  248: [function (require, module, exports) {
    /**
     * Helpers.
     */
    var s = 1000;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    /**
     * Parse or format the given `val`.
     *
     * Options:
     *
     *  - `long` verbose formatting [false]
     *
     * @param {String|Number} val
     * @param {Object} [options]
     * @throws {Error} throw an error if val is not a non-empty string or a number
     * @return {String|Number}
     * @api public
     */

    module.exports = function (val, options) {
      options = options || {};

      var type = _typeof2(val);

      if (type === 'string' && val.length > 0) {
        return parse(val);
      } else if (type === 'number' && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }

      throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
    };
    /**
     * Parse the given `str` and return milliseconds.
     *
     * @param {String} str
     * @return {Number}
     * @api private
     */


    function parse(str) {
      str = String(str);

      if (str.length > 100) {
        return;
      }

      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);

      if (!match) {
        return;
      }

      var n = parseFloat(match[1]);
      var type = (match[2] || 'ms').toLowerCase();

      switch (type) {
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
          return n * y;

        case 'weeks':
        case 'week':
        case 'w':
          return n * w;

        case 'days':
        case 'day':
        case 'd':
          return n * d;

        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
          return n * h;

        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
          return n * m;

        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
          return n * s;

        case 'milliseconds':
        case 'millisecond':
        case 'msecs':
        case 'msec':
        case 'ms':
          return n;

        default:
          return undefined;
      }
    }
    /**
     * Short format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */


    function fmtShort(ms) {
      var msAbs = Math.abs(ms);

      if (msAbs >= d) {
        return Math.round(ms / d) + 'd';
      }

      if (msAbs >= h) {
        return Math.round(ms / h) + 'h';
      }

      if (msAbs >= m) {
        return Math.round(ms / m) + 'm';
      }

      if (msAbs >= s) {
        return Math.round(ms / s) + 's';
      }

      return ms + 'ms';
    }
    /**
     * Long format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */


    function fmtLong(ms) {
      var msAbs = Math.abs(ms);

      if (msAbs >= d) {
        return plural(ms, msAbs, d, 'day');
      }

      if (msAbs >= h) {
        return plural(ms, msAbs, h, 'hour');
      }

      if (msAbs >= m) {
        return plural(ms, msAbs, m, 'minute');
      }

      if (msAbs >= s) {
        return plural(ms, msAbs, s, 'second');
      }

      return ms + ' ms';
    }
    /**
     * Pluralization helper.
     */


    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
    }
  }, {}],
  249: [function (require, module, exports) {
    assert.notEqual = notEqual;
    assert.notOk = notOk;
    assert.equal = equal;
    assert.ok = assert;
    module.exports = assert;

    function equal(a, b, m) {
      assert(a == b, m); // eslint-disable-line eqeqeq
    }

    function notEqual(a, b, m) {
      assert(a != b, m); // eslint-disable-line eqeqeq
    }

    function notOk(t, m) {
      assert(!t, m);
    }

    function assert(t, m) {
      if (!t) throw new Error(m || 'AssertionError');
    }
  }, {}],
  250: [function (require, module, exports) {
    var splice = require('remove-array-items');

    var nanotiming = require('nanotiming');

    var assert = require('assert');

    module.exports = Nanobus;

    function Nanobus(name) {
      if (!(this instanceof Nanobus)) return new Nanobus(name);
      this._name = name || 'nanobus';
      this._starListeners = [];
      this._listeners = {};
    }

    Nanobus.prototype.emit = function (eventName) {
      assert.ok(typeof eventName === 'string' || _typeof2(eventName) === 'symbol', 'nanobus.emit: eventName should be type string or symbol');
      var data = [];

      for (var i = 1, len = arguments.length; i < len; i++) {
        data.push(arguments[i]);
      }

      var emitTiming = nanotiming(this._name + "('" + eventName.toString() + "')");
      var listeners = this._listeners[eventName];

      if (listeners && listeners.length > 0) {
        this._emit(this._listeners[eventName], data);
      }

      if (this._starListeners.length > 0) {
        this._emit(this._starListeners, eventName, data, emitTiming.uuid);
      }

      emitTiming();
      return this;
    };

    Nanobus.prototype.on = Nanobus.prototype.addListener = function (eventName, listener) {
      assert.ok(typeof eventName === 'string' || _typeof2(eventName) === 'symbol', 'nanobus.on: eventName should be type string or symbol');
      assert.equal(_typeof2(listener), 'function', 'nanobus.on: listener should be type function');

      if (eventName === '*') {
        this._starListeners.push(listener);
      } else {
        if (!this._listeners[eventName]) this._listeners[eventName] = [];

        this._listeners[eventName].push(listener);
      }

      return this;
    };

    Nanobus.prototype.prependListener = function (eventName, listener) {
      assert.ok(typeof eventName === 'string' || _typeof2(eventName) === 'symbol', 'nanobus.prependListener: eventName should be type string or symbol');
      assert.equal(_typeof2(listener), 'function', 'nanobus.prependListener: listener should be type function');

      if (eventName === '*') {
        this._starListeners.unshift(listener);
      } else {
        if (!this._listeners[eventName]) this._listeners[eventName] = [];

        this._listeners[eventName].unshift(listener);
      }

      return this;
    };

    Nanobus.prototype.once = function (eventName, listener) {
      assert.ok(typeof eventName === 'string' || _typeof2(eventName) === 'symbol', 'nanobus.once: eventName should be type string or symbol');
      assert.equal(_typeof2(listener), 'function', 'nanobus.once: listener should be type function');
      var self = this;
      this.on(eventName, once);

      function once() {
        listener.apply(self, arguments);
        self.removeListener(eventName, once);
      }

      return this;
    };

    Nanobus.prototype.prependOnceListener = function (eventName, listener) {
      assert.ok(typeof eventName === 'string' || _typeof2(eventName) === 'symbol', 'nanobus.prependOnceListener: eventName should be type string or symbol');
      assert.equal(_typeof2(listener), 'function', 'nanobus.prependOnceListener: listener should be type function');
      var self = this;
      this.prependListener(eventName, once);

      function once() {
        listener.apply(self, arguments);
        self.removeListener(eventName, once);
      }

      return this;
    };

    Nanobus.prototype.removeListener = function (eventName, listener) {
      assert.ok(typeof eventName === 'string' || _typeof2(eventName) === 'symbol', 'nanobus.removeListener: eventName should be type string or symbol');
      assert.equal(_typeof2(listener), 'function', 'nanobus.removeListener: listener should be type function');

      if (eventName === '*') {
        this._starListeners = this._starListeners.slice();
        return remove(this._starListeners, listener);
      } else {
        if (typeof this._listeners[eventName] !== 'undefined') {
          this._listeners[eventName] = this._listeners[eventName].slice();
        }

        return remove(this._listeners[eventName], listener);
      }

      function remove(arr, listener) {
        if (!arr) return;
        var index = arr.indexOf(listener);

        if (index !== -1) {
          splice(arr, index, 1);
          return true;
        }
      }
    };

    Nanobus.prototype.removeAllListeners = function (eventName) {
      if (eventName) {
        if (eventName === '*') {
          this._starListeners = [];
        } else {
          this._listeners[eventName] = [];
        }
      } else {
        this._starListeners = [];
        this._listeners = {};
      }

      return this;
    };

    Nanobus.prototype.listeners = function (eventName) {
      var listeners = eventName !== '*' ? this._listeners[eventName] : this._starListeners;
      var ret = [];

      if (listeners) {
        var ilength = listeners.length;

        for (var i = 0; i < ilength; i++) {
          ret.push(listeners[i]);
        }
      }

      return ret;
    };

    Nanobus.prototype._emit = function (arr, eventName, data, uuid) {
      if (typeof arr === 'undefined') return;
      if (arr.length === 0) return;

      if (data === undefined) {
        data = eventName;
        eventName = null;
      }

      if (eventName) {
        if (uuid !== undefined) {
          data = [eventName].concat(data, uuid);
        } else {
          data = [eventName].concat(data);
        }
      }

      var length = arr.length;

      for (var i = 0; i < length; i++) {
        var listener = arr[i];
        listener.apply(listener, data);
      }
    };
  }, {
    "assert": 249,
    "nanotiming": 252,
    "remove-array-items": 311
  }],
  251: [function (require, module, exports) {
    var assert = require('assert');

    var hasWindow = typeof window !== 'undefined';

    function createScheduler() {
      var scheduler;

      if (hasWindow) {
        if (!window._nanoScheduler) window._nanoScheduler = new NanoScheduler(true);
        scheduler = window._nanoScheduler;
      } else {
        scheduler = new NanoScheduler();
      }

      return scheduler;
    }

    function NanoScheduler(hasWindow) {
      this.hasWindow = hasWindow;
      this.hasIdle = this.hasWindow && window.requestIdleCallback;
      this.method = this.hasIdle ? window.requestIdleCallback.bind(window) : this.setTimeout;
      this.scheduled = false;
      this.queue = [];
    }

    NanoScheduler.prototype.push = function (cb) {
      assert.equal(_typeof2(cb), 'function', 'nanoscheduler.push: cb should be type function');
      this.queue.push(cb);
      this.schedule();
    };

    NanoScheduler.prototype.schedule = function () {
      if (this.scheduled) return;
      this.scheduled = true;
      var self = this;
      this.method(function (idleDeadline) {
        var cb;

        while (self.queue.length && idleDeadline.timeRemaining() > 0) {
          cb = self.queue.shift();
          cb(idleDeadline);
        }

        self.scheduled = false;
        if (self.queue.length) self.schedule();
      });
    };

    NanoScheduler.prototype.setTimeout = function (cb) {
      setTimeout(cb, 0, {
        timeRemaining: function timeRemaining() {
          return 1;
        }
      });
    };

    module.exports = createScheduler;
  }, {
    "assert": 249
  }],
  252: [function (require, module, exports) {
    var scheduler = require('nanoscheduler')();

    var assert = require('assert');

    var perf;
    nanotiming.disabled = true;

    try {
      perf = window.performance;
      nanotiming.disabled = window.localStorage.DISABLE_NANOTIMING === 'true' || !perf.mark;
    } catch (e) {}

    module.exports = nanotiming;

    function nanotiming(name) {
      assert.equal(_typeof2(name), 'string', 'nanotiming: name should be type string');
      if (nanotiming.disabled) return noop;
      var uuid = (perf.now() * 10000).toFixed() % Number.MAX_SAFE_INTEGER;
      var startName = 'start-' + uuid + '-' + name;
      perf.mark(startName);

      function end(cb) {
        var endName = 'end-' + uuid + '-' + name;
        perf.mark(endName);
        scheduler.push(function () {
          var err = null;

          try {
            var measureName = name + ' [' + uuid + ']';
            perf.measure(measureName, startName, endName);
            perf.clearMarks(startName);
            perf.clearMarks(endName);
          } catch (e) {
            err = e;
          }

          if (cb) cb(err, name);
        });
      }

      end.uuid = uuid;
      return end;
    }

    function noop(cb) {
      if (cb) {
        scheduler.push(function () {
          cb(new Error('nanotiming: performance API unavailable'));
        });
      }
    }
  }, {
    "assert": 249,
    "nanoscheduler": 251
  }],
  253: [function (require, module, exports) {
    var wrappy = require('wrappy');

    module.exports = wrappy(once);
    module.exports.strict = wrappy(onceStrict);
    once.proto = once(function () {
      Object.defineProperty(Function.prototype, 'once', {
        value: function value() {
          return once(this);
        },
        configurable: true
      });
      Object.defineProperty(Function.prototype, 'onceStrict', {
        value: function value() {
          return onceStrict(this);
        },
        configurable: true
      });
    });

    function once(fn) {
      var f = function f() {
        if (f.called) return f.value;
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };

      f.called = false;
      return f;
    }

    function onceStrict(fn) {
      var f = function f() {
        if (f.called) throw new Error(f.onceError);
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };

      var name = fn.name || 'Function wrapped with `once`';
      f.onceError = name + " shouldn't be called more than once";
      f.called = false;
      return f;
    }
  }, {
    "wrappy": 425
  }],
  254: [function (require, module, exports) {
    'use strict';

    var pDebounce = function pDebounce(fn, wait) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (!Number.isFinite(wait)) {
        throw new TypeError('Expected `wait` to be a finite number');
      }

      var leadingValue;
      var timer;
      var resolveList = [];
      return function () {
        var _this40 = this;

        for (var _len10 = arguments.length, arguments_ = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
          arguments_[_key10] = arguments[_key10];
        }

        return new Promise(function (resolve) {
          var runImmediately = options.leading && !timer;
          clearTimeout(timer);
          timer = setTimeout(function () {
            timer = null;
            var result = options.leading ? leadingValue : fn.apply(_this40, arguments_);

            var _iterator10 = _createForOfIteratorHelper(resolveList),
                _step10;

            try {
              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                resolve = _step10.value;
                resolve(result);
              }
            } catch (err) {
              _iterator10.e(err);
            } finally {
              _iterator10.f();
            }

            resolveList = [];
          }, wait);

          if (runImmediately) {
            leadingValue = fn.apply(_this40, arguments_);
            resolve(leadingValue);
          } else {
            resolveList.push(resolve);
          }
        });
      };
    };

    module.exports = pDebounce; // TODO: Remove this for the next major release

    module.exports.default = pDebounce;
  }, {}],
  255: [function (require, module, exports) {
    'use strict';

    module.exports = function (promise, onFinally) {
      onFinally = onFinally || function () {};

      return promise.then(function (val) {
        return new Promise(function (resolve) {
          resolve(onFinally());
        }).then(function () {
          return val;
        });
      }, function (err) {
        return new Promise(function (resolve) {
          resolve(onFinally());
        }).then(function () {
          throw err;
        });
      });
    };
  }, {}],
  256: [function (require, module, exports) {
    'use strict';

    var symbolEnd = Symbol('pForever.end');

    var pForever = /*#__PURE__*/function () {
      var _ref22 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24(fn, previousValue) {
        var newValue;
        return regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                _context24.t0 = fn;
                _context24.next = 3;
                return previousValue;

              case 3:
                _context24.t1 = _context24.sent;
                _context24.next = 6;
                return (0, _context24.t0)(_context24.t1);

              case 6:
                newValue = _context24.sent;

                if (!(newValue === symbolEnd)) {
                  _context24.next = 9;
                  break;
                }

                return _context24.abrupt("return");

              case 9:
                return _context24.abrupt("return", pForever(fn, newValue));

              case 10:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24);
      }));

      return function pForever(_x27, _x28) {
        return _ref22.apply(this, arguments);
      };
    }();

    module.exports = pForever; // TODO: Remove this for the next major release

    module.exports.default = pForever;
    module.exports.end = symbolEnd;
  }, {}],
  257: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var EventEmitter = require("eventemitter3");

    var p_timeout_1 = require("p-timeout");

    var priority_queue_1 = require("./priority-queue"); // eslint-disable-next-line @typescript-eslint/no-empty-function


    var empty = function empty() {};

    var timeoutError = new p_timeout_1.TimeoutError();
    /**
    Promise queue with concurrency control.
    */

    var PQueue = /*#__PURE__*/function (_EventEmitter10) {
      _inherits(PQueue, _EventEmitter10);

      var _super15 = _createSuper(PQueue);

      function PQueue(options) {
        var _this41;

        _classCallCheck2(this, PQueue);

        var _a, _b, _c, _d;

        _this41 = _super15.call(this);
        _this41._intervalCount = 0;
        _this41._intervalEnd = 0;
        _this41._pendingCount = 0;
        _this41._resolveEmpty = empty;
        _this41._resolveIdle = empty; // eslint-disable-next-line @typescript-eslint/consistent-type-assertions

        options = Object.assign({
          carryoverConcurrencyCount: false,
          intervalCap: Infinity,
          interval: 0,
          concurrency: Infinity,
          autoStart: true,
          queueClass: priority_queue_1.default
        }, options);

        if (!(typeof options.intervalCap === 'number' && options.intervalCap >= 1)) {
          throw new TypeError("Expected `intervalCap` to be a number from 1 and up, got `".concat((_b = (_a = options.intervalCap) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '', "` (").concat(_typeof2(options.intervalCap), ")"));
        }

        if (options.interval === undefined || !(Number.isFinite(options.interval) && options.interval >= 0)) {
          throw new TypeError("Expected `interval` to be a finite number >= 0, got `".concat((_d = (_c = options.interval) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : '', "` (").concat(_typeof2(options.interval), ")"));
        }

        _this41._carryoverConcurrencyCount = options.carryoverConcurrencyCount;
        _this41._isIntervalIgnored = options.intervalCap === Infinity || options.interval === 0;
        _this41._intervalCap = options.intervalCap;
        _this41._interval = options.interval;
        _this41._queue = new options.queueClass();
        _this41._queueClass = options.queueClass;
        _this41.concurrency = options.concurrency;
        _this41._timeout = options.timeout;
        _this41._throwOnTimeout = options.throwOnTimeout === true;
        _this41._isPaused = options.autoStart === false;
        return _this41;
      }

      _createClass2(PQueue, [{
        key: "_next",
        value: function _next() {
          this._pendingCount--;

          this._tryToStartAnother();

          this.emit('next');
        }
      }, {
        key: "_resolvePromises",
        value: function _resolvePromises() {
          this._resolveEmpty();

          this._resolveEmpty = empty;

          if (this._pendingCount === 0) {
            this._resolveIdle();

            this._resolveIdle = empty;
            this.emit('idle');
          }
        }
      }, {
        key: "_onResumeInterval",
        value: function _onResumeInterval() {
          this._onInterval();

          this._initializeIntervalIfNeeded();

          this._timeoutId = undefined;
        }
      }, {
        key: "_isIntervalPaused",
        value: function _isIntervalPaused() {
          var _this42 = this;

          var now = Date.now();

          if (this._intervalId === undefined) {
            var delay = this._intervalEnd - now;

            if (delay < 0) {
              // Act as the interval was done
              // We don't need to resume it here because it will be resumed on line 160
              this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;
            } else {
              // Act as the interval is pending
              if (this._timeoutId === undefined) {
                this._timeoutId = setTimeout(function () {
                  _this42._onResumeInterval();
                }, delay);
              }

              return true;
            }
          }

          return false;
        }
      }, {
        key: "_tryToStartAnother",
        value: function _tryToStartAnother() {
          if (this._queue.size === 0) {
            // We can clear the interval ("pause")
            // Because we can redo it later ("resume")
            if (this._intervalId) {
              clearInterval(this._intervalId);
            }

            this._intervalId = undefined;

            this._resolvePromises();

            return false;
          }

          if (!this._isPaused) {
            var canInitializeInterval = !this._isIntervalPaused();

            if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {
              var job = this._queue.dequeue();

              if (!job) {
                return false;
              }

              this.emit('active');
              job();

              if (canInitializeInterval) {
                this._initializeIntervalIfNeeded();
              }

              return true;
            }
          }

          return false;
        }
      }, {
        key: "_initializeIntervalIfNeeded",
        value: function _initializeIntervalIfNeeded() {
          var _this43 = this;

          if (this._isIntervalIgnored || this._intervalId !== undefined) {
            return;
          }

          this._intervalId = setInterval(function () {
            _this43._onInterval();
          }, this._interval);
          this._intervalEnd = Date.now() + this._interval;
        }
      }, {
        key: "_onInterval",
        value: function _onInterval() {
          if (this._intervalCount === 0 && this._pendingCount === 0 && this._intervalId) {
            clearInterval(this._intervalId);
            this._intervalId = undefined;
          }

          this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;

          this._processQueue();
        }
        /**
        Executes all queued functions until it reaches the limit.
        */

      }, {
        key: "_processQueue",
        value: function _processQueue() {
          // eslint-disable-next-line no-empty
          while (this._tryToStartAnother()) {}
        }
      }, {
        key: "add",

        /**
        Adds a sync or async task to the queue. Always returns a promise.
        */
        value: function () {
          var _add = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26(fn) {
            var _this44 = this;

            var options,
                _args27 = arguments;
            return regeneratorRuntime.wrap(function _callee26$(_context26) {
              while (1) {
                switch (_context26.prev = _context26.next) {
                  case 0:
                    options = _args27.length > 1 && _args27[1] !== undefined ? _args27[1] : {};
                    return _context26.abrupt("return", new Promise(function (resolve, reject) {
                      var run = /*#__PURE__*/function () {
                        var _ref23 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25() {
                          var operation;
                          return regeneratorRuntime.wrap(function _callee25$(_context25) {
                            while (1) {
                              switch (_context25.prev = _context25.next) {
                                case 0:
                                  _this44._pendingCount++;
                                  _this44._intervalCount++;
                                  _context25.prev = 2;
                                  operation = _this44._timeout === undefined && options.timeout === undefined ? fn() : p_timeout_1.default(Promise.resolve(fn()), options.timeout === undefined ? _this44._timeout : options.timeout, function () {
                                    if (options.throwOnTimeout === undefined ? _this44._throwOnTimeout : options.throwOnTimeout) {
                                      reject(timeoutError);
                                    }

                                    return undefined;
                                  });
                                  _context25.t0 = resolve;
                                  _context25.next = 7;
                                  return operation;

                                case 7:
                                  _context25.t1 = _context25.sent;
                                  (0, _context25.t0)(_context25.t1);
                                  _context25.next = 14;
                                  break;

                                case 11:
                                  _context25.prev = 11;
                                  _context25.t2 = _context25["catch"](2);
                                  reject(_context25.t2);

                                case 14:
                                  _this44._next();

                                case 15:
                                case "end":
                                  return _context25.stop();
                              }
                            }
                          }, _callee25, null, [[2, 11]]);
                        }));

                        return function run() {
                          return _ref23.apply(this, arguments);
                        };
                      }();

                      _this44._queue.enqueue(run, options);

                      _this44._tryToStartAnother();

                      _this44.emit('add');
                    }));

                  case 2:
                  case "end":
                    return _context26.stop();
                }
              }
            }, _callee26);
          }));

          function add(_x29) {
            return _add.apply(this, arguments);
          }

          return add;
        }()
        /**
        Same as `.add()`, but accepts an array of sync or async functions.
         @returns A promise that resolves when all functions are resolved.
        */

      }, {
        key: "addAll",
        value: function () {
          var _addAll = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28(functions, options) {
            var _this45 = this;

            return regeneratorRuntime.wrap(function _callee28$(_context28) {
              while (1) {
                switch (_context28.prev = _context28.next) {
                  case 0:
                    return _context28.abrupt("return", Promise.all(functions.map( /*#__PURE__*/function () {
                      var _ref24 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(function_) {
                        return regeneratorRuntime.wrap(function _callee27$(_context27) {
                          while (1) {
                            switch (_context27.prev = _context27.next) {
                              case 0:
                                return _context27.abrupt("return", _this45.add(function_, options));

                              case 1:
                              case "end":
                                return _context27.stop();
                            }
                          }
                        }, _callee27);
                      }));

                      return function (_x32) {
                        return _ref24.apply(this, arguments);
                      };
                    }())));

                  case 1:
                  case "end":
                    return _context28.stop();
                }
              }
            }, _callee28);
          }));

          function addAll(_x30, _x31) {
            return _addAll.apply(this, arguments);
          }

          return addAll;
        }()
        /**
        Start (or resume) executing enqueued tasks within concurrency limit. No need to call this if queue is not paused (via `options.autoStart = false` or by `.pause()` method.)
        */

      }, {
        key: "start",
        value: function start() {
          if (!this._isPaused) {
            return this;
          }

          this._isPaused = false;

          this._processQueue();

          return this;
        }
        /**
        Put queue execution on hold.
        */

      }, {
        key: "pause",
        value: function pause() {
          this._isPaused = true;
        }
        /**
        Clear the queue.
        */

      }, {
        key: "clear",
        value: function clear() {
          this._queue = new this._queueClass();
        }
        /**
        Can be called multiple times. Useful if you for example add additional items at a later time.
         @returns A promise that settles when the queue becomes empty.
        */

      }, {
        key: "onEmpty",
        value: function () {
          var _onEmpty = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29() {
            var _this46 = this;

            return regeneratorRuntime.wrap(function _callee29$(_context29) {
              while (1) {
                switch (_context29.prev = _context29.next) {
                  case 0:
                    if (!(this._queue.size === 0)) {
                      _context29.next = 2;
                      break;
                    }

                    return _context29.abrupt("return");

                  case 2:
                    return _context29.abrupt("return", new Promise(function (resolve) {
                      var existingResolve = _this46._resolveEmpty;

                      _this46._resolveEmpty = function () {
                        existingResolve();
                        resolve();
                      };
                    }));

                  case 3:
                  case "end":
                    return _context29.stop();
                }
              }
            }, _callee29, this);
          }));

          function onEmpty() {
            return _onEmpty.apply(this, arguments);
          }

          return onEmpty;
        }()
        /**
        The difference with `.onEmpty` is that `.onIdle` guarantees that all work from the queue has finished. `.onEmpty` merely signals that the queue is empty, but it could mean that some promises haven't completed yet.
         @returns A promise that settles when the queue becomes empty, and all promises have completed; `queue.size === 0 && queue.pending === 0`.
        */

      }, {
        key: "onIdle",
        value: function () {
          var _onIdle = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30() {
            var _this47 = this;

            return regeneratorRuntime.wrap(function _callee30$(_context30) {
              while (1) {
                switch (_context30.prev = _context30.next) {
                  case 0:
                    if (!(this._pendingCount === 0 && this._queue.size === 0)) {
                      _context30.next = 2;
                      break;
                    }

                    return _context30.abrupt("return");

                  case 2:
                    return _context30.abrupt("return", new Promise(function (resolve) {
                      var existingResolve = _this47._resolveIdle;

                      _this47._resolveIdle = function () {
                        existingResolve();
                        resolve();
                      };
                    }));

                  case 3:
                  case "end":
                    return _context30.stop();
                }
              }
            }, _callee30, this);
          }));

          function onIdle() {
            return _onIdle.apply(this, arguments);
          }

          return onIdle;
        }()
        /**
        Size of the queue.
        */

      }, {
        key: "sizeBy",

        /**
        Size of the queue, filtered by the given options.
         For example, this can be used to find the number of items remaining in the queue with a specific priority level.
        */
        value: function sizeBy(options) {
          // eslint-disable-next-line unicorn/no-fn-reference-in-iterator
          return this._queue.filter(options).length;
        }
        /**
        Number of pending promises.
        */

      }, {
        key: "_doesIntervalAllowAnother",
        get: function get() {
          return this._isIntervalIgnored || this._intervalCount < this._intervalCap;
        }
      }, {
        key: "_doesConcurrentAllowAnother",
        get: function get() {
          return this._pendingCount < this._concurrency;
        }
      }, {
        key: "concurrency",
        get: function get() {
          return this._concurrency;
        },
        set: function set(newConcurrency) {
          if (!(typeof newConcurrency === 'number' && newConcurrency >= 1)) {
            throw new TypeError("Expected `concurrency` to be a number from 1 and up, got `".concat(newConcurrency, "` (").concat(_typeof2(newConcurrency), ")"));
          }

          this._concurrency = newConcurrency;

          this._processQueue();
        }
      }, {
        key: "size",
        get: function get() {
          return this._queue.size;
        }
      }, {
        key: "pending",
        get: function get() {
          return this._pendingCount;
        }
        /**
        Whether the queue is currently paused.
        */

      }, {
        key: "isPaused",
        get: function get() {
          return this._isPaused;
        }
      }, {
        key: "timeout",
        get: function get() {
          return this._timeout;
        }
        /**
        Set the timeout for future operations.
        */
        ,
        set: function set(milliseconds) {
          this._timeout = milliseconds;
        }
      }]);

      return PQueue;
    }(EventEmitter);

    exports.default = PQueue;
  }, {
    "./priority-queue": 259,
    "eventemitter3": 174,
    "p-timeout": 260
  }],
  258: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    }); // Port of lower_bound from https://en.cppreference.com/w/cpp/algorithm/lower_bound
    // Used to compute insertion index to keep queue sorted after insertion

    function lowerBound(array, value, comparator) {
      var first = 0;
      var count = array.length;

      while (count > 0) {
        var step = count / 2 | 0;
        var it = first + step;

        if (comparator(array[it], value) <= 0) {
          first = ++it;
          count -= step + 1;
        } else {
          count = step;
        }
      }

      return first;
    }

    exports.default = lowerBound;
  }, {}],
  259: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var lower_bound_1 = require("./lower-bound");

    var PriorityQueue = /*#__PURE__*/function () {
      function PriorityQueue() {
        _classCallCheck2(this, PriorityQueue);

        this._queue = [];
      }

      _createClass2(PriorityQueue, [{
        key: "enqueue",
        value: function enqueue(run, options) {
          options = Object.assign({
            priority: 0
          }, options);
          var element = {
            priority: options.priority,
            run: run
          };

          if (this.size && this._queue[this.size - 1].priority >= options.priority) {
            this._queue.push(element);

            return;
          }

          var index = lower_bound_1.default(this._queue, element, function (a, b) {
            return b.priority - a.priority;
          });

          this._queue.splice(index, 0, element);
        }
      }, {
        key: "dequeue",
        value: function dequeue() {
          var item = this._queue.shift();

          return item === null || item === void 0 ? void 0 : item.run;
        }
      }, {
        key: "filter",
        value: function filter(options) {
          return this._queue.filter(function (element) {
            return element.priority === options.priority;
          }).map(function (element) {
            return element.run;
          });
        }
      }, {
        key: "size",
        get: function get() {
          return this._queue.length;
        }
      }]);

      return PriorityQueue;
    }();

    exports.default = PriorityQueue;
  }, {
    "./lower-bound": 258
  }],
  260: [function (require, module, exports) {
    'use strict';

    var pFinally = require('p-finally');

    var TimeoutError = /*#__PURE__*/function (_Error2) {
      _inherits(TimeoutError, _Error2);

      var _super16 = _createSuper(TimeoutError);

      function TimeoutError(message) {
        var _this48;

        _classCallCheck2(this, TimeoutError);

        _this48 = _super16.call(this, message);
        _this48.name = 'TimeoutError';
        return _this48;
      }

      return TimeoutError;
    }( /*#__PURE__*/_wrapNativeSuper(Error));

    var pTimeout = function pTimeout(promise, milliseconds, fallback) {
      return new Promise(function (resolve, reject) {
        if (typeof milliseconds !== 'number' || milliseconds < 0) {
          throw new TypeError('Expected `milliseconds` to be a positive number');
        }

        if (milliseconds === Infinity) {
          resolve(promise);
          return;
        }

        var timer = setTimeout(function () {
          if (typeof fallback === 'function') {
            try {
              resolve(fallback());
            } catch (error) {
              reject(error);
            }

            return;
          }

          var message = typeof fallback === 'string' ? fallback : "Promise timed out after ".concat(milliseconds, " milliseconds");
          var timeoutError = fallback instanceof Error ? fallback : new TimeoutError(message);

          if (typeof promise.cancel === 'function') {
            promise.cancel();
          }

          reject(timeoutError);
        }, milliseconds); // TODO: Use native `finally` keyword when targeting Node.js 10

        pFinally( // eslint-disable-next-line promise/prefer-await-to-then
        promise.then(resolve, reject), function () {
          clearTimeout(timer);
        });
      });
    };

    module.exports = pTimeout; // TODO: Remove this for the next major release

    module.exports.default = pTimeout;
    module.exports.TimeoutError = TimeoutError;
  }, {
    "p-finally": 255
  }],
  261: [function (require, module, exports) {
    module.exports = {
      "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
      "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
      "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
      "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
      "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
      "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
      "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
      "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
      "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
      "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
      "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
      "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
    };
  }, {}],
  262: [function (require, module, exports) {
    // from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
    // Fedor, you are amazing.
    'use strict';

    var asn1 = require('asn1.js');

    exports.certificate = require('./certificate');
    var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
      this.seq().obj(this.key('version').int(), this.key('modulus').int(), this.key('publicExponent').int(), this.key('privateExponent').int(), this.key('prime1').int(), this.key('prime2').int(), this.key('exponent1').int(), this.key('exponent2').int(), this.key('coefficient').int());
    });
    exports.RSAPrivateKey = RSAPrivateKey;
    var RSAPublicKey = asn1.define('RSAPublicKey', function () {
      this.seq().obj(this.key('modulus').int(), this.key('publicExponent').int());
    });
    exports.RSAPublicKey = RSAPublicKey;
    var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
      this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
    });
    exports.PublicKey = PublicKey;
    var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
      this.seq().obj(this.key('algorithm').objid(), this.key('none').null_().optional(), this.key('curve').objid().optional(), this.key('params').seq().obj(this.key('p').int(), this.key('q').int(), this.key('g').int()).optional());
    });
    var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
      this.seq().obj(this.key('version').int(), this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPrivateKey').octstr());
    });
    exports.PrivateKey = PrivateKeyInfo;
    var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
      this.seq().obj(this.key('algorithm').seq().obj(this.key('id').objid(), this.key('decrypt').seq().obj(this.key('kde').seq().obj(this.key('id').objid(), this.key('kdeparams').seq().obj(this.key('salt').octstr(), this.key('iters').int())), this.key('cipher').seq().obj(this.key('algo').objid(), this.key('iv').octstr()))), this.key('subjectPrivateKey').octstr());
    });
    exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
    var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
      this.seq().obj(this.key('version').int(), this.key('p').int(), this.key('q').int(), this.key('g').int(), this.key('pub_key').int(), this.key('priv_key').int());
    });
    exports.DSAPrivateKey = DSAPrivateKey;
    exports.DSAparam = asn1.define('DSAparam', function () {
      this.int();
    });
    var ECPrivateKey = asn1.define('ECPrivateKey', function () {
      this.seq().obj(this.key('version').int(), this.key('privateKey').octstr(), this.key('parameters').optional().explicit(0).use(ECParameters), this.key('publicKey').optional().explicit(1).bitstr());
    });
    exports.ECPrivateKey = ECPrivateKey;
    var ECParameters = asn1.define('ECParameters', function () {
      this.choice({
        namedCurve: this.objid()
      });
    });
    exports.signature = asn1.define('signature', function () {
      this.seq().obj(this.key('r').int(), this.key('s').int());
    });
  }, {
    "./certificate": 263,
    "asn1.js": 30
  }],
  263: [function (require, module, exports) {
    // from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
    // thanks to @Rantanen
    'use strict';

    var asn = require('asn1.js');

    var Time = asn.define('Time', function () {
      this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
      });
    });
    var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
      this.seq().obj(this.key('type').objid(), this.key('value').any());
    });
    var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
      this.seq().obj(this.key('algorithm').objid(), this.key('parameters').optional(), this.key('curve').objid().optional());
    });
    var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
      this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
    });
    var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
      this.setof(AttributeTypeValue);
    });
    var RDNSequence = asn.define('RDNSequence', function () {
      this.seqof(RelativeDistinguishedName);
    });
    var Name = asn.define('Name', function () {
      this.choice({
        rdnSequence: this.use(RDNSequence)
      });
    });
    var Validity = asn.define('Validity', function () {
      this.seq().obj(this.key('notBefore').use(Time), this.key('notAfter').use(Time));
    });
    var Extension = asn.define('Extension', function () {
      this.seq().obj(this.key('extnID').objid(), this.key('critical').bool().def(false), this.key('extnValue').octstr());
    });
    var TBSCertificate = asn.define('TBSCertificate', function () {
      this.seq().obj(this.key('version').explicit(0).int().optional(), this.key('serialNumber').int(), this.key('signature').use(AlgorithmIdentifier), this.key('issuer').use(Name), this.key('validity').use(Validity), this.key('subject').use(Name), this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo), this.key('issuerUniqueID').implicit(1).bitstr().optional(), this.key('subjectUniqueID').implicit(2).bitstr().optional(), this.key('extensions').explicit(3).seqof(Extension).optional());
    });
    var X509Certificate = asn.define('X509Certificate', function () {
      this.seq().obj(this.key('tbsCertificate').use(TBSCertificate), this.key('signatureAlgorithm').use(AlgorithmIdentifier), this.key('signatureValue').bitstr());
    });
    module.exports = X509Certificate;
  }, {
    "asn1.js": 30
  }],
  264: [function (require, module, exports) {
    // adapted from https://github.com/apatil/pemstrip
    var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
    var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
    var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;

    var evp = require('evp_bytestokey');

    var ciphers = require('browserify-aes');

    var Buffer = require('safe-buffer').Buffer;

    module.exports = function (okey, password) {
      var key = okey.toString();
      var match = key.match(findProc);
      var decrypted;

      if (!match) {
        var match2 = key.match(fullRegex);
        decrypted = Buffer.from(match2[2].replace(/[\r\n]/g, ''), 'base64');
      } else {
        var suite = 'aes' + match[1];
        var iv = Buffer.from(match[2], 'hex');
        var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64');
        var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
        var out = [];
        var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
        out.push(cipher.update(cipherText));
        out.push(cipher.final());
        decrypted = Buffer.concat(out);
      }

      var tag = key.match(startRegex)[1];
      return {
        tag: tag,
        data: decrypted
      };
    };
  }, {
    "browserify-aes": 59,
    "evp_bytestokey": 176,
    "safe-buffer": 314
  }],
  265: [function (require, module, exports) {
    var asn1 = require('./asn1');

    var aesid = require('./aesid.json');

    var fixProc = require('./fixProc');

    var ciphers = require('browserify-aes');

    var compat = require('pbkdf2');

    var Buffer = require('safe-buffer').Buffer;

    module.exports = parseKeys;

    function parseKeys(buffer) {
      var password;

      if (_typeof2(buffer) === 'object' && !Buffer.isBuffer(buffer)) {
        password = buffer.passphrase;
        buffer = buffer.key;
      }

      if (typeof buffer === 'string') {
        buffer = Buffer.from(buffer);
      }

      var stripped = fixProc(buffer, password);
      var type = stripped.tag;
      var data = stripped.data;
      var subtype, ndata;

      switch (type) {
        case 'CERTIFICATE':
          ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo;
        // falls through

        case 'PUBLIC KEY':
          if (!ndata) {
            ndata = asn1.PublicKey.decode(data, 'der');
          }

          subtype = ndata.algorithm.algorithm.join('.');

          switch (subtype) {
            case '1.2.840.113549.1.1.1':
              return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');

            case '1.2.840.10045.2.1':
              ndata.subjectPrivateKey = ndata.subjectPublicKey;
              return {
                type: 'ec',
                data: ndata
              };

            case '1.2.840.10040.4.1':
              ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
              return {
                type: 'dsa',
                data: ndata.algorithm.params
              };

            default:
              throw new Error('unknown key id ' + subtype);
          }

        // throw new Error('unknown key type ' + type)

        case 'ENCRYPTED PRIVATE KEY':
          data = asn1.EncryptedPrivateKey.decode(data, 'der');
          data = decrypt(data, password);
        // falls through

        case 'PRIVATE KEY':
          ndata = asn1.PrivateKey.decode(data, 'der');
          subtype = ndata.algorithm.algorithm.join('.');

          switch (subtype) {
            case '1.2.840.113549.1.1.1':
              return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');

            case '1.2.840.10045.2.1':
              return {
                curve: ndata.algorithm.curve,
                privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
              };

            case '1.2.840.10040.4.1':
              ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');
              return {
                type: 'dsa',
                params: ndata.algorithm.params
              };

            default:
              throw new Error('unknown key id ' + subtype);
          }

        // throw new Error('unknown key type ' + type)

        case 'RSA PUBLIC KEY':
          return asn1.RSAPublicKey.decode(data, 'der');

        case 'RSA PRIVATE KEY':
          return asn1.RSAPrivateKey.decode(data, 'der');

        case 'DSA PRIVATE KEY':
          return {
            type: 'dsa',
            params: asn1.DSAPrivateKey.decode(data, 'der')
          };

        case 'EC PRIVATE KEY':
          data = asn1.ECPrivateKey.decode(data, 'der');
          return {
            curve: data.parameters.value,
            privateKey: data.privateKey
          };

        default:
          throw new Error('unknown key type ' + type);
      }
    }

    parseKeys.signature = asn1.signature;

    function decrypt(data, password) {
      var salt = data.algorithm.decrypt.kde.kdeparams.salt;
      var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
      var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];
      var iv = data.algorithm.decrypt.cipher.iv;
      var cipherText = data.subjectPrivateKey;
      var keylen = parseInt(algo.split('-')[1], 10) / 8;
      var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1');
      var cipher = ciphers.createDecipheriv(algo, key, iv);
      var out = [];
      out.push(cipher.update(cipherText));
      out.push(cipher.final());
      return Buffer.concat(out);
    }
  }, {
    "./aesid.json": 261,
    "./asn1": 262,
    "./fixProc": 264,
    "browserify-aes": 59,
    "pbkdf2": 269,
    "safe-buffer": 314
  }],
  266: [function (require, module, exports) {
    /**
     * Compiles a querystring
     * Returns string representation of the object
     *
     * @param {Object}
     * @api private
     */
    exports.encode = function (obj) {
      var str = '';

      for (var i in obj) {
        if (obj.hasOwnProperty(i)) {
          if (str.length) str += '&';
          str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
        }
      }

      return str;
    };
    /**
     * Parses a simple querystring into an object
     *
     * @param {String} qs
     * @api private
     */


    exports.decode = function (qs) {
      var qry = {};
      var pairs = qs.split('&');

      for (var i = 0, l = pairs.length; i < l; i++) {
        var pair = pairs[i].split('=');
        qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
      }

      return qry;
    };
  }, {}],
  267: [function (require, module, exports) {
    /**
     * Parses an URI
     *
     * @author Steven Levithan <stevenlevithan.com> (MIT license)
     * @api private
     */
    var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
    var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'];

    module.exports = function parseuri(str) {
      var src = str,
          b = str.indexOf('['),
          e = str.indexOf(']');

      if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
      }

      var m = re.exec(str || ''),
          uri = {},
          i = 14;

      while (i--) {
        uri[parts[i]] = m[i] || '';
      }

      if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
        uri.ipv6uri = true;
      }

      uri.pathNames = pathNames(uri, uri['path']);
      uri.queryKey = queryKey(uri, uri['query']);
      return uri;
    };

    function pathNames(obj, path) {
      var regx = /\/{2,9}/g,
          names = path.replace(regx, "/").split("/");

      if (path.substr(0, 1) == '/' || path.length === 0) {
        names.splice(0, 1);
      }

      if (path.substr(path.length - 1, 1) == '/') {
        names.splice(names.length - 1, 1);
      }

      return names;
    }

    function queryKey(uri, query) {
      var data = {};
      query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {
        if ($1) {
          data[$1] = $2;
        }
      });
      return data;
    }
  }, {}],
  268: [function (require, module, exports) {
    (function (process) {
      (function () {
        // .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
        // backported and transplited with Babel, with backwards-compat fixes
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        // resolves . and .. elements in a path array with directory names there
        // must be no slashes, empty elements, or device names (c:\) in the array
        // (so also no leading and trailing slashes - it does not distinguish
        // relative and absolute paths)
        function normalizeArray(parts, allowAboveRoot) {
          // if the path tries to go above the root, `up` ends up > 0
          var up = 0;

          for (var i = parts.length - 1; i >= 0; i--) {
            var last = parts[i];

            if (last === '.') {
              parts.splice(i, 1);
            } else if (last === '..') {
              parts.splice(i, 1);
              up++;
            } else if (up) {
              parts.splice(i, 1);
              up--;
            }
          } // if the path is allowed to go above the root, restore leading ..s


          if (allowAboveRoot) {
            for (; up--; up) {
              parts.unshift('..');
            }
          }

          return parts;
        } // path.resolve([from ...], to)
        // posix version


        exports.resolve = function () {
          var resolvedPath = '',
              resolvedAbsolute = false;

          for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
            var path = i >= 0 ? arguments[i] : process.cwd(); // Skip empty and invalid entries

            if (typeof path !== 'string') {
              throw new TypeError('Arguments to path.resolve must be strings');
            } else if (!path) {
              continue;
            }

            resolvedPath = path + '/' + resolvedPath;
            resolvedAbsolute = path.charAt(0) === '/';
          } // At this point the path should be resolved to a full absolute path, but
          // handle relative paths to be safe (might happen when process.cwd() fails)
          // Normalize the path


          resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
            return !!p;
          }), !resolvedAbsolute).join('/');
          return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
        }; // path.normalize(path)
        // posix version


        exports.normalize = function (path) {
          var isAbsolute = exports.isAbsolute(path),
              trailingSlash = substr(path, -1) === '/'; // Normalize the path

          path = normalizeArray(filter(path.split('/'), function (p) {
            return !!p;
          }), !isAbsolute).join('/');

          if (!path && !isAbsolute) {
            path = '.';
          }

          if (path && trailingSlash) {
            path += '/';
          }

          return (isAbsolute ? '/' : '') + path;
        }; // posix version


        exports.isAbsolute = function (path) {
          return path.charAt(0) === '/';
        }; // posix version


        exports.join = function () {
          var paths = Array.prototype.slice.call(arguments, 0);
          return exports.normalize(filter(paths, function (p, index) {
            if (typeof p !== 'string') {
              throw new TypeError('Arguments to path.join must be strings');
            }

            return p;
          }).join('/'));
        }; // path.relative(from, to)
        // posix version


        exports.relative = function (from, to) {
          from = exports.resolve(from).substr(1);
          to = exports.resolve(to).substr(1);

          function trim(arr) {
            var start = 0;

            for (; start < arr.length; start++) {
              if (arr[start] !== '') break;
            }

            var end = arr.length - 1;

            for (; end >= 0; end--) {
              if (arr[end] !== '') break;
            }

            if (start > end) return [];
            return arr.slice(start, end - start + 1);
          }

          var fromParts = trim(from.split('/'));
          var toParts = trim(to.split('/'));
          var length = Math.min(fromParts.length, toParts.length);
          var samePartsLength = length;

          for (var i = 0; i < length; i++) {
            if (fromParts[i] !== toParts[i]) {
              samePartsLength = i;
              break;
            }
          }

          var outputParts = [];

          for (var i = samePartsLength; i < fromParts.length; i++) {
            outputParts.push('..');
          }

          outputParts = outputParts.concat(toParts.slice(samePartsLength));
          return outputParts.join('/');
        };

        exports.sep = '/';
        exports.delimiter = ':';

        exports.dirname = function (path) {
          if (typeof path !== 'string') path = path + '';
          if (path.length === 0) return '.';
          var code = path.charCodeAt(0);
          var hasRoot = code === 47
          /*/*/
          ;
          var end = -1;
          var matchedSlash = true;

          for (var i = path.length - 1; i >= 1; --i) {
            code = path.charCodeAt(i);

            if (code === 47
            /*/*/
            ) {
                if (!matchedSlash) {
                  end = i;
                  break;
                }
              } else {
              // We saw the first non-path separator
              matchedSlash = false;
            }
          }

          if (end === -1) return hasRoot ? '/' : '.';

          if (hasRoot && end === 1) {
            // return '//';
            // Backwards-compat fix:
            return '/';
          }

          return path.slice(0, end);
        };

        function basename(path) {
          if (typeof path !== 'string') path = path + '';
          var start = 0;
          var end = -1;
          var matchedSlash = true;
          var i;

          for (i = path.length - 1; i >= 0; --i) {
            if (path.charCodeAt(i) === 47
            /*/*/
            ) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                  start = i + 1;
                  break;
                }
              } else if (end === -1) {
              // We saw the first non-path separator, mark this as the end of our
              // path component
              matchedSlash = false;
              end = i + 1;
            }
          }

          if (end === -1) return '';
          return path.slice(start, end);
        } // Uses a mixed approach for backwards-compatibility, as ext behavior changed
        // in new Node.js versions, so only basename() above is backported here


        exports.basename = function (path, ext) {
          var f = basename(path);

          if (ext && f.substr(-1 * ext.length) === ext) {
            f = f.substr(0, f.length - ext.length);
          }

          return f;
        };

        exports.extname = function (path) {
          if (typeof path !== 'string') path = path + '';
          var startDot = -1;
          var startPart = 0;
          var end = -1;
          var matchedSlash = true; // Track the state of characters (if any) we see before our first dot and
          // after any path separator we find

          var preDotState = 0;

          for (var i = path.length - 1; i >= 0; --i) {
            var code = path.charCodeAt(i);

            if (code === 47
            /*/*/
            ) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                  startPart = i + 1;
                  break;
                }

                continue;
              }

            if (end === -1) {
              // We saw the first non-path separator, mark this as the end of our
              // extension
              matchedSlash = false;
              end = i + 1;
            }

            if (code === 46
            /*.*/
            ) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
              } else if (startDot !== -1) {
              // We saw a non-dot and non-path separator before our dot, so we should
              // have a good chance at having a non-empty extension
              preDotState = -1;
            }
          }

          if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
          preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
          preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
            return '';
          }

          return path.slice(startDot, end);
        };

        function filter(xs, f) {
          if (xs.filter) return xs.filter(f);
          var res = [];

          for (var i = 0; i < xs.length; i++) {
            if (f(xs[i], i, xs)) res.push(xs[i]);
          }

          return res;
        } // String.prototype.substr - negative index don't work in IE8


        var substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {
          return str.substr(start, len);
        } : function (str, start, len) {
          if (start < 0) start = str.length + start;
          return str.substr(start, len);
        };
      }).call(this);
    }).call(this, require('_process'));
  }, {
    "_process": 276
  }],
  269: [function (require, module, exports) {
    exports.pbkdf2 = require('./lib/async');
    exports.pbkdf2Sync = require('./lib/sync');
  }, {
    "./lib/async": 270,
    "./lib/sync": 273
  }],
  270: [function (require, module, exports) {
    (function (process, global) {
      (function () {
        var Buffer = require('safe-buffer').Buffer;

        var checkParameters = require('./precondition');

        var defaultEncoding = require('./default-encoding');

        var sync = require('./sync');

        var toBuffer = require('./to-buffer');

        var ZERO_BUF;
        var subtle = global.crypto && global.crypto.subtle;
        var toBrowser = {
          sha: 'SHA-1',
          'sha-1': 'SHA-1',
          sha1: 'SHA-1',
          sha256: 'SHA-256',
          'sha-256': 'SHA-256',
          sha384: 'SHA-384',
          'sha-384': 'SHA-384',
          'sha-512': 'SHA-512',
          sha512: 'SHA-512'
        };
        var checks = [];

        function checkNative(algo) {
          if (global.process && !global.process.browser) {
            return Promise.resolve(false);
          }

          if (!subtle || !subtle.importKey || !subtle.deriveBits) {
            return Promise.resolve(false);
          }

          if (checks[algo] !== undefined) {
            return checks[algo];
          }

          ZERO_BUF = ZERO_BUF || Buffer.alloc(8);
          var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function () {
            return true;
          }).catch(function () {
            return false;
          });
          checks[algo] = prom;
          return prom;
        }

        function browserPbkdf2(password, salt, iterations, length, algo) {
          return subtle.importKey('raw', password, {
            name: 'PBKDF2'
          }, false, ['deriveBits']).then(function (key) {
            return subtle.deriveBits({
              name: 'PBKDF2',
              salt: salt,
              iterations: iterations,
              hash: {
                name: algo
              }
            }, key, length << 3);
          }).then(function (res) {
            return Buffer.from(res);
          });
        }

        function resolvePromise(promise, callback) {
          promise.then(function (out) {
            process.nextTick(function () {
              callback(null, out);
            });
          }, function (e) {
            process.nextTick(function () {
              callback(e);
            });
          });
        }

        module.exports = function (password, salt, iterations, keylen, digest, callback) {
          if (typeof digest === 'function') {
            callback = digest;
            digest = undefined;
          }

          digest = digest || 'sha1';
          var algo = toBrowser[digest.toLowerCase()];

          if (!algo || typeof global.Promise !== 'function') {
            return process.nextTick(function () {
              var out;

              try {
                out = sync(password, salt, iterations, keylen, digest);
              } catch (e) {
                return callback(e);
              }

              callback(null, out);
            });
          }

          checkParameters(iterations, keylen);
          password = toBuffer(password, defaultEncoding, 'Password');
          salt = toBuffer(salt, defaultEncoding, 'Salt');
          if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2');
          resolvePromise(checkNative(algo).then(function (resp) {
            if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);
            return sync(password, salt, iterations, keylen, digest);
          }), callback);
        };
      }).call(this);
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {
    "./default-encoding": 271,
    "./precondition": 272,
    "./sync": 273,
    "./to-buffer": 274,
    "_process": 276,
    "safe-buffer": 314
  }],
  271: [function (require, module, exports) {
    (function (process) {
      (function () {
        var defaultEncoding;
        /* istanbul ignore next */

        if (true) {
          defaultEncoding = 'utf-8';
        } else if (process.version) {
          var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10);
          defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary';
        } else {
          defaultEncoding = 'utf-8';
        }

        module.exports = defaultEncoding;
      }).call(this);
    }).call(this, require('_process'));
  }, {
    "_process": 276
  }],
  272: [function (require, module, exports) {
    var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs

    module.exports = function (iterations, keylen) {
      if (typeof iterations !== 'number') {
        throw new TypeError('Iterations not a number');
      }

      if (iterations < 0) {
        throw new TypeError('Bad iterations');
      }

      if (typeof keylen !== 'number') {
        throw new TypeError('Key length not a number');
      }

      if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
        /* eslint no-self-compare: 0 */
        throw new TypeError('Bad key length');
      }
    };
  }, {}],
  273: [function (require, module, exports) {
    var md5 = require('create-hash/md5');

    var RIPEMD160 = require('ripemd160');

    var sha = require('sha.js');

    var Buffer = require('safe-buffer').Buffer;

    var checkParameters = require('./precondition');

    var defaultEncoding = require('./default-encoding');

    var toBuffer = require('./to-buffer');

    var ZEROS = Buffer.alloc(128);
    var sizes = {
      md5: 16,
      sha1: 20,
      sha224: 28,
      sha256: 32,
      sha384: 48,
      sha512: 64,
      rmd160: 20,
      ripemd160: 20
    };

    function Hmac(alg, key, saltLen) {
      var hash = getDigest(alg);
      var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;

      if (key.length > blocksize) {
        key = hash(key);
      } else if (key.length < blocksize) {
        key = Buffer.concat([key, ZEROS], blocksize);
      }

      var ipad = Buffer.allocUnsafe(blocksize + sizes[alg]);
      var opad = Buffer.allocUnsafe(blocksize + sizes[alg]);

      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
      }

      var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4);
      ipad.copy(ipad1, 0, 0, blocksize);
      this.ipad1 = ipad1;
      this.ipad2 = ipad;
      this.opad = opad;
      this.alg = alg;
      this.blocksize = blocksize;
      this.hash = hash;
      this.size = sizes[alg];
    }

    Hmac.prototype.run = function (data, ipad) {
      data.copy(ipad, this.blocksize);
      var h = this.hash(ipad);
      h.copy(this.opad, this.blocksize);
      return this.hash(this.opad);
    };

    function getDigest(alg) {
      function shaFunc(data) {
        return sha(alg).update(data).digest();
      }

      function rmd160Func(data) {
        return new RIPEMD160().update(data).digest();
      }

      if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func;
      if (alg === 'md5') return md5;
      return shaFunc;
    }

    function pbkdf2(password, salt, iterations, keylen, digest) {
      checkParameters(iterations, keylen);
      password = toBuffer(password, defaultEncoding, 'Password');
      salt = toBuffer(salt, defaultEncoding, 'Salt');
      digest = digest || 'sha1';
      var hmac = new Hmac(digest, password, salt.length);
      var DK = Buffer.allocUnsafe(keylen);
      var block1 = Buffer.allocUnsafe(salt.length + 4);
      salt.copy(block1, 0, 0, salt.length);
      var destPos = 0;
      var hLen = sizes[digest];
      var l = Math.ceil(keylen / hLen);

      for (var i = 1; i <= l; i++) {
        block1.writeUInt32BE(i, salt.length);
        var T = hmac.run(block1, hmac.ipad1);
        var U = T;

        for (var j = 1; j < iterations; j++) {
          U = hmac.run(U, hmac.ipad2);

          for (var k = 0; k < hLen; k++) {
            T[k] ^= U[k];
          }
        }

        T.copy(DK, destPos);
        destPos += hLen;
      }

      return DK;
    }

    module.exports = pbkdf2;
  }, {
    "./default-encoding": 271,
    "./precondition": 272,
    "./to-buffer": 274,
    "create-hash/md5": 117,
    "ripemd160": 312,
    "safe-buffer": 314,
    "sha.js": 320
  }],
  274: [function (require, module, exports) {
    var Buffer = require('safe-buffer').Buffer;

    module.exports = function (thing, encoding, name) {
      if (Buffer.isBuffer(thing)) {
        return thing;
      } else if (typeof thing === 'string') {
        return Buffer.from(thing, encoding);
      } else if (ArrayBuffer.isView(thing)) {
        return Buffer.from(thing.buffer);
      } else {
        throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView');
      }
    };
  }, {
    "safe-buffer": 314
  }],
  275: [function (require, module, exports) {
    (function (process) {
      (function () {
        'use strict';

        if (typeof process === 'undefined' || !process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
          module.exports = {
            nextTick: nextTick
          };
        } else {
          module.exports = process;
        }

        function nextTick(fn, arg1, arg2, arg3) {
          if (typeof fn !== 'function') {
            throw new TypeError('"callback" argument must be a function');
          }

          var len = arguments.length;
          var args, i;

          switch (len) {
            case 0:
            case 1:
              return process.nextTick(fn);

            case 2:
              return process.nextTick(function afterTickOne() {
                fn.call(null, arg1);
              });

            case 3:
              return process.nextTick(function afterTickTwo() {
                fn.call(null, arg1, arg2);
              });

            case 4:
              return process.nextTick(function afterTickThree() {
                fn.call(null, arg1, arg2, arg3);
              });

            default:
              args = new Array(len - 1);
              i = 0;

              while (i < args.length) {
                args[i++] = arguments[i];
              }

              return process.nextTick(function afterTick() {
                fn.apply(null, args);
              });
          }
        }
      }).call(this);
    }).call(this, require('_process'));
  }, {
    "_process": 276
  }],
  276: [function (require, module, exports) {
    // shim for using process in browser
    var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
    // don't break things.  But we need to wrap it in a try catch in case it is
    // wrapped in strict mode code which doesn't define any globals.  It's inside a
    // function because try/catches deoptimize in certain engines.

    var cachedSetTimeout;
    var cachedClearTimeout;

    function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
    }

    function defaultClearTimeout() {
      throw new Error('clearTimeout has not been defined');
    }

    (function () {
      try {
        if (typeof setTimeout === 'function') {
          cachedSetTimeout = setTimeout;
        } else {
          cachedSetTimeout = defaultSetTimout;
        }
      } catch (e) {
        cachedSetTimeout = defaultSetTimout;
      }

      try {
        if (typeof clearTimeout === 'function') {
          cachedClearTimeout = clearTimeout;
        } else {
          cachedClearTimeout = defaultClearTimeout;
        }
      } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
      }
    })();

    function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
      } // if setTimeout wasn't available but was latter defined


      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
      }

      try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
      } catch (e) {
        try {
          // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
          return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
          // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
          return cachedSetTimeout.call(this, fun, 0);
        }
      }
    }

    function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
      } // if clearTimeout wasn't available but was latter defined


      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
      }

      try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
      } catch (e) {
        try {
          // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
          return cachedClearTimeout.call(null, marker);
        } catch (e) {
          // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
          // Some versions of I.E. have different rules for clearTimeout vs setTimeout
          return cachedClearTimeout.call(this, marker);
        }
      }
    }

    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
      if (!draining || !currentQueue) {
        return;
      }

      draining = false;

      if (currentQueue.length) {
        queue = currentQueue.concat(queue);
      } else {
        queueIndex = -1;
      }

      if (queue.length) {
        drainQueue();
      }
    }

    function drainQueue() {
      if (draining) {
        return;
      }

      var timeout = runTimeout(cleanUpNextTick);
      draining = true;
      var len = queue.length;

      while (len) {
        currentQueue = queue;
        queue = [];

        while (++queueIndex < len) {
          if (currentQueue) {
            currentQueue[queueIndex].run();
          }
        }

        queueIndex = -1;
        len = queue.length;
      }

      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
    }

    process.nextTick = function (fun) {
      var args = new Array(arguments.length - 1);

      if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
          args[i - 1] = arguments[i];
        }
      }

      queue.push(new Item(fun, args));

      if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
      }
    }; // v8 likes predictible objects


    function Item(fun, array) {
      this.fun = fun;
      this.array = array;
    }

    Item.prototype.run = function () {
      this.fun.apply(null, this.array);
    };

    process.title = 'browser';
    process.env = {};
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues

    process.versions = {};

    function noop() {}

    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;

    process.listeners = function (name) {
      return [];
    };

    process.binding = function (name) {
      throw new Error('process.binding is not supported');
    };

    process.cwd = function () {
      return '/';
    };

    process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
    };

    process.umask = function () {
      return 0;
    };
  }, {}],
  277: [function (require, module, exports) {
    (function (global) {
      (function () {
        module.exports = Deferred;
        Deferred.defer = defer;

        function Deferred(Promise) {
          if (Promise == null) Promise = global.Promise;
          if (this instanceof Deferred) return defer(Promise, this);else return defer(Promise, Object.create(Deferred.prototype));
        }

        function defer(Promise, deferred) {
          deferred.promise = new Promise(function (resolve, reject) {
            deferred.resolve = resolve;
            deferred.reject = reject;
          });
          return deferred;
        }
      }).call(this);
    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {}],
  278: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        var varint = require('varint');

        var svarint = require('signed-varint');

        exports.make = encoder;

        exports.name = function (enc) {
          var keys = Object.keys(exports);

          for (var i = 0; i < keys.length; i++) {
            if (exports[keys[i]] === enc) return keys[i];
          }

          return null;
        };

        exports.skip = function (type, buffer, offset) {
          switch (type) {
            case 0:
              varint.decode(buffer, offset);
              return offset + varint.decode.bytes;

            case 1:
              return offset + 8;

            case 2:
              var len = varint.decode(buffer, offset);
              return offset + varint.decode.bytes + len;

            case 3:
            case 4:
              throw new Error('Groups are not supported');

            case 5:
              return offset + 4;
          }

          throw new Error('Unknown wire type: ' + type);
        };

        exports.bytes = encoder(2, function encode(val, buffer, offset) {
          var oldOffset = offset;
          var len = bufferLength(val);
          varint.encode(len, buffer, offset);
          offset += varint.encode.bytes;
          if (Buffer.isBuffer(val)) val.copy(buffer, offset);else buffer.write(val, offset, len);
          offset += len;
          encode.bytes = offset - oldOffset;
          return buffer;
        }, function decode(buffer, offset) {
          var oldOffset = offset;
          var len = varint.decode(buffer, offset);
          offset += varint.decode.bytes;
          var val = buffer.slice(offset, offset + len);
          offset += val.length;
          decode.bytes = offset - oldOffset;
          return val;
        }, function encodingLength(val) {
          var len = bufferLength(val);
          return varint.encodingLength(len) + len;
        });
        exports.string = encoder(2, function encode(val, buffer, offset) {
          var oldOffset = offset;
          var len = Buffer.byteLength(val);
          varint.encode(len, buffer, offset, 'utf-8');
          offset += varint.encode.bytes;
          buffer.write(val, offset, len);
          offset += len;
          encode.bytes = offset - oldOffset;
          return buffer;
        }, function decode(buffer, offset) {
          var oldOffset = offset;
          var len = varint.decode(buffer, offset);
          offset += varint.decode.bytes;
          var val = buffer.toString('utf-8', offset, offset + len);
          offset += len;
          decode.bytes = offset - oldOffset;
          return val;
        }, function encodingLength(val) {
          var len = Buffer.byteLength(val);
          return varint.encodingLength(len) + len;
        });
        exports.bool = encoder(0, function encode(val, buffer, offset) {
          buffer[offset] = val ? 1 : 0;
          encode.bytes = 1;
          return buffer;
        }, function decode(buffer, offset) {
          var bool = buffer[offset] > 0;
          decode.bytes = 1;
          return bool;
        }, function encodingLength() {
          return 1;
        });
        exports.int32 = encoder(0, function encode(val, buffer, offset) {
          varint.encode(val < 0 ? val + 4294967296 : val, buffer, offset);
          encode.bytes = varint.encode.bytes;
          return buffer;
        }, function decode(buffer, offset) {
          var val = varint.decode(buffer, offset);
          decode.bytes = varint.decode.bytes;
          return val > 2147483647 ? val - 4294967296 : val;
        }, function encodingLength(val) {
          return varint.encodingLength(val < 0 ? val + 4294967296 : val);
        });
        exports.int64 = encoder(0, function encode(val, buffer, offset) {
          if (val < 0) {
            var last = offset + 9;
            varint.encode(val * -1, buffer, offset);
            offset += varint.encode.bytes - 1;
            buffer[offset] = buffer[offset] | 0x80;

            while (offset < last - 1) {
              offset++;
              buffer[offset] = 0xff;
            }

            buffer[last] = 0x01;
            encode.bytes = 10;
          } else {
            varint.encode(val, buffer, offset);
            encode.bytes = varint.encode.bytes;
          }

          return buffer;
        }, function decode(buffer, offset) {
          var val = varint.decode(buffer, offset);

          if (val >= Math.pow(2, 63)) {
            var limit = 9;

            while (buffer[offset + limit - 1] === 0xff) {
              limit--;
            }

            limit = limit || 9;
            var subset = Buffer.allocUnsafe(limit);
            buffer.copy(subset, 0, offset, offset + limit);
            subset[limit - 1] = subset[limit - 1] & 0x7f;
            val = -1 * varint.decode(subset, 0);
            decode.bytes = 10;
          } else {
            decode.bytes = varint.decode.bytes;
          }

          return val;
        }, function encodingLength(val) {
          return val < 0 ? 10 : varint.encodingLength(val);
        });
        exports.sint32 = exports.sint64 = encoder(0, svarint.encode, svarint.decode, svarint.encodingLength);
        exports.uint32 = exports.uint64 = exports.enum = exports.varint = encoder(0, varint.encode, varint.decode, varint.encodingLength); // we cannot represent these in javascript so we just use buffers

        exports.fixed64 = exports.sfixed64 = encoder(1, function encode(val, buffer, offset) {
          val.copy(buffer, offset);
          encode.bytes = 8;
          return buffer;
        }, function decode(buffer, offset) {
          var val = buffer.slice(offset, offset + 8);
          decode.bytes = 8;
          return val;
        }, function encodingLength() {
          return 8;
        });
        exports.double = encoder(1, function encode(val, buffer, offset) {
          buffer.writeDoubleLE(val, offset);
          encode.bytes = 8;
          return buffer;
        }, function decode(buffer, offset) {
          var val = buffer.readDoubleLE(offset);
          decode.bytes = 8;
          return val;
        }, function encodingLength() {
          return 8;
        });
        exports.fixed32 = encoder(5, function encode(val, buffer, offset) {
          buffer.writeUInt32LE(val, offset);
          encode.bytes = 4;
          return buffer;
        }, function decode(buffer, offset) {
          var val = buffer.readUInt32LE(offset);
          decode.bytes = 4;
          return val;
        }, function encodingLength() {
          return 4;
        });
        exports.sfixed32 = encoder(5, function encode(val, buffer, offset) {
          buffer.writeInt32LE(val, offset);
          encode.bytes = 4;
          return buffer;
        }, function decode(buffer, offset) {
          var val = buffer.readInt32LE(offset);
          decode.bytes = 4;
          return val;
        }, function encodingLength() {
          return 4;
        });
        exports.float = encoder(5, function encode(val, buffer, offset) {
          buffer.writeFloatLE(val, offset);
          encode.bytes = 4;
          return buffer;
        }, function decode(buffer, offset) {
          var val = buffer.readFloatLE(offset);
          decode.bytes = 4;
          return val;
        }, function encodingLength() {
          return 4;
        });

        function encoder(type, encode, decode, encodingLength) {
          encode.bytes = decode.bytes = 0;
          return {
            type: type,
            encode: encode,
            decode: decode,
            encodingLength: encodingLength
          };
        }

        function bufferLength(val) {
          return Buffer.isBuffer(val) ? val.length : Buffer.byteLength(val);
        }
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "buffer": 102,
    "signed-varint": 327,
    "varint": 281
  }],
  279: [function (require, module, exports) {
    module.exports = read;
    var MSB = 0x80,
        REST = 0x7F;

    function read(buf, offset) {
      var res = 0,
          offset = offset || 0,
          shift = 0,
          counter = offset,
          b,
          l = buf.length;

      do {
        if (counter >= l) {
          read.bytes = 0;
          throw new RangeError('Could not decode varint');
        }

        b = buf[counter++];
        res += shift < 28 ? (b & REST) << shift : (b & REST) * Math.pow(2, shift);
        shift += 7;
      } while (b >= MSB);

      read.bytes = counter - offset;
      return res;
    }
  }, {}],
  280: [function (require, module, exports) {
    module.exports = encode;
    var MSB = 0x80,
        REST = 0x7F,
        MSBALL = ~REST,
        INT = Math.pow(2, 31);

    function encode(num, out, offset) {
      out = out || [];
      offset = offset || 0;
      var oldOffset = offset;

      while (num >= INT) {
        out[offset++] = num & 0xFF | MSB;
        num /= 128;
      }

      while (num & MSBALL) {
        out[offset++] = num & 0xFF | MSB;
        num >>>= 7;
      }

      out[offset] = num | 0;
      encode.bytes = offset - oldOffset + 1;
      return out;
    }
  }, {}],
  281: [function (require, module, exports) {
    module.exports = {
      encode: require('./encode.js'),
      decode: require('./decode.js'),
      encodingLength: require('./length.js')
    };
  }, {
    "./decode.js": 279,
    "./encode.js": 280,
    "./length.js": 282
  }],
  282: [function (require, module, exports) {
    var N1 = Math.pow(2, 7);
    var N2 = Math.pow(2, 14);
    var N3 = Math.pow(2, 21);
    var N4 = Math.pow(2, 28);
    var N5 = Math.pow(2, 35);
    var N6 = Math.pow(2, 42);
    var N7 = Math.pow(2, 49);
    var N8 = Math.pow(2, 56);
    var N9 = Math.pow(2, 63);

    module.exports = function (value) {
      return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
    };
  }, {}],
  283: [function (require, module, exports) {
    exports.publicEncrypt = require('./publicEncrypt');
    exports.privateDecrypt = require('./privateDecrypt');

    exports.privateEncrypt = function privateEncrypt(key, buf) {
      return exports.publicEncrypt(key, buf, true);
    };

    exports.publicDecrypt = function publicDecrypt(key, buf) {
      return exports.privateDecrypt(key, buf, true);
    };
  }, {
    "./privateDecrypt": 285,
    "./publicEncrypt": 286
  }],
  284: [function (require, module, exports) {
    var createHash = require('create-hash');

    var Buffer = require('safe-buffer').Buffer;

    module.exports = function (seed, len) {
      var t = Buffer.alloc(0);
      var i = 0;
      var c;

      while (t.length < len) {
        c = i2ops(i++);
        t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
      }

      return t.slice(0, len);
    };

    function i2ops(c) {
      var out = Buffer.allocUnsafe(4);
      out.writeUInt32BE(c, 0);
      return out;
    }
  }, {
    "create-hash": 116,
    "safe-buffer": 314
  }],
  285: [function (require, module, exports) {
    var parseKeys = require('parse-asn1');

    var mgf = require('./mgf');

    var xor = require('./xor');

    var BN = require('bn.js');

    var crt = require('browserify-rsa');

    var createHash = require('create-hash');

    var withPublic = require('./withPublic');

    var Buffer = require('safe-buffer').Buffer;

    module.exports = function privateDecrypt(privateKey, enc, reverse) {
      var padding;

      if (privateKey.padding) {
        padding = privateKey.padding;
      } else if (reverse) {
        padding = 1;
      } else {
        padding = 4;
      }

      var key = parseKeys(privateKey);
      var k = key.modulus.byteLength();

      if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
        throw new Error('decryption error');
      }

      var msg;

      if (reverse) {
        msg = withPublic(new BN(enc), key);
      } else {
        msg = crt(enc, key);
      }

      var zBuffer = Buffer.alloc(k - msg.length);
      msg = Buffer.concat([zBuffer, msg], k);

      if (padding === 4) {
        return oaep(key, msg);
      } else if (padding === 1) {
        return pkcs1(key, msg, reverse);
      } else if (padding === 3) {
        return msg;
      } else {
        throw new Error('unknown padding');
      }
    };

    function oaep(key, msg) {
      var k = key.modulus.byteLength();
      var iHash = createHash('sha1').update(Buffer.alloc(0)).digest();
      var hLen = iHash.length;

      if (msg[0] !== 0) {
        throw new Error('decryption error');
      }

      var maskedSeed = msg.slice(1, hLen + 1);
      var maskedDb = msg.slice(hLen + 1);
      var seed = xor(maskedSeed, mgf(maskedDb, hLen));
      var db = xor(maskedDb, mgf(seed, k - hLen - 1));

      if (compare(iHash, db.slice(0, hLen))) {
        throw new Error('decryption error');
      }

      var i = hLen;

      while (db[i] === 0) {
        i++;
      }

      if (db[i++] !== 1) {
        throw new Error('decryption error');
      }

      return db.slice(i);
    }

    function pkcs1(key, msg, reverse) {
      var p1 = msg.slice(0, 2);
      var i = 2;
      var status = 0;

      while (msg[i++] !== 0) {
        if (i >= msg.length) {
          status++;
          break;
        }
      }

      var ps = msg.slice(2, i - 1);

      if (p1.toString('hex') !== '0002' && !reverse || p1.toString('hex') !== '0001' && reverse) {
        status++;
      }

      if (ps.length < 8) {
        status++;
      }

      if (status) {
        throw new Error('decryption error');
      }

      return msg.slice(i);
    }

    function compare(a, b) {
      a = Buffer.from(a);
      b = Buffer.from(b);
      var dif = 0;
      var len = a.length;

      if (a.length !== b.length) {
        dif++;
        len = Math.min(a.length, b.length);
      }

      var i = -1;

      while (++i < len) {
        dif += a[i] ^ b[i];
      }

      return dif;
    }
  }, {
    "./mgf": 284,
    "./withPublic": 287,
    "./xor": 288,
    "bn.js": 54,
    "browserify-rsa": 77,
    "create-hash": 116,
    "parse-asn1": 265,
    "safe-buffer": 314
  }],
  286: [function (require, module, exports) {
    var parseKeys = require('parse-asn1');

    var randomBytes = require('randombytes');

    var createHash = require('create-hash');

    var mgf = require('./mgf');

    var xor = require('./xor');

    var BN = require('bn.js');

    var withPublic = require('./withPublic');

    var crt = require('browserify-rsa');

    var Buffer = require('safe-buffer').Buffer;

    module.exports = function publicEncrypt(publicKey, msg, reverse) {
      var padding;

      if (publicKey.padding) {
        padding = publicKey.padding;
      } else if (reverse) {
        padding = 1;
      } else {
        padding = 4;
      }

      var key = parseKeys(publicKey);
      var paddedMsg;

      if (padding === 4) {
        paddedMsg = oaep(key, msg);
      } else if (padding === 1) {
        paddedMsg = pkcs1(key, msg, reverse);
      } else if (padding === 3) {
        paddedMsg = new BN(msg);

        if (paddedMsg.cmp(key.modulus) >= 0) {
          throw new Error('data too long for modulus');
        }
      } else {
        throw new Error('unknown padding');
      }

      if (reverse) {
        return crt(paddedMsg, key);
      } else {
        return withPublic(paddedMsg, key);
      }
    };

    function oaep(key, msg) {
      var k = key.modulus.byteLength();
      var mLen = msg.length;
      var iHash = createHash('sha1').update(Buffer.alloc(0)).digest();
      var hLen = iHash.length;
      var hLen2 = 2 * hLen;

      if (mLen > k - hLen2 - 2) {
        throw new Error('message too long');
      }

      var ps = Buffer.alloc(k - mLen - hLen2 - 2);
      var dblen = k - hLen - 1;
      var seed = randomBytes(hLen);
      var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen));
      var maskedSeed = xor(seed, mgf(maskedDb, hLen));
      return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k));
    }

    function pkcs1(key, msg, reverse) {
      var mLen = msg.length;
      var k = key.modulus.byteLength();

      if (mLen > k - 11) {
        throw new Error('message too long');
      }

      var ps;

      if (reverse) {
        ps = Buffer.alloc(k - mLen - 3, 0xff);
      } else {
        ps = nonZero(k - mLen - 3);
      }

      return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k));
    }

    function nonZero(len) {
      var out = Buffer.allocUnsafe(len);
      var i = 0;
      var cache = randomBytes(len * 2);
      var cur = 0;
      var num;

      while (i < len) {
        if (cur === cache.length) {
          cache = randomBytes(len * 2);
          cur = 0;
        }

        num = cache[cur++];

        if (num) {
          out[i++] = num;
        }
      }

      return out;
    }
  }, {
    "./mgf": 284,
    "./withPublic": 287,
    "./xor": 288,
    "bn.js": 54,
    "browserify-rsa": 77,
    "create-hash": 116,
    "parse-asn1": 265,
    "randombytes": 291,
    "safe-buffer": 314
  }],
  287: [function (require, module, exports) {
    var BN = require('bn.js');

    var Buffer = require('safe-buffer').Buffer;

    function withPublic(paddedMsg, key) {
      return Buffer.from(paddedMsg.toRed(BN.mont(key.modulus)).redPow(new BN(key.publicExponent)).fromRed().toArray());
    }

    module.exports = withPublic;
  }, {
    "bn.js": 54,
    "safe-buffer": 314
  }],
  288: [function (require, module, exports) {
    module.exports = function xor(a, b) {
      var len = a.length;
      var i = -1;

      while (++i < len) {
        a[i] ^= b[i];
      }

      return a;
    };
  }, {}],
  289: [function (require, module, exports) {
    (function (process) {
      (function () {
        var once = require('once');

        var eos = require('end-of-stream');

        var fs = require('fs'); // we only need fs to get the ReadStream and WriteStream prototypes


        var noop = function noop() {};

        var ancient = /^v?\.0/.test(process.version);

        var isFn = function isFn(fn) {
          return typeof fn === 'function';
        };

        var isFS = function isFS(stream) {
          if (!ancient) return false; // newer node version do not need to care about fs is a special way

          if (!fs) return false; // browser

          return (stream instanceof (fs.ReadStream || noop) || stream instanceof (fs.WriteStream || noop)) && isFn(stream.close);
        };

        var isRequest = function isRequest(stream) {
          return stream.setHeader && isFn(stream.abort);
        };

        var destroyer = function destroyer(stream, reading, writing, callback) {
          callback = once(callback);
          var closed = false;
          stream.on('close', function () {
            closed = true;
          });
          eos(stream, {
            readable: reading,
            writable: writing
          }, function (err) {
            if (err) return callback(err);
            closed = true;
            callback();
          });
          var destroyed = false;
          return function (err) {
            if (closed) return;
            if (destroyed) return;
            destroyed = true;
            if (isFS(stream)) return stream.close(noop); // use close for fs streams to avoid fd leaks

            if (isRequest(stream)) return stream.abort(); // request.destroy just do .end - .abort is what we want

            if (isFn(stream.destroy)) return stream.destroy();
            callback(err || new Error('stream was destroyed'));
          };
        };

        var call = function call(fn) {
          fn();
        };

        var pipe = function pipe(from, to) {
          return from.pipe(to);
        };

        var pump = function pump() {
          var streams = Array.prototype.slice.call(arguments);
          var callback = isFn(streams[streams.length - 1] || noop) && streams.pop() || noop;
          if (Array.isArray(streams[0])) streams = streams[0];
          if (streams.length < 2) throw new Error('pump requires two streams per minimum');
          var error;
          var destroys = streams.map(function (stream, i) {
            var reading = i < streams.length - 1;
            var writing = i > 0;
            return destroyer(stream, reading, writing, function (err) {
              if (!error) error = err;
              if (err) destroys.forEach(call);
              if (reading) return;
              destroys.forEach(call);
              callback(error);
            });
          });
          return streams.reduce(pipe);
        };

        module.exports = pump;
      }).call(this);
    }).call(this, require('_process'));
  }, {
    "_process": 276,
    "end-of-stream": 156,
    "fs": 56,
    "once": 253
  }],
  290: [function (require, module, exports) {
    /*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
    var promise;
    module.exports = typeof queueMicrotask === 'function' ? queueMicrotask // reuse resolved promise, and allocate it lazily
    : function (cb) {
      return (promise || (promise = Promise.resolve())).then(cb).catch(function (err) {
        return setTimeout(function () {
          throw err;
        }, 0);
      });
    };
  }, {}],
  291: [function (require, module, exports) {
    (function (process, global) {
      (function () {
        'use strict'; // limit of Crypto.getRandomValues()
        // https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues

        var MAX_BYTES = 65536; // Node supports requesting up to this number of bytes
        // https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48

        var MAX_UINT32 = 4294967295;

        function oldBrowser() {
          throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11');
        }

        var Buffer = require('safe-buffer').Buffer;

        var crypto = global.crypto || global.msCrypto;

        if (crypto && crypto.getRandomValues) {
          module.exports = randomBytes;
        } else {
          module.exports = oldBrowser;
        }

        function randomBytes(size, cb) {
          // phantomjs needs to throw
          if (size > MAX_UINT32) throw new RangeError('requested too many random bytes');
          var bytes = Buffer.allocUnsafe(size);

          if (size > 0) {
            // getRandomValues fails on IE if size == 0
            if (size > MAX_BYTES) {
              // this is the max bytes crypto.getRandomValues
              // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
              for (var generated = 0; generated < size; generated += MAX_BYTES) {
                // buffer.slice automatically checks if the end is past the end of
                // the buffer so we don't have to here
                crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
              }
            } else {
              crypto.getRandomValues(bytes);
            }
          }

          if (typeof cb === 'function') {
            return process.nextTick(function () {
              cb(null, bytes);
            });
          }

          return bytes;
        }
      }).call(this);
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {
    "_process": 276,
    "safe-buffer": 314
  }],
  292: [function (require, module, exports) {
    (function (process, global) {
      (function () {
        'use strict';

        function oldBrowser() {
          throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11');
        }

        var safeBuffer = require('safe-buffer');

        var randombytes = require('randombytes');

        var Buffer = safeBuffer.Buffer;
        var kBufferMaxLength = safeBuffer.kMaxLength;
        var crypto = global.crypto || global.msCrypto;
        var kMaxUint32 = Math.pow(2, 32) - 1;

        function assertOffset(offset, length) {
          if (typeof offset !== 'number' || offset !== offset) {
            // eslint-disable-line no-self-compare
            throw new TypeError('offset must be a number');
          }

          if (offset > kMaxUint32 || offset < 0) {
            throw new TypeError('offset must be a uint32');
          }

          if (offset > kBufferMaxLength || offset > length) {
            throw new RangeError('offset out of range');
          }
        }

        function assertSize(size, offset, length) {
          if (typeof size !== 'number' || size !== size) {
            // eslint-disable-line no-self-compare
            throw new TypeError('size must be a number');
          }

          if (size > kMaxUint32 || size < 0) {
            throw new TypeError('size must be a uint32');
          }

          if (size + offset > length || size > kBufferMaxLength) {
            throw new RangeError('buffer too small');
          }
        }

        if (crypto && crypto.getRandomValues || !true) {
          exports.randomFill = randomFill;
          exports.randomFillSync = randomFillSync;
        } else {
          exports.randomFill = oldBrowser;
          exports.randomFillSync = oldBrowser;
        }

        function randomFill(buf, offset, size, cb) {
          if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
            throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
          }

          if (typeof offset === 'function') {
            cb = offset;
            offset = 0;
            size = buf.length;
          } else if (typeof size === 'function') {
            cb = size;
            size = buf.length - offset;
          } else if (typeof cb !== 'function') {
            throw new TypeError('"cb" argument must be a function');
          }

          assertOffset(offset, buf.length);
          assertSize(size, offset, buf.length);
          return actualFill(buf, offset, size, cb);
        }

        function actualFill(buf, offset, size, cb) {
          if (true) {
            var ourBuf = buf.buffer;
            var uint = new Uint8Array(ourBuf, offset, size);
            crypto.getRandomValues(uint);

            if (cb) {
              process.nextTick(function () {
                cb(null, buf);
              });
              return;
            }

            return buf;
          }

          if (cb) {
            randombytes(size, function (err, bytes) {
              if (err) {
                return cb(err);
              }

              bytes.copy(buf, offset);
              cb(null, buf);
            });
            return;
          }

          var bytes = randombytes(size);
          bytes.copy(buf, offset);
          return buf;
        }

        function randomFillSync(buf, offset, size) {
          if (typeof offset === 'undefined') {
            offset = 0;
          }

          if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
            throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
          }

          assertOffset(offset, buf.length);
          if (size === undefined) size = buf.length - offset;
          assertSize(size, offset, buf.length);
          return actualFill(buf, offset, size);
        }
      }).call(this);
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {
    "_process": 276,
    "randombytes": 291,
    "safe-buffer": 314
  }],
  293: [function (require, module, exports) {
    module.exports = function (arr) {
      if (!Array.isArray(arr)) throw "C'mon pal. You gotta feed this thing *arrays*!";
      var randomized = [];
      var copy = arr.slice(); // Avoid mutating the original array.

      while (copy.length) {
        var num = Math.floor(Math.random() * copy.length);
        randomized.push(copy.splice(num, 1)[0]);
      }

      return randomized;
    };
  }, {}],
  294: [function (require, module, exports) {
    module.exports = require('./lib/_stream_duplex.js');
  }, {
    "./lib/_stream_duplex.js": 295
  }],
  295: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    // a duplex stream is just a stream that is both readable and writable.
    // Since JS doesn't have multiple prototypal inheritance, this class
    // prototypally inherits from Readable, and then parasitically from
    // Writable.
    'use strict';
    /*<replacement>*/

    var pna = require('process-nextick-args');
    /*</replacement>*/

    /*<replacement>*/


    var objectKeys = Object.keys || function (obj) {
      var keys = [];

      for (var key in obj) {
        keys.push(key);
      }

      return keys;
    };
    /*</replacement>*/


    module.exports = Duplex;
    /*<replacement>*/

    var util = Object.create(require('core-util-is'));
    util.inherits = require('inherits');
    /*</replacement>*/

    var Readable = require('./_stream_readable');

    var Writable = require('./_stream_writable');

    util.inherits(Duplex, Readable);
    {
      // avoid scope creep, the keys array can then be collected
      var keys = objectKeys(Writable.prototype);

      for (var v = 0; v < keys.length; v++) {
        var method = keys[v];
        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
      }
    }

    function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      if (options && options.readable === false) this.readable = false;
      if (options && options.writable === false) this.writable = false;
      this.allowHalfOpen = true;
      if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
      this.once('end', onend);
    }

    Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    }); // the no-half-open enforcer

    function onend() {
      // if we allow half-open state, or if the writable side ended,
      // then we're ok.
      if (this.allowHalfOpen || this._writableState.ended) return; // no more data can be written.
      // But allow more writes to happen in this tick.

      pna.nextTick(onEndNT, this);
    }

    function onEndNT(self) {
      self.end();
    }

    Object.defineProperty(Duplex.prototype, 'destroyed', {
      get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) {
          return false;
        }

        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) {
          return;
        } // backward compatibility, the user is explicitly
        // managing destroyed


        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });

    Duplex.prototype._destroy = function (err, cb) {
      this.push(null);
      this.end();
      pna.nextTick(cb, err);
    };
  }, {
    "./_stream_readable": 297,
    "./_stream_writable": 299,
    "core-util-is": 114,
    "inherits": 217,
    "process-nextick-args": 275
  }],
  296: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    // a passthrough stream.
    // basically just the most minimal sort of Transform stream.
    // Every written chunk gets output as-is.
    'use strict';

    module.exports = PassThrough;

    var Transform = require('./_stream_transform');
    /*<replacement>*/


    var util = Object.create(require('core-util-is'));
    util.inherits = require('inherits');
    /*</replacement>*/

    util.inherits(PassThrough, Transform);

    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);
      Transform.call(this, options);
    }

    PassThrough.prototype._transform = function (chunk, encoding, cb) {
      cb(null, chunk);
    };
  }, {
    "./_stream_transform": 298,
    "core-util-is": 114,
    "inherits": 217
  }],
  297: [function (require, module, exports) {
    (function (process, global) {
      (function () {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        'use strict';
        /*<replacement>*/

        var pna = require('process-nextick-args');
        /*</replacement>*/


        module.exports = Readable;
        /*<replacement>*/

        var isArray = require('isarray');
        /*</replacement>*/

        /*<replacement>*/


        var Duplex;
        /*</replacement>*/

        Readable.ReadableState = ReadableState;
        /*<replacement>*/

        var EE = require('events').EventEmitter;

        var EElistenerCount = function EElistenerCount(emitter, type) {
          return emitter.listeners(type).length;
        };
        /*</replacement>*/

        /*<replacement>*/


        var Stream = require('./internal/streams/stream');
        /*</replacement>*/

        /*<replacement>*/


        var Buffer = require('safe-buffer').Buffer;

        var OurUint8Array = global.Uint8Array || function () {};

        function _uint8ArrayToBuffer(chunk) {
          return Buffer.from(chunk);
        }

        function _isUint8Array(obj) {
          return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
        }
        /*</replacement>*/

        /*<replacement>*/


        var util = Object.create(require('core-util-is'));
        util.inherits = require('inherits');
        /*</replacement>*/

        /*<replacement>*/

        var debugUtil = require('util');

        var debug = void 0;

        if (debugUtil && debugUtil.debuglog) {
          debug = debugUtil.debuglog('stream');
        } else {
          debug = function debug() {};
        }
        /*</replacement>*/


        var BufferList = require('./internal/streams/BufferList');

        var destroyImpl = require('./internal/streams/destroy');

        var StringDecoder;
        util.inherits(Readable, Stream);
        var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

        function prependListener(emitter, event, fn) {
          // Sadly this is not cacheable as some libraries bundle their own
          // event emitter implementation with them.
          if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
          // userland ones.  NEVER DO THIS. This is here only because this code needs
          // to continue to work with older versions of Node.js that do not include
          // the prependListener() method. The goal is to eventually remove this hack.

          if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
        }

        function ReadableState(options, stream) {
          Duplex = Duplex || require('./_stream_duplex');
          options = options || {}; // Duplex streams are both readable and writable, but share
          // the same options object.
          // However, some cases require setting options to different
          // values for the readable and the writable sides of the duplex stream.
          // These options can be provided separately as readableXXX and writableXXX.

          var isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
          // make all the buffer merging and length checks go away

          this.objectMode = !!options.objectMode;
          if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
          // Note: 0 is a valid value, means "don't call _read preemptively ever"

          var hwm = options.highWaterMark;
          var readableHwm = options.readableHighWaterMark;
          var defaultHwm = this.objectMode ? 16 : 16 * 1024;
          if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm; // cast to ints.

          this.highWaterMark = Math.floor(this.highWaterMark); // A linked list is used to store data chunks instead of an array because the
          // linked list can remove elements from the beginning faster than
          // array.shift()

          this.buffer = new BufferList();
          this.length = 0;
          this.pipes = null;
          this.pipesCount = 0;
          this.flowing = null;
          this.ended = false;
          this.endEmitted = false;
          this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
          // immediately, or on a later tick.  We set this to true at first, because
          // any actions that shouldn't happen until "later" should generally also
          // not happen before the first read call.

          this.sync = true; // whenever we return null, then we set a flag to say
          // that we're awaiting a 'readable' event emission.

          this.needReadable = false;
          this.emittedReadable = false;
          this.readableListening = false;
          this.resumeScheduled = false; // has it been destroyed

          this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
          // encoding is 'binary' so we have to make this configurable.
          // Everything else in the universe uses 'utf8', though.

          this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

          this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

          this.readingMore = false;
          this.decoder = null;
          this.encoding = null;

          if (options.encoding) {
            if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
            this.decoder = new StringDecoder(options.encoding);
            this.encoding = options.encoding;
          }
        }

        function Readable(options) {
          Duplex = Duplex || require('./_stream_duplex');
          if (!(this instanceof Readable)) return new Readable(options);
          this._readableState = new ReadableState(options, this); // legacy

          this.readable = true;

          if (options) {
            if (typeof options.read === 'function') this._read = options.read;
            if (typeof options.destroy === 'function') this._destroy = options.destroy;
          }

          Stream.call(this);
        }

        Object.defineProperty(Readable.prototype, 'destroyed', {
          get: function get() {
            if (this._readableState === undefined) {
              return false;
            }

            return this._readableState.destroyed;
          },
          set: function set(value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (!this._readableState) {
              return;
            } // backward compatibility, the user is explicitly
            // managing destroyed


            this._readableState.destroyed = value;
          }
        });
        Readable.prototype.destroy = destroyImpl.destroy;
        Readable.prototype._undestroy = destroyImpl.undestroy;

        Readable.prototype._destroy = function (err, cb) {
          this.push(null);
          cb(err);
        }; // Manually shove something into the read() buffer.
        // This returns true if the highWaterMark has not been hit yet,
        // similar to how Writable.write() returns true if you should
        // write() some more.


        Readable.prototype.push = function (chunk, encoding) {
          var state = this._readableState;
          var skipChunkCheck;

          if (!state.objectMode) {
            if (typeof chunk === 'string') {
              encoding = encoding || state.defaultEncoding;

              if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = '';
              }

              skipChunkCheck = true;
            }
          } else {
            skipChunkCheck = true;
          }

          return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
        }; // Unshift should *always* be something directly out of read()


        Readable.prototype.unshift = function (chunk) {
          return readableAddChunk(this, chunk, null, true, false);
        };

        function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
          var state = stream._readableState;

          if (chunk === null) {
            state.reading = false;
            onEofChunk(stream, state);
          } else {
            var er;
            if (!skipChunkCheck) er = chunkInvalid(state, chunk);

            if (er) {
              stream.emit('error', er);
            } else if (state.objectMode || chunk && chunk.length > 0) {
              if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                chunk = _uint8ArrayToBuffer(chunk);
              }

              if (addToFront) {
                if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
              } else if (state.ended) {
                stream.emit('error', new Error('stream.push() after EOF'));
              } else {
                state.reading = false;

                if (state.decoder && !encoding) {
                  chunk = state.decoder.write(chunk);
                  if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
                } else {
                  addChunk(stream, state, chunk, false);
                }
              }
            } else if (!addToFront) {
              state.reading = false;
            }
          }

          return needMoreData(state);
        }

        function addChunk(stream, state, chunk, addToFront) {
          if (state.flowing && state.length === 0 && !state.sync) {
            stream.emit('data', chunk);
            stream.read(0);
          } else {
            // update the buffer info.
            state.length += state.objectMode ? 1 : chunk.length;
            if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
            if (state.needReadable) emitReadable(stream);
          }

          maybeReadMore(stream, state);
        }

        function chunkInvalid(state, chunk) {
          var er;

          if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
            er = new TypeError('Invalid non-string/buffer chunk');
          }

          return er;
        } // if it's past the high water mark, we can push in some more.
        // Also, if we have no data yet, we can stand some
        // more bytes.  This is to work around cases where hwm=0,
        // such as the repl.  Also, if the push() triggered a
        // readable event, and the user called read(largeNumber) such that
        // needReadable was set, then we ought to push more, so that another
        // 'readable' event will be triggered.


        function needMoreData(state) {
          return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
        }

        Readable.prototype.isPaused = function () {
          return this._readableState.flowing === false;
        }; // backwards compatibility.


        Readable.prototype.setEncoding = function (enc) {
          if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
          this._readableState.decoder = new StringDecoder(enc);
          this._readableState.encoding = enc;
          return this;
        }; // Don't raise the hwm > 8MB


        var MAX_HWM = 0x800000;

        function computeNewHighWaterMark(n) {
          if (n >= MAX_HWM) {
            n = MAX_HWM;
          } else {
            // Get the next highest power of 2 to prevent increasing hwm excessively in
            // tiny amounts
            n--;
            n |= n >>> 1;
            n |= n >>> 2;
            n |= n >>> 4;
            n |= n >>> 8;
            n |= n >>> 16;
            n++;
          }

          return n;
        } // This function is designed to be inlinable, so please take care when making
        // changes to the function body.


        function howMuchToRead(n, state) {
          if (n <= 0 || state.length === 0 && state.ended) return 0;
          if (state.objectMode) return 1;

          if (n !== n) {
            // Only flow one buffer at a time
            if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
          } // If we're asking for more than the current hwm, then raise the hwm.


          if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
          if (n <= state.length) return n; // Don't have enough

          if (!state.ended) {
            state.needReadable = true;
            return 0;
          }

          return state.length;
        } // you can override either this method, or the async _read(n) below.


        Readable.prototype.read = function (n) {
          debug('read', n);
          n = parseInt(n, 10);
          var state = this._readableState;
          var nOrig = n;
          if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
          // already have a bunch of data in the buffer, then just trigger
          // the 'readable' event and move on.

          if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
            debug('read: emitReadable', state.length, state.ended);
            if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
            return null;
          }

          n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

          if (n === 0 && state.ended) {
            if (state.length === 0) endReadable(this);
            return null;
          } // All the actual chunk generation logic needs to be
          // *below* the call to _read.  The reason is that in certain
          // synthetic stream cases, such as passthrough streams, _read
          // may be a completely synchronous operation which may change
          // the state of the read buffer, providing enough data when
          // before there was *not* enough.
          //
          // So, the steps are:
          // 1. Figure out what the state of things will be after we do
          // a read from the buffer.
          //
          // 2. If that resulting state will trigger a _read, then call _read.
          // Note that this may be asynchronous, or synchronous.  Yes, it is
          // deeply ugly to write APIs this way, but that still doesn't mean
          // that the Readable class should behave improperly, as streams are
          // designed to be sync/async agnostic.
          // Take note if the _read call is sync or async (ie, if the read call
          // has returned yet), so that we know whether or not it's safe to emit
          // 'readable' etc.
          //
          // 3. Actually pull the requested chunks out of the buffer and return.
          // if we need a readable event, then we need to do some reading.


          var doRead = state.needReadable;
          debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

          if (state.length === 0 || state.length - n < state.highWaterMark) {
            doRead = true;
            debug('length less than watermark', doRead);
          } // however, if we've ended, then there's no point, and if we're already
          // reading, then it's unnecessary.


          if (state.ended || state.reading) {
            doRead = false;
            debug('reading or ended', doRead);
          } else if (doRead) {
            debug('do read');
            state.reading = true;
            state.sync = true; // if the length is currently zero, then we *need* a readable event.

            if (state.length === 0) state.needReadable = true; // call internal read method

            this._read(state.highWaterMark);

            state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
            // and we need to re-evaluate how much data we can return to the user.

            if (!state.reading) n = howMuchToRead(nOrig, state);
          }

          var ret;
          if (n > 0) ret = fromList(n, state);else ret = null;

          if (ret === null) {
            state.needReadable = true;
            n = 0;
          } else {
            state.length -= n;
          }

          if (state.length === 0) {
            // If we have nothing in the buffer, then we want to know
            // as soon as we *do* get something into the buffer.
            if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

            if (nOrig !== n && state.ended) endReadable(this);
          }

          if (ret !== null) this.emit('data', ret);
          return ret;
        };

        function onEofChunk(stream, state) {
          if (state.ended) return;

          if (state.decoder) {
            var chunk = state.decoder.end();

            if (chunk && chunk.length) {
              state.buffer.push(chunk);
              state.length += state.objectMode ? 1 : chunk.length;
            }
          }

          state.ended = true; // emit 'readable' now to make sure it gets picked up.

          emitReadable(stream);
        } // Don't emit readable right away in sync mode, because this can trigger
        // another read() call => stack overflow.  This way, it might trigger
        // a nextTick recursion warning, but that's not so bad.


        function emitReadable(stream) {
          var state = stream._readableState;
          state.needReadable = false;

          if (!state.emittedReadable) {
            debug('emitReadable', state.flowing);
            state.emittedReadable = true;
            if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
          }
        }

        function emitReadable_(stream) {
          debug('emit readable');
          stream.emit('readable');
          flow(stream);
        } // at this point, the user has presumably seen the 'readable' event,
        // and called read() to consume some data.  that may have triggered
        // in turn another _read(n) call, in which case reading = true if
        // it's in progress.
        // However, if we're not ended, or reading, and the length < hwm,
        // then go ahead and try to read some more preemptively.


        function maybeReadMore(stream, state) {
          if (!state.readingMore) {
            state.readingMore = true;
            pna.nextTick(maybeReadMore_, stream, state);
          }
        }

        function maybeReadMore_(stream, state) {
          var len = state.length;

          while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
            debug('maybeReadMore read 0');
            stream.read(0);
            if (len === state.length) // didn't get any data, stop spinning.
              break;else len = state.length;
          }

          state.readingMore = false;
        } // abstract method.  to be overridden in specific implementation classes.
        // call cb(er, data) where data is <= n in length.
        // for virtual (non-string, non-buffer) streams, "length" is somewhat
        // arbitrary, and perhaps not very meaningful.


        Readable.prototype._read = function (n) {
          this.emit('error', new Error('_read() is not implemented'));
        };

        Readable.prototype.pipe = function (dest, pipeOpts) {
          var src = this;
          var state = this._readableState;

          switch (state.pipesCount) {
            case 0:
              state.pipes = dest;
              break;

            case 1:
              state.pipes = [state.pipes, dest];
              break;

            default:
              state.pipes.push(dest);
              break;
          }

          state.pipesCount += 1;
          debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
          var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
          var endFn = doEnd ? onend : unpipe;
          if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);
          dest.on('unpipe', onunpipe);

          function onunpipe(readable, unpipeInfo) {
            debug('onunpipe');

            if (readable === src) {
              if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
              }
            }
          }

          function onend() {
            debug('onend');
            dest.end();
          } // when the dest drains, it reduces the awaitDrain counter
          // on the source.  This would be more elegant with a .once()
          // handler in flow(), but adding and removing repeatedly is
          // too slow.


          var ondrain = pipeOnDrain(src);
          dest.on('drain', ondrain);
          var cleanedUp = false;

          function cleanup() {
            debug('cleanup'); // cleanup event handlers once the pipe is broken

            dest.removeListener('close', onclose);
            dest.removeListener('finish', onfinish);
            dest.removeListener('drain', ondrain);
            dest.removeListener('error', onerror);
            dest.removeListener('unpipe', onunpipe);
            src.removeListener('end', onend);
            src.removeListener('end', unpipe);
            src.removeListener('data', ondata);
            cleanedUp = true; // if the reader is waiting for a drain event from this
            // specific writer, then it would cause it to never start
            // flowing again.
            // So, if this is awaiting a drain, then we just call it now.
            // If we don't know, then assume that we are waiting for one.

            if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
          } // If the user pushes more data while we're writing to dest then we'll end up
          // in ondata again. However, we only want to increase awaitDrain once because
          // dest will only emit one 'drain' event for the multiple writes.
          // => Introduce a guard on increasing awaitDrain.


          var increasedAwaitDrain = false;
          src.on('data', ondata);

          function ondata(chunk) {
            debug('ondata');
            increasedAwaitDrain = false;
            var ret = dest.write(chunk);

            if (false === ret && !increasedAwaitDrain) {
              // If the user unpiped during `dest.write()`, it is possible
              // to get stuck in a permanently paused state if that write
              // also returned false.
              // => Check whether `dest` is still a piping destination.
              if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug('false write response, pause', src._readableState.awaitDrain);
                src._readableState.awaitDrain++;
                increasedAwaitDrain = true;
              }

              src.pause();
            }
          } // if the dest has an error, then stop piping into it.
          // however, don't suppress the throwing behavior for this.


          function onerror(er) {
            debug('onerror', er);
            unpipe();
            dest.removeListener('error', onerror);
            if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
          } // Make sure our error handler is attached before userland ones.


          prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

          function onclose() {
            dest.removeListener('finish', onfinish);
            unpipe();
          }

          dest.once('close', onclose);

          function onfinish() {
            debug('onfinish');
            dest.removeListener('close', onclose);
            unpipe();
          }

          dest.once('finish', onfinish);

          function unpipe() {
            debug('unpipe');
            src.unpipe(dest);
          } // tell the dest that it's being piped to


          dest.emit('pipe', src); // start the flow if it hasn't been started already.

          if (!state.flowing) {
            debug('pipe resume');
            src.resume();
          }

          return dest;
        };

        function pipeOnDrain(src) {
          return function () {
            var state = src._readableState;
            debug('pipeOnDrain', state.awaitDrain);
            if (state.awaitDrain) state.awaitDrain--;

            if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
              state.flowing = true;
              flow(src);
            }
          };
        }

        Readable.prototype.unpipe = function (dest) {
          var state = this._readableState;
          var unpipeInfo = {
            hasUnpiped: false
          }; // if we're not piping anywhere, then do nothing.

          if (state.pipesCount === 0) return this; // just one destination.  most common case.

          if (state.pipesCount === 1) {
            // passed in one, but it's not the right one.
            if (dest && dest !== state.pipes) return this;
            if (!dest) dest = state.pipes; // got a match.

            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;
            if (dest) dest.emit('unpipe', this, unpipeInfo);
            return this;
          } // slow case. multiple pipe destinations.


          if (!dest) {
            // remove all.
            var dests = state.pipes;
            var len = state.pipesCount;
            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;

            for (var i = 0; i < len; i++) {
              dests[i].emit('unpipe', this, unpipeInfo);
            }

            return this;
          } // try to find the right one.


          var index = indexOf(state.pipes, dest);
          if (index === -1) return this;
          state.pipes.splice(index, 1);
          state.pipesCount -= 1;
          if (state.pipesCount === 1) state.pipes = state.pipes[0];
          dest.emit('unpipe', this, unpipeInfo);
          return this;
        }; // set up data events if they are asked for
        // Ensure readable listeners eventually get something


        Readable.prototype.on = function (ev, fn) {
          var res = Stream.prototype.on.call(this, ev, fn);

          if (ev === 'data') {
            // Start flowing on next tick if stream isn't explicitly paused
            if (this._readableState.flowing !== false) this.resume();
          } else if (ev === 'readable') {
            var state = this._readableState;

            if (!state.endEmitted && !state.readableListening) {
              state.readableListening = state.needReadable = true;
              state.emittedReadable = false;

              if (!state.reading) {
                pna.nextTick(nReadingNextTick, this);
              } else if (state.length) {
                emitReadable(this);
              }
            }
          }

          return res;
        };

        Readable.prototype.addListener = Readable.prototype.on;

        function nReadingNextTick(self) {
          debug('readable nexttick read 0');
          self.read(0);
        } // pause() and resume() are remnants of the legacy readable stream API
        // If the user uses them, then switch into old mode.


        Readable.prototype.resume = function () {
          var state = this._readableState;

          if (!state.flowing) {
            debug('resume');
            state.flowing = true;
            resume(this, state);
          }

          return this;
        };

        function resume(stream, state) {
          if (!state.resumeScheduled) {
            state.resumeScheduled = true;
            pna.nextTick(resume_, stream, state);
          }
        }

        function resume_(stream, state) {
          if (!state.reading) {
            debug('resume read 0');
            stream.read(0);
          }

          state.resumeScheduled = false;
          state.awaitDrain = 0;
          stream.emit('resume');
          flow(stream);
          if (state.flowing && !state.reading) stream.read(0);
        }

        Readable.prototype.pause = function () {
          debug('call pause flowing=%j', this._readableState.flowing);

          if (false !== this._readableState.flowing) {
            debug('pause');
            this._readableState.flowing = false;
            this.emit('pause');
          }

          return this;
        };

        function flow(stream) {
          var state = stream._readableState;
          debug('flow', state.flowing);

          while (state.flowing && stream.read() !== null) {}
        } // wrap an old-style stream as the async data source.
        // This is *not* part of the readable stream interface.
        // It is an ugly unfortunate mess of history.


        Readable.prototype.wrap = function (stream) {
          var _this = this;

          var state = this._readableState;
          var paused = false;
          stream.on('end', function () {
            debug('wrapped end');

            if (state.decoder && !state.ended) {
              var chunk = state.decoder.end();
              if (chunk && chunk.length) _this.push(chunk);
            }

            _this.push(null);
          });
          stream.on('data', function (chunk) {
            debug('wrapped data');
            if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

            if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

            var ret = _this.push(chunk);

            if (!ret) {
              paused = true;
              stream.pause();
            }
          }); // proxy all the other methods.
          // important when wrapping filters and duplexes.

          for (var i in stream) {
            if (this[i] === undefined && typeof stream[i] === 'function') {
              this[i] = function (method) {
                return function () {
                  return stream[method].apply(stream, arguments);
                };
              }(i);
            }
          } // proxy certain important events.


          for (var n = 0; n < kProxyEvents.length; n++) {
            stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
          } // when we try to consume some more bytes, simply unpause the
          // underlying stream.


          this._read = function (n) {
            debug('wrapped _read', n);

            if (paused) {
              paused = false;
              stream.resume();
            }
          };

          return this;
        };

        Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._readableState.highWaterMark;
          }
        }); // exposed for testing purposes only.

        Readable._fromList = fromList; // Pluck off n bytes from an array of buffers.
        // Length is the combined lengths of all the buffers in the list.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.

        function fromList(n, state) {
          // nothing buffered
          if (state.length === 0) return null;
          var ret;
          if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
            // read it all, truncate the list
            if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
            state.buffer.clear();
          } else {
            // read part of list
            ret = fromListPartial(n, state.buffer, state.decoder);
          }
          return ret;
        } // Extracts only enough buffered data to satisfy the amount requested.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.


        function fromListPartial(n, list, hasStrings) {
          var ret;

          if (n < list.head.data.length) {
            // slice is the same for buffers and strings
            ret = list.head.data.slice(0, n);
            list.head.data = list.head.data.slice(n);
          } else if (n === list.head.data.length) {
            // first chunk is a perfect match
            ret = list.shift();
          } else {
            // result spans more than one buffer
            ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
          }

          return ret;
        } // Copies a specified amount of characters from the list of buffered data
        // chunks.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.


        function copyFromBufferString(n, list) {
          var p = list.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;

          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length) ret += str;else ret += str.slice(0, n);
            n -= nb;

            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next) list.head = p.next;else list.head = list.tail = null;
              } else {
                list.head = p;
                p.data = str.slice(nb);
              }

              break;
            }

            ++c;
          }

          list.length -= c;
          return ret;
        } // Copies a specified amount of bytes from the list of buffered data chunks.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.


        function copyFromBuffer(n, list) {
          var ret = Buffer.allocUnsafe(n);
          var p = list.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;

          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;

            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next) list.head = p.next;else list.head = list.tail = null;
              } else {
                list.head = p;
                p.data = buf.slice(nb);
              }

              break;
            }

            ++c;
          }

          list.length -= c;
          return ret;
        }

        function endReadable(stream) {
          var state = stream._readableState; // If we get here before consuming all the bytes, then that is a
          // bug in node.  Should never happen.

          if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

          if (!state.endEmitted) {
            state.ended = true;
            pna.nextTick(endReadableNT, state, stream);
          }
        }

        function endReadableNT(state, stream) {
          // Check that we didn't get one last unshift.
          if (!state.endEmitted && state.length === 0) {
            state.endEmitted = true;
            stream.readable = false;
            stream.emit('end');
          }
        }

        function indexOf(xs, x) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (xs[i] === x) return i;
          }

          return -1;
        }
      }).call(this);
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {
    "./_stream_duplex": 295,
    "./internal/streams/BufferList": 300,
    "./internal/streams/destroy": 301,
    "./internal/streams/stream": 302,
    "_process": 276,
    "core-util-is": 114,
    "events": 175,
    "inherits": 217,
    "isarray": 303,
    "process-nextick-args": 275,
    "safe-buffer": 304,
    "string_decoder/": 305,
    "util": 56
  }],
  298: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    // a transform stream is a readable/writable stream where you do
    // something with the data.  Sometimes it's called a "filter",
    // but that's not a great name for it, since that implies a thing where
    // some bits pass through, and others are simply ignored.  (That would
    // be a valid example of a transform, of course.)
    //
    // While the output is causally related to the input, it's not a
    // necessarily symmetric or synchronous transformation.  For example,
    // a zlib stream might take multiple plain-text writes(), and then
    // emit a single compressed chunk some time in the future.
    //
    // Here's how this works:
    //
    // The Transform stream has all the aspects of the readable and writable
    // stream classes.  When you write(chunk), that calls _write(chunk,cb)
    // internally, and returns false if there's a lot of pending writes
    // buffered up.  When you call read(), that calls _read(n) until
    // there's enough pending readable data buffered up.
    //
    // In a transform stream, the written data is placed in a buffer.  When
    // _read(n) is called, it transforms the queued up data, calling the
    // buffered _write cb's as it consumes chunks.  If consuming a single
    // written chunk would result in multiple output chunks, then the first
    // outputted bit calls the readcb, and subsequent chunks just go into
    // the read buffer, and will cause it to emit 'readable' if necessary.
    //
    // This way, back-pressure is actually determined by the reading side,
    // since _read has to be called to start processing a new chunk.  However,
    // a pathological inflate type of transform can cause excessive buffering
    // here.  For example, imagine a stream where every byte of input is
    // interpreted as an integer from 0-255, and then results in that many
    // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
    // 1kb of data being output.  In this case, you could write a very small
    // amount of input, and end up with a very large amount of output.  In
    // such a pathological inflating mechanism, there'd be no way to tell
    // the system to stop doing the transform.  A single 4MB write could
    // cause the system to run out of memory.
    //
    // However, even in such a pathological case, only a single written chunk
    // would be consumed, and then the rest would wait (un-transformed) until
    // the results of the previous transformed chunk were consumed.
    'use strict';

    module.exports = Transform;

    var Duplex = require('./_stream_duplex');
    /*<replacement>*/


    var util = Object.create(require('core-util-is'));
    util.inherits = require('inherits');
    /*</replacement>*/

    util.inherits(Transform, Duplex);

    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;

      if (!cb) {
        return this.emit('error', new Error('write callback called multiple times'));
      }

      ts.writechunk = null;
      ts.writecb = null;
      if (data != null) // single equals check for both `null` and `undefined`
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;

      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }

    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      }; // start out asking for a readable event once data is transformed.

      this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.

      this._readableState.sync = false;

      if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
      } // When the writable side finishes, then flush out anything remaining.


      this.on('prefinish', prefinish);
    }

    function prefinish() {
      var _this = this;

      if (typeof this._flush === 'function') {
        this._flush(function (er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }

    Transform.prototype.push = function (chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    }; // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.


    Transform.prototype._transform = function (chunk, encoding, cb) {
      throw new Error('_transform() is not implemented');
    };

    Transform.prototype._write = function (chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;

      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    }; // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.


    Transform.prototype._read = function (n) {
      var ts = this._transformState;

      if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;

        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };

    Transform.prototype._destroy = function (err, cb) {
      var _this2 = this;

      Duplex.prototype._destroy.call(this, err, function (err2) {
        cb(err2);

        _this2.emit('close');
      });
    };

    function done(stream, er, data) {
      if (er) return stream.emit('error', er);
      if (data != null) // single equals check for both `null` and `undefined`
        stream.push(data); // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided

      if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');
      if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');
      return stream.push(null);
    }
  }, {
    "./_stream_duplex": 295,
    "core-util-is": 114,
    "inherits": 217
  }],
  299: [function (require, module, exports) {
    (function (process, global, setImmediate) {
      (function () {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        // A bit simpler than readable streams.
        // Implement an async ._write(chunk, encoding, cb), and it'll handle all
        // the drain event emission and buffering.
        'use strict';
        /*<replacement>*/

        var pna = require('process-nextick-args');
        /*</replacement>*/


        module.exports = Writable;
        /* <replacement> */

        function WriteReq(chunk, encoding, cb) {
          this.chunk = chunk;
          this.encoding = encoding;
          this.callback = cb;
          this.next = null;
        } // It seems a linked list but it is not
        // there will be only 2 of these for each stream


        function CorkedRequest(state) {
          var _this = this;

          this.next = null;
          this.entry = null;

          this.finish = function () {
            onCorkedFinish(_this, state);
          };
        }
        /* </replacement> */

        /*<replacement>*/


        var asyncWrite = !true && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
        /*</replacement>*/

        /*<replacement>*/

        var Duplex;
        /*</replacement>*/

        Writable.WritableState = WritableState;
        /*<replacement>*/

        var util = Object.create(require('core-util-is'));
        util.inherits = require('inherits');
        /*</replacement>*/

        /*<replacement>*/

        var internalUtil = {
          deprecate: require('util-deprecate')
        };
        /*</replacement>*/

        /*<replacement>*/

        var Stream = require('./internal/streams/stream');
        /*</replacement>*/

        /*<replacement>*/


        var Buffer = require('safe-buffer').Buffer;

        var OurUint8Array = global.Uint8Array || function () {};

        function _uint8ArrayToBuffer(chunk) {
          return Buffer.from(chunk);
        }

        function _isUint8Array(obj) {
          return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
        }
        /*</replacement>*/


        var destroyImpl = require('./internal/streams/destroy');

        util.inherits(Writable, Stream);

        function nop() {}

        function WritableState(options, stream) {
          Duplex = Duplex || require('./_stream_duplex');
          options = options || {}; // Duplex streams are both readable and writable, but share
          // the same options object.
          // However, some cases require setting options to different
          // values for the readable and the writable sides of the duplex stream.
          // These options can be provided separately as readableXXX and writableXXX.

          var isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
          // contains buffers or objects.

          this.objectMode = !!options.objectMode;
          if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
          // Note: 0 is a valid value, means that we always return false if
          // the entire buffer is not flushed immediately on write()

          var hwm = options.highWaterMark;
          var writableHwm = options.writableHighWaterMark;
          var defaultHwm = this.objectMode ? 16 : 16 * 1024;
          if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm; // cast to ints.

          this.highWaterMark = Math.floor(this.highWaterMark); // if _final has been called

          this.finalCalled = false; // drain event flag.

          this.needDrain = false; // at the start of calling end()

          this.ending = false; // when end() has been called, and returned

          this.ended = false; // when 'finish' is emitted

          this.finished = false; // has it been destroyed

          this.destroyed = false; // should we decode strings into buffers before passing to _write?
          // this is here so that some node-core streams can optimize string
          // handling at a lower level.

          var noDecode = options.decodeStrings === false;
          this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
          // encoding is 'binary' so we have to make this configurable.
          // Everything else in the universe uses 'utf8', though.

          this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
          // of how much we're waiting to get pushed to some underlying
          // socket or file.

          this.length = 0; // a flag to see when we're in the middle of a write.

          this.writing = false; // when true all writes will be buffered until .uncork() call

          this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
          // or on a later tick.  We set this to true at first, because any
          // actions that shouldn't happen until "later" should generally also
          // not happen before the first write call.

          this.sync = true; // a flag to know if we're processing previously buffered items, which
          // may call the _write() callback in the same tick, so that we don't
          // end up in an overlapped onwrite situation.

          this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

          this.onwrite = function (er) {
            onwrite(stream, er);
          }; // the callback that the user supplies to write(chunk,encoding,cb)


          this.writecb = null; // the amount that is being written when _write is called.

          this.writelen = 0;
          this.bufferedRequest = null;
          this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
          // this must be 0 before 'finish' can be emitted

          this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
          // This is relevant for synchronous Transform streams

          this.prefinished = false; // True if the error was already emitted and should not be thrown again

          this.errorEmitted = false; // count buffered requests

          this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
          // one allocated and free to use, and we maintain at most two

          this.corkedRequestsFree = new CorkedRequest(this);
        }

        WritableState.prototype.getBuffer = function getBuffer() {
          var current = this.bufferedRequest;
          var out = [];

          while (current) {
            out.push(current);
            current = current.next;
          }

          return out;
        };

        (function () {
          try {
            Object.defineProperty(WritableState.prototype, 'buffer', {
              get: internalUtil.deprecate(function () {
                return this.getBuffer();
              }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
            });
          } catch (_) {}
        })(); // Test _writableState for inheritance to account for Duplex streams,
        // whose prototype chain only points to Readable.


        var realHasInstance;

        if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
          realHasInstance = Function.prototype[Symbol.hasInstance];
          Object.defineProperty(Writable, Symbol.hasInstance, {
            value: function value(object) {
              if (realHasInstance.call(this, object)) return true;
              if (this !== Writable) return false;
              return object && object._writableState instanceof WritableState;
            }
          });
        } else {
          realHasInstance = function realHasInstance(object) {
            return object instanceof this;
          };
        }

        function Writable(options) {
          Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
          // `realHasInstance` is necessary because using plain `instanceof`
          // would return false, as no `_writableState` property is attached.
          // Trying to use the custom `instanceof` for Writable here will also break the
          // Node.js LazyTransform implementation, which has a non-trivial getter for
          // `_writableState` that would lead to infinite recursion.

          if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
            return new Writable(options);
          }

          this._writableState = new WritableState(options, this); // legacy.

          this.writable = true;

          if (options) {
            if (typeof options.write === 'function') this._write = options.write;
            if (typeof options.writev === 'function') this._writev = options.writev;
            if (typeof options.destroy === 'function') this._destroy = options.destroy;
            if (typeof options.final === 'function') this._final = options.final;
          }

          Stream.call(this);
        } // Otherwise people can pipe Writable streams, which is just wrong.


        Writable.prototype.pipe = function () {
          this.emit('error', new Error('Cannot pipe, not readable'));
        };

        function writeAfterEnd(stream, cb) {
          var er = new Error('write after end'); // TODO: defer error events consistently everywhere, not just the cb

          stream.emit('error', er);
          pna.nextTick(cb, er);
        } // Checks that a user-supplied chunk is valid, especially for the particular
        // mode the stream is in. Currently this means that `null` is never accepted
        // and undefined/non-string values are only allowed in object mode.


        function validChunk(stream, state, chunk, cb) {
          var valid = true;
          var er = false;

          if (chunk === null) {
            er = new TypeError('May not write null values to stream');
          } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
            er = new TypeError('Invalid non-string/buffer chunk');
          }

          if (er) {
            stream.emit('error', er);
            pna.nextTick(cb, er);
            valid = false;
          }

          return valid;
        }

        Writable.prototype.write = function (chunk, encoding, cb) {
          var state = this._writableState;
          var ret = false;

          var isBuf = !state.objectMode && _isUint8Array(chunk);

          if (isBuf && !Buffer.isBuffer(chunk)) {
            chunk = _uint8ArrayToBuffer(chunk);
          }

          if (typeof encoding === 'function') {
            cb = encoding;
            encoding = null;
          }

          if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
          if (typeof cb !== 'function') cb = nop;
          if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
            state.pendingcb++;
            ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
          }
          return ret;
        };

        Writable.prototype.cork = function () {
          var state = this._writableState;
          state.corked++;
        };

        Writable.prototype.uncork = function () {
          var state = this._writableState;

          if (state.corked) {
            state.corked--;
            if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
          }
        };

        Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
          // node::ParseEncoding() requires lower case.
          if (typeof encoding === 'string') encoding = encoding.toLowerCase();
          if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
          this._writableState.defaultEncoding = encoding;
          return this;
        };

        function decodeChunk(state, chunk, encoding) {
          if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
            chunk = Buffer.from(chunk, encoding);
          }

          return chunk;
        }

        Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState.highWaterMark;
          }
        }); // if we're already writing something, then just put this
        // in the queue, and wait our turn.  Otherwise, call _write
        // If we return false, then we need a drain event, so set that flag.

        function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
          if (!isBuf) {
            var newChunk = decodeChunk(state, chunk, encoding);

            if (chunk !== newChunk) {
              isBuf = true;
              encoding = 'buffer';
              chunk = newChunk;
            }
          }

          var len = state.objectMode ? 1 : chunk.length;
          state.length += len;
          var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

          if (!ret) state.needDrain = true;

          if (state.writing || state.corked) {
            var last = state.lastBufferedRequest;
            state.lastBufferedRequest = {
              chunk: chunk,
              encoding: encoding,
              isBuf: isBuf,
              callback: cb,
              next: null
            };

            if (last) {
              last.next = state.lastBufferedRequest;
            } else {
              state.bufferedRequest = state.lastBufferedRequest;
            }

            state.bufferedRequestCount += 1;
          } else {
            doWrite(stream, state, false, len, chunk, encoding, cb);
          }

          return ret;
        }

        function doWrite(stream, state, writev, len, chunk, encoding, cb) {
          state.writelen = len;
          state.writecb = cb;
          state.writing = true;
          state.sync = true;
          if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
          state.sync = false;
        }

        function onwriteError(stream, state, sync, er, cb) {
          --state.pendingcb;

          if (sync) {
            // defer the callback if we are being called synchronously
            // to avoid piling up things on the stack
            pna.nextTick(cb, er); // this can emit finish, and it will always happen
            // after error

            pna.nextTick(finishMaybe, stream, state);
            stream._writableState.errorEmitted = true;
            stream.emit('error', er);
          } else {
            // the caller expect this to happen before if
            // it is async
            cb(er);
            stream._writableState.errorEmitted = true;
            stream.emit('error', er); // this can emit finish, but finish must
            // always follow error

            finishMaybe(stream, state);
          }
        }

        function onwriteStateUpdate(state) {
          state.writing = false;
          state.writecb = null;
          state.length -= state.writelen;
          state.writelen = 0;
        }

        function onwrite(stream, er) {
          var state = stream._writableState;
          var sync = state.sync;
          var cb = state.writecb;
          onwriteStateUpdate(state);
          if (er) onwriteError(stream, state, sync, er, cb);else {
            // Check if we're actually ready to finish, but don't emit yet
            var finished = needFinish(state);

            if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
              clearBuffer(stream, state);
            }

            if (sync) {
              /*<replacement>*/
              asyncWrite(afterWrite, stream, state, finished, cb);
              /*</replacement>*/
            } else {
              afterWrite(stream, state, finished, cb);
            }
          }
        }

        function afterWrite(stream, state, finished, cb) {
          if (!finished) onwriteDrain(stream, state);
          state.pendingcb--;
          cb();
          finishMaybe(stream, state);
        } // Must force callback to be called on nextTick, so that we don't
        // emit 'drain' before the write() consumer gets the 'false' return
        // value, and has a chance to attach a 'drain' listener.


        function onwriteDrain(stream, state) {
          if (state.length === 0 && state.needDrain) {
            state.needDrain = false;
            stream.emit('drain');
          }
        } // if there's something in the buffer waiting, then process it


        function clearBuffer(stream, state) {
          state.bufferProcessing = true;
          var entry = state.bufferedRequest;

          if (stream._writev && entry && entry.next) {
            // Fast case, write everything using _writev()
            var l = state.bufferedRequestCount;
            var buffer = new Array(l);
            var holder = state.corkedRequestsFree;
            holder.entry = entry;
            var count = 0;
            var allBuffers = true;

            while (entry) {
              buffer[count] = entry;
              if (!entry.isBuf) allBuffers = false;
              entry = entry.next;
              count += 1;
            }

            buffer.allBuffers = allBuffers;
            doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
            // as the hot path ends with doWrite

            state.pendingcb++;
            state.lastBufferedRequest = null;

            if (holder.next) {
              state.corkedRequestsFree = holder.next;
              holder.next = null;
            } else {
              state.corkedRequestsFree = new CorkedRequest(state);
            }

            state.bufferedRequestCount = 0;
          } else {
            // Slow case, write chunks one-by-one
            while (entry) {
              var chunk = entry.chunk;
              var encoding = entry.encoding;
              var cb = entry.callback;
              var len = state.objectMode ? 1 : chunk.length;
              doWrite(stream, state, false, len, chunk, encoding, cb);
              entry = entry.next;
              state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
              // it means that we need to wait until it does.
              // also, that means that the chunk and cb are currently
              // being processed, so move the buffer counter past them.

              if (state.writing) {
                break;
              }
            }

            if (entry === null) state.lastBufferedRequest = null;
          }

          state.bufferedRequest = entry;
          state.bufferProcessing = false;
        }

        Writable.prototype._write = function (chunk, encoding, cb) {
          cb(new Error('_write() is not implemented'));
        };

        Writable.prototype._writev = null;

        Writable.prototype.end = function (chunk, encoding, cb) {
          var state = this._writableState;

          if (typeof chunk === 'function') {
            cb = chunk;
            chunk = null;
            encoding = null;
          } else if (typeof encoding === 'function') {
            cb = encoding;
            encoding = null;
          }

          if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

          if (state.corked) {
            state.corked = 1;
            this.uncork();
          } // ignore unnecessary end() calls.


          if (!state.ending && !state.finished) endWritable(this, state, cb);
        };

        function needFinish(state) {
          return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
        }

        function callFinal(stream, state) {
          stream._final(function (err) {
            state.pendingcb--;

            if (err) {
              stream.emit('error', err);
            }

            state.prefinished = true;
            stream.emit('prefinish');
            finishMaybe(stream, state);
          });
        }

        function prefinish(stream, state) {
          if (!state.prefinished && !state.finalCalled) {
            if (typeof stream._final === 'function') {
              state.pendingcb++;
              state.finalCalled = true;
              pna.nextTick(callFinal, stream, state);
            } else {
              state.prefinished = true;
              stream.emit('prefinish');
            }
          }
        }

        function finishMaybe(stream, state) {
          var need = needFinish(state);

          if (need) {
            prefinish(stream, state);

            if (state.pendingcb === 0) {
              state.finished = true;
              stream.emit('finish');
            }
          }

          return need;
        }

        function endWritable(stream, state, cb) {
          state.ending = true;
          finishMaybe(stream, state);

          if (cb) {
            if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
          }

          state.ended = true;
          stream.writable = false;
        }

        function onCorkedFinish(corkReq, state, err) {
          var entry = corkReq.entry;
          corkReq.entry = null;

          while (entry) {
            var cb = entry.callback;
            state.pendingcb--;
            cb(err);
            entry = entry.next;
          }

          if (state.corkedRequestsFree) {
            state.corkedRequestsFree.next = corkReq;
          } else {
            state.corkedRequestsFree = corkReq;
          }
        }

        Object.defineProperty(Writable.prototype, 'destroyed', {
          get: function get() {
            if (this._writableState === undefined) {
              return false;
            }

            return this._writableState.destroyed;
          },
          set: function set(value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (!this._writableState) {
              return;
            } // backward compatibility, the user is explicitly
            // managing destroyed


            this._writableState.destroyed = value;
          }
        });
        Writable.prototype.destroy = destroyImpl.destroy;
        Writable.prototype._undestroy = destroyImpl.undestroy;

        Writable.prototype._destroy = function (err, cb) {
          this.end();
          cb(err);
        };
      }).call(this);
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}, require("timers").setImmediate);
  }, {
    "./_stream_duplex": 295,
    "./internal/streams/destroy": 301,
    "./internal/streams/stream": 302,
    "_process": 276,
    "core-util-is": 114,
    "inherits": 217,
    "process-nextick-args": 275,
    "safe-buffer": 304,
    "timers": 368,
    "util-deprecate": 400
  }],
  300: [function (require, module, exports) {
    'use strict';

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    var Buffer = require('safe-buffer').Buffer;

    var util = require('util');

    function copyBuffer(src, target, offset) {
      src.copy(target, offset);
    }

    module.exports = function () {
      function BufferList() {
        _classCallCheck(this, BufferList);

        this.head = null;
        this.tail = null;
        this.length = 0;
      }

      BufferList.prototype.push = function push(v) {
        var entry = {
          data: v,
          next: null
        };
        if (this.length > 0) this.tail.next = entry;else this.head = entry;
        this.tail = entry;
        ++this.length;
      };

      BufferList.prototype.unshift = function unshift(v) {
        var entry = {
          data: v,
          next: this.head
        };
        if (this.length === 0) this.tail = entry;
        this.head = entry;
        ++this.length;
      };

      BufferList.prototype.shift = function shift() {
        if (this.length === 0) return;
        var ret = this.head.data;
        if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
        --this.length;
        return ret;
      };

      BufferList.prototype.clear = function clear() {
        this.head = this.tail = null;
        this.length = 0;
      };

      BufferList.prototype.join = function join(s) {
        if (this.length === 0) return '';
        var p = this.head;
        var ret = '' + p.data;

        while (p = p.next) {
          ret += s + p.data;
        }

        return ret;
      };

      BufferList.prototype.concat = function concat(n) {
        if (this.length === 0) return Buffer.alloc(0);
        if (this.length === 1) return this.head.data;
        var ret = Buffer.allocUnsafe(n >>> 0);
        var p = this.head;
        var i = 0;

        while (p) {
          copyBuffer(p.data, ret, i);
          i += p.data.length;
          p = p.next;
        }

        return ret;
      };

      return BufferList;
    }();

    if (util && util.inspect && util.inspect.custom) {
      module.exports.prototype[util.inspect.custom] = function () {
        var obj = util.inspect({
          length: this.length
        });
        return this.constructor.name + ' ' + obj;
      };
    }
  }, {
    "safe-buffer": 304,
    "util": 56
  }],
  301: [function (require, module, exports) {
    'use strict';
    /*<replacement>*/

    var pna = require('process-nextick-args');
    /*</replacement>*/
    // undocumented cb() API, needed for core, not for public API


    function destroy(err, cb) {
      var _this = this;

      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;

      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
          pna.nextTick(emitErrorNT, this, err);
        }

        return this;
      } // we set destroyed to true before firing error callbacks in order
      // to make it re-entrance safe in case destroy() is called within callbacks


      if (this._readableState) {
        this._readableState.destroyed = true;
      } // if this is a duplex stream mark the writable part as destroyed as well


      if (this._writableState) {
        this._writableState.destroyed = true;
      }

      this._destroy(err || null, function (err) {
        if (!cb && err) {
          pna.nextTick(emitErrorNT, _this, err);

          if (_this._writableState) {
            _this._writableState.errorEmitted = true;
          }
        } else if (cb) {
          cb(err);
        }
      });

      return this;
    }

    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }

      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }

    function emitErrorNT(self, err) {
      self.emit('error', err);
    }

    module.exports = {
      destroy: destroy,
      undestroy: undestroy
    };
  }, {
    "process-nextick-args": 275
  }],
  302: [function (require, module, exports) {
    arguments[4][20][0].apply(exports, arguments);
  }, {
    "dup": 20,
    "events": 175
  }],
  303: [function (require, module, exports) {
    arguments[4][219][0].apply(exports, arguments);
  }, {
    "dup": 219
  }],
  304: [function (require, module, exports) {
    /* eslint-disable node/no-deprecated-api */
    var buffer = require('buffer');

    var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers

    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }

    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer;
    } else {
      // Copy properties from require('buffer')
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }

    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length);
    } // Copy static methods from Buffer


    copyProps(Buffer, SafeBuffer);

    SafeBuffer.from = function (arg, encodingOrOffset, length) {
      if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number');
      }

      return Buffer(arg, encodingOrOffset, length);
    };

    SafeBuffer.alloc = function (size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }

      var buf = Buffer(size);

      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }

      return buf;
    };

    SafeBuffer.allocUnsafe = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }

      return Buffer(size);
    };

    SafeBuffer.allocUnsafeSlow = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }

      return buffer.SlowBuffer(size);
    };
  }, {
    "buffer": 102
  }],
  305: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    'use strict';
    /*<replacement>*/

    var Buffer = require('safe-buffer').Buffer;
    /*</replacement>*/


    var isEncoding = Buffer.isEncoding || function (encoding) {
      encoding = '' + encoding;

      switch (encoding && encoding.toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
        case 'raw':
          return true;

        default:
          return false;
      }
    };

    function _normalizeEncoding(enc) {
      if (!enc) return 'utf8';
      var retried;

      while (true) {
        switch (enc) {
          case 'utf8':
          case 'utf-8':
            return 'utf8';

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return 'utf16le';

          case 'latin1':
          case 'binary':
            return 'latin1';

          case 'base64':
          case 'ascii':
          case 'hex':
            return enc;

          default:
            if (retried) return; // undefined

            enc = ('' + enc).toLowerCase();
            retried = true;
        }
      }
    }

    ; // Do not cache `Buffer.isEncoding` when checking encoding names as some
    // modules monkey-patch it to support additional encodings

    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);

      if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
      return nenc || enc;
    } // StringDecoder provides an interface for efficiently splitting a series of
    // buffers into a series of JS strings without breaking apart multi-byte
    // characters.


    exports.StringDecoder = StringDecoder;

    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;

      switch (this.encoding) {
        case 'utf16le':
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;

        case 'utf8':
          this.fillLast = utf8FillLast;
          nb = 4;
          break;

        case 'base64':
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;

        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }

      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer.allocUnsafe(nb);
    }

    StringDecoder.prototype.write = function (buf) {
      if (buf.length === 0) return '';
      var r;
      var i;

      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }

      if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || '';
    };

    StringDecoder.prototype.end = utf8End; // Returns only complete characters in a Buffer

    StringDecoder.prototype.text = utf8Text; // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer

    StringDecoder.prototype.fillLast = function (buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }

      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    }; // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
    // continuation byte. If an invalid byte is detected, -2 is returned.


    function utf8CheckByte(byte) {
      if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
      return byte >> 6 === 0x02 ? -1 : -2;
    } // Checks at most 3 bytes at the end of a Buffer in order to detect an
    // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
    // needed to complete the UTF-8 character (if applicable) are returned.


    function utf8CheckIncomplete(self, buf, i) {
      var j = buf.length - 1;
      if (j < i) return 0;
      var nb = utf8CheckByte(buf[j]);

      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
      }

      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);

      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
      }

      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);

      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
        }

        return nb;
      }

      return 0;
    } // Validates as many continuation bytes for a multi-byte UTF-8 character as
    // needed or are available. If we see a non-continuation byte where we expect
    // one, we "replace" the validated continuation bytes we've seen so far with
    // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
    // behavior. The continuation byte check is included three times in the case
    // where all of the continuation bytes for a character exist in the same buffer.
    // It is also done this way as a slight performance increase instead of using a
    // loop.


    function utf8CheckExtraBytes(self, buf, p) {
      if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return "\uFFFD";
      }

      if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
          self.lastNeed = 1;
          return "\uFFFD";
        }

        if (self.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 0xC0) !== 0x80) {
            self.lastNeed = 2;
            return "\uFFFD";
          }
        }
      }
    } // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.


    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf, p);
      if (r !== undefined) return r;

      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }

      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    } // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
    // partial character, the character's bytes are buffered until the required
    // number of bytes are available.


    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed) return buf.toString('utf8', i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString('utf8', i, end);
    } // For UTF-8, a replacement character is added when ending on a partial
    // character.


    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + "\uFFFD";
      return r;
    } // UTF-16LE typically needs two bytes per character, but even if we have an even
    // number of bytes available, we need to check if we end on a leading/high
    // surrogate. In that case, we need to wait for the next two bytes in order to
    // decode the last character properly.


    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);

        if (r) {
          var c = r.charCodeAt(r.length - 1);

          if (c >= 0xD800 && c <= 0xDBFF) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }

        return r;
      }

      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString('utf16le', i, buf.length - 1);
    } // For UTF-16LE we do not explicitly append special replacement characters if we
    // end on a partial character, we simply let v8 handle that.


    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';

      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
      }

      return r;
    }

    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0) return buf.toString('base64', i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;

      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }

      return buf.toString('base64', i, buf.length - n);
    }

    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
      return r;
    } // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)


    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }

    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : '';
    }
  }, {
    "safe-buffer": 304
  }],
  306: [function (require, module, exports) {
    module.exports = require('./readable').PassThrough;
  }, {
    "./readable": 307
  }],
  307: [function (require, module, exports) {
    exports = module.exports = require('./lib/_stream_readable.js');
    exports.Stream = exports;
    exports.Readable = exports;
    exports.Writable = require('./lib/_stream_writable.js');
    exports.Duplex = require('./lib/_stream_duplex.js');
    exports.Transform = require('./lib/_stream_transform.js');
    exports.PassThrough = require('./lib/_stream_passthrough.js');
  }, {
    "./lib/_stream_duplex.js": 295,
    "./lib/_stream_passthrough.js": 296,
    "./lib/_stream_readable.js": 297,
    "./lib/_stream_transform.js": 298,
    "./lib/_stream_writable.js": 299
  }],
  308: [function (require, module, exports) {
    module.exports = require('./readable').Transform;
  }, {
    "./readable": 307
  }],
  309: [function (require, module, exports) {
    module.exports = require('./lib/_stream_writable.js');
  }, {
    "./lib/_stream_writable.js": 299
  }],
  310: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        var EMPTY = [];
        module.exports = RecordCache;

        function RecordSet() {
          this.list = [];
          this.map = new Map();
        }

        RecordSet.prototype.add = function (record, value) {
          var k = toString(record);
          var r = this.map.get(k);
          if (r) return false;
          r = {
            index: this.list.length,
            record: value || record
          };
          this.list.push(r);
          this.map.set(k, r);
          return true;
        };

        RecordSet.prototype.remove = function (record) {
          var k = toString(record);
          var r = this.map.get(k);
          if (!r) return false;
          swap(this.list, r.index, this.list.length - 1);
          this.list.pop();
          this.map.delete(k);
          return true;
        };

        function RecordStore() {
          this.records = new Map();
          this.size = 0;
        }

        RecordStore.prototype.add = function (name, record, value) {
          var r = this.records.get(name);

          if (!r) {
            r = new RecordSet();
            this.records.set(name, r);
          }

          if (r.add(record, value)) {
            this.size++;
            return true;
          }

          return false;
        };

        RecordStore.prototype.remove = function (name, record, value) {
          var r = this.records.get(name);
          if (!r) return false;

          if (r.remove(record, value)) {
            this.size--;
            if (!r.map.size) this.records.delete(name);
            return true;
          }

          return false;
        };

        RecordStore.prototype.get = function (name) {
          var r = this.records.get(name);
          return r ? r.list : EMPTY;
        };

        function RecordCache(opts) {
          if (!(this instanceof RecordCache)) return new RecordCache(opts);
          if (!opts) opts = {};
          this.maxSize = opts.maxSize || Infinity;
          this.maxAge = opts.maxAge || 0;
          this._onstale = opts.onStale || opts.onstale || null;
          this._fresh = new RecordStore();
          this._stale = new RecordStore();
          this._interval = null;

          if (this.maxAge && this.maxAge < Infinity) {
            // 2/3 gives us a span of 0.66-1.33 maxAge or avg maxAge
            var tick = Math.ceil(2 / 3 * this.maxAge);
            this._interval = setInterval(this._gc.bind(this), tick);
            if (this._interval.unref) this._interval.unref();
          }
        }

        Object.defineProperty(RecordCache.prototype, 'size', {
          get: function get() {
            return this._fresh.size + this._stale.size;
          }
        });

        RecordCache.prototype.add = function (name, record, value) {
          this._stale.remove(name, record, value);

          if (this._fresh.add(name, record, value) && this._fresh.size > this.maxSize) {
            this._gc();
          }
        };

        RecordCache.prototype.remove = function (name, record, value) {
          this._fresh.remove(name, record, value);

          this._stale.remove(name, record, value);
        };

        RecordCache.prototype.get = function (name, n) {
          var a = this._fresh.get(name);

          var b = this._stale.get(name);

          var aLen = a.length;
          var bLen = b.length;
          var len = aLen + bLen;
          if (n > len || !n) n = len;
          var result = new Array(n);

          for (var i = 0; i < n; i++) {
            var j = Math.floor(Math.random() * (aLen + bLen));

            if (j < aLen) {
              result[i] = a[j].record;
              swap(a, j, --aLen);
            } else {
              j -= aLen;
              result[i] = b[j].record;
              swap(b, j, --bLen);
            }
          }

          return result;
        };

        RecordCache.prototype._gc = function () {
          if (this._onstale && this._stale.size > 0) this._onstale(this._stale);
          this._stale = this._fresh;
          this._fresh = new RecordStore();
        };

        RecordCache.prototype.clear = function () {
          this._gc();

          this._gc();
        };

        RecordCache.prototype.destroy = function () {
          this.clear();
          clearInterval(this._interval);
          this._interval = null;
        };

        function toString(record) {
          return Buffer.isBuffer(record) ? record.toString('hex') : record;
        }

        function swap(list, a, b) {
          var tmp = list[a];
          tmp.index = b;
          list[b].index = a;
          list[a] = list[b];
          list[b] = tmp;
        }
      }).call(this);
    }).call(this, {
      "isBuffer": require("../is-buffer/index.js")
    });
  }, {
    "../is-buffer/index.js": 218
  }],
  311: [function (require, module, exports) {
    'use strict';
    /**
     * Remove a range of items from an array
     *
     * @function removeItems
     * @param {Array<*>} arr The target array
     * @param {number} startIdx The index to begin removing from (inclusive)
     * @param {number} removeCount How many items to remove
     */

    module.exports = function removeItems(arr, startIdx, removeCount) {
      var i,
          length = arr.length;

      if (startIdx >= length || removeCount === 0) {
        return;
      }

      removeCount = startIdx + removeCount > length ? length - startIdx : removeCount;
      var len = length - removeCount;

      for (i = startIdx; i < len; ++i) {
        arr[i] = arr[i + removeCount];
      }

      arr.length = len;
    };
  }, {}],
  312: [function (require, module, exports) {
    'use strict';

    var Buffer = require('buffer').Buffer;

    var inherits = require('inherits');

    var HashBase = require('hash-base');

    var ARRAY16 = new Array(16);
    var zl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
    var zr = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
    var sl = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
    var sr = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
    var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];
    var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];

    function RIPEMD160() {
      HashBase.call(this, 64); // state

      this._a = 0x67452301;
      this._b = 0xefcdab89;
      this._c = 0x98badcfe;
      this._d = 0x10325476;
      this._e = 0xc3d2e1f0;
    }

    inherits(RIPEMD160, HashBase);

    RIPEMD160.prototype._update = function () {
      var words = ARRAY16;

      for (var j = 0; j < 16; ++j) {
        words[j] = this._block.readInt32LE(j * 4);
      }

      var al = this._a | 0;
      var bl = this._b | 0;
      var cl = this._c | 0;
      var dl = this._d | 0;
      var el = this._e | 0;
      var ar = this._a | 0;
      var br = this._b | 0;
      var cr = this._c | 0;
      var dr = this._d | 0;
      var er = this._e | 0; // computation

      for (var i = 0; i < 80; i += 1) {
        var tl;
        var tr;

        if (i < 16) {
          tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
          tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
        } else if (i < 32) {
          tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
          tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
        } else if (i < 48) {
          tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
          tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
        } else if (i < 64) {
          tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
          tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
        } else {
          // if (i<80) {
          tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
          tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
        }

        al = el;
        el = dl;
        dl = rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = rotl(cr, 10);
        cr = br;
        br = tr;
      } // update state


      var t = this._b + cl + dr | 0;
      this._b = this._c + dl + er | 0;
      this._c = this._d + el + ar | 0;
      this._d = this._e + al + br | 0;
      this._e = this._a + bl + cr | 0;
      this._a = t;
    };

    RIPEMD160.prototype._digest = function () {
      // create padding and handle blocks
      this._block[this._blockOffset++] = 0x80;

      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);

        this._update();

        this._blockOffset = 0;
      }

      this._block.fill(0, this._blockOffset, 56);

      this._block.writeUInt32LE(this._length[0], 56);

      this._block.writeUInt32LE(this._length[1], 60);

      this._update(); // produce result


      var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20);
      buffer.writeInt32LE(this._a, 0);
      buffer.writeInt32LE(this._b, 4);
      buffer.writeInt32LE(this._c, 8);
      buffer.writeInt32LE(this._d, 12);
      buffer.writeInt32LE(this._e, 16);
      return buffer;
    };

    function rotl(x, n) {
      return x << n | x >>> 32 - n;
    }

    function fn1(a, b, c, d, e, m, k, s) {
      return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
    }

    function fn2(a, b, c, d, e, m, k, s) {
      return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
    }

    function fn3(a, b, c, d, e, m, k, s) {
      return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
    }

    function fn4(a, b, c, d, e, m, k, s) {
      return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
    }

    function fn5(a, b, c, d, e, m, k, s) {
      return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
    }

    module.exports = RIPEMD160;
  }, {
    "buffer": 102,
    "hash-base": 180,
    "inherits": 217
  }],
  313: [function (require, module, exports) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (_typeof2(exports) === 'object' && _typeof2(module) === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if (_typeof2(exports) === 'object') exports["Rusha"] = factory();else root["Rusha"] = factory();
    })(typeof self !== 'undefined' ? self : this, function () {
      return (
        /******/
        function (modules) {
          // webpackBootstrap

          /******/
          // The module cache

          /******/
          var installedModules = {};
          /******/

          /******/
          // The require function

          /******/

          function __webpack_require__(moduleId) {
            /******/

            /******/
            // Check if module is in cache

            /******/
            if (installedModules[moduleId]) {
              /******/
              return installedModules[moduleId].exports;
              /******/
            }
            /******/
            // Create a new module (and put it into the cache)

            /******/


            var module = installedModules[moduleId] = {
              /******/
              i: moduleId,

              /******/
              l: false,

              /******/
              exports: {}
              /******/

            };
            /******/

            /******/
            // Execute the module function

            /******/

            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            /******/

            /******/
            // Flag the module as loaded

            /******/

            module.l = true;
            /******/

            /******/
            // Return the exports of the module

            /******/

            return module.exports;
            /******/
          }
          /******/

          /******/

          /******/
          // expose the modules object (__webpack_modules__)

          /******/


          __webpack_require__.m = modules;
          /******/

          /******/
          // expose the module cache

          /******/

          __webpack_require__.c = installedModules;
          /******/

          /******/
          // define getter function for harmony exports

          /******/

          __webpack_require__.d = function (exports, name, getter) {
            /******/
            if (!__webpack_require__.o(exports, name)) {
              /******/
              Object.defineProperty(exports, name, {
                /******/
                configurable: false,

                /******/
                enumerable: true,

                /******/
                get: getter
                /******/

              });
              /******/
            }
            /******/

          };
          /******/

          /******/
          // getDefaultExport function for compatibility with non-harmony modules

          /******/


          __webpack_require__.n = function (module) {
            /******/
            var getter = module && module.__esModule ?
            /******/
            function getDefault() {
              return module['default'];
            } :
            /******/
            function getModuleExports() {
              return module;
            };
            /******/

            __webpack_require__.d(getter, 'a', getter);
            /******/


            return getter;
            /******/
          };
          /******/

          /******/
          // Object.prototype.hasOwnProperty.call

          /******/


          __webpack_require__.o = function (object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };
          /******/

          /******/
          // __webpack_public_path__

          /******/


          __webpack_require__.p = "";
          /******/

          /******/
          // Load entry module and return exports

          /******/

          return __webpack_require__(__webpack_require__.s = 3);
          /******/
        }(
        /************************************************************************/

        /******/
        [
        /* 0 */

        /***/
        function (module, exports, __webpack_require__) {
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          /* eslint-env commonjs, browser */


          var RushaCore = __webpack_require__(5);

          var _require = __webpack_require__(1),
              toHex = _require.toHex,
              ceilHeapSize = _require.ceilHeapSize;

          var conv = __webpack_require__(6); // Calculate the length of buffer that the sha1 routine uses
          // including the padding.


          var padlen = function padlen(len) {
            for (len += 9; len % 64 > 0; len += 1) {}

            return len;
          };

          var padZeroes = function padZeroes(bin, len) {
            var h8 = new Uint8Array(bin.buffer);
            var om = len % 4,
                align = len - om;

            switch (om) {
              case 0:
                h8[align + 3] = 0;

              case 1:
                h8[align + 2] = 0;

              case 2:
                h8[align + 1] = 0;

              case 3:
                h8[align + 0] = 0;
            }

            for (var i = (len >> 2) + 1; i < bin.length; i++) {
              bin[i] = 0;
            }
          };

          var padData = function padData(bin, chunkLen, msgLen) {
            bin[chunkLen >> 2] |= 0x80 << 24 - (chunkLen % 4 << 3); // To support msgLen >= 2 GiB, use a float division when computing the
            // high 32-bits of the big-endian message length in bits.

            bin[((chunkLen >> 2) + 2 & ~0x0f) + 14] = msgLen / (1 << 29) | 0;
            bin[((chunkLen >> 2) + 2 & ~0x0f) + 15] = msgLen << 3;
          };

          var getRawDigest = function getRawDigest(heap, padMaxChunkLen) {
            var io = new Int32Array(heap, padMaxChunkLen + 320, 5);
            var out = new Int32Array(5);
            var arr = new DataView(out.buffer);
            arr.setInt32(0, io[0], false);
            arr.setInt32(4, io[1], false);
            arr.setInt32(8, io[2], false);
            arr.setInt32(12, io[3], false);
            arr.setInt32(16, io[4], false);
            return out;
          };

          var Rusha = function () {
            function Rusha(chunkSize) {
              _classCallCheck(this, Rusha);

              chunkSize = chunkSize || 64 * 1024;

              if (chunkSize % 64 > 0) {
                throw new Error('Chunk size must be a multiple of 128 bit');
              }

              this._offset = 0;
              this._maxChunkLen = chunkSize;
              this._padMaxChunkLen = padlen(chunkSize); // The size of the heap is the sum of:
              // 1. The padded input message size
              // 2. The extended space the algorithm needs (320 byte)
              // 3. The 160 bit state the algoritm uses

              this._heap = new ArrayBuffer(ceilHeapSize(this._padMaxChunkLen + 320 + 20));
              this._h32 = new Int32Array(this._heap);
              this._h8 = new Int8Array(this._heap);
              this._core = new RushaCore({
                Int32Array: Int32Array
              }, {}, this._heap);
            }

            Rusha.prototype._initState = function _initState(heap, padMsgLen) {
              this._offset = 0;
              var io = new Int32Array(heap, padMsgLen + 320, 5);
              io[0] = 1732584193;
              io[1] = -271733879;
              io[2] = -1732584194;
              io[3] = 271733878;
              io[4] = -1009589776;
            };

            Rusha.prototype._padChunk = function _padChunk(chunkLen, msgLen) {
              var padChunkLen = padlen(chunkLen);
              var view = new Int32Array(this._heap, 0, padChunkLen >> 2);
              padZeroes(view, chunkLen);
              padData(view, chunkLen, msgLen);
              return padChunkLen;
            };

            Rusha.prototype._write = function _write(data, chunkOffset, chunkLen, off) {
              conv(data, this._h8, this._h32, chunkOffset, chunkLen, off || 0);
            };

            Rusha.prototype._coreCall = function _coreCall(data, chunkOffset, chunkLen, msgLen, finalize) {
              var padChunkLen = chunkLen;

              this._write(data, chunkOffset, chunkLen);

              if (finalize) {
                padChunkLen = this._padChunk(chunkLen, msgLen);
              }

              this._core.hash(padChunkLen, this._padMaxChunkLen);
            };

            Rusha.prototype.rawDigest = function rawDigest(str) {
              var msgLen = str.byteLength || str.length || str.size || 0;

              this._initState(this._heap, this._padMaxChunkLen);

              var chunkOffset = 0,
                  chunkLen = this._maxChunkLen;

              for (chunkOffset = 0; msgLen > chunkOffset + chunkLen; chunkOffset += chunkLen) {
                this._coreCall(str, chunkOffset, chunkLen, msgLen, false);
              }

              this._coreCall(str, chunkOffset, msgLen - chunkOffset, msgLen, true);

              return getRawDigest(this._heap, this._padMaxChunkLen);
            };

            Rusha.prototype.digest = function digest(str) {
              return toHex(this.rawDigest(str).buffer);
            };

            Rusha.prototype.digestFromString = function digestFromString(str) {
              return this.digest(str);
            };

            Rusha.prototype.digestFromBuffer = function digestFromBuffer(str) {
              return this.digest(str);
            };

            Rusha.prototype.digestFromArrayBuffer = function digestFromArrayBuffer(str) {
              return this.digest(str);
            };

            Rusha.prototype.resetState = function resetState() {
              this._initState(this._heap, this._padMaxChunkLen);

              return this;
            };

            Rusha.prototype.append = function append(chunk) {
              var chunkOffset = 0;
              var chunkLen = chunk.byteLength || chunk.length || chunk.size || 0;
              var turnOffset = this._offset % this._maxChunkLen;
              var inputLen = void 0;
              this._offset += chunkLen;

              while (chunkOffset < chunkLen) {
                inputLen = Math.min(chunkLen - chunkOffset, this._maxChunkLen - turnOffset);

                this._write(chunk, chunkOffset, inputLen, turnOffset);

                turnOffset += inputLen;
                chunkOffset += inputLen;

                if (turnOffset === this._maxChunkLen) {
                  this._core.hash(this._maxChunkLen, this._padMaxChunkLen);

                  turnOffset = 0;
                }
              }

              return this;
            };

            Rusha.prototype.getState = function getState() {
              var turnOffset = this._offset % this._maxChunkLen;
              var heap = void 0;

              if (!turnOffset) {
                var io = new Int32Array(this._heap, this._padMaxChunkLen + 320, 5);
                heap = io.buffer.slice(io.byteOffset, io.byteOffset + io.byteLength);
              } else {
                heap = this._heap.slice(0);
              }

              return {
                offset: this._offset,
                heap: heap
              };
            };

            Rusha.prototype.setState = function setState(state) {
              this._offset = state.offset;

              if (state.heap.byteLength === 20) {
                var io = new Int32Array(this._heap, this._padMaxChunkLen + 320, 5);
                io.set(new Int32Array(state.heap));
              } else {
                this._h32.set(new Int32Array(state.heap));
              }

              return this;
            };

            Rusha.prototype.rawEnd = function rawEnd() {
              var msgLen = this._offset;
              var chunkLen = msgLen % this._maxChunkLen;

              var padChunkLen = this._padChunk(chunkLen, msgLen);

              this._core.hash(padChunkLen, this._padMaxChunkLen);

              var result = getRawDigest(this._heap, this._padMaxChunkLen);

              this._initState(this._heap, this._padMaxChunkLen);

              return result;
            };

            Rusha.prototype.end = function end() {
              return toHex(this.rawEnd().buffer);
            };

            return Rusha;
          }();

          module.exports = Rusha;
          module.exports._core = RushaCore;
          /***/
        },
        /* 1 */

        /***/
        function (module, exports) {
          /* eslint-env commonjs, browser */
          //
          // toHex
          //
          var precomputedHex = new Array(256);

          for (var i = 0; i < 256; i++) {
            precomputedHex[i] = (i < 0x10 ? '0' : '') + i.toString(16);
          }

          module.exports.toHex = function (arrayBuffer) {
            var binarray = new Uint8Array(arrayBuffer);
            var res = new Array(arrayBuffer.byteLength);

            for (var _i = 0; _i < res.length; _i++) {
              res[_i] = precomputedHex[binarray[_i]];
            }

            return res.join('');
          }; //
          // ceilHeapSize
          //


          module.exports.ceilHeapSize = function (v) {
            // The asm.js spec says:
            // The heap object's byteLength must be either
            // 2^n for n in [12, 24) or 2^24 * n for n ≥ 1.
            // Also, byteLengths smaller than 2^16 are deprecated.
            var p = 0; // If v is smaller than 2^16, the smallest possible solution
            // is 2^16.

            if (v <= 65536) return 65536; // If v < 2^24, we round up to 2^n,
            // otherwise we round up to 2^24 * n.

            if (v < 16777216) {
              for (p = 1; p < v; p = p << 1) {}
            } else {
              for (p = 16777216; p < v; p += 16777216) {}
            }

            return p;
          }; //
          // isDedicatedWorkerScope
          //


          module.exports.isDedicatedWorkerScope = function (self) {
            var isRunningInWorker = 'WorkerGlobalScope' in self && self instanceof self.WorkerGlobalScope;
            var isRunningInSharedWorker = 'SharedWorkerGlobalScope' in self && self instanceof self.SharedWorkerGlobalScope;
            var isRunningInServiceWorker = 'ServiceWorkerGlobalScope' in self && self instanceof self.ServiceWorkerGlobalScope; // Detects whether we run inside a dedicated worker or not.
            //
            // We can't just check for `DedicatedWorkerGlobalScope`, since IE11
            // has a bug where it only supports `WorkerGlobalScope`.
            //
            // Therefore, we consider us as running inside a dedicated worker
            // when we are running inside a worker, but not in a shared or service worker.
            //
            // When new types of workers are introduced, we will need to adjust this code.

            return isRunningInWorker && !isRunningInSharedWorker && !isRunningInServiceWorker;
          };
          /***/

        },
        /* 2 */

        /***/
        function (module, exports, __webpack_require__) {
          /* eslint-env commonjs, worker */
          module.exports = function () {
            var Rusha = __webpack_require__(0);

            var hashData = function hashData(hasher, data, cb) {
              try {
                return cb(null, hasher.digest(data));
              } catch (e) {
                return cb(e);
              }
            };

            var hashFile = function hashFile(hasher, readTotal, blockSize, file, cb) {
              var reader = new self.FileReader();

              reader.onloadend = function onloadend() {
                if (reader.error) {
                  return cb(reader.error);
                }

                var buffer = reader.result;
                readTotal += reader.result.byteLength;

                try {
                  hasher.append(buffer);
                } catch (e) {
                  cb(e);
                  return;
                }

                if (readTotal < file.size) {
                  hashFile(hasher, readTotal, blockSize, file, cb);
                } else {
                  cb(null, hasher.end());
                }
              };

              reader.readAsArrayBuffer(file.slice(readTotal, readTotal + blockSize));
            };

            var workerBehaviourEnabled = true;

            self.onmessage = function (event) {
              if (!workerBehaviourEnabled) {
                return;
              }

              var data = event.data.data,
                  file = event.data.file,
                  id = event.data.id;
              if (typeof id === 'undefined') return;
              if (!file && !data) return;
              var blockSize = event.data.blockSize || 4 * 1024 * 1024;
              var hasher = new Rusha(blockSize);
              hasher.resetState();

              var done = function done(err, hash) {
                if (!err) {
                  self.postMessage({
                    id: id,
                    hash: hash
                  });
                } else {
                  self.postMessage({
                    id: id,
                    error: err.name
                  });
                }
              };

              if (data) hashData(hasher, data, done);
              if (file) hashFile(hasher, 0, blockSize, file, done);
            };

            return function () {
              workerBehaviourEnabled = false;
            };
          };
          /***/

        },
        /* 3 */

        /***/
        function (module, exports, __webpack_require__) {
          /* eslint-env commonjs, browser */
          var work = __webpack_require__(4);

          var Rusha = __webpack_require__(0);

          var createHash = __webpack_require__(7);

          var runWorker = __webpack_require__(2);

          var _require = __webpack_require__(1),
              isDedicatedWorkerScope = _require.isDedicatedWorkerScope;

          var isRunningInDedicatedWorker = typeof self !== 'undefined' && isDedicatedWorkerScope(self);
          Rusha.disableWorkerBehaviour = isRunningInDedicatedWorker ? runWorker() : function () {};

          Rusha.createWorker = function () {
            var worker = work(
            /*require.resolve*/
            2);
            var terminate = worker.terminate;

            worker.terminate = function () {
              URL.revokeObjectURL(worker.objectURL);
              terminate.call(worker);
            };

            return worker;
          };

          Rusha.createHash = createHash;
          module.exports = Rusha;
          /***/
        },
        /* 4 */

        /***/
        function (module, exports, __webpack_require__) {
          function webpackBootstrapFunc(modules) {
            /******/
            // The module cache

            /******/
            var installedModules = {};
            /******/
            // The require function

            /******/

            function __webpack_require__(moduleId) {
              /******/
              // Check if module is in cache

              /******/
              if (installedModules[moduleId])
                /******/
                return installedModules[moduleId].exports;
              /******/
              // Create a new module (and put it into the cache)

              /******/

              var module = installedModules[moduleId] = {
                /******/
                i: moduleId,

                /******/
                l: false,

                /******/
                exports: {}
                /******/

              };
              /******/
              // Execute the module function

              /******/

              modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
              /******/
              // Flag the module as loaded

              /******/

              module.l = true;
              /******/
              // Return the exports of the module

              /******/

              return module.exports;
              /******/
            }
            /******/
            // expose the modules object (__webpack_modules__)

            /******/


            __webpack_require__.m = modules;
            /******/
            // expose the module cache

            /******/

            __webpack_require__.c = installedModules;
            /******/
            // identity function for calling harmony imports with the correct context

            /******/

            __webpack_require__.i = function (value) {
              return value;
            };
            /******/
            // define getter function for harmony exports

            /******/


            __webpack_require__.d = function (exports, name, getter) {
              /******/
              if (!__webpack_require__.o(exports, name)) {
                /******/
                Object.defineProperty(exports, name, {
                  /******/
                  configurable: false,

                  /******/
                  enumerable: true,

                  /******/
                  get: getter
                  /******/

                });
                /******/
              }
              /******/

            };
            /******/
            // define __esModule on exports

            /******/


            __webpack_require__.r = function (exports) {
              /******/
              Object.defineProperty(exports, '__esModule', {
                value: true
              });
              /******/
            };
            /******/
            // getDefaultExport function for compatibility with non-harmony modules

            /******/


            __webpack_require__.n = function (module) {
              /******/
              var getter = module && module.__esModule ?
              /******/
              function getDefault() {
                return module['default'];
              } :
              /******/
              function getModuleExports() {
                return module;
              };
              /******/

              __webpack_require__.d(getter, 'a', getter);
              /******/


              return getter;
              /******/
            };
            /******/
            // Object.prototype.hasOwnProperty.call

            /******/


            __webpack_require__.o = function (object, property) {
              return Object.prototype.hasOwnProperty.call(object, property);
            };
            /******/
            // __webpack_public_path__

            /******/


            __webpack_require__.p = "/";
            /******/
            // on error function for async loading

            /******/

            __webpack_require__.oe = function (err) {
              console.error(err);
              throw err;
            };

            var f = __webpack_require__(__webpack_require__.s = ENTRY_MODULE);

            return f.default || f; // try to call default if defined to also support babel esmodule exports
          }

          var moduleNameReqExp = '[\\.|\\-|\\+|\\w|\/|@]+';
          var dependencyRegExp = '\\((\/\\*.*?\\*\/)?\s?.*?(' + moduleNameReqExp + ').*?\\)'; // additional chars when output.pathinfo is true
          // http://stackoverflow.com/a/2593661/130442

          function quoteRegExp(str) {
            return (str + '').replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&');
          }

          function getModuleDependencies(sources, module, queueName) {
            var retval = {};
            retval[queueName] = [];
            var fnString = module.toString();
            var wrapperSignature = fnString.match(/^function\s?\(\w+,\s*\w+,\s*(\w+)\)/);
            if (!wrapperSignature) return retval;
            var webpackRequireName = wrapperSignature[1]; // main bundle deps

            var re = new RegExp('(\\\\n|\\W)' + quoteRegExp(webpackRequireName) + dependencyRegExp, 'g');
            var match;

            while (match = re.exec(fnString)) {
              if (match[3] === 'dll-reference') continue;
              retval[queueName].push(match[3]);
            } // dll deps


            re = new RegExp('\\(' + quoteRegExp(webpackRequireName) + '\\("(dll-reference\\s(' + moduleNameReqExp + '))"\\)\\)' + dependencyRegExp, 'g');

            while (match = re.exec(fnString)) {
              if (!sources[match[2]]) {
                retval[queueName].push(match[1]);
                sources[match[2]] = __webpack_require__(match[1]).m;
              }

              retval[match[2]] = retval[match[2]] || [];
              retval[match[2]].push(match[4]);
            }

            return retval;
          }

          function hasValuesInQueues(queues) {
            var keys = Object.keys(queues);
            return keys.reduce(function (hasValues, key) {
              return hasValues || queues[key].length > 0;
            }, false);
          }

          function getRequiredModules(sources, moduleId) {
            var modulesQueue = {
              main: [moduleId]
            };
            var requiredModules = {
              main: []
            };
            var seenModules = {
              main: {}
            };

            while (hasValuesInQueues(modulesQueue)) {
              var queues = Object.keys(modulesQueue);

              for (var i = 0; i < queues.length; i++) {
                var queueName = queues[i];
                var queue = modulesQueue[queueName];
                var moduleToCheck = queue.pop();
                seenModules[queueName] = seenModules[queueName] || {};
                if (seenModules[queueName][moduleToCheck] || !sources[queueName][moduleToCheck]) continue;
                seenModules[queueName][moduleToCheck] = true;
                requiredModules[queueName] = requiredModules[queueName] || [];
                requiredModules[queueName].push(moduleToCheck);
                var newModules = getModuleDependencies(sources, sources[queueName][moduleToCheck], queueName);
                var newModulesKeys = Object.keys(newModules);

                for (var j = 0; j < newModulesKeys.length; j++) {
                  modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]] || [];
                  modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]].concat(newModules[newModulesKeys[j]]);
                }
              }
            }

            return requiredModules;
          }

          module.exports = function (moduleId, options) {
            options = options || {};
            var sources = {
              main: __webpack_require__.m
            };
            var requiredModules = options.all ? {
              main: Object.keys(sources)
            } : getRequiredModules(sources, moduleId);
            var src = '';
            Object.keys(requiredModules).filter(function (m) {
              return m !== 'main';
            }).forEach(function (module) {
              var entryModule = 0;

              while (requiredModules[module][entryModule]) {
                entryModule++;
              }

              requiredModules[module].push(entryModule);
              sources[module][entryModule] = '(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })';
              src = src + 'var ' + module + ' = (' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(entryModule)) + ')({' + requiredModules[module].map(function (id) {
                return '' + JSON.stringify(id) + ': ' + sources[module][id].toString();
              }).join(',') + '});\n';
            });
            src = src + '(' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(moduleId)) + ')({' + requiredModules.main.map(function (id) {
              return '' + JSON.stringify(id) + ': ' + sources.main[id].toString();
            }).join(',') + '})(self);';
            var blob = new window.Blob([src], {
              type: 'text/javascript'
            });

            if (options.bare) {
              return blob;
            }

            var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;
            var workerUrl = URL.createObjectURL(blob);
            var worker = new window.Worker(workerUrl);
            worker.objectURL = workerUrl;
            return worker;
          };
          /***/

        },
        /* 5 */

        /***/
        function (module, exports) {
          // The low-level RushCore module provides the heart of Rusha,
          // a high-speed sha1 implementation working on an Int32Array heap.
          // At first glance, the implementation seems complicated, however
          // with the SHA1 spec at hand, it is obvious this almost a textbook
          // implementation that has a few functions hand-inlined and a few loops
          // hand-unrolled.
          module.exports = function RushaCore(stdlib$846, foreign$847, heap$848) {
            'use asm';

            var H$849 = new stdlib$846.Int32Array(heap$848);

            function hash$850(k$851, x$852) {
              // k in bytes
              k$851 = k$851 | 0;
              x$852 = x$852 | 0;
              var i$853 = 0,
                  j$854 = 0,
                  y0$855 = 0,
                  z0$856 = 0,
                  y1$857 = 0,
                  z1$858 = 0,
                  y2$859 = 0,
                  z2$860 = 0,
                  y3$861 = 0,
                  z3$862 = 0,
                  y4$863 = 0,
                  z4$864 = 0,
                  t0$865 = 0,
                  t1$866 = 0;
              y0$855 = H$849[x$852 + 320 >> 2] | 0;
              y1$857 = H$849[x$852 + 324 >> 2] | 0;
              y2$859 = H$849[x$852 + 328 >> 2] | 0;
              y3$861 = H$849[x$852 + 332 >> 2] | 0;
              y4$863 = H$849[x$852 + 336 >> 2] | 0;

              for (i$853 = 0; (i$853 | 0) < (k$851 | 0); i$853 = i$853 + 64 | 0) {
                z0$856 = y0$855;
                z1$858 = y1$857;
                z2$860 = y2$859;
                z3$862 = y3$861;
                z4$864 = y4$863;

                for (j$854 = 0; (j$854 | 0) < 64; j$854 = j$854 + 4 | 0) {
                  t1$866 = H$849[i$853 + j$854 >> 2] | 0;
                  t0$865 = ((y0$855 << 5 | y0$855 >>> 27) + (y1$857 & y2$859 | ~y1$857 & y3$861) | 0) + ((t1$866 + y4$863 | 0) + 1518500249 | 0) | 0;
                  y4$863 = y3$861;
                  y3$861 = y2$859;
                  y2$859 = y1$857 << 30 | y1$857 >>> 2;
                  y1$857 = y0$855;
                  y0$855 = t0$865;
                  H$849[k$851 + j$854 >> 2] = t1$866;
                }

                for (j$854 = k$851 + 64 | 0; (j$854 | 0) < (k$851 + 80 | 0); j$854 = j$854 + 4 | 0) {
                  t1$866 = (H$849[j$854 - 12 >> 2] ^ H$849[j$854 - 32 >> 2] ^ H$849[j$854 - 56 >> 2] ^ H$849[j$854 - 64 >> 2]) << 1 | (H$849[j$854 - 12 >> 2] ^ H$849[j$854 - 32 >> 2] ^ H$849[j$854 - 56 >> 2] ^ H$849[j$854 - 64 >> 2]) >>> 31;
                  t0$865 = ((y0$855 << 5 | y0$855 >>> 27) + (y1$857 & y2$859 | ~y1$857 & y3$861) | 0) + ((t1$866 + y4$863 | 0) + 1518500249 | 0) | 0;
                  y4$863 = y3$861;
                  y3$861 = y2$859;
                  y2$859 = y1$857 << 30 | y1$857 >>> 2;
                  y1$857 = y0$855;
                  y0$855 = t0$865;
                  H$849[j$854 >> 2] = t1$866;
                }

                for (j$854 = k$851 + 80 | 0; (j$854 | 0) < (k$851 + 160 | 0); j$854 = j$854 + 4 | 0) {
                  t1$866 = (H$849[j$854 - 12 >> 2] ^ H$849[j$854 - 32 >> 2] ^ H$849[j$854 - 56 >> 2] ^ H$849[j$854 - 64 >> 2]) << 1 | (H$849[j$854 - 12 >> 2] ^ H$849[j$854 - 32 >> 2] ^ H$849[j$854 - 56 >> 2] ^ H$849[j$854 - 64 >> 2]) >>> 31;
                  t0$865 = ((y0$855 << 5 | y0$855 >>> 27) + (y1$857 ^ y2$859 ^ y3$861) | 0) + ((t1$866 + y4$863 | 0) + 1859775393 | 0) | 0;
                  y4$863 = y3$861;
                  y3$861 = y2$859;
                  y2$859 = y1$857 << 30 | y1$857 >>> 2;
                  y1$857 = y0$855;
                  y0$855 = t0$865;
                  H$849[j$854 >> 2] = t1$866;
                }

                for (j$854 = k$851 + 160 | 0; (j$854 | 0) < (k$851 + 240 | 0); j$854 = j$854 + 4 | 0) {
                  t1$866 = (H$849[j$854 - 12 >> 2] ^ H$849[j$854 - 32 >> 2] ^ H$849[j$854 - 56 >> 2] ^ H$849[j$854 - 64 >> 2]) << 1 | (H$849[j$854 - 12 >> 2] ^ H$849[j$854 - 32 >> 2] ^ H$849[j$854 - 56 >> 2] ^ H$849[j$854 - 64 >> 2]) >>> 31;
                  t0$865 = ((y0$855 << 5 | y0$855 >>> 27) + (y1$857 & y2$859 | y1$857 & y3$861 | y2$859 & y3$861) | 0) + ((t1$866 + y4$863 | 0) - 1894007588 | 0) | 0;
                  y4$863 = y3$861;
                  y3$861 = y2$859;
                  y2$859 = y1$857 << 30 | y1$857 >>> 2;
                  y1$857 = y0$855;
                  y0$855 = t0$865;
                  H$849[j$854 >> 2] = t1$866;
                }

                for (j$854 = k$851 + 240 | 0; (j$854 | 0) < (k$851 + 320 | 0); j$854 = j$854 + 4 | 0) {
                  t1$866 = (H$849[j$854 - 12 >> 2] ^ H$849[j$854 - 32 >> 2] ^ H$849[j$854 - 56 >> 2] ^ H$849[j$854 - 64 >> 2]) << 1 | (H$849[j$854 - 12 >> 2] ^ H$849[j$854 - 32 >> 2] ^ H$849[j$854 - 56 >> 2] ^ H$849[j$854 - 64 >> 2]) >>> 31;
                  t0$865 = ((y0$855 << 5 | y0$855 >>> 27) + (y1$857 ^ y2$859 ^ y3$861) | 0) + ((t1$866 + y4$863 | 0) - 899497514 | 0) | 0;
                  y4$863 = y3$861;
                  y3$861 = y2$859;
                  y2$859 = y1$857 << 30 | y1$857 >>> 2;
                  y1$857 = y0$855;
                  y0$855 = t0$865;
                  H$849[j$854 >> 2] = t1$866;
                }

                y0$855 = y0$855 + z0$856 | 0;
                y1$857 = y1$857 + z1$858 | 0;
                y2$859 = y2$859 + z2$860 | 0;
                y3$861 = y3$861 + z3$862 | 0;
                y4$863 = y4$863 + z4$864 | 0;
              }

              H$849[x$852 + 320 >> 2] = y0$855;
              H$849[x$852 + 324 >> 2] = y1$857;
              H$849[x$852 + 328 >> 2] = y2$859;
              H$849[x$852 + 332 >> 2] = y3$861;
              H$849[x$852 + 336 >> 2] = y4$863;
            }

            return {
              hash: hash$850
            };
          };
          /***/

        },
        /* 6 */

        /***/
        function (module, exports) {
          var _this = this;
          /* eslint-env commonjs, browser */


          var reader = void 0;

          if (typeof self !== 'undefined' && typeof self.FileReaderSync !== 'undefined') {
            reader = new self.FileReaderSync();
          } // Convert a binary string and write it to the heap.
          // A binary string is expected to only contain char codes < 256.


          var convStr = function convStr(str, H8, H32, start, len, off) {
            var i = void 0,
                om = off % 4,
                lm = (len + om) % 4,
                j = len - lm;

            switch (om) {
              case 0:
                H8[off] = str.charCodeAt(start + 3);

              case 1:
                H8[off + 1 - (om << 1) | 0] = str.charCodeAt(start + 2);

              case 2:
                H8[off + 2 - (om << 1) | 0] = str.charCodeAt(start + 1);

              case 3:
                H8[off + 3 - (om << 1) | 0] = str.charCodeAt(start);
            }

            if (len < lm + (4 - om)) {
              return;
            }

            for (i = 4 - om; i < j; i = i + 4 | 0) {
              H32[off + i >> 2] = str.charCodeAt(start + i) << 24 | str.charCodeAt(start + i + 1) << 16 | str.charCodeAt(start + i + 2) << 8 | str.charCodeAt(start + i + 3);
            }

            switch (lm) {
              case 3:
                H8[off + j + 1 | 0] = str.charCodeAt(start + j + 2);

              case 2:
                H8[off + j + 2 | 0] = str.charCodeAt(start + j + 1);

              case 1:
                H8[off + j + 3 | 0] = str.charCodeAt(start + j);
            }
          }; // Convert a buffer or array and write it to the heap.
          // The buffer or array is expected to only contain elements < 256.


          var convBuf = function convBuf(buf, H8, H32, start, len, off) {
            var i = void 0,
                om = off % 4,
                lm = (len + om) % 4,
                j = len - lm;

            switch (om) {
              case 0:
                H8[off] = buf[start + 3];

              case 1:
                H8[off + 1 - (om << 1) | 0] = buf[start + 2];

              case 2:
                H8[off + 2 - (om << 1) | 0] = buf[start + 1];

              case 3:
                H8[off + 3 - (om << 1) | 0] = buf[start];
            }

            if (len < lm + (4 - om)) {
              return;
            }

            for (i = 4 - om; i < j; i = i + 4 | 0) {
              H32[off + i >> 2 | 0] = buf[start + i] << 24 | buf[start + i + 1] << 16 | buf[start + i + 2] << 8 | buf[start + i + 3];
            }

            switch (lm) {
              case 3:
                H8[off + j + 1 | 0] = buf[start + j + 2];

              case 2:
                H8[off + j + 2 | 0] = buf[start + j + 1];

              case 1:
                H8[off + j + 3 | 0] = buf[start + j];
            }
          };

          var convBlob = function convBlob(blob, H8, H32, start, len, off) {
            var i = void 0,
                om = off % 4,
                lm = (len + om) % 4,
                j = len - lm;
            var buf = new Uint8Array(reader.readAsArrayBuffer(blob.slice(start, start + len)));

            switch (om) {
              case 0:
                H8[off] = buf[3];

              case 1:
                H8[off + 1 - (om << 1) | 0] = buf[2];

              case 2:
                H8[off + 2 - (om << 1) | 0] = buf[1];

              case 3:
                H8[off + 3 - (om << 1) | 0] = buf[0];
            }

            if (len < lm + (4 - om)) {
              return;
            }

            for (i = 4 - om; i < j; i = i + 4 | 0) {
              H32[off + i >> 2 | 0] = buf[i] << 24 | buf[i + 1] << 16 | buf[i + 2] << 8 | buf[i + 3];
            }

            switch (lm) {
              case 3:
                H8[off + j + 1 | 0] = buf[j + 2];

              case 2:
                H8[off + j + 2 | 0] = buf[j + 1];

              case 1:
                H8[off + j + 3 | 0] = buf[j];
            }
          };

          module.exports = function (data, H8, H32, start, len, off) {
            if (typeof data === 'string') {
              return convStr(data, H8, H32, start, len, off);
            }

            if (data instanceof Array) {
              return convBuf(data, H8, H32, start, len, off);
            } // Safely doing a Buffer check using "this" to avoid Buffer polyfill to be included in the dist


            if (_this && _this.Buffer && _this.Buffer.isBuffer(data)) {
              return convBuf(data, H8, H32, start, len, off);
            }

            if (data instanceof ArrayBuffer) {
              return convBuf(new Uint8Array(data), H8, H32, start, len, off);
            }

            if (data.buffer instanceof ArrayBuffer) {
              return convBuf(new Uint8Array(data.buffer, data.byteOffset, data.byteLength), H8, H32, start, len, off);
            }

            if (data instanceof Blob) {
              return convBlob(data, H8, H32, start, len, off);
            }

            throw new Error('Unsupported data type.');
          };
          /***/

        },
        /* 7 */

        /***/
        function (module, exports, __webpack_require__) {
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          /* eslint-env commonjs, browser */


          var Rusha = __webpack_require__(0);

          var _require = __webpack_require__(1),
              toHex = _require.toHex;

          var Hash = function () {
            function Hash() {
              _classCallCheck(this, Hash);

              this._rusha = new Rusha();

              this._rusha.resetState();
            }

            Hash.prototype.update = function update(data) {
              this._rusha.append(data);

              return this;
            };

            Hash.prototype.digest = function digest(encoding) {
              var digest = this._rusha.rawEnd().buffer;

              if (!encoding) {
                return digest;
              }

              if (encoding === 'hex') {
                return toHex(digest);
              }

              throw new Error('unsupported digest encoding');
            };

            return Hash;
          }();

          module.exports = function () {
            return new Hash();
          };
          /***/

        }
        /******/
        ])
      );
    });
  }, {}],
  314: [function (require, module, exports) {
    /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

    /* eslint-disable node/no-deprecated-api */
    var buffer = require('buffer');

    var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers

    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }

    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer;
    } else {
      // Copy properties from require('buffer')
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }

    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length);
    }

    SafeBuffer.prototype = Object.create(Buffer.prototype); // Copy static methods from Buffer

    copyProps(Buffer, SafeBuffer);

    SafeBuffer.from = function (arg, encodingOrOffset, length) {
      if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number');
      }

      return Buffer(arg, encodingOrOffset, length);
    };

    SafeBuffer.alloc = function (size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }

      var buf = Buffer(size);

      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }

      return buf;
    };

    SafeBuffer.allocUnsafe = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }

      return Buffer(size);
    };

    SafeBuffer.allocUnsafeSlow = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }

      return buffer.SlowBuffer(size);
    };
  }, {
    "buffer": 102
  }],
  315: [function (require, module, exports) {
    (function (process) {
      (function () {
        /* eslint-disable node/no-deprecated-api */
        'use strict';

        var buffer = require('buffer');

        var Buffer = buffer.Buffer;
        var safer = {};
        var key;

        for (key in buffer) {
          if (!buffer.hasOwnProperty(key)) continue;
          if (key === 'SlowBuffer' || key === 'Buffer') continue;
          safer[key] = buffer[key];
        }

        var Safer = safer.Buffer = {};

        for (key in Buffer) {
          if (!Buffer.hasOwnProperty(key)) continue;
          if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue;
          Safer[key] = Buffer[key];
        }

        safer.Buffer.prototype = Buffer.prototype;

        if (!Safer.from || Safer.from === Uint8Array.from) {
          Safer.from = function (value, encodingOrOffset, length) {
            if (typeof value === 'number') {
              throw new TypeError('The "value" argument must not be of type number. Received type ' + _typeof2(value));
            }

            if (value && typeof value.length === 'undefined') {
              throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + _typeof2(value));
            }

            return Buffer(value, encodingOrOffset, length);
          };
        }

        if (!Safer.alloc) {
          Safer.alloc = function (size, fill, encoding) {
            if (typeof size !== 'number') {
              throw new TypeError('The "size" argument must be of type number. Received type ' + _typeof2(size));
            }

            if (size < 0 || size >= 2 * (1 << 30)) {
              throw new RangeError('The value "' + size + '" is invalid for option "size"');
            }

            var buf = Buffer(size);

            if (!fill || fill.length === 0) {
              buf.fill(0);
            } else if (typeof encoding === 'string') {
              buf.fill(fill, encoding);
            } else {
              buf.fill(fill);
            }

            return buf;
          };
        }

        if (!safer.kStringMaxLength) {
          try {
            safer.kStringMaxLength = process.binding('buffer').kStringMaxLength;
          } catch (e) {// we can't determine kStringMaxLength in environments where process.binding
            // is unsupported, so let's not set it
          }
        }

        if (!safer.constants) {
          safer.constants = {
            MAX_LENGTH: safer.kMaxLength
          };

          if (safer.kStringMaxLength) {
            safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
          }
        }

        module.exports = safer;
      }).call(this);
    }).call(this, require('_process'));
  }, {
    "_process": 276,
    "buffer": 102
  }],
  316: [function (require, module, exports) {
    module.exports = require('./lib')(require('./lib/elliptic'));
  }, {
    "./lib": 318,
    "./lib/elliptic": 317
  }],
  317: [function (require, module, exports) {
    var EC = require('elliptic').ec;

    var ec = new EC('secp256k1');
    var ecparams = ec.curve; // Hack, we can not use bn.js@5, while elliptic uses bn.js@4
    // See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758

    var BN = ecparams.n.constructor;

    function loadCompressedPublicKey(first, xbuf) {
      var x = new BN(xbuf); // overflow

      if (x.cmp(ecparams.p) >= 0) return null;
      x = x.toRed(ecparams.red); // compute corresponding Y

      var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
      if (first === 0x03 !== y.isOdd()) y = y.redNeg();
      return ec.keyPair({
        pub: {
          x: x,
          y: y
        }
      });
    }

    function loadUncompressedPublicKey(first, xbuf, ybuf) {
      var x = new BN(xbuf);
      var y = new BN(ybuf); // overflow

      if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null;
      x = x.toRed(ecparams.red);
      y = y.toRed(ecparams.red); // is odd flag

      if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null; // x*x*x + b = y*y

      var x3 = x.redSqr().redIMul(x);
      if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null;
      return ec.keyPair({
        pub: {
          x: x,
          y: y
        }
      });
    }

    function loadPublicKey(pubkey) {
      // length should be validated in interface
      var first = pubkey[0];

      switch (first) {
        case 0x02:
        case 0x03:
          if (pubkey.length !== 33) return null;
          return loadCompressedPublicKey(first, pubkey.subarray(1, 33));

        case 0x04:
        case 0x06:
        case 0x07:
          if (pubkey.length !== 65) return null;
          return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65));

        default:
          return null;
      }
    }

    function savePublicKey(output, point) {
      var pubkey = point.encode(null, output.length === 33); // Loop should be faster because we do not need create extra Uint8Array
      // output.set(new Uint8Array(pubkey))

      for (var i = 0; i < output.length; ++i) {
        output[i] = pubkey[i];
      }
    }

    module.exports = {
      contextRandomize: function contextRandomize() {
        return 0;
      },
      privateKeyVerify: function privateKeyVerify(seckey) {
        var bn = new BN(seckey);
        return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1;
      },
      privateKeyNegate: function privateKeyNegate(seckey) {
        var bn = new BN(seckey);
        var negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32);
        seckey.set(negate);
        return 0;
      },
      privateKeyTweakAdd: function privateKeyTweakAdd(seckey, tweak) {
        var bn = new BN(tweak);
        if (bn.cmp(ecparams.n) >= 0) return 1;
        bn.iadd(new BN(seckey));
        if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n);
        if (bn.isZero()) return 1;
        var tweaked = bn.toArrayLike(Uint8Array, 'be', 32);
        seckey.set(tweaked);
        return 0;
      },
      privateKeyTweakMul: function privateKeyTweakMul(seckey, tweak) {
        var bn = new BN(tweak);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;
        bn.imul(new BN(seckey));
        if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n);
        var tweaked = bn.toArrayLike(Uint8Array, 'be', 32);
        seckey.set(tweaked);
        return 0;
      },
      publicKeyVerify: function publicKeyVerify(pubkey) {
        var pair = loadPublicKey(pubkey);
        return pair === null ? 1 : 0;
      },
      publicKeyCreate: function publicKeyCreate(output, seckey) {
        var bn = new BN(seckey);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;
        var point = ec.keyFromPrivate(seckey).getPublic();
        savePublicKey(output, point);
        return 0;
      },
      publicKeyConvert: function publicKeyConvert(output, pubkey) {
        var pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        var point = pair.getPublic();
        savePublicKey(output, point);
        return 0;
      },
      publicKeyNegate: function publicKeyNegate(output, pubkey) {
        var pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        var point = pair.getPublic();
        point.y = point.y.redNeg();
        savePublicKey(output, point);
        return 0;
      },
      publicKeyCombine: function publicKeyCombine(output, pubkeys) {
        var pairs = new Array(pubkeys.length);

        for (var i = 0; i < pubkeys.length; ++i) {
          pairs[i] = loadPublicKey(pubkeys[i]);
          if (pairs[i] === null) return 1;
        }

        var point = pairs[0].getPublic();

        for (var _i18 = 1; _i18 < pairs.length; ++_i18) {
          point = point.add(pairs[_i18].pub);
        }

        if (point.isInfinity()) return 2;
        savePublicKey(output, point);
        return 0;
      },
      publicKeyTweakAdd: function publicKeyTweakAdd(output, pubkey, tweak) {
        var pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        tweak = new BN(tweak);
        if (tweak.cmp(ecparams.n) >= 0) return 2;
        var point = pair.getPublic().add(ecparams.g.mul(tweak));
        if (point.isInfinity()) return 2;
        savePublicKey(output, point);
        return 0;
      },
      publicKeyTweakMul: function publicKeyTweakMul(output, pubkey, tweak) {
        var pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        tweak = new BN(tweak);
        if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2;
        var point = pair.getPublic().mul(tweak);
        savePublicKey(output, point);
        return 0;
      },
      signatureNormalize: function signatureNormalize(sig) {
        var r = new BN(sig.subarray(0, 32));
        var s = new BN(sig.subarray(32, 64));
        if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1;

        if (s.cmp(ec.nh) === 1) {
          sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32);
        }

        return 0;
      },
      // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
      // Adapted for Uint8Array instead Buffer
      signatureExport: function signatureExport(obj, sig) {
        var sigR = sig.subarray(0, 32);
        var sigS = sig.subarray(32, 64);
        if (new BN(sigR).cmp(ecparams.n) >= 0) return 1;
        if (new BN(sigS).cmp(ecparams.n) >= 0) return 1;
        var output = obj.output; // Prepare R

        var r = output.subarray(4, 4 + 33);
        r[0] = 0x00;
        r.set(sigR, 1);
        var lenR = 33;
        var posR = 0;

        for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR) {
          ;
        }

        r = r.subarray(posR);
        if (r[0] & 0x80) return 1;
        if (lenR > 1 && r[0] === 0x00 && !(r[1] & 0x80)) return 1; // Prepare S

        var s = output.subarray(6 + 33, 6 + 33 + 33);
        s[0] = 0x00;
        s.set(sigS, 1);
        var lenS = 33;
        var posS = 0;

        for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS) {
          ;
        }

        s = s.subarray(posS);
        if (s[0] & 0x80) return 1;
        if (lenS > 1 && s[0] === 0x00 && !(s[1] & 0x80)) return 1; // Set output length for return

        obj.outputlen = 6 + lenR + lenS; // Output in specified format
        // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]

        output[0] = 0x30;
        output[1] = obj.outputlen - 2;
        output[2] = 0x02;
        output[3] = r.length;
        output.set(r, 4);
        output[4 + lenR] = 0x02;
        output[5 + lenR] = s.length;
        output.set(s, 6 + lenR);
        return 0;
      },
      // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
      // Adapted for Uint8Array instead Buffer
      signatureImport: function signatureImport(output, sig) {
        if (sig.length < 8) return 1;
        if (sig.length > 72) return 1;
        if (sig[0] !== 0x30) return 1;
        if (sig[1] !== sig.length - 2) return 1;
        if (sig[2] !== 0x02) return 1;
        var lenR = sig[3];
        if (lenR === 0) return 1;
        if (5 + lenR >= sig.length) return 1;
        if (sig[4 + lenR] !== 0x02) return 1;
        var lenS = sig[5 + lenR];
        if (lenS === 0) return 1;
        if (6 + lenR + lenS !== sig.length) return 1;
        if (sig[4] & 0x80) return 1;
        if (lenR > 1 && sig[4] === 0x00 && !(sig[5] & 0x80)) return 1;
        if (sig[lenR + 6] & 0x80) return 1;
        if (lenS > 1 && sig[lenR + 6] === 0x00 && !(sig[lenR + 7] & 0x80)) return 1;
        var sigR = sig.subarray(4, 4 + lenR);
        if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1);
        if (sigR.length > 32) return 1;
        var sigS = sig.subarray(6 + lenR);
        if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1);
        if (sigS.length > 32) throw new Error('S length is too long');
        var r = new BN(sigR);
        if (r.cmp(ecparams.n) >= 0) r = new BN(0);
        var s = new BN(sig.subarray(6 + lenR));
        if (s.cmp(ecparams.n) >= 0) s = new BN(0);
        output.set(r.toArrayLike(Uint8Array, 'be', 32), 0);
        output.set(s.toArrayLike(Uint8Array, 'be', 32), 32);
        return 0;
      },
      ecdsaSign: function ecdsaSign(obj, message, seckey, data, noncefn) {
        if (noncefn) {
          var _noncefn = noncefn;

          noncefn = function noncefn(counter) {
            var nonce = _noncefn(message, seckey, null, data, counter);

            var isValid = nonce instanceof Uint8Array && nonce.length === 32;
            if (!isValid) throw new Error('This is the way');
            return new BN(nonce);
          };
        }

        var d = new BN(seckey);
        if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1;
        var sig;

        try {
          sig = ec.sign(message, seckey, {
            canonical: true,
            k: noncefn,
            pers: data
          });
        } catch (err) {
          return 1;
        }

        obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0);
        obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32);
        obj.recid = sig.recoveryParam;
        return 0;
      },
      ecdsaVerify: function ecdsaVerify(sig, msg32, pubkey) {
        var sigObj = {
          r: sig.subarray(0, 32),
          s: sig.subarray(32, 64)
        };
        var sigr = new BN(sigObj.r);
        var sigs = new BN(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;
        if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3;
        var pair = loadPublicKey(pubkey);
        if (pair === null) return 2;
        var point = pair.getPublic();
        var isValid = ec.verify(msg32, sigObj, point);
        return isValid ? 0 : 3;
      },
      ecdsaRecover: function ecdsaRecover(output, sig, recid, msg32) {
        var sigObj = {
          r: sig.slice(0, 32),
          s: sig.slice(32, 64)
        };
        var sigr = new BN(sigObj.r);
        var sigs = new BN(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;
        if (sigr.isZero() || sigs.isZero()) return 2; // Can throw `throw new Error('Unable to find sencond key candinate');`

        var point;

        try {
          point = ec.recoverPubKey(msg32, sigObj, recid);
        } catch (err) {
          return 2;
        }

        savePublicKey(output, point);
        return 0;
      },
      ecdh: function ecdh(output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
        var pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        var scalar = new BN(seckey);
        if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2;
        var point = pair.getPublic().mul(scalar);

        if (hashfn === undefined) {
          var _data = point.encode(null, true);

          var sha256 = ec.hash().update(_data).digest();

          for (var i = 0; i < 32; ++i) {
            output[i] = sha256[i];
          }
        } else {
          if (!xbuf) xbuf = new Uint8Array(32);
          var x = point.getX().toArray('be', 32);

          for (var _i19 = 0; _i19 < 32; ++_i19) {
            xbuf[_i19] = x[_i19];
          }

          if (!ybuf) ybuf = new Uint8Array(32);
          var y = point.getY().toArray('be', 32);

          for (var _i20 = 0; _i20 < 32; ++_i20) {
            ybuf[_i20] = y[_i20];
          }

          var hash = hashfn(xbuf, ybuf, data);
          var isValid = hash instanceof Uint8Array && hash.length === output.length;
          if (!isValid) return 2;
          output.set(hash);
        }

        return 0;
      }
    };
  }, {
    "elliptic": 139
  }],
  318: [function (require, module, exports) {
    var errors = {
      IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',
      TWEAK_ADD: 'The tweak was out of range or the resulted private key is invalid',
      TWEAK_MUL: 'The tweak was out of range or equal to zero',
      CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',
      SECKEY_INVALID: 'Private Key is invalid',
      PUBKEY_PARSE: 'Public Key could not be parsed',
      PUBKEY_SERIALIZE: 'Public Key serialization error',
      PUBKEY_COMBINE: 'The sum of the public keys is not valid',
      SIG_PARSE: 'Signature could not be parsed',
      SIGN: 'The nonce generation function failed, or the private key was invalid',
      RECOVER: 'Public key could not be recover',
      ECDH: 'Scalar was invalid (zero or overflow)'
    };

    function assert(cond, msg) {
      if (!cond) throw new Error(msg);
    }

    function isUint8Array(name, value, length) {
      assert(value instanceof Uint8Array, "Expected ".concat(name, " to be an Uint8Array"));

      if (length !== undefined) {
        if (Array.isArray(length)) {
          var numbers = length.join(', ');
          var msg = "Expected ".concat(name, " to be an Uint8Array with length [").concat(numbers, "]");
          assert(length.includes(value.length), msg);
        } else {
          var _msg = "Expected ".concat(name, " to be an Uint8Array with length ").concat(length);

          assert(value.length === length, _msg);
        }
      }
    }

    function isCompressed(value) {
      assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean');
    }

    function getAssertedOutput() {
      var output = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (len) {
        return new Uint8Array(len);
      };
      var length = arguments.length > 1 ? arguments[1] : undefined;
      if (typeof output === 'function') output = output(length);
      isUint8Array('output', output, length);
      return output;
    }

    function toTypeString(value) {
      return Object.prototype.toString.call(value).slice(8, -1);
    }

    module.exports = function (secp256k1) {
      return {
        contextRandomize: function contextRandomize(seed) {
          assert(seed === null || seed instanceof Uint8Array, 'Expected seed to be an Uint8Array or null');
          if (seed !== null) isUint8Array('seed', seed, 32);

          switch (secp256k1.contextRandomize(seed)) {
            case 1:
              throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW);
          }
        },
        privateKeyVerify: function privateKeyVerify(seckey) {
          isUint8Array('private key', seckey, 32);
          return secp256k1.privateKeyVerify(seckey) === 0;
        },
        privateKeyNegate: function privateKeyNegate(seckey) {
          isUint8Array('private key', seckey, 32);

          switch (secp256k1.privateKeyNegate(seckey)) {
            case 0:
              return seckey;

            case 1:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        privateKeyTweakAdd: function privateKeyTweakAdd(seckey, tweak) {
          isUint8Array('private key', seckey, 32);
          isUint8Array('tweak', tweak, 32);

          switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {
            case 0:
              return seckey;

            case 1:
              throw new Error(errors.TWEAK_ADD);
          }
        },
        privateKeyTweakMul: function privateKeyTweakMul(seckey, tweak) {
          isUint8Array('private key', seckey, 32);
          isUint8Array('tweak', tweak, 32);

          switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {
            case 0:
              return seckey;

            case 1:
              throw new Error(errors.TWEAK_MUL);
          }
        },
        publicKeyVerify: function publicKeyVerify(pubkey) {
          isUint8Array('public key', pubkey, [33, 65]);
          return secp256k1.publicKeyVerify(pubkey) === 0;
        },
        publicKeyCreate: function publicKeyCreate(seckey) {
          var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
          var output = arguments.length > 2 ? arguments[2] : undefined;
          isUint8Array('private key', seckey, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyCreate(output, seckey)) {
            case 0:
              return output;

            case 1:
              throw new Error(errors.SECKEY_INVALID);

            case 2:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyConvert: function publicKeyConvert(pubkey) {
          var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
          var output = arguments.length > 2 ? arguments[2] : undefined;
          isUint8Array('public key', pubkey, [33, 65]);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyConvert(output, pubkey)) {
            case 0:
              return output;

            case 1:
              throw new Error(errors.PUBKEY_PARSE);

            case 2:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyNegate: function publicKeyNegate(pubkey) {
          var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
          var output = arguments.length > 2 ? arguments[2] : undefined;
          isUint8Array('public key', pubkey, [33, 65]);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyNegate(output, pubkey)) {
            case 0:
              return output;

            case 1:
              throw new Error(errors.PUBKEY_PARSE);

            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);

            case 3:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyCombine: function publicKeyCombine(pubkeys) {
          var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
          var output = arguments.length > 2 ? arguments[2] : undefined;
          assert(Array.isArray(pubkeys), 'Expected public keys to be an Array');
          assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items');

          var _iterator11 = _createForOfIteratorHelper(pubkeys),
              _step11;

          try {
            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
              var pubkey = _step11.value;
              isUint8Array('public key', pubkey, [33, 65]);
            }
          } catch (err) {
            _iterator11.e(err);
          } finally {
            _iterator11.f();
          }

          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyCombine(output, pubkeys)) {
            case 0:
              return output;

            case 1:
              throw new Error(errors.PUBKEY_PARSE);

            case 2:
              throw new Error(errors.PUBKEY_COMBINE);

            case 3:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyTweakAdd: function publicKeyTweakAdd(pubkey, tweak) {
          var compressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
          var output = arguments.length > 3 ? arguments[3] : undefined;
          isUint8Array('public key', pubkey, [33, 65]);
          isUint8Array('tweak', tweak, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {
            case 0:
              return output;

            case 1:
              throw new Error(errors.PUBKEY_PARSE);

            case 2:
              throw new Error(errors.TWEAK_ADD);
          }
        },
        publicKeyTweakMul: function publicKeyTweakMul(pubkey, tweak) {
          var compressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
          var output = arguments.length > 3 ? arguments[3] : undefined;
          isUint8Array('public key', pubkey, [33, 65]);
          isUint8Array('tweak', tweak, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {
            case 0:
              return output;

            case 1:
              throw new Error(errors.PUBKEY_PARSE);

            case 2:
              throw new Error(errors.TWEAK_MUL);
          }
        },
        signatureNormalize: function signatureNormalize(sig) {
          isUint8Array('signature', sig, 64);

          switch (secp256k1.signatureNormalize(sig)) {
            case 0:
              return sig;

            case 1:
              throw new Error(errors.SIG_PARSE);
          }
        },
        signatureExport: function signatureExport(sig, output) {
          isUint8Array('signature', sig, 64);
          output = getAssertedOutput(output, 72);
          var obj = {
            output: output,
            outputlen: 72
          };

          switch (secp256k1.signatureExport(obj, sig)) {
            case 0:
              return output.slice(0, obj.outputlen);

            case 1:
              throw new Error(errors.SIG_PARSE);

            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        signatureImport: function signatureImport(sig, output) {
          isUint8Array('signature', sig);
          output = getAssertedOutput(output, 64);

          switch (secp256k1.signatureImport(output, sig)) {
            case 0:
              return output;

            case 1:
              throw new Error(errors.SIG_PARSE);

            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        ecdsaSign: function ecdsaSign(msg32, seckey) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          var output = arguments.length > 3 ? arguments[3] : undefined;
          isUint8Array('message', msg32, 32);
          isUint8Array('private key', seckey, 32);
          assert(toTypeString(options) === 'Object', 'Expected options to be an Object');
          if (options.data !== undefined) isUint8Array('options.data', options.data);
          if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function');
          output = getAssertedOutput(output, 64);
          var obj = {
            signature: output,
            recid: null
          };

          switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
            case 0:
              return obj;

            case 1:
              throw new Error(errors.SIGN);

            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        ecdsaVerify: function ecdsaVerify(sig, msg32, pubkey) {
          isUint8Array('signature', sig, 64);
          isUint8Array('message', msg32, 32);
          isUint8Array('public key', pubkey, [33, 65]);

          switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {
            case 0:
              return true;

            case 3:
              return false;

            case 1:
              throw new Error(errors.SIG_PARSE);

            case 2:
              throw new Error(errors.PUBKEY_PARSE);
          }
        },
        ecdsaRecover: function ecdsaRecover(sig, recid, msg32) {
          var compressed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
          var output = arguments.length > 4 ? arguments[4] : undefined;
          isUint8Array('signature', sig, 64);
          assert(toTypeString(recid) === 'Number' && recid >= 0 && recid <= 3, 'Expected recovery id to be a Number within interval [0, 3]');
          isUint8Array('message', msg32, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {
            case 0:
              return output;

            case 1:
              throw new Error(errors.SIG_PARSE);

            case 2:
              throw new Error(errors.RECOVER);

            case 3:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        ecdh: function ecdh(pubkey, seckey) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          var output = arguments.length > 3 ? arguments[3] : undefined;
          isUint8Array('public key', pubkey, [33, 65]);
          isUint8Array('private key', seckey, 32);
          assert(toTypeString(options) === 'Object', 'Expected options to be an Object');
          if (options.data !== undefined) isUint8Array('options.data', options.data);

          if (options.hashfn !== undefined) {
            assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function');
            if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32);
            if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32);
            isUint8Array('output', output);
          } else {
            output = getAssertedOutput(output, 32);
          }

          switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
            case 0:
              return output;

            case 1:
              throw new Error(errors.PUBKEY_PARSE);

            case 2:
              throw new Error(errors.ECDH);
          }
        }
      };
    };
  }, {}],
  319: [function (require, module, exports) {
    var Buffer = require('safe-buffer').Buffer; // prototype class for hash functions


    function Hash(blockSize, finalSize) {
      this._block = Buffer.alloc(blockSize);
      this._finalSize = finalSize;
      this._blockSize = blockSize;
      this._len = 0;
    }

    Hash.prototype.update = function (data, enc) {
      if (typeof data === 'string') {
        enc = enc || 'utf8';
        data = Buffer.from(data, enc);
      }

      var block = this._block;
      var blockSize = this._blockSize;
      var length = data.length;
      var accum = this._len;

      for (var offset = 0; offset < length;) {
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);

        for (var i = 0; i < remainder; i++) {
          block[assigned + i] = data[offset + i];
        }

        accum += remainder;
        offset += remainder;

        if (accum % blockSize === 0) {
          this._update(block);
        }
      }

      this._len += length;
      return this;
    };

    Hash.prototype.digest = function (enc) {
      var rem = this._len % this._blockSize;
      this._block[rem] = 0x80; // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
      // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize

      this._block.fill(0, rem + 1);

      if (rem >= this._finalSize) {
        this._update(this._block);

        this._block.fill(0);
      }

      var bits = this._len * 8; // uint32

      if (bits <= 0xffffffff) {
        this._block.writeUInt32BE(bits, this._blockSize - 4); // uint64

      } else {
        var lowBits = (bits & 0xffffffff) >>> 0;
        var highBits = (bits - lowBits) / 0x100000000;

        this._block.writeUInt32BE(highBits, this._blockSize - 8);

        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
      }

      this._update(this._block);

      var hash = this._hash();

      return enc ? hash.toString(enc) : hash;
    };

    Hash.prototype._update = function () {
      throw new Error('_update must be implemented by subclass');
    };

    module.exports = Hash;
  }, {
    "safe-buffer": 314
  }],
  320: [function (require, module, exports) {
    var exports = module.exports = function SHA(algorithm) {
      algorithm = algorithm.toLowerCase();
      var Algorithm = exports[algorithm];
      if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)');
      return new Algorithm();
    };

    exports.sha = require('./sha');
    exports.sha1 = require('./sha1');
    exports.sha224 = require('./sha224');
    exports.sha256 = require('./sha256');
    exports.sha384 = require('./sha384');
    exports.sha512 = require('./sha512');
  }, {
    "./sha": 321,
    "./sha1": 322,
    "./sha224": 323,
    "./sha256": 324,
    "./sha384": 325,
    "./sha512": 326
  }],
  321: [function (require, module, exports) {
    /*
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
     * in FIPS PUB 180-1
     * This source code is derived from sha1.js of the same repository.
     * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
     * operation was added.
     */
    var inherits = require('inherits');

    var Hash = require('./hash');

    var Buffer = require('safe-buffer').Buffer;

    var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];
    var W = new Array(80);

    function Sha() {
      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
    }

    inherits(Sha, Hash);

    Sha.prototype.init = function () {
      this._a = 0x67452301;
      this._b = 0xefcdab89;
      this._c = 0x98badcfe;
      this._d = 0x10325476;
      this._e = 0xc3d2e1f0;
      return this;
    };

    function rotl5(num) {
      return num << 5 | num >>> 27;
    }

    function rotl30(num) {
      return num << 30 | num >>> 2;
    }

    function ft(s, b, c, d) {
      if (s === 0) return b & c | ~b & d;
      if (s === 2) return b & c | b & d | c & d;
      return b ^ c ^ d;
    }

    Sha.prototype._update = function (M) {
      var W = this._w;
      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;

      for (var i = 0; i < 16; ++i) {
        W[i] = M.readInt32BE(i * 4);
      }

      for (; i < 80; ++i) {
        W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
      }

      for (var j = 0; j < 80; ++j) {
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
      }

      this._a = a + this._a | 0;
      this._b = b + this._b | 0;
      this._c = c + this._c | 0;
      this._d = d + this._d | 0;
      this._e = e + this._e | 0;
    };

    Sha.prototype._hash = function () {
      var H = Buffer.allocUnsafe(20);
      H.writeInt32BE(this._a | 0, 0);
      H.writeInt32BE(this._b | 0, 4);
      H.writeInt32BE(this._c | 0, 8);
      H.writeInt32BE(this._d | 0, 12);
      H.writeInt32BE(this._e | 0, 16);
      return H;
    };

    module.exports = Sha;
  }, {
    "./hash": 319,
    "inherits": 217,
    "safe-buffer": 314
  }],
  322: [function (require, module, exports) {
    /*
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
     * in FIPS PUB 180-1
     * Version 2.1a Copyright Paul Johnston 2000 - 2002.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     * Distributed under the BSD License
     * See http://pajhome.org.uk/crypt/md5 for details.
     */
    var inherits = require('inherits');

    var Hash = require('./hash');

    var Buffer = require('safe-buffer').Buffer;

    var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];
    var W = new Array(80);

    function Sha1() {
      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
    }

    inherits(Sha1, Hash);

    Sha1.prototype.init = function () {
      this._a = 0x67452301;
      this._b = 0xefcdab89;
      this._c = 0x98badcfe;
      this._d = 0x10325476;
      this._e = 0xc3d2e1f0;
      return this;
    };

    function rotl1(num) {
      return num << 1 | num >>> 31;
    }

    function rotl5(num) {
      return num << 5 | num >>> 27;
    }

    function rotl30(num) {
      return num << 30 | num >>> 2;
    }

    function ft(s, b, c, d) {
      if (s === 0) return b & c | ~b & d;
      if (s === 2) return b & c | b & d | c & d;
      return b ^ c ^ d;
    }

    Sha1.prototype._update = function (M) {
      var W = this._w;
      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;

      for (var i = 0; i < 16; ++i) {
        W[i] = M.readInt32BE(i * 4);
      }

      for (; i < 80; ++i) {
        W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
      }

      for (var j = 0; j < 80; ++j) {
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
      }

      this._a = a + this._a | 0;
      this._b = b + this._b | 0;
      this._c = c + this._c | 0;
      this._d = d + this._d | 0;
      this._e = e + this._e | 0;
    };

    Sha1.prototype._hash = function () {
      var H = Buffer.allocUnsafe(20);
      H.writeInt32BE(this._a | 0, 0);
      H.writeInt32BE(this._b | 0, 4);
      H.writeInt32BE(this._c | 0, 8);
      H.writeInt32BE(this._d | 0, 12);
      H.writeInt32BE(this._e | 0, 16);
      return H;
    };

    module.exports = Sha1;
  }, {
    "./hash": 319,
    "inherits": 217,
    "safe-buffer": 314
  }],
  323: [function (require, module, exports) {
    /**
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
     * in FIPS 180-2
     * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     *
     */
    var inherits = require('inherits');

    var Sha256 = require('./sha256');

    var Hash = require('./hash');

    var Buffer = require('safe-buffer').Buffer;

    var W = new Array(64);

    function Sha224() {
      this.init();
      this._w = W; // new Array(64)

      Hash.call(this, 64, 56);
    }

    inherits(Sha224, Sha256);

    Sha224.prototype.init = function () {
      this._a = 0xc1059ed8;
      this._b = 0x367cd507;
      this._c = 0x3070dd17;
      this._d = 0xf70e5939;
      this._e = 0xffc00b31;
      this._f = 0x68581511;
      this._g = 0x64f98fa7;
      this._h = 0xbefa4fa4;
      return this;
    };

    Sha224.prototype._hash = function () {
      var H = Buffer.allocUnsafe(28);
      H.writeInt32BE(this._a, 0);
      H.writeInt32BE(this._b, 4);
      H.writeInt32BE(this._c, 8);
      H.writeInt32BE(this._d, 12);
      H.writeInt32BE(this._e, 16);
      H.writeInt32BE(this._f, 20);
      H.writeInt32BE(this._g, 24);
      return H;
    };

    module.exports = Sha224;
  }, {
    "./hash": 319,
    "./sha256": 324,
    "inherits": 217,
    "safe-buffer": 314
  }],
  324: [function (require, module, exports) {
    /**
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
     * in FIPS 180-2
     * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     *
     */
    var inherits = require('inherits');

    var Hash = require('./hash');

    var Buffer = require('safe-buffer').Buffer;

    var K = [0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2];
    var W = new Array(64);

    function Sha256() {
      this.init();
      this._w = W; // new Array(64)

      Hash.call(this, 64, 56);
    }

    inherits(Sha256, Hash);

    Sha256.prototype.init = function () {
      this._a = 0x6a09e667;
      this._b = 0xbb67ae85;
      this._c = 0x3c6ef372;
      this._d = 0xa54ff53a;
      this._e = 0x510e527f;
      this._f = 0x9b05688c;
      this._g = 0x1f83d9ab;
      this._h = 0x5be0cd19;
      return this;
    };

    function ch(x, y, z) {
      return z ^ x & (y ^ z);
    }

    function maj(x, y, z) {
      return x & y | z & (x | y);
    }

    function sigma0(x) {
      return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
    }

    function sigma1(x) {
      return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
    }

    function gamma0(x) {
      return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
    }

    function gamma1(x) {
      return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
    }

    Sha256.prototype._update = function (M) {
      var W = this._w;
      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;
      var f = this._f | 0;
      var g = this._g | 0;
      var h = this._h | 0;

      for (var i = 0; i < 16; ++i) {
        W[i] = M.readInt32BE(i * 4);
      }

      for (; i < 64; ++i) {
        W[i] = gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16] | 0;
      }

      for (var j = 0; j < 64; ++j) {
        var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W[j] | 0;
        var T2 = sigma0(a) + maj(a, b, c) | 0;
        h = g;
        g = f;
        f = e;
        e = d + T1 | 0;
        d = c;
        c = b;
        b = a;
        a = T1 + T2 | 0;
      }

      this._a = a + this._a | 0;
      this._b = b + this._b | 0;
      this._c = c + this._c | 0;
      this._d = d + this._d | 0;
      this._e = e + this._e | 0;
      this._f = f + this._f | 0;
      this._g = g + this._g | 0;
      this._h = h + this._h | 0;
    };

    Sha256.prototype._hash = function () {
      var H = Buffer.allocUnsafe(32);
      H.writeInt32BE(this._a, 0);
      H.writeInt32BE(this._b, 4);
      H.writeInt32BE(this._c, 8);
      H.writeInt32BE(this._d, 12);
      H.writeInt32BE(this._e, 16);
      H.writeInt32BE(this._f, 20);
      H.writeInt32BE(this._g, 24);
      H.writeInt32BE(this._h, 28);
      return H;
    };

    module.exports = Sha256;
  }, {
    "./hash": 319,
    "inherits": 217,
    "safe-buffer": 314
  }],
  325: [function (require, module, exports) {
    var inherits = require('inherits');

    var SHA512 = require('./sha512');

    var Hash = require('./hash');

    var Buffer = require('safe-buffer').Buffer;

    var W = new Array(160);

    function Sha384() {
      this.init();
      this._w = W;
      Hash.call(this, 128, 112);
    }

    inherits(Sha384, SHA512);

    Sha384.prototype.init = function () {
      this._ah = 0xcbbb9d5d;
      this._bh = 0x629a292a;
      this._ch = 0x9159015a;
      this._dh = 0x152fecd8;
      this._eh = 0x67332667;
      this._fh = 0x8eb44a87;
      this._gh = 0xdb0c2e0d;
      this._hh = 0x47b5481d;
      this._al = 0xc1059ed8;
      this._bl = 0x367cd507;
      this._cl = 0x3070dd17;
      this._dl = 0xf70e5939;
      this._el = 0xffc00b31;
      this._fl = 0x68581511;
      this._gl = 0x64f98fa7;
      this._hl = 0xbefa4fa4;
      return this;
    };

    Sha384.prototype._hash = function () {
      var H = Buffer.allocUnsafe(48);

      function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
      }

      writeInt64BE(this._ah, this._al, 0);
      writeInt64BE(this._bh, this._bl, 8);
      writeInt64BE(this._ch, this._cl, 16);
      writeInt64BE(this._dh, this._dl, 24);
      writeInt64BE(this._eh, this._el, 32);
      writeInt64BE(this._fh, this._fl, 40);
      return H;
    };

    module.exports = Sha384;
  }, {
    "./hash": 319,
    "./sha512": 326,
    "inherits": 217,
    "safe-buffer": 314
  }],
  326: [function (require, module, exports) {
    var inherits = require('inherits');

    var Hash = require('./hash');

    var Buffer = require('safe-buffer').Buffer;

    var K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];
    var W = new Array(160);

    function Sha512() {
      this.init();
      this._w = W;
      Hash.call(this, 128, 112);
    }

    inherits(Sha512, Hash);

    Sha512.prototype.init = function () {
      this._ah = 0x6a09e667;
      this._bh = 0xbb67ae85;
      this._ch = 0x3c6ef372;
      this._dh = 0xa54ff53a;
      this._eh = 0x510e527f;
      this._fh = 0x9b05688c;
      this._gh = 0x1f83d9ab;
      this._hh = 0x5be0cd19;
      this._al = 0xf3bcc908;
      this._bl = 0x84caa73b;
      this._cl = 0xfe94f82b;
      this._dl = 0x5f1d36f1;
      this._el = 0xade682d1;
      this._fl = 0x2b3e6c1f;
      this._gl = 0xfb41bd6b;
      this._hl = 0x137e2179;
      return this;
    };

    function Ch(x, y, z) {
      return z ^ x & (y ^ z);
    }

    function maj(x, y, z) {
      return x & y | z & (x | y);
    }

    function sigma0(x, xl) {
      return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
    }

    function sigma1(x, xl) {
      return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
    }

    function Gamma0(x, xl) {
      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
    }

    function Gamma0l(x, xl) {
      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
    }

    function Gamma1(x, xl) {
      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
    }

    function Gamma1l(x, xl) {
      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
    }

    function getCarry(a, b) {
      return a >>> 0 < b >>> 0 ? 1 : 0;
    }

    Sha512.prototype._update = function (M) {
      var W = this._w;
      var ah = this._ah | 0;
      var bh = this._bh | 0;
      var ch = this._ch | 0;
      var dh = this._dh | 0;
      var eh = this._eh | 0;
      var fh = this._fh | 0;
      var gh = this._gh | 0;
      var hh = this._hh | 0;
      var al = this._al | 0;
      var bl = this._bl | 0;
      var cl = this._cl | 0;
      var dl = this._dl | 0;
      var el = this._el | 0;
      var fl = this._fl | 0;
      var gl = this._gl | 0;
      var hl = this._hl | 0;

      for (var i = 0; i < 32; i += 2) {
        W[i] = M.readInt32BE(i * 4);
        W[i + 1] = M.readInt32BE(i * 4 + 4);
      }

      for (; i < 160; i += 2) {
        var xh = W[i - 15 * 2];
        var xl = W[i - 15 * 2 + 1];
        var gamma0 = Gamma0(xh, xl);
        var gamma0l = Gamma0l(xl, xh);
        xh = W[i - 2 * 2];
        xl = W[i - 2 * 2 + 1];
        var gamma1 = Gamma1(xh, xl);
        var gamma1l = Gamma1l(xl, xh); // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]

        var Wi7h = W[i - 7 * 2];
        var Wi7l = W[i - 7 * 2 + 1];
        var Wi16h = W[i - 16 * 2];
        var Wi16l = W[i - 16 * 2 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
        W[i] = Wih;
        W[i + 1] = Wil;
      }

      for (var j = 0; j < 160; j += 2) {
        Wih = W[j];
        Wil = W[j + 1];
        var majh = maj(ah, bh, ch);
        var majl = maj(al, bl, cl);
        var sigma0h = sigma0(ah, al);
        var sigma0l = sigma0(al, ah);
        var sigma1h = sigma1(eh, el);
        var sigma1l = sigma1(el, eh); // t1 = h + sigma1 + ch + K[j] + W[j]

        var Kih = K[j];
        var Kil = K[j + 1];
        var chh = Ch(eh, fh, gh);
        var chl = Ch(el, fl, gl);
        var t1l = hl + sigma1l | 0;
        var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + getCarry(t1l, Wil) | 0; // t2 = sigma0 + maj

        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = dl + t1l | 0;
        eh = dh + t1h + getCarry(el, dl) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = t1l + t2l | 0;
        ah = t1h + t2h + getCarry(al, t1l) | 0;
      }

      this._al = this._al + al | 0;
      this._bl = this._bl + bl | 0;
      this._cl = this._cl + cl | 0;
      this._dl = this._dl + dl | 0;
      this._el = this._el + el | 0;
      this._fl = this._fl + fl | 0;
      this._gl = this._gl + gl | 0;
      this._hl = this._hl + hl | 0;
      this._ah = this._ah + ah + getCarry(this._al, al) | 0;
      this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
      this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
      this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
      this._eh = this._eh + eh + getCarry(this._el, el) | 0;
      this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
      this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
      this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
    };

    Sha512.prototype._hash = function () {
      var H = Buffer.allocUnsafe(64);

      function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
      }

      writeInt64BE(this._ah, this._al, 0);
      writeInt64BE(this._bh, this._bl, 8);
      writeInt64BE(this._ch, this._cl, 16);
      writeInt64BE(this._dh, this._dl, 24);
      writeInt64BE(this._eh, this._el, 32);
      writeInt64BE(this._fh, this._fl, 40);
      writeInt64BE(this._gh, this._gl, 48);
      writeInt64BE(this._hh, this._hl, 56);
      return H;
    };

    module.exports = Sha512;
  }, {
    "./hash": 319,
    "inherits": 217,
    "safe-buffer": 314
  }],
  327: [function (require, module, exports) {
    var varint = require('varint');

    exports.encode = function encode(v, b, o) {
      v = v >= 0 ? v * 2 : v * -2 - 1;
      var r = varint.encode(v, b, o);
      encode.bytes = varint.encode.bytes;
      return r;
    };

    exports.decode = function decode(b, o) {
      var v = varint.decode(b, o);
      decode.bytes = varint.decode.bytes;
      return v & 1 ? (v + 1) / -2 : v / 2;
    };

    exports.encodingLength = function (v) {
      return varint.encodingLength(v >= 0 ? v * 2 : v * -2 - 1);
    };
  }, {
    "varint": 421
  }],
  328: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        /*! simple-peer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
        var debug = require('debug')('simple-peer');

        var getBrowserRTC = require('get-browser-rtc');

        var randombytes = require('randombytes');

        var stream = require('readable-stream');

        var queueMicrotask = require('queue-microtask'); // TODO: remove when Node 10 is not supported


        var MAX_BUFFERED_AMOUNT = 64 * 1024;
        var ICECOMPLETE_TIMEOUT = 5 * 1000;
        var CHANNEL_CLOSING_TIMEOUT = 5 * 1000; // HACK: Filter trickle lines when trickle is disabled #354

        function filterTrickle(sdp) {
          return sdp.replace(/a=ice-options:trickle\s\n/g, '');
        }

        function makeError(err, code) {
          if (typeof err === 'string') err = new Error(err);
          if (err.error instanceof Error) err = err.error;
          err.code = code;
          return err;
        }

        function warn(message) {
          console.warn(message);
        }
        /**
         * WebRTC peer connection. Same API as node core `net.Socket`, plus a few extra methods.
         * Duplex stream.
         * @param {Object} opts
         */


        var Peer = /*#__PURE__*/function (_stream$Duplex) {
          _inherits(Peer, _stream$Duplex);

          var _super17 = _createSuper(Peer);

          function Peer(opts) {
            var _this49;

            _classCallCheck2(this, Peer);

            opts = Object.assign({
              allowHalfOpen: false
            }, opts);
            _this49 = _super17.call(this, opts);
            _this49._id = randombytes(4).toString('hex').slice(0, 7);

            _this49._debug('new peer %o', opts);

            _this49.channelName = opts.initiator ? opts.channelName || randombytes(20).toString('hex') : null;
            _this49.initiator = opts.initiator || false;
            _this49.channelConfig = opts.channelConfig || Peer.channelConfig;
            _this49.negotiated = _this49.channelConfig.negotiated;
            _this49.config = Object.assign({}, Peer.config, opts.config);
            _this49.offerOptions = opts.offerOptions || {};
            _this49.answerOptions = opts.answerOptions || {};

            _this49.sdpTransform = opts.sdpTransform || function (sdp) {
              return sdp;
            };

            _this49.streams = opts.streams || (opts.stream ? [opts.stream] : []); // support old "stream" option

            _this49.trickle = opts.trickle !== undefined ? opts.trickle : true;
            _this49.allowHalfTrickle = opts.allowHalfTrickle !== undefined ? opts.allowHalfTrickle : false;
            _this49.iceCompleteTimeout = opts.iceCompleteTimeout || ICECOMPLETE_TIMEOUT;
            _this49.destroyed = false;
            _this49._connected = false;
            _this49.remoteAddress = undefined;
            _this49.remoteFamily = undefined;
            _this49.remotePort = undefined;
            _this49.localAddress = undefined;
            _this49.localFamily = undefined;
            _this49.localPort = undefined;
            _this49._wrtc = opts.wrtc && _typeof2(opts.wrtc) === 'object' ? opts.wrtc : getBrowserRTC();

            if (!_this49._wrtc) {
              if (typeof window === 'undefined') {
                throw makeError('No WebRTC support: Specify `opts.wrtc` option in this environment', 'ERR_WEBRTC_SUPPORT');
              } else {
                throw makeError('No WebRTC support: Not a supported browser', 'ERR_WEBRTC_SUPPORT');
              }
            }

            _this49._pcReady = false;
            _this49._channelReady = false;
            _this49._iceComplete = false; // ice candidate trickle done (got null candidate)

            _this49._iceCompleteTimer = null; // send an offer/answer anyway after some timeout

            _this49._channel = null;
            _this49._pendingCandidates = [];
            _this49._isNegotiating = _this49.negotiated ? false : !_this49.initiator; // is this peer waiting for negotiation to complete?

            _this49._batchedNegotiation = false; // batch synchronous negotiations

            _this49._queuedNegotiation = false; // is there a queued negotiation request?

            _this49._sendersAwaitingStable = [];
            _this49._senderMap = new Map();
            _this49._firstStable = true;
            _this49._closingInterval = null;
            _this49._remoteTracks = [];
            _this49._remoteStreams = [];
            _this49._chunk = null;
            _this49._cb = null;
            _this49._interval = null;

            try {
              _this49._pc = new _this49._wrtc.RTCPeerConnection(_this49.config);
            } catch (err) {
              queueMicrotask(function () {
                return _this49.destroy(makeError(err, 'ERR_PC_CONSTRUCTOR'));
              });
              return _possibleConstructorReturn(_this49);
            } // We prefer feature detection whenever possible, but sometimes that's not
            // possible for certain implementations.


            _this49._isReactNativeWebrtc = typeof _this49._pc._peerConnectionId === 'number';

            _this49._pc.oniceconnectionstatechange = function () {
              _this49._onIceStateChange();
            };

            _this49._pc.onicegatheringstatechange = function () {
              _this49._onIceStateChange();
            };

            _this49._pc.onconnectionstatechange = function () {
              _this49._onConnectionStateChange();
            };

            _this49._pc.onsignalingstatechange = function () {
              _this49._onSignalingStateChange();
            };

            _this49._pc.onicecandidate = function (event) {
              _this49._onIceCandidate(event);
            }; // Other spec events, unused by this implementation:
            // - onconnectionstatechange
            // - onicecandidateerror
            // - onfingerprintfailure
            // - onnegotiationneeded


            if (_this49.initiator || _this49.negotiated) {
              _this49._setupData({
                channel: _this49._pc.createDataChannel(_this49.channelName, _this49.channelConfig)
              });
            } else {
              _this49._pc.ondatachannel = function (event) {
                _this49._setupData(event);
              };
            }

            if (_this49.streams) {
              _this49.streams.forEach(function (stream) {
                _this49.addStream(stream);
              });
            }

            _this49._pc.ontrack = function (event) {
              _this49._onTrack(event);
            };

            if (_this49.initiator) {
              _this49._needsNegotiation();
            }

            _this49._onFinishBound = function () {
              _this49._onFinish();
            };

            _this49.once('finish', _this49._onFinishBound);

            return _this49;
          }

          _createClass2(Peer, [{
            key: "address",
            value: function address() {
              return {
                port: this.localPort,
                family: this.localFamily,
                address: this.localAddress
              };
            }
          }, {
            key: "signal",
            value: function signal(data) {
              var _this50 = this;

              if (this.destroyed) throw makeError('cannot signal after peer is destroyed', 'ERR_SIGNALING');

              if (typeof data === 'string') {
                try {
                  data = JSON.parse(data);
                } catch (err) {
                  data = {};
                }
              }

              this._debug('signal()');

              if (data.renegotiate && this.initiator) {
                this._debug('got request to renegotiate');

                this._needsNegotiation();
              }

              if (data.transceiverRequest && this.initiator) {
                this._debug('got request for transceiver');

                this.addTransceiver(data.transceiverRequest.kind, data.transceiverRequest.init);
              }

              if (data.candidate) {
                if (this._pc.remoteDescription && this._pc.remoteDescription.type) {
                  this._addIceCandidate(data.candidate);
                } else {
                  this._pendingCandidates.push(data.candidate);
                }
              }

              if (data.sdp) {
                this._pc.setRemoteDescription(new this._wrtc.RTCSessionDescription(data)).then(function () {
                  if (_this50.destroyed) return;

                  _this50._pendingCandidates.forEach(function (candidate) {
                    _this50._addIceCandidate(candidate);
                  });

                  _this50._pendingCandidates = [];
                  if (_this50._pc.remoteDescription.type === 'offer') _this50._createAnswer();
                }).catch(function (err) {
                  _this50.destroy(makeError(err, 'ERR_SET_REMOTE_DESCRIPTION'));
                });
              }

              if (!data.sdp && !data.candidate && !data.renegotiate && !data.transceiverRequest) {
                this.destroy(makeError('signal() called with invalid signal data', 'ERR_SIGNALING'));
              }
            }
          }, {
            key: "_addIceCandidate",
            value: function _addIceCandidate(candidate) {
              var _this51 = this;

              var iceCandidateObj = new this._wrtc.RTCIceCandidate(candidate);

              this._pc.addIceCandidate(iceCandidateObj).catch(function (err) {
                if (!iceCandidateObj.address || iceCandidateObj.address.endsWith('.local')) {
                  warn('Ignoring unsupported ICE candidate.');
                } else {
                  _this51.destroy(makeError(err, 'ERR_ADD_ICE_CANDIDATE'));
                }
              });
            }
            /**
             * Send text/binary data to the remote peer.
             * @param {ArrayBufferView|ArrayBuffer|Buffer|string|Blob} chunk
             */

          }, {
            key: "send",
            value: function send(chunk) {
              this._channel.send(chunk);
            }
            /**
             * Add a Transceiver to the connection.
             * @param {String} kind
             * @param {Object} init
             */

          }, {
            key: "addTransceiver",
            value: function addTransceiver(kind, init) {
              this._debug('addTransceiver()');

              if (this.initiator) {
                try {
                  this._pc.addTransceiver(kind, init);

                  this._needsNegotiation();
                } catch (err) {
                  this.destroy(makeError(err, 'ERR_ADD_TRANSCEIVER'));
                }
              } else {
                this.emit('signal', {
                  // request initiator to renegotiate
                  transceiverRequest: {
                    kind: kind,
                    init: init
                  }
                });
              }
            }
            /**
             * Add a MediaStream to the connection.
             * @param {MediaStream} stream
             */

          }, {
            key: "addStream",
            value: function addStream(stream) {
              var _this52 = this;

              this._debug('addStream()');

              stream.getTracks().forEach(function (track) {
                _this52.addTrack(track, stream);
              });
            }
            /**
             * Add a MediaStreamTrack to the connection.
             * @param {MediaStreamTrack} track
             * @param {MediaStream} stream
             */

          }, {
            key: "addTrack",
            value: function addTrack(track, stream) {
              this._debug('addTrack()');

              var submap = this._senderMap.get(track) || new Map(); // nested Maps map [track, stream] to sender

              var sender = submap.get(stream);

              if (!sender) {
                sender = this._pc.addTrack(track, stream);
                submap.set(stream, sender);

                this._senderMap.set(track, submap);

                this._needsNegotiation();
              } else if (sender.removed) {
                throw makeError('Track has been removed. You should enable/disable tracks that you want to re-add.', 'ERR_SENDER_REMOVED');
              } else {
                throw makeError('Track has already been added to that stream.', 'ERR_SENDER_ALREADY_ADDED');
              }
            }
            /**
             * Replace a MediaStreamTrack by another in the connection.
             * @param {MediaStreamTrack} oldTrack
             * @param {MediaStreamTrack} newTrack
             * @param {MediaStream} stream
             */

          }, {
            key: "replaceTrack",
            value: function replaceTrack(oldTrack, newTrack, stream) {
              this._debug('replaceTrack()');

              var submap = this._senderMap.get(oldTrack);

              var sender = submap ? submap.get(stream) : null;

              if (!sender) {
                throw makeError('Cannot replace track that was never added.', 'ERR_TRACK_NOT_ADDED');
              }

              if (newTrack) this._senderMap.set(newTrack, submap);

              if (sender.replaceTrack != null) {
                sender.replaceTrack(newTrack);
              } else {
                this.destroy(makeError('replaceTrack is not supported in this browser', 'ERR_UNSUPPORTED_REPLACETRACK'));
              }
            }
            /**
             * Remove a MediaStreamTrack from the connection.
             * @param {MediaStreamTrack} track
             * @param {MediaStream} stream
             */

          }, {
            key: "removeTrack",
            value: function removeTrack(track, stream) {
              this._debug('removeSender()');

              var submap = this._senderMap.get(track);

              var sender = submap ? submap.get(stream) : null;

              if (!sender) {
                throw makeError('Cannot remove track that was never added.', 'ERR_TRACK_NOT_ADDED');
              }

              try {
                sender.removed = true;

                this._pc.removeTrack(sender);
              } catch (err) {
                if (err.name === 'NS_ERROR_UNEXPECTED') {
                  this._sendersAwaitingStable.push(sender); // HACK: Firefox must wait until (signalingState === stable) https://bugzilla.mozilla.org/show_bug.cgi?id=1133874

                } else {
                  this.destroy(makeError(err, 'ERR_REMOVE_TRACK'));
                }
              }

              this._needsNegotiation();
            }
            /**
             * Remove a MediaStream from the connection.
             * @param {MediaStream} stream
             */

          }, {
            key: "removeStream",
            value: function removeStream(stream) {
              var _this53 = this;

              this._debug('removeSenders()');

              stream.getTracks().forEach(function (track) {
                _this53.removeTrack(track, stream);
              });
            }
          }, {
            key: "_needsNegotiation",
            value: function _needsNegotiation() {
              var _this54 = this;

              this._debug('_needsNegotiation');

              if (this._batchedNegotiation) return; // batch synchronous renegotiations

              this._batchedNegotiation = true;
              queueMicrotask(function () {
                _this54._batchedNegotiation = false;

                _this54._debug('starting batched negotiation');

                _this54.negotiate();
              });
            }
          }, {
            key: "negotiate",
            value: function negotiate() {
              var _this55 = this;

              if (this.initiator) {
                if (this._isNegotiating) {
                  this._queuedNegotiation = true;

                  this._debug('already negotiating, queueing');
                } else {
                  this._debug('start negotiation');

                  setTimeout(function () {
                    // HACK: Chrome crashes if we immediately call createOffer
                    _this55._createOffer();
                  }, 0);
                }
              } else {
                if (this._isNegotiating) {
                  this._queuedNegotiation = true;

                  this._debug('already negotiating, queueing');
                } else {
                  this._debug('requesting negotiation from initiator');

                  this.emit('signal', {
                    // request initiator to renegotiate
                    renegotiate: true
                  });
                }
              }

              this._isNegotiating = true;
            } // TODO: Delete this method once readable-stream is updated to contain a default
            // implementation of destroy() that automatically calls _destroy()
            // See: https://github.com/nodejs/readable-stream/issues/283

          }, {
            key: "destroy",
            value: function destroy(err) {
              this._destroy(err, function () {});
            }
          }, {
            key: "_destroy",
            value: function _destroy(err, cb) {
              if (this.destroyed) return;

              this._debug('destroy (error: %s)', err && (err.message || err));

              this.readable = this.writable = false;
              if (!this._readableState.ended) this.push(null);
              if (!this._writableState.finished) this.end();
              this.destroyed = true;
              this._connected = false;
              this._pcReady = false;
              this._channelReady = false;
              this._remoteTracks = null;
              this._remoteStreams = null;
              this._senderMap = null;
              clearInterval(this._closingInterval);
              this._closingInterval = null;
              clearInterval(this._interval);
              this._interval = null;
              this._chunk = null;
              this._cb = null;
              if (this._onFinishBound) this.removeListener('finish', this._onFinishBound);
              this._onFinishBound = null;

              if (this._channel) {
                try {
                  this._channel.close();
                } catch (err) {}

                this._channel.onmessage = null;
                this._channel.onopen = null;
                this._channel.onclose = null;
                this._channel.onerror = null;
              }

              if (this._pc) {
                try {
                  this._pc.close();
                } catch (err) {}

                this._pc.oniceconnectionstatechange = null;
                this._pc.onicegatheringstatechange = null;
                this._pc.onsignalingstatechange = null;
                this._pc.onicecandidate = null;
                this._pc.ontrack = null;
                this._pc.ondatachannel = null;
              }

              this._pc = null;
              this._channel = null;
              if (err) this.emit('error', err);
              this.emit('close');
              cb();
            }
          }, {
            key: "_setupData",
            value: function _setupData(event) {
              var _this56 = this;

              if (!event.channel) {
                // In some situations `pc.createDataChannel()` returns `undefined` (in wrtc),
                // which is invalid behavior. Handle it gracefully.
                // See: https://github.com/feross/simple-peer/issues/163
                return this.destroy(makeError('Data channel event is missing `channel` property', 'ERR_DATA_CHANNEL'));
              }

              this._channel = event.channel;
              this._channel.binaryType = 'arraybuffer';

              if (typeof this._channel.bufferedAmountLowThreshold === 'number') {
                this._channel.bufferedAmountLowThreshold = MAX_BUFFERED_AMOUNT;
              }

              this.channelName = this._channel.label;

              this._channel.onmessage = function (event) {
                _this56._onChannelMessage(event);
              };

              this._channel.onbufferedamountlow = function () {
                _this56._onChannelBufferedAmountLow();
              };

              this._channel.onopen = function () {
                _this56._onChannelOpen();
              };

              this._channel.onclose = function () {
                _this56._onChannelClose();
              };

              this._channel.onerror = function (err) {
                _this56.destroy(makeError(err, 'ERR_DATA_CHANNEL'));
              }; // HACK: Chrome will sometimes get stuck in readyState "closing", let's check for this condition
              // https://bugs.chromium.org/p/chromium/issues/detail?id=882743


              var isClosing = false;
              this._closingInterval = setInterval(function () {
                // No "onclosing" event
                if (_this56._channel && _this56._channel.readyState === 'closing') {
                  if (isClosing) _this56._onChannelClose(); // closing timed out: equivalent to onclose firing

                  isClosing = true;
                } else {
                  isClosing = false;
                }
              }, CHANNEL_CLOSING_TIMEOUT);
            }
          }, {
            key: "_read",
            value: function _read() {}
          }, {
            key: "_write",
            value: function _write(chunk, encoding, cb) {
              if (this.destroyed) return cb(makeError('cannot write after peer is destroyed', 'ERR_DATA_CHANNEL'));

              if (this._connected) {
                try {
                  this.send(chunk);
                } catch (err) {
                  return this.destroy(makeError(err, 'ERR_DATA_CHANNEL'));
                }

                if (this._channel.bufferedAmount > MAX_BUFFERED_AMOUNT) {
                  this._debug('start backpressure: bufferedAmount %d', this._channel.bufferedAmount);

                  this._cb = cb;
                } else {
                  cb(null);
                }
              } else {
                this._debug('write before connect');

                this._chunk = chunk;
                this._cb = cb;
              }
            } // When stream finishes writing, close socket. Half open connections are not
            // supported.

          }, {
            key: "_onFinish",
            value: function _onFinish() {
              var _this57 = this;

              if (this.destroyed) return; // Wait a bit before destroying so the socket flushes.
              // TODO: is there a more reliable way to accomplish this?

              var destroySoon = function destroySoon() {
                setTimeout(function () {
                  return _this57.destroy();
                }, 1000);
              };

              if (this._connected) {
                destroySoon();
              } else {
                this.once('connect', destroySoon);
              }
            }
          }, {
            key: "_startIceCompleteTimeout",
            value: function _startIceCompleteTimeout() {
              var _this58 = this;

              if (this.destroyed) return;
              if (this._iceCompleteTimer) return;

              this._debug('started iceComplete timeout');

              this._iceCompleteTimer = setTimeout(function () {
                if (!_this58._iceComplete) {
                  _this58._iceComplete = true;

                  _this58._debug('iceComplete timeout completed');

                  _this58.emit('iceTimeout');

                  _this58.emit('_iceComplete');
                }
              }, this.iceCompleteTimeout);
            }
          }, {
            key: "_createOffer",
            value: function _createOffer() {
              var _this59 = this;

              if (this.destroyed) return;

              this._pc.createOffer(this.offerOptions).then(function (offer) {
                if (_this59.destroyed) return;
                if (!_this59.trickle && !_this59.allowHalfTrickle) offer.sdp = filterTrickle(offer.sdp);
                offer.sdp = _this59.sdpTransform(offer.sdp);

                var sendOffer = function sendOffer() {
                  if (_this59.destroyed) return;
                  var signal = _this59._pc.localDescription || offer;

                  _this59._debug('signal');

                  _this59.emit('signal', {
                    type: signal.type,
                    sdp: signal.sdp
                  });
                };

                var onSuccess = function onSuccess() {
                  _this59._debug('createOffer success');

                  if (_this59.destroyed) return;
                  if (_this59.trickle || _this59._iceComplete) sendOffer();else _this59.once('_iceComplete', sendOffer); // wait for candidates
                };

                var onError = function onError(err) {
                  _this59.destroy(makeError(err, 'ERR_SET_LOCAL_DESCRIPTION'));
                };

                _this59._pc.setLocalDescription(offer).then(onSuccess).catch(onError);
              }).catch(function (err) {
                _this59.destroy(makeError(err, 'ERR_CREATE_OFFER'));
              });
            }
          }, {
            key: "_requestMissingTransceivers",
            value: function _requestMissingTransceivers() {
              var _this60 = this;

              if (this._pc.getTransceivers) {
                this._pc.getTransceivers().forEach(function (transceiver) {
                  if (!transceiver.mid && transceiver.sender.track && !transceiver.requested) {
                    transceiver.requested = true; // HACK: Safari returns negotiated transceivers with a null mid

                    _this60.addTransceiver(transceiver.sender.track.kind);
                  }
                });
              }
            }
          }, {
            key: "_createAnswer",
            value: function _createAnswer() {
              var _this61 = this;

              if (this.destroyed) return;

              this._pc.createAnswer(this.answerOptions).then(function (answer) {
                if (_this61.destroyed) return;
                if (!_this61.trickle && !_this61.allowHalfTrickle) answer.sdp = filterTrickle(answer.sdp);
                answer.sdp = _this61.sdpTransform(answer.sdp);

                var sendAnswer = function sendAnswer() {
                  if (_this61.destroyed) return;
                  var signal = _this61._pc.localDescription || answer;

                  _this61._debug('signal');

                  _this61.emit('signal', {
                    type: signal.type,
                    sdp: signal.sdp
                  });

                  if (!_this61.initiator) _this61._requestMissingTransceivers();
                };

                var onSuccess = function onSuccess() {
                  if (_this61.destroyed) return;
                  if (_this61.trickle || _this61._iceComplete) sendAnswer();else _this61.once('_iceComplete', sendAnswer);
                };

                var onError = function onError(err) {
                  _this61.destroy(makeError(err, 'ERR_SET_LOCAL_DESCRIPTION'));
                };

                _this61._pc.setLocalDescription(answer).then(onSuccess).catch(onError);
              }).catch(function (err) {
                _this61.destroy(makeError(err, 'ERR_CREATE_ANSWER'));
              });
            }
          }, {
            key: "_onConnectionStateChange",
            value: function _onConnectionStateChange() {
              if (this.destroyed) return;

              if (this._pc.connectionState === 'failed') {
                this.destroy(makeError('Connection failed.', 'ERR_CONNECTION_FAILURE'));
              }
            }
          }, {
            key: "_onIceStateChange",
            value: function _onIceStateChange() {
              if (this.destroyed) return;
              var iceConnectionState = this._pc.iceConnectionState;
              var iceGatheringState = this._pc.iceGatheringState;

              this._debug('iceStateChange (connection: %s) (gathering: %s)', iceConnectionState, iceGatheringState);

              this.emit('iceStateChange', iceConnectionState, iceGatheringState);

              if (iceConnectionState === 'connected' || iceConnectionState === 'completed') {
                this._pcReady = true;

                this._maybeReady();
              }

              if (iceConnectionState === 'failed') {
                this.destroy(makeError('Ice connection failed.', 'ERR_ICE_CONNECTION_FAILURE'));
              }

              if (iceConnectionState === 'closed') {
                this.destroy(makeError('Ice connection closed.', 'ERR_ICE_CONNECTION_CLOSED'));
              }
            }
          }, {
            key: "getStats",
            value: function getStats(cb) {
              var _this62 = this;

              // statreports can come with a value array instead of properties
              var flattenValues = function flattenValues(report) {
                if (Object.prototype.toString.call(report.values) === '[object Array]') {
                  report.values.forEach(function (value) {
                    Object.assign(report, value);
                  });
                }

                return report;
              }; // Promise-based getStats() (standard)


              if (this._pc.getStats.length === 0 || this._isReactNativeWebrtc) {
                this._pc.getStats().then(function (res) {
                  var reports = [];
                  res.forEach(function (report) {
                    reports.push(flattenValues(report));
                  });
                  cb(null, reports);
                }, function (err) {
                  return cb(err);
                }); // Single-parameter callback-based getStats() (non-standard)

              } else if (this._pc.getStats.length > 0) {
                this._pc.getStats(function (res) {
                  // If we destroy connection in `connect` callback this code might happen to run when actual connection is already closed
                  if (_this62.destroyed) return;
                  var reports = [];
                  res.result().forEach(function (result) {
                    var report = {};
                    result.names().forEach(function (name) {
                      report[name] = result.stat(name);
                    });
                    report.id = result.id;
                    report.type = result.type;
                    report.timestamp = result.timestamp;
                    reports.push(flattenValues(report));
                  });
                  cb(null, reports);
                }, function (err) {
                  return cb(err);
                }); // Unknown browser, skip getStats() since it's anyone's guess which style of
                // getStats() they implement.

              } else {
                cb(null, []);
              }
            }
          }, {
            key: "_maybeReady",
            value: function _maybeReady() {
              var _this63 = this;

              this._debug('maybeReady pc %s channel %s', this._pcReady, this._channelReady);

              if (this._connected || this._connecting || !this._pcReady || !this._channelReady) return;
              this._connecting = true; // HACK: We can't rely on order here, for details see https://github.com/js-platform/node-webrtc/issues/339

              var findCandidatePair = function findCandidatePair() {
                if (_this63.destroyed) return;

                _this63.getStats(function (err, items) {
                  if (_this63.destroyed) return; // Treat getStats error as non-fatal. It's not essential.

                  if (err) items = [];
                  var remoteCandidates = {};
                  var localCandidates = {};
                  var candidatePairs = {};
                  var foundSelectedCandidatePair = false;
                  items.forEach(function (item) {
                    // TODO: Once all browsers support the hyphenated stats report types, remove
                    // the non-hypenated ones
                    if (item.type === 'remotecandidate' || item.type === 'remote-candidate') {
                      remoteCandidates[item.id] = item;
                    }

                    if (item.type === 'localcandidate' || item.type === 'local-candidate') {
                      localCandidates[item.id] = item;
                    }

                    if (item.type === 'candidatepair' || item.type === 'candidate-pair') {
                      candidatePairs[item.id] = item;
                    }
                  });

                  var setSelectedCandidatePair = function setSelectedCandidatePair(selectedCandidatePair) {
                    foundSelectedCandidatePair = true;
                    var local = localCandidates[selectedCandidatePair.localCandidateId];

                    if (local && (local.ip || local.address)) {
                      // Spec
                      _this63.localAddress = local.ip || local.address;
                      _this63.localPort = Number(local.port);
                    } else if (local && local.ipAddress) {
                      // Firefox
                      _this63.localAddress = local.ipAddress;
                      _this63.localPort = Number(local.portNumber);
                    } else if (typeof selectedCandidatePair.googLocalAddress === 'string') {
                      // TODO: remove this once Chrome 58 is released
                      local = selectedCandidatePair.googLocalAddress.split(':');
                      _this63.localAddress = local[0];
                      _this63.localPort = Number(local[1]);
                    }

                    if (_this63.localAddress) {
                      _this63.localFamily = _this63.localAddress.includes(':') ? 'IPv6' : 'IPv4';
                    }

                    var remote = remoteCandidates[selectedCandidatePair.remoteCandidateId];

                    if (remote && (remote.ip || remote.address)) {
                      // Spec
                      _this63.remoteAddress = remote.ip || remote.address;
                      _this63.remotePort = Number(remote.port);
                    } else if (remote && remote.ipAddress) {
                      // Firefox
                      _this63.remoteAddress = remote.ipAddress;
                      _this63.remotePort = Number(remote.portNumber);
                    } else if (typeof selectedCandidatePair.googRemoteAddress === 'string') {
                      // TODO: remove this once Chrome 58 is released
                      remote = selectedCandidatePair.googRemoteAddress.split(':');
                      _this63.remoteAddress = remote[0];
                      _this63.remotePort = Number(remote[1]);
                    }

                    if (_this63.remoteAddress) {
                      _this63.remoteFamily = _this63.remoteAddress.includes(':') ? 'IPv6' : 'IPv4';
                    }

                    _this63._debug('connect local: %s:%s remote: %s:%s', _this63.localAddress, _this63.localPort, _this63.remoteAddress, _this63.remotePort);
                  };

                  items.forEach(function (item) {
                    // Spec-compliant
                    if (item.type === 'transport' && item.selectedCandidatePairId) {
                      setSelectedCandidatePair(candidatePairs[item.selectedCandidatePairId]);
                    } // Old implementations


                    if (item.type === 'googCandidatePair' && item.googActiveConnection === 'true' || (item.type === 'candidatepair' || item.type === 'candidate-pair') && item.selected) {
                      setSelectedCandidatePair(item);
                    }
                  }); // Ignore candidate pair selection in browsers like Safari 11 that do not have any local or remote candidates
                  // But wait until at least 1 candidate pair is available

                  if (!foundSelectedCandidatePair && (!Object.keys(candidatePairs).length || Object.keys(localCandidates).length)) {
                    setTimeout(findCandidatePair, 100);
                    return;
                  } else {
                    _this63._connecting = false;
                    _this63._connected = true;
                  }

                  if (_this63._chunk) {
                    try {
                      _this63.send(_this63._chunk);
                    } catch (err) {
                      return _this63.destroy(makeError(err, 'ERR_DATA_CHANNEL'));
                    }

                    _this63._chunk = null;

                    _this63._debug('sent chunk from "write before connect"');

                    var cb = _this63._cb;
                    _this63._cb = null;
                    cb(null);
                  } // If `bufferedAmountLowThreshold` and 'onbufferedamountlow' are unsupported,
                  // fallback to using setInterval to implement backpressure.


                  if (typeof _this63._channel.bufferedAmountLowThreshold !== 'number') {
                    _this63._interval = setInterval(function () {
                      return _this63._onInterval();
                    }, 150);
                    if (_this63._interval.unref) _this63._interval.unref();
                  }

                  _this63._debug('connect');

                  _this63.emit('connect');
                });
              };

              findCandidatePair();
            }
          }, {
            key: "_onInterval",
            value: function _onInterval() {
              if (!this._cb || !this._channel || this._channel.bufferedAmount > MAX_BUFFERED_AMOUNT) {
                return;
              }

              this._onChannelBufferedAmountLow();
            }
          }, {
            key: "_onSignalingStateChange",
            value: function _onSignalingStateChange() {
              var _this64 = this;

              if (this.destroyed) return;

              if (this._pc.signalingState === 'stable' && !this._firstStable) {
                this._isNegotiating = false; // HACK: Firefox doesn't yet support removing tracks when signalingState !== 'stable'

                this._debug('flushing sender queue', this._sendersAwaitingStable);

                this._sendersAwaitingStable.forEach(function (sender) {
                  _this64._pc.removeTrack(sender);

                  _this64._queuedNegotiation = true;
                });

                this._sendersAwaitingStable = [];

                if (this._queuedNegotiation) {
                  this._debug('flushing negotiation queue');

                  this._queuedNegotiation = false;

                  this._needsNegotiation(); // negotiate again

                }

                this._debug('negotiate');

                this.emit('negotiate');
              }

              this._firstStable = false;

              this._debug('signalingStateChange %s', this._pc.signalingState);

              this.emit('signalingStateChange', this._pc.signalingState);
            }
          }, {
            key: "_onIceCandidate",
            value: function _onIceCandidate(event) {
              if (this.destroyed) return;

              if (event.candidate && this.trickle) {
                this.emit('signal', {
                  candidate: {
                    candidate: event.candidate.candidate,
                    sdpMLineIndex: event.candidate.sdpMLineIndex,
                    sdpMid: event.candidate.sdpMid
                  }
                });
              } else if (!event.candidate && !this._iceComplete) {
                this._iceComplete = true;
                this.emit('_iceComplete');
              } // as soon as we've received one valid candidate start timeout


              if (event.candidate) {
                this._startIceCompleteTimeout();
              }
            }
          }, {
            key: "_onChannelMessage",
            value: function _onChannelMessage(event) {
              if (this.destroyed) return;
              var data = event.data;
              if (data instanceof ArrayBuffer) data = Buffer.from(data);
              this.push(data);
            }
          }, {
            key: "_onChannelBufferedAmountLow",
            value: function _onChannelBufferedAmountLow() {
              if (this.destroyed || !this._cb) return;

              this._debug('ending backpressure: bufferedAmount %d', this._channel.bufferedAmount);

              var cb = this._cb;
              this._cb = null;
              cb(null);
            }
          }, {
            key: "_onChannelOpen",
            value: function _onChannelOpen() {
              if (this._connected || this.destroyed) return;

              this._debug('on channel open');

              this._channelReady = true;

              this._maybeReady();
            }
          }, {
            key: "_onChannelClose",
            value: function _onChannelClose() {
              if (this.destroyed) return;

              this._debug('on channel close');

              this.destroy();
            }
          }, {
            key: "_onTrack",
            value: function _onTrack(event) {
              var _this65 = this;

              if (this.destroyed) return;
              event.streams.forEach(function (eventStream) {
                _this65._debug('on track');

                _this65.emit('track', event.track, eventStream);

                _this65._remoteTracks.push({
                  track: event.track,
                  stream: eventStream
                });

                if (_this65._remoteStreams.some(function (remoteStream) {
                  return remoteStream.id === eventStream.id;
                })) return; // Only fire one 'stream' event, even though there may be multiple tracks per stream

                _this65._remoteStreams.push(eventStream);

                queueMicrotask(function () {
                  _this65.emit('stream', eventStream); // ensure all tracks have been added

                });
              });
            }
          }, {
            key: "_debug",
            value: function _debug() {
              var args = [].slice.call(arguments);
              args[0] = '[' + this._id + '] ' + args[0];
              debug.apply(null, args);
            }
          }, {
            key: "bufferSize",
            get: function get() {
              return this._channel && this._channel.bufferedAmount || 0;
            } // HACK: it's possible channel.readyState is "closing" before peer.destroy() fires
            // https://bugs.chromium.org/p/chromium/issues/detail?id=882743

          }, {
            key: "connected",
            get: function get() {
              return this._connected && this._channel.readyState === 'open';
            }
          }]);

          return Peer;
        }(stream.Duplex);

        Peer.WEBRTC_SUPPORT = !!getBrowserRTC();
        /**
         * Expose peer and data channel config for overriding all Peer
         * instances. Otherwise, just set opts.config or opts.channelConfig
         * when constructing a Peer.
         */

        Peer.config = {
          iceServers: [{
            urls: 'stun:stun.l.google.com:19302'
          }, {
            urls: 'stun:global.stun.twilio.com:3478?transport=udp'
          }],
          sdpSemantics: 'unified-plan'
        };
        Peer.channelConfig = {};
        module.exports = Peer;
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "buffer": 102,
    "debug": 125,
    "get-browser-rtc": 177,
    "queue-microtask": 290,
    "randombytes": 291,
    "readable-stream": 343
  }],
  329: [function (require, module, exports) {
    arguments[4][7][0].apply(exports, arguments);
  }, {
    "dup": 7
  }],
  330: [function (require, module, exports) {
    arguments[4][8][0].apply(exports, arguments);
  }, {
    "./_stream_readable": 332,
    "./_stream_writable": 334,
    "_process": 276,
    "dup": 8,
    "inherits": 217
  }],
  331: [function (require, module, exports) {
    arguments[4][9][0].apply(exports, arguments);
  }, {
    "./_stream_transform": 333,
    "dup": 9,
    "inherits": 217
  }],
  332: [function (require, module, exports) {
    arguments[4][10][0].apply(exports, arguments);
  }, {
    "../errors": 329,
    "./_stream_duplex": 330,
    "./internal/streams/async_iterator": 335,
    "./internal/streams/buffer_list": 336,
    "./internal/streams/destroy": 337,
    "./internal/streams/from": 339,
    "./internal/streams/state": 341,
    "./internal/streams/stream": 342,
    "_process": 276,
    "buffer": 102,
    "dup": 10,
    "events": 175,
    "inherits": 217,
    "string_decoder/": 364,
    "util": 56
  }],
  333: [function (require, module, exports) {
    arguments[4][11][0].apply(exports, arguments);
  }, {
    "../errors": 329,
    "./_stream_duplex": 330,
    "dup": 11,
    "inherits": 217
  }],
  334: [function (require, module, exports) {
    arguments[4][12][0].apply(exports, arguments);
  }, {
    "../errors": 329,
    "./_stream_duplex": 330,
    "./internal/streams/destroy": 337,
    "./internal/streams/state": 341,
    "./internal/streams/stream": 342,
    "_process": 276,
    "buffer": 102,
    "dup": 12,
    "inherits": 217,
    "util-deprecate": 400
  }],
  335: [function (require, module, exports) {
    arguments[4][13][0].apply(exports, arguments);
  }, {
    "./end-of-stream": 338,
    "_process": 276,
    "dup": 13
  }],
  336: [function (require, module, exports) {
    arguments[4][14][0].apply(exports, arguments);
  }, {
    "buffer": 102,
    "dup": 14,
    "util": 56
  }],
  337: [function (require, module, exports) {
    arguments[4][15][0].apply(exports, arguments);
  }, {
    "_process": 276,
    "dup": 15
  }],
  338: [function (require, module, exports) {
    arguments[4][16][0].apply(exports, arguments);
  }, {
    "../../../errors": 329,
    "dup": 16
  }],
  339: [function (require, module, exports) {
    arguments[4][17][0].apply(exports, arguments);
  }, {
    "dup": 17
  }],
  340: [function (require, module, exports) {
    arguments[4][18][0].apply(exports, arguments);
  }, {
    "../../../errors": 329,
    "./end-of-stream": 338,
    "dup": 18
  }],
  341: [function (require, module, exports) {
    arguments[4][19][0].apply(exports, arguments);
  }, {
    "../../../errors": 329,
    "dup": 19
  }],
  342: [function (require, module, exports) {
    arguments[4][20][0].apply(exports, arguments);
  }, {
    "dup": 20,
    "events": 175
  }],
  343: [function (require, module, exports) {
    arguments[4][21][0].apply(exports, arguments);
  }, {
    "./lib/_stream_duplex.js": 330,
    "./lib/_stream_passthrough.js": 331,
    "./lib/_stream_readable.js": 332,
    "./lib/_stream_transform.js": 333,
    "./lib/_stream_writable.js": 334,
    "./lib/internal/streams/end-of-stream.js": 338,
    "./lib/internal/streams/pipeline.js": 340,
    "dup": 21
  }],
  344: [function (require, module, exports) {
    /* global self */
    var Rusha = require('rusha');

    var rushaWorkerSha1 = require('./rusha-worker-sha1');

    var rusha = new Rusha();
    var scope = typeof window !== 'undefined' ? window : self;
    var crypto = scope.crypto || scope.msCrypto || {};
    var subtle = crypto.subtle || crypto.webkitSubtle;

    function sha1sync(buf) {
      return rusha.digest(buf);
    } // Browsers throw if they lack support for an algorithm.
    // Promise will be rejected on non-secure origins. (http://goo.gl/lq4gCo)


    try {
      subtle.digest({
        name: 'sha-1'
      }, new Uint8Array()).catch(function () {
        subtle = false;
      });
    } catch (err) {
      subtle = false;
    }

    function sha1(buf, cb) {
      if (!subtle) {
        if (typeof window !== 'undefined') {
          rushaWorkerSha1(buf, function onRushaWorkerSha1(err, hash) {
            if (err) {
              // On error, fallback to synchronous method which cannot fail
              cb(sha1sync(buf));
              return;
            }

            cb(hash);
          });
        } else {
          queueMicrotask(function () {
            return cb(sha1sync(buf));
          });
        }

        return;
      }

      if (typeof buf === 'string') {
        buf = uint8array(buf);
      }

      subtle.digest({
        name: 'sha-1'
      }, buf).then(function succeed(result) {
        cb(hex(new Uint8Array(result)));
      }, function fail() {
        // On error, fallback to synchronous method which cannot fail
        cb(sha1sync(buf));
      });
    }

    function uint8array(s) {
      var l = s.length;
      var array = new Uint8Array(l);

      for (var i = 0; i < l; i++) {
        array[i] = s.charCodeAt(i);
      }

      return array;
    }

    function hex(buf) {
      var l = buf.length;
      var chars = [];

      for (var i = 0; i < l; i++) {
        var bite = buf[i];
        chars.push((bite >>> 4).toString(16));
        chars.push((bite & 0x0f).toString(16));
      }

      return chars.join('');
    }

    module.exports = sha1;
    module.exports.sync = sha1sync;
  }, {
    "./rusha-worker-sha1": 345,
    "rusha": 313
  }],
  345: [function (require, module, exports) {
    var Rusha = require('rusha');

    var worker;
    var nextTaskId;
    var cbs;

    function init() {
      worker = Rusha.createWorker();
      nextTaskId = 1;
      cbs = {}; // taskId -> cb

      worker.onmessage = function onRushaMessage(e) {
        var taskId = e.data.id;
        var cb = cbs[taskId];
        delete cbs[taskId];

        if (e.data.error != null) {
          cb(new Error('Rusha worker error: ' + e.data.error));
        } else {
          cb(null, e.data.hash);
        }
      };
    }

    function sha1(buf, cb) {
      if (!worker) init();
      cbs[nextTaskId] = cb;
      worker.postMessage({
        id: nextTaskId,
        data: buf
      });
      nextTaskId += 1;
    }

    module.exports = sha1;
  }, {
    "rusha": 313
  }],
  346: [function (require, module, exports) {
    var cuid = require('cuid');

    var inherits = require('inherits');

    var EventEmitter = require('nanobus');

    var SimplePeer = require('simple-peer');

    inherits(SimpleSignalClient, EventEmitter);
    var ERR_CONNECTION_TIMEOUT = 'ERR_CONNECTION_TIMEOUT';
    var ERR_PREMATURE_CLOSE = 'ERR_PREMATURE_CLOSE';
    /**
     * SimpleSignalClient
     *
     * @param {Socket} socket Socket
     * @param {Object} options
     * @param {number} [options.connectionTimeout=10000] Defines a timeout for establishing a connection.
     */

    function SimpleSignalClient(socket) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (!(this instanceof SimpleSignalClient)) return new SimpleSignalClient(socket);
      EventEmitter.call(this);
      var _options$connectionTi = options.connectionTimeout,
          connectionTimeout = _options$connectionTi === void 0 ? 10 * 1000 : _options$connectionTi;
      this.id = null;
      this.socket = socket;
      this._connectionTimeout = connectionTimeout;
      this._peers = {};
      this._sessionQueues = {};
      this._timers = new Map();
      this.socket.on('simple-signal[discover]', this._onDiscover.bind(this));
      this.socket.on('simple-signal[offer]', this._onOffer.bind(this));
      this.socket.on('simple-signal[signal]', this._onSignal.bind(this));
      this.socket.on('simple-signal[reject]', this._onReject.bind(this));
    }

    SimpleSignalClient.prototype._onDiscover = function (data) {
      this.id = data.id;
      this.emit('discover', data.discoveryData);
    };

    SimpleSignalClient.prototype._onOffer = function (_ref25) {
      var initiator = _ref25.initiator,
          metadata = _ref25.metadata,
          sessionId = _ref25.sessionId,
          signal = _ref25.signal;
      this._sessionQueues[sessionId] = [signal];
      var request = {
        initiator: initiator,
        metadata: metadata,
        sessionId: sessionId
      };
      request.accept = this._accept.bind(this, request);
      request.reject = this._reject.bind(this, request);
      this.emit('request', request);
    };

    SimpleSignalClient.prototype._accept = function (request) {
      var _this66 = this;

      var metadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var peerOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      peerOptions.initiator = false;
      var peer = this._peers[request.sessionId] = new SimplePeer(peerOptions);
      peer.on('signal', function (signal) {
        _this66.socket.emit('simple-signal[signal]', {
          signal: signal,
          metadata: metadata,
          sessionId: request.sessionId,
          target: request.initiator
        });
      });
      peer.once('close', function () {
        _this66._closePeer(request.sessionId);
      }); // clear signaling queue

      this._sessionQueues[request.sessionId].forEach(function (signal) {
        peer.signal(signal);
      });

      delete this._sessionQueues[request.sessionId];
      return new Promise(function (resolve, reject) {
        _this66._onSafeConnect(peer, function () {
          _this66._clearTimer(request.sessionId);

          resolve({
            peer: peer,
            metadata: request.metadata
          });
        });

        peer.once('close', function () {
          reject({
            metadata: {
              code: ERR_PREMATURE_CLOSE
            }
          });
        });

        _this66._startTimer(request.sessionId, function (metadata) {
          reject({
            metadata: metadata
          });

          _this66._closePeer(request.sessionId);
        });
      });
    };

    SimpleSignalClient.prototype._reject = function (request) {
      var metadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      // clear signaling queue
      delete this._sessionQueues[request.sessionId];

      this._clearTimer(request.sessionId);

      this.socket.emit('simple-signal[reject]', {
        metadata: metadata,
        sessionId: request.sessionId,
        target: request.initiator
      });
    };

    SimpleSignalClient.prototype._onReject = function (_ref26) {
      var sessionId = _ref26.sessionId,
          metadata = _ref26.metadata;
      var peer = this._peers[sessionId];
      if (peer) peer.reject(metadata);
    };

    SimpleSignalClient.prototype._onSignal = function (_ref27) {
      var sessionId = _ref27.sessionId,
          signal = _ref27.signal,
          metadata = _ref27.metadata;
      var peer = this._peers[sessionId];

      if (peer) {
        peer.signal(signal);
        if (metadata !== undefined && peer.resolveMetadata) peer.resolveMetadata(metadata);
      } else {
        this._sessionQueues[sessionId] = this._sessionQueues[sessionId] || [];

        this._sessionQueues[sessionId].push(signal);
      }
    };

    SimpleSignalClient.prototype.connect = function (target) {
      var _this67 = this;

      var metadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var peerOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      if (!this.id) throw new Error('Must complete discovery first.');
      peerOptions.initiator = true;
      var sessionId = cuid(); // TODO: Use crypto

      var firstOffer = true;
      var peer = this._peers[sessionId] = new SimplePeer(peerOptions);
      peer.once('close', function () {
        _this67._closePeer(sessionId);
      });
      peer.on('signal', function (signal) {
        var messageType = signal.sdp && firstOffer ? 'simple-signal[offer]' : 'simple-signal[signal]';
        if (signal.sdp) firstOffer = false;

        _this67.socket.emit(messageType, {
          signal: signal,
          metadata: metadata,
          sessionId: sessionId,
          target: target
        });
      });
      return new Promise(function (resolve, reject) {
        peer.resolveMetadata = function (metadata) {
          peer.resolveMetadata = null;

          _this67._onSafeConnect(peer, function () {
            _this67._clearTimer(sessionId);

            resolve({
              peer: peer,
              metadata: metadata
            });
          });
        };

        peer.reject = function (metadata) {
          reject({
            metadata: metadata
          }); // eslint-disable-line

          _this67._closePeer(sessionId);
        };

        peer.once('close', function () {
          reject({
            metadata: {
              code: ERR_PREMATURE_CLOSE
            }
          });
        });

        _this67._startTimer(sessionId, function (metadata) {
          return peer.reject(metadata);
        });
      });
    };

    SimpleSignalClient.prototype._onSafeConnect = function (peer, callback) {
      // simple-signal caches stream and track events so they always come AFTER connect
      var cachedEvents = [];

      function streamHandler(stream) {
        cachedEvents.push({
          name: 'stream',
          args: [stream]
        });
      }

      function trackHandler(track, stream) {
        cachedEvents.push({
          name: 'track',
          args: [track, stream]
        });
      }

      peer.on('stream', streamHandler);
      peer.on('track', trackHandler);
      peer.once('connect', function () {
        setTimeout(function () {
          peer.emit('connect'); // expose missed 'connect' event to application

          setTimeout(function () {
            cachedEvents.forEach(function (_ref28) {
              var name = _ref28.name,
                  args = _ref28.args;
              // replay any missed stream/track events
              peer.emit.apply(peer, [name].concat(_toConsumableArray(args)));
            });
          }, 0);
        }, 0);
        peer.removeListener('stream', streamHandler);
        peer.removeListener('track', trackHandler);
        callback(peer);
      });
    };

    SimpleSignalClient.prototype._closePeer = function (sessionId) {
      var peer = this._peers[sessionId];

      this._clearTimer(sessionId);

      delete this._peers[sessionId];
      if (peer) peer.destroy();
    };

    SimpleSignalClient.prototype._startTimer = function (sessionId, cb) {
      var _this68 = this;

      if (this._connectionTimeout !== -1) {
        var timer = setTimeout(function () {
          _this68._clearTimer(sessionId); // metadata err


          cb({
            code: ERR_CONNECTION_TIMEOUT
          });
        }, this._connectionTimeout);

        this._timers.set(sessionId, timer);
      }
    };

    SimpleSignalClient.prototype._clearTimer = function (sessionId) {
      if (this._timers.has(sessionId)) {
        clearTimeout(this._timers.get(sessionId));

        this._timers.delete(sessionId);
      }
    };

    SimpleSignalClient.prototype.discover = function () {
      var discoveryData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.socket.emit('simple-signal[discover]', discoveryData);
    };

    SimpleSignalClient.prototype.peers = function () {
      return Object.values(this._peers);
    };

    SimpleSignalClient.prototype.destroy = function () {
      this.socket.close();
      this.peers().forEach(function (peer) {
        return peer.destroy();
      });
      this.id = null;
      this.socket = null;
      this._peers = null;
      this._sessionQueues = null;
    };

    module.exports = SimpleSignalClient;
    module.exports.SimplePeer = SimplePeer;
    module.exports.ERR_CONNECTION_TIMEOUT = ERR_CONNECTION_TIMEOUT;
    module.exports.ERR_PREMATURE_CLOSE = ERR_PREMATURE_CLOSE;
  }, {
    "cuid": 121,
    "inherits": 217,
    "nanobus": 250,
    "simple-peer": 328
  }],
  347: [function (require, module, exports) {
    /**
     * Module dependencies.
     */
    var url = require('./url');

    var parser = require('socket.io-parser');

    var Manager = require('./manager');

    var debug = require('debug')('socket.io-client');
    /**
     * Module exports.
     */


    module.exports = exports = lookup;
    /**
     * Managers cache.
     */

    var cache = exports.managers = {};
    /**
     * Looks up an existing `Manager` for multiplexing.
     * If the user summons:
     *
     *   `io('http://localhost/a');`
     *   `io('http://localhost/b');`
     *
     * We reuse the existing instance based on same scheme/port/host,
     * and we initialize sockets for each namespace.
     *
     * @api public
     */

    function lookup(uri, opts) {
      if (_typeof2(uri) === 'object') {
        opts = uri;
        uri = undefined;
      }

      opts = opts || {};
      var parsed = url(uri);
      var source = parsed.source;
      var id = parsed.id;
      var path = parsed.path;
      var sameNamespace = cache[id] && path in cache[id].nsps;
      var newConnection = opts.forceNew || opts['force new connection'] || false === opts.multiplex || sameNamespace;
      var io;

      if (newConnection) {
        debug('ignoring socket cache for %s', source);
        io = Manager(source, opts);
      } else {
        if (!cache[id]) {
          debug('new io instance for %s', source);
          cache[id] = Manager(source, opts);
        }

        io = cache[id];
      }

      if (parsed.query && !opts.query) {
        opts.query = parsed.query;
      }

      return io.socket(parsed.path, opts);
    }
    /**
     * Protocol version.
     *
     * @api public
     */


    exports.protocol = parser.protocol;
    /**
     * `connect`.
     *
     * @param {String} uri
     * @api public
     */

    exports.connect = lookup;
    /**
     * Expose constructors for standalone build.
     *
     * @api public
     */

    exports.Manager = require('./manager');
    exports.Socket = require('./socket');
  }, {
    "./manager": 348,
    "./socket": 350,
    "./url": 351,
    "debug": 352,
    "socket.io-parser": 356
  }],
  348: [function (require, module, exports) {
    /**
     * Module dependencies.
     */
    var eio = require('engine.io-client');

    var Socket = require('./socket');

    var Emitter = require('component-emitter');

    var parser = require('socket.io-parser');

    var on = require('./on');

    var bind = require('component-bind');

    var debug = require('debug')('socket.io-client:manager');

    var indexOf = require('indexof');

    var Backoff = require('backo2');
    /**
     * IE6+ hasOwnProperty
     */


    var has = Object.prototype.hasOwnProperty;
    /**
     * Module exports
     */

    module.exports = Manager;
    /**
     * `Manager` constructor.
     *
     * @param {String} engine instance or engine uri/opts
     * @param {Object} options
     * @api public
     */

    function Manager(uri, opts) {
      if (!(this instanceof Manager)) return new Manager(uri, opts);

      if (uri && 'object' === _typeof2(uri)) {
        opts = uri;
        uri = undefined;
      }

      opts = opts || {};
      opts.path = opts.path || '/socket.io';
      this.nsps = {};
      this.subs = [];
      this.opts = opts;
      this.reconnection(opts.reconnection !== false);
      this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
      this.reconnectionDelay(opts.reconnectionDelay || 1000);
      this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
      this.randomizationFactor(opts.randomizationFactor || 0.5);
      this.backoff = new Backoff({
        min: this.reconnectionDelay(),
        max: this.reconnectionDelayMax(),
        jitter: this.randomizationFactor()
      });
      this.timeout(null == opts.timeout ? 20000 : opts.timeout);
      this.readyState = 'closed';
      this.uri = uri;
      this.connecting = [];
      this.lastPing = null;
      this.encoding = false;
      this.packetBuffer = [];

      var _parser = opts.parser || parser;

      this.encoder = new _parser.Encoder();
      this.decoder = new _parser.Decoder();
      this.autoConnect = opts.autoConnect !== false;
      if (this.autoConnect) this.open();
    }
    /**
     * Propagate given event to sockets and emit on `this`
     *
     * @api private
     */


    Manager.prototype.emitAll = function () {
      this.emit.apply(this, arguments);

      for (var nsp in this.nsps) {
        if (has.call(this.nsps, nsp)) {
          this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
        }
      }
    };
    /**
     * Update `socket.id` of all sockets
     *
     * @api private
     */


    Manager.prototype.updateSocketIds = function () {
      for (var nsp in this.nsps) {
        if (has.call(this.nsps, nsp)) {
          this.nsps[nsp].id = this.generateId(nsp);
        }
      }
    };
    /**
     * generate `socket.id` for the given `nsp`
     *
     * @param {String} nsp
     * @return {String}
     * @api private
     */


    Manager.prototype.generateId = function (nsp) {
      return (nsp === '/' ? '' : nsp + '#') + this.engine.id;
    };
    /**
     * Mix in `Emitter`.
     */


    Emitter(Manager.prototype);
    /**
     * Sets the `reconnection` config.
     *
     * @param {Boolean} true/false if it should automatically reconnect
     * @return {Manager} self or value
     * @api public
     */

    Manager.prototype.reconnection = function (v) {
      if (!arguments.length) return this._reconnection;
      this._reconnection = !!v;
      return this;
    };
    /**
     * Sets the reconnection attempts config.
     *
     * @param {Number} max reconnection attempts before giving up
     * @return {Manager} self or value
     * @api public
     */


    Manager.prototype.reconnectionAttempts = function (v) {
      if (!arguments.length) return this._reconnectionAttempts;
      this._reconnectionAttempts = v;
      return this;
    };
    /**
     * Sets the delay between reconnections.
     *
     * @param {Number} delay
     * @return {Manager} self or value
     * @api public
     */


    Manager.prototype.reconnectionDelay = function (v) {
      if (!arguments.length) return this._reconnectionDelay;
      this._reconnectionDelay = v;
      this.backoff && this.backoff.setMin(v);
      return this;
    };

    Manager.prototype.randomizationFactor = function (v) {
      if (!arguments.length) return this._randomizationFactor;
      this._randomizationFactor = v;
      this.backoff && this.backoff.setJitter(v);
      return this;
    };
    /**
     * Sets the maximum delay between reconnections.
     *
     * @param {Number} delay
     * @return {Manager} self or value
     * @api public
     */


    Manager.prototype.reconnectionDelayMax = function (v) {
      if (!arguments.length) return this._reconnectionDelayMax;
      this._reconnectionDelayMax = v;
      this.backoff && this.backoff.setMax(v);
      return this;
    };
    /**
     * Sets the connection timeout. `false` to disable
     *
     * @return {Manager} self or value
     * @api public
     */


    Manager.prototype.timeout = function (v) {
      if (!arguments.length) return this._timeout;
      this._timeout = v;
      return this;
    };
    /**
     * Starts trying to reconnect if reconnection is enabled and we have not
     * started reconnecting yet
     *
     * @api private
     */


    Manager.prototype.maybeReconnectOnOpen = function () {
      // Only try to reconnect if it's the first time we're connecting
      if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
        // keeps reconnection from firing twice for the same reconnection loop
        this.reconnect();
      }
    };
    /**
     * Sets the current transport `socket`.
     *
     * @param {Function} optional, callback
     * @return {Manager} self
     * @api public
     */


    Manager.prototype.open = Manager.prototype.connect = function (fn, opts) {
      debug('readyState %s', this.readyState);
      if (~this.readyState.indexOf('open')) return this;
      debug('opening %s', this.uri);
      this.engine = eio(this.uri, this.opts);
      var socket = this.engine;
      var self = this;
      this.readyState = 'opening';
      this.skipReconnect = false; // emit `open`

      var openSub = on(socket, 'open', function () {
        self.onopen();
        fn && fn();
      }); // emit `connect_error`

      var errorSub = on(socket, 'error', function (data) {
        debug('connect_error');
        self.cleanup();
        self.readyState = 'closed';
        self.emitAll('connect_error', data);

        if (fn) {
          var err = new Error('Connection error');
          err.data = data;
          fn(err);
        } else {
          // Only do this if there is no fn to handle the error
          self.maybeReconnectOnOpen();
        }
      }); // emit `connect_timeout`

      if (false !== this._timeout) {
        var timeout = this._timeout;
        debug('connect attempt will timeout after %d', timeout);

        if (timeout === 0) {
          openSub.destroy(); // prevents a race condition with the 'open' event
        } // set timer


        var timer = setTimeout(function () {
          debug('connect attempt timed out after %d', timeout);
          openSub.destroy();
          socket.close();
          socket.emit('error', 'timeout');
          self.emitAll('connect_timeout', timeout);
        }, timeout);
        this.subs.push({
          destroy: function destroy() {
            clearTimeout(timer);
          }
        });
      }

      this.subs.push(openSub);
      this.subs.push(errorSub);
      return this;
    };
    /**
     * Called upon transport open.
     *
     * @api private
     */


    Manager.prototype.onopen = function () {
      debug('open'); // clear old subs

      this.cleanup(); // mark as open

      this.readyState = 'open';
      this.emit('open'); // add new subs

      var socket = this.engine;
      this.subs.push(on(socket, 'data', bind(this, 'ondata')));
      this.subs.push(on(socket, 'ping', bind(this, 'onping')));
      this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
      this.subs.push(on(socket, 'error', bind(this, 'onerror')));
      this.subs.push(on(socket, 'close', bind(this, 'onclose')));
      this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
    };
    /**
     * Called upon a ping.
     *
     * @api private
     */


    Manager.prototype.onping = function () {
      this.lastPing = new Date();
      this.emitAll('ping');
    };
    /**
     * Called upon a packet.
     *
     * @api private
     */


    Manager.prototype.onpong = function () {
      this.emitAll('pong', new Date() - this.lastPing);
    };
    /**
     * Called with data.
     *
     * @api private
     */


    Manager.prototype.ondata = function (data) {
      this.decoder.add(data);
    };
    /**
     * Called when parser fully decodes a packet.
     *
     * @api private
     */


    Manager.prototype.ondecoded = function (packet) {
      this.emit('packet', packet);
    };
    /**
     * Called upon socket error.
     *
     * @api private
     */


    Manager.prototype.onerror = function (err) {
      debug('error', err);
      this.emitAll('error', err);
    };
    /**
     * Creates a new socket for the given `nsp`.
     *
     * @return {Socket}
     * @api public
     */


    Manager.prototype.socket = function (nsp, opts) {
      var socket = this.nsps[nsp];

      if (!socket) {
        socket = new Socket(this, nsp, opts);
        this.nsps[nsp] = socket;
        var self = this;
        socket.on('connecting', onConnecting);
        socket.on('connect', function () {
          socket.id = self.generateId(nsp);
        });

        if (this.autoConnect) {
          // manually call here since connecting event is fired before listening
          onConnecting();
        }
      }

      function onConnecting() {
        if (!~indexOf(self.connecting, socket)) {
          self.connecting.push(socket);
        }
      }

      return socket;
    };
    /**
     * Called upon a socket close.
     *
     * @param {Socket} socket
     */


    Manager.prototype.destroy = function (socket) {
      var index = indexOf(this.connecting, socket);
      if (~index) this.connecting.splice(index, 1);
      if (this.connecting.length) return;
      this.close();
    };
    /**
     * Writes a packet.
     *
     * @param {Object} packet
     * @api private
     */


    Manager.prototype.packet = function (packet) {
      debug('writing packet %j', packet);
      var self = this;
      if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

      if (!self.encoding) {
        // encode, then write to engine with result
        self.encoding = true;
        this.encoder.encode(packet, function (encodedPackets) {
          for (var i = 0; i < encodedPackets.length; i++) {
            self.engine.write(encodedPackets[i], packet.options);
          }

          self.encoding = false;
          self.processPacketQueue();
        });
      } else {
        // add packet to the queue
        self.packetBuffer.push(packet);
      }
    };
    /**
     * If packet buffer is non-empty, begins encoding the
     * next packet in line.
     *
     * @api private
     */


    Manager.prototype.processPacketQueue = function () {
      if (this.packetBuffer.length > 0 && !this.encoding) {
        var pack = this.packetBuffer.shift();
        this.packet(pack);
      }
    };
    /**
     * Clean up transport subscriptions and packet buffer.
     *
     * @api private
     */


    Manager.prototype.cleanup = function () {
      debug('cleanup');
      var subsLength = this.subs.length;

      for (var i = 0; i < subsLength; i++) {
        var sub = this.subs.shift();
        sub.destroy();
      }

      this.packetBuffer = [];
      this.encoding = false;
      this.lastPing = null;
      this.decoder.destroy();
    };
    /**
     * Close the current socket.
     *
     * @api private
     */


    Manager.prototype.close = Manager.prototype.disconnect = function () {
      debug('disconnect');
      this.skipReconnect = true;
      this.reconnecting = false;

      if ('opening' === this.readyState) {
        // `onclose` will not fire because
        // an open event never happened
        this.cleanup();
      }

      this.backoff.reset();
      this.readyState = 'closed';
      if (this.engine) this.engine.close();
    };
    /**
     * Called upon engine close.
     *
     * @api private
     */


    Manager.prototype.onclose = function (reason) {
      debug('onclose');
      this.cleanup();
      this.backoff.reset();
      this.readyState = 'closed';
      this.emit('close', reason);

      if (this._reconnection && !this.skipReconnect) {
        this.reconnect();
      }
    };
    /**
     * Attempt a reconnection.
     *
     * @api private
     */


    Manager.prototype.reconnect = function () {
      if (this.reconnecting || this.skipReconnect) return this;
      var self = this;

      if (this.backoff.attempts >= this._reconnectionAttempts) {
        debug('reconnect failed');
        this.backoff.reset();
        this.emitAll('reconnect_failed');
        this.reconnecting = false;
      } else {
        var delay = this.backoff.duration();
        debug('will wait %dms before reconnect attempt', delay);
        this.reconnecting = true;
        var timer = setTimeout(function () {
          if (self.skipReconnect) return;
          debug('attempting reconnect');
          self.emitAll('reconnect_attempt', self.backoff.attempts);
          self.emitAll('reconnecting', self.backoff.attempts); // check again for the case socket closed in above events

          if (self.skipReconnect) return;
          self.open(function (err) {
            if (err) {
              debug('reconnect attempt error');
              self.reconnecting = false;
              self.reconnect();
              self.emitAll('reconnect_error', err.data);
            } else {
              debug('reconnect success');
              self.onreconnect();
            }
          });
        }, delay);
        this.subs.push({
          destroy: function destroy() {
            clearTimeout(timer);
          }
        });
      }
    };
    /**
     * Called upon successful reconnect.
     *
     * @api private
     */


    Manager.prototype.onreconnect = function () {
      var attempt = this.backoff.attempts;
      this.reconnecting = false;
      this.backoff.reset();
      this.updateSocketIds();
      this.emitAll('reconnect', attempt);
    };
  }, {
    "./on": 349,
    "./socket": 350,
    "backo2": 44,
    "component-bind": 111,
    "component-emitter": 112,
    "debug": 352,
    "engine.io-client": 158,
    "indexof": 216,
    "socket.io-parser": 356
  }],
  349: [function (require, module, exports) {
    /**
     * Module exports.
     */
    module.exports = on;
    /**
     * Helper for subscriptions.
     *
     * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
     * @param {String} event name
     * @param {Function} callback
     * @api public
     */

    function on(obj, ev, fn) {
      obj.on(ev, fn);
      return {
        destroy: function destroy() {
          obj.removeListener(ev, fn);
        }
      };
    }
  }, {}],
  350: [function (require, module, exports) {
    /**
     * Module dependencies.
     */
    var parser = require('socket.io-parser');

    var Emitter = require('component-emitter');

    var toArray = require('to-array');

    var on = require('./on');

    var bind = require('component-bind');

    var debug = require('debug')('socket.io-client:socket');

    var parseqs = require('parseqs');

    var hasBin = require('has-binary2');
    /**
     * Module exports.
     */


    module.exports = exports = Socket;
    /**
     * Internal events (blacklisted).
     * These events can't be emitted by the user.
     *
     * @api private
     */

    var events = {
      connect: 1,
      connect_error: 1,
      connect_timeout: 1,
      connecting: 1,
      disconnect: 1,
      error: 1,
      reconnect: 1,
      reconnect_attempt: 1,
      reconnect_failed: 1,
      reconnect_error: 1,
      reconnecting: 1,
      ping: 1,
      pong: 1
    };
    /**
     * Shortcut to `Emitter#emit`.
     */

    var emit = Emitter.prototype.emit;
    /**
     * `Socket` constructor.
     *
     * @api public
     */

    function Socket(io, nsp, opts) {
      this.io = io;
      this.nsp = nsp;
      this.json = this; // compat

      this.ids = 0;
      this.acks = {};
      this.receiveBuffer = [];
      this.sendBuffer = [];
      this.connected = false;
      this.disconnected = true;
      this.flags = {};

      if (opts && opts.query) {
        this.query = opts.query;
      }

      if (this.io.autoConnect) this.open();
    }
    /**
     * Mix in `Emitter`.
     */


    Emitter(Socket.prototype);
    /**
     * Subscribe to open, close and packet events
     *
     * @api private
     */

    Socket.prototype.subEvents = function () {
      if (this.subs) return;
      var io = this.io;
      this.subs = [on(io, 'open', bind(this, 'onopen')), on(io, 'packet', bind(this, 'onpacket')), on(io, 'close', bind(this, 'onclose'))];
    };
    /**
     * "Opens" the socket.
     *
     * @api public
     */


    Socket.prototype.open = Socket.prototype.connect = function () {
      if (this.connected) return this;
      this.subEvents();
      if (!this.io.reconnecting) this.io.open(); // ensure open

      if ('open' === this.io.readyState) this.onopen();
      this.emit('connecting');
      return this;
    };
    /**
     * Sends a `message` event.
     *
     * @return {Socket} self
     * @api public
     */


    Socket.prototype.send = function () {
      var args = toArray(arguments);
      args.unshift('message');
      this.emit.apply(this, args);
      return this;
    };
    /**
     * Override `emit`.
     * If the event is in `events`, it's emitted normally.
     *
     * @param {String} event name
     * @return {Socket} self
     * @api public
     */


    Socket.prototype.emit = function (ev) {
      if (events.hasOwnProperty(ev)) {
        emit.apply(this, arguments);
        return this;
      }

      var args = toArray(arguments);
      var packet = {
        type: (this.flags.binary !== undefined ? this.flags.binary : hasBin(args)) ? parser.BINARY_EVENT : parser.EVENT,
        data: args
      };
      packet.options = {};
      packet.options.compress = !this.flags || false !== this.flags.compress; // event ack callback

      if ('function' === typeof args[args.length - 1]) {
        debug('emitting packet with ack id %d', this.ids);
        this.acks[this.ids] = args.pop();
        packet.id = this.ids++;
      }

      if (this.connected) {
        this.packet(packet);
      } else {
        this.sendBuffer.push(packet);
      }

      this.flags = {};
      return this;
    };
    /**
     * Sends a packet.
     *
     * @param {Object} packet
     * @api private
     */


    Socket.prototype.packet = function (packet) {
      packet.nsp = this.nsp;
      this.io.packet(packet);
    };
    /**
     * Called upon engine `open`.
     *
     * @api private
     */


    Socket.prototype.onopen = function () {
      debug('transport is open - connecting'); // write connect packet if necessary

      if ('/' !== this.nsp) {
        if (this.query) {
          var query = _typeof2(this.query) === 'object' ? parseqs.encode(this.query) : this.query;
          debug('sending connect packet with query %s', query);
          this.packet({
            type: parser.CONNECT,
            query: query
          });
        } else {
          this.packet({
            type: parser.CONNECT
          });
        }
      }
    };
    /**
     * Called upon engine `close`.
     *
     * @param {String} reason
     * @api private
     */


    Socket.prototype.onclose = function (reason) {
      debug('close (%s)', reason);
      this.connected = false;
      this.disconnected = true;
      delete this.id;
      this.emit('disconnect', reason);
    };
    /**
     * Called with socket packet.
     *
     * @param {Object} packet
     * @api private
     */


    Socket.prototype.onpacket = function (packet) {
      var sameNamespace = packet.nsp === this.nsp;
      var rootNamespaceError = packet.type === parser.ERROR && packet.nsp === '/';
      if (!sameNamespace && !rootNamespaceError) return;

      switch (packet.type) {
        case parser.CONNECT:
          this.onconnect();
          break;

        case parser.EVENT:
          this.onevent(packet);
          break;

        case parser.BINARY_EVENT:
          this.onevent(packet);
          break;

        case parser.ACK:
          this.onack(packet);
          break;

        case parser.BINARY_ACK:
          this.onack(packet);
          break;

        case parser.DISCONNECT:
          this.ondisconnect();
          break;

        case parser.ERROR:
          this.emit('error', packet.data);
          break;
      }
    };
    /**
     * Called upon a server event.
     *
     * @param {Object} packet
     * @api private
     */


    Socket.prototype.onevent = function (packet) {
      var args = packet.data || [];
      debug('emitting event %j', args);

      if (null != packet.id) {
        debug('attaching ack callback to event');
        args.push(this.ack(packet.id));
      }

      if (this.connected) {
        emit.apply(this, args);
      } else {
        this.receiveBuffer.push(args);
      }
    };
    /**
     * Produces an ack callback to emit with an event.
     *
     * @api private
     */


    Socket.prototype.ack = function (id) {
      var self = this;
      var sent = false;
      return function () {
        // prevent double callbacks
        if (sent) return;
        sent = true;
        var args = toArray(arguments);
        debug('sending ack %j', args);
        self.packet({
          type: hasBin(args) ? parser.BINARY_ACK : parser.ACK,
          id: id,
          data: args
        });
      };
    };
    /**
     * Called upon a server acknowlegement.
     *
     * @param {Object} packet
     * @api private
     */


    Socket.prototype.onack = function (packet) {
      var ack = this.acks[packet.id];

      if ('function' === typeof ack) {
        debug('calling ack %s with %j', packet.id, packet.data);
        ack.apply(this, packet.data);
        delete this.acks[packet.id];
      } else {
        debug('bad ack %s', packet.id);
      }
    };
    /**
     * Called upon server connect.
     *
     * @api private
     */


    Socket.prototype.onconnect = function () {
      this.connected = true;
      this.disconnected = false;
      this.emit('connect');
      this.emitBuffered();
    };
    /**
     * Emit buffered events (received and emitted).
     *
     * @api private
     */


    Socket.prototype.emitBuffered = function () {
      var i;

      for (i = 0; i < this.receiveBuffer.length; i++) {
        emit.apply(this, this.receiveBuffer[i]);
      }

      this.receiveBuffer = [];

      for (i = 0; i < this.sendBuffer.length; i++) {
        this.packet(this.sendBuffer[i]);
      }

      this.sendBuffer = [];
    };
    /**
     * Called upon server disconnect.
     *
     * @api private
     */


    Socket.prototype.ondisconnect = function () {
      debug('server disconnect (%s)', this.nsp);
      this.destroy();
      this.onclose('io server disconnect');
    };
    /**
     * Called upon forced client/server side disconnections,
     * this method ensures the manager stops tracking us and
     * that reconnections don't get triggered for this.
     *
     * @api private.
     */


    Socket.prototype.destroy = function () {
      if (this.subs) {
        // clean subscriptions to avoid reconnections
        for (var i = 0; i < this.subs.length; i++) {
          this.subs[i].destroy();
        }

        this.subs = null;
      }

      this.io.destroy(this);
    };
    /**
     * Disconnects the socket manually.
     *
     * @return {Socket} self
     * @api public
     */


    Socket.prototype.close = Socket.prototype.disconnect = function () {
      if (this.connected) {
        debug('performing disconnect (%s)', this.nsp);
        this.packet({
          type: parser.DISCONNECT
        });
      } // remove socket from pool


      this.destroy();

      if (this.connected) {
        // fire events
        this.onclose('io client disconnect');
      }

      return this;
    };
    /**
     * Sets the compress flag.
     *
     * @param {Boolean} if `true`, compresses the sending data
     * @return {Socket} self
     * @api public
     */


    Socket.prototype.compress = function (compress) {
      this.flags.compress = compress;
      return this;
    };
    /**
     * Sets the binary flag
     *
     * @param {Boolean} whether the emitted data contains binary
     * @return {Socket} self
     * @api public
     */


    Socket.prototype.binary = function (binary) {
      this.flags.binary = binary;
      return this;
    };
  }, {
    "./on": 349,
    "component-bind": 111,
    "component-emitter": 112,
    "debug": 352,
    "has-binary2": 178,
    "parseqs": 266,
    "socket.io-parser": 356,
    "to-array": 370
  }],
  351: [function (require, module, exports) {
    /**
     * Module dependencies.
     */
    var parseuri = require('parseuri');

    var debug = require('debug')('socket.io-client:url');
    /**
     * Module exports.
     */


    module.exports = url;
    /**
     * URL parser.
     *
     * @param {String} url
     * @param {Object} An object meant to mimic window.location.
     *                 Defaults to window.location.
     * @api public
     */

    function url(uri, loc) {
      var obj = uri; // default to window.location

      loc = loc || typeof location !== 'undefined' && location;
      if (null == uri) uri = loc.protocol + '//' + loc.host; // relative path support

      if ('string' === typeof uri) {
        if ('/' === uri.charAt(0)) {
          if ('/' === uri.charAt(1)) {
            uri = loc.protocol + uri;
          } else {
            uri = loc.host + uri;
          }
        }

        if (!/^(https?|wss?):\/\//.test(uri)) {
          debug('protocol-less url %s', uri);

          if ('undefined' !== typeof loc) {
            uri = loc.protocol + '//' + uri;
          } else {
            uri = 'https://' + uri;
          }
        } // parse


        debug('parse %s', uri);
        obj = parseuri(uri);
      } // make sure we treat `localhost:80` and `localhost` equally


      if (!obj.port) {
        if (/^(http|ws)$/.test(obj.protocol)) {
          obj.port = '80';
        } else if (/^(http|ws)s$/.test(obj.protocol)) {
          obj.port = '443';
        }
      }

      obj.path = obj.path || '/';
      var ipv6 = obj.host.indexOf(':') !== -1;
      var host = ipv6 ? '[' + obj.host + ']' : obj.host; // define unique id

      obj.id = obj.protocol + '://' + host + ':' + obj.port; // define href

      obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : ':' + obj.port);
      return obj;
    }
  }, {
    "debug": 352,
    "parseuri": 267
  }],
  352: [function (require, module, exports) {
    arguments[4][167][0].apply(exports, arguments);
  }, {
    "./debug": 353,
    "_process": 276,
    "dup": 167
  }],
  353: [function (require, module, exports) {
    arguments[4][168][0].apply(exports, arguments);
  }, {
    "dup": 168,
    "ms": 354
  }],
  354: [function (require, module, exports) {
    arguments[4][169][0].apply(exports, arguments);
  }, {
    "dup": 169
  }],
  355: [function (require, module, exports) {
    /*global Blob,File*/

    /**
     * Module requirements
     */
    var isArray = require('isarray');

    var isBuf = require('./is-buffer');

    var toString = Object.prototype.toString;
    var withNativeBlob = typeof Blob === 'function' || typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]';
    var withNativeFile = typeof File === 'function' || typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]';
    /**
     * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
     * Anything with blobs or files should be fed through removeBlobs before coming
     * here.
     *
     * @param {Object} packet - socket.io event packet
     * @return {Object} with deconstructed packet and list of buffers
     * @api public
     */

    exports.deconstructPacket = function (packet) {
      var buffers = [];
      var packetData = packet.data;
      var pack = packet;
      pack.data = _deconstructPacket(packetData, buffers);
      pack.attachments = buffers.length; // number of binary 'attachments'

      return {
        packet: pack,
        buffers: buffers
      };
    };

    function _deconstructPacket(data, buffers) {
      if (!data) return data;

      if (isBuf(data)) {
        var placeholder = {
          _placeholder: true,
          num: buffers.length
        };
        buffers.push(data);
        return placeholder;
      } else if (isArray(data)) {
        var newData = new Array(data.length);

        for (var i = 0; i < data.length; i++) {
          newData[i] = _deconstructPacket(data[i], buffers);
        }

        return newData;
      } else if (_typeof2(data) === 'object' && !(data instanceof Date)) {
        var newData = {};

        for (var key in data) {
          newData[key] = _deconstructPacket(data[key], buffers);
        }

        return newData;
      }

      return data;
    }
    /**
     * Reconstructs a binary packet from its placeholder packet and buffers
     *
     * @param {Object} packet - event packet with placeholders
     * @param {Array} buffers - binary buffers to put in placeholder positions
     * @return {Object} reconstructed packet
     * @api public
     */


    exports.reconstructPacket = function (packet, buffers) {
      packet.data = _reconstructPacket(packet.data, buffers);
      packet.attachments = undefined; // no longer useful

      return packet;
    };

    function _reconstructPacket(data, buffers) {
      if (!data) return data;

      if (data && data._placeholder) {
        return buffers[data.num]; // appropriate buffer (should be natural order anyway)
      } else if (isArray(data)) {
        for (var i = 0; i < data.length; i++) {
          data[i] = _reconstructPacket(data[i], buffers);
        }
      } else if (_typeof2(data) === 'object') {
        for (var key in data) {
          data[key] = _reconstructPacket(data[key], buffers);
        }
      }

      return data;
    }
    /**
     * Asynchronously removes Blobs or Files from data via
     * FileReader's readAsArrayBuffer method. Used before encoding
     * data as msgpack. Calls callback with the blobless data.
     *
     * @param {Object} data
     * @param {Function} callback
     * @api private
     */


    exports.removeBlobs = function (data, callback) {
      function _removeBlobs(obj, curKey, containingObject) {
        if (!obj) return obj; // convert any blob

        if (withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File) {
          pendingBlobs++; // async filereader

          var fileReader = new FileReader();

          fileReader.onload = function () {
            // this.result == arraybuffer
            if (containingObject) {
              containingObject[curKey] = this.result;
            } else {
              bloblessData = this.result;
            } // if nothing pending its callback time


            if (! --pendingBlobs) {
              callback(bloblessData);
            }
          };

          fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
        } else if (isArray(obj)) {
          // handle array
          for (var i = 0; i < obj.length; i++) {
            _removeBlobs(obj[i], i, obj);
          }
        } else if (_typeof2(obj) === 'object' && !isBuf(obj)) {
          // and object
          for (var key in obj) {
            _removeBlobs(obj[key], key, obj);
          }
        }
      }

      var pendingBlobs = 0;
      var bloblessData = data;

      _removeBlobs(bloblessData);

      if (!pendingBlobs) {
        callback(bloblessData);
      }
    };
  }, {
    "./is-buffer": 357,
    "isarray": 219
  }],
  356: [function (require, module, exports) {
    /**
     * Module dependencies.
     */
    var debug = require('debug')('socket.io-parser');

    var Emitter = require('component-emitter');

    var binary = require('./binary');

    var isArray = require('isarray');

    var isBuf = require('./is-buffer');
    /**
     * Protocol version.
     *
     * @api public
     */


    exports.protocol = 4;
    /**
     * Packet types.
     *
     * @api public
     */

    exports.types = ['CONNECT', 'DISCONNECT', 'EVENT', 'ACK', 'ERROR', 'BINARY_EVENT', 'BINARY_ACK'];
    /**
     * Packet type `connect`.
     *
     * @api public
     */

    exports.CONNECT = 0;
    /**
     * Packet type `disconnect`.
     *
     * @api public
     */

    exports.DISCONNECT = 1;
    /**
     * Packet type `event`.
     *
     * @api public
     */

    exports.EVENT = 2;
    /**
     * Packet type `ack`.
     *
     * @api public
     */

    exports.ACK = 3;
    /**
     * Packet type `error`.
     *
     * @api public
     */

    exports.ERROR = 4;
    /**
     * Packet type 'binary event'
     *
     * @api public
     */

    exports.BINARY_EVENT = 5;
    /**
     * Packet type `binary ack`. For acks with binary arguments.
     *
     * @api public
     */

    exports.BINARY_ACK = 6;
    /**
     * Encoder constructor.
     *
     * @api public
     */

    exports.Encoder = Encoder;
    /**
     * Decoder constructor.
     *
     * @api public
     */

    exports.Decoder = Decoder;
    /**
     * A socket.io Encoder instance
     *
     * @api public
     */

    function Encoder() {}

    var ERROR_PACKET = exports.ERROR + '"encode error"';
    /**
     * Encode a packet as a single string if non-binary, or as a
     * buffer sequence, depending on packet type.
     *
     * @param {Object} obj - packet object
     * @param {Function} callback - function to handle encodings (likely engine.write)
     * @return Calls callback with Array of encodings
     * @api public
     */

    Encoder.prototype.encode = function (obj, callback) {
      debug('encoding packet %j', obj);

      if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
        encodeAsBinary(obj, callback);
      } else {
        var encoding = encodeAsString(obj);
        callback([encoding]);
      }
    };
    /**
     * Encode packet as string.
     *
     * @param {Object} packet
     * @return {String} encoded
     * @api private
     */


    function encodeAsString(obj) {
      // first is type
      var str = '' + obj.type; // attachments if we have them

      if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
        str += obj.attachments + '-';
      } // if we have a namespace other than `/`
      // we append it followed by a comma `,`


      if (obj.nsp && '/' !== obj.nsp) {
        str += obj.nsp + ',';
      } // immediately followed by the id


      if (null != obj.id) {
        str += obj.id;
      } // json data


      if (null != obj.data) {
        var payload = tryStringify(obj.data);

        if (payload !== false) {
          str += payload;
        } else {
          return ERROR_PACKET;
        }
      }

      debug('encoded %j as %s', obj, str);
      return str;
    }

    function tryStringify(str) {
      try {
        return JSON.stringify(str);
      } catch (e) {
        return false;
      }
    }
    /**
     * Encode packet as 'buffer sequence' by removing blobs, and
     * deconstructing packet into object with placeholders and
     * a list of buffers.
     *
     * @param {Object} packet
     * @return {Buffer} encoded
     * @api private
     */


    function encodeAsBinary(obj, callback) {
      function writeEncoding(bloblessData) {
        var deconstruction = binary.deconstructPacket(bloblessData);
        var pack = encodeAsString(deconstruction.packet);
        var buffers = deconstruction.buffers;
        buffers.unshift(pack); // add packet info to beginning of data list

        callback(buffers); // write all the buffers
      }

      binary.removeBlobs(obj, writeEncoding);
    }
    /**
     * A socket.io Decoder instance
     *
     * @return {Object} decoder
     * @api public
     */


    function Decoder() {
      this.reconstructor = null;
    }
    /**
     * Mix in `Emitter` with Decoder.
     */


    Emitter(Decoder.prototype);
    /**
     * Decodes an encoded packet string into packet JSON.
     *
     * @param {String} obj - encoded packet
     * @return {Object} packet
     * @api public
     */

    Decoder.prototype.add = function (obj) {
      var packet;

      if (typeof obj === 'string') {
        packet = decodeString(obj);

        if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) {
          // binary packet's json
          this.reconstructor = new BinaryReconstructor(packet); // no attachments, labeled binary but no binary data to follow

          if (this.reconstructor.reconPack.attachments === 0) {
            this.emit('decoded', packet);
          }
        } else {
          // non-binary full packet
          this.emit('decoded', packet);
        }
      } else if (isBuf(obj) || obj.base64) {
        // raw binary data
        if (!this.reconstructor) {
          throw new Error('got binary data when not reconstructing a packet');
        } else {
          packet = this.reconstructor.takeBinaryData(obj);

          if (packet) {
            // received final buffer
            this.reconstructor = null;
            this.emit('decoded', packet);
          }
        }
      } else {
        throw new Error('Unknown type: ' + obj);
      }
    };
    /**
     * Decode a packet String (JSON data)
     *
     * @param {String} str
     * @return {Object} packet
     * @api private
     */


    function decodeString(str) {
      var i = 0; // look up type

      var p = {
        type: Number(str.charAt(0))
      };

      if (null == exports.types[p.type]) {
        return error('unknown packet type ' + p.type);
      } // look up attachments if type binary


      if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
        var buf = '';

        while (str.charAt(++i) !== '-') {
          buf += str.charAt(i);
          if (i == str.length) break;
        }

        if (buf != Number(buf) || str.charAt(i) !== '-') {
          throw new Error('Illegal attachments');
        }

        p.attachments = Number(buf);
      } // look up namespace (if any)


      if ('/' === str.charAt(i + 1)) {
        p.nsp = '';

        while (++i) {
          var c = str.charAt(i);
          if (',' === c) break;
          p.nsp += c;
          if (i === str.length) break;
        }
      } else {
        p.nsp = '/';
      } // look up id


      var next = str.charAt(i + 1);

      if ('' !== next && Number(next) == next) {
        p.id = '';

        while (++i) {
          var c = str.charAt(i);

          if (null == c || Number(c) != c) {
            --i;
            break;
          }

          p.id += str.charAt(i);
          if (i === str.length) break;
        }

        p.id = Number(p.id);
      } // look up json data


      if (str.charAt(++i)) {
        var payload = tryParse(str.substr(i));
        var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));

        if (isPayloadValid) {
          p.data = payload;
        } else {
          return error('invalid payload');
        }
      }

      debug('decoded %s as %j', str, p);
      return p;
    }

    function tryParse(str) {
      try {
        return JSON.parse(str);
      } catch (e) {
        return false;
      }
    }
    /**
     * Deallocates a parser's resources
     *
     * @api public
     */


    Decoder.prototype.destroy = function () {
      if (this.reconstructor) {
        this.reconstructor.finishedReconstruction();
      }
    };
    /**
     * A manager of a binary event's 'buffer sequence'. Should
     * be constructed whenever a packet of type BINARY_EVENT is
     * decoded.
     *
     * @param {Object} packet
     * @return {BinaryReconstructor} initialized reconstructor
     * @api private
     */


    function BinaryReconstructor(packet) {
      this.reconPack = packet;
      this.buffers = [];
    }
    /**
     * Method to be called when binary data received from connection
     * after a BINARY_EVENT packet.
     *
     * @param {Buffer | ArrayBuffer} binData - the raw binary data received
     * @return {null | Object} returns null if more binary data is expected or
     *   a reconstructed packet object if all buffers have been received.
     * @api private
     */


    BinaryReconstructor.prototype.takeBinaryData = function (binData) {
      this.buffers.push(binData);

      if (this.buffers.length === this.reconPack.attachments) {
        // done with buffer list
        var packet = binary.reconstructPacket(this.reconPack, this.buffers);
        this.finishedReconstruction();
        return packet;
      }

      return null;
    };
    /**
     * Cleans up binary packet reconstruction variables.
     *
     * @api private
     */


    BinaryReconstructor.prototype.finishedReconstruction = function () {
      this.reconPack = null;
      this.buffers = [];
    };

    function error(msg) {
      return {
        type: exports.ERROR,
        data: 'parser error: ' + msg
      };
    }
  }, {
    "./binary": 355,
    "./is-buffer": 357,
    "component-emitter": 112,
    "debug": 358,
    "isarray": 219
  }],
  357: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        module.exports = isBuf;
        var withNativeBuffer = typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function';
        var withNativeArrayBuffer = typeof ArrayBuffer === 'function';

        var isView = function isView(obj) {
          return typeof ArrayBuffer.isView === 'function' ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;
        };
        /**
         * Returns true if obj is a buffer or an arraybuffer.
         *
         * @api private
         */


        function isBuf(obj) {
          return withNativeBuffer && Buffer.isBuffer(obj) || withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj));
        }
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "buffer": 102
  }],
  358: [function (require, module, exports) {
    arguments[4][167][0].apply(exports, arguments);
  }, {
    "./debug": 359,
    "_process": 276,
    "dup": 167
  }],
  359: [function (require, module, exports) {
    arguments[4][168][0].apply(exports, arguments);
  }, {
    "dup": 168,
    "ms": 360
  }],
  360: [function (require, module, exports) {
    arguments[4][169][0].apply(exports, arguments);
  }, {
    "dup": 169
  }],
  361: [function (require, module, exports) {
    var tick = 1;
    var maxTick = 65535;
    var resolution = 4;
    var timer;

    var inc = function inc() {
      tick = tick + 1 & maxTick;
    };

    module.exports = function (seconds) {
      if (!timer) {
        timer = setInterval(inc, 1000 / resolution | 0);
        if (timer.unref) timer.unref();
      }

      var size = resolution * (seconds || 5);
      var buffer = [0];
      var pointer = 1;
      var last = tick - 1 & maxTick;
      return function (delta) {
        var dist = tick - last & maxTick;
        if (dist > size) dist = size;
        last = tick;

        while (dist--) {
          if (pointer === size) pointer = 0;
          buffer[pointer] = buffer[pointer === 0 ? size - 1 : pointer - 1];
          pointer++;
        }

        if (delta) buffer[pointer - 1] += delta;
        var top = buffer[pointer - 1];
        var btm = buffer.length < size ? 0 : buffer[pointer === size ? 0 : pointer];
        return buffer.length < resolution ? top : (top - btm) * resolution / buffer.length;
      };
    };
  }, {}],
  362: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    module.exports = Stream;

    var EE = require('events').EventEmitter;

    var inherits = require('inherits');

    inherits(Stream, EE);
    Stream.Readable = require('readable-stream/readable.js');
    Stream.Writable = require('readable-stream/writable.js');
    Stream.Duplex = require('readable-stream/duplex.js');
    Stream.Transform = require('readable-stream/transform.js');
    Stream.PassThrough = require('readable-stream/passthrough.js'); // Backwards-compat with node 0.4.x

    Stream.Stream = Stream; // old-style streams.  Note that the pipe method (the only relevant
    // part of this class) is overridden in the Readable class.

    function Stream() {
      EE.call(this);
    }

    Stream.prototype.pipe = function (dest, options) {
      var source = this;

      function ondata(chunk) {
        if (dest.writable) {
          if (false === dest.write(chunk) && source.pause) {
            source.pause();
          }
        }
      }

      source.on('data', ondata);

      function ondrain() {
        if (source.readable && source.resume) {
          source.resume();
        }
      }

      dest.on('drain', ondrain); // If the 'end' option is not supplied, dest.end() will be called when
      // source gets the 'end' or 'close' events.  Only dest.end() once.

      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend);
        source.on('close', onclose);
      }

      var didOnEnd = false;

      function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
        dest.end();
      }

      function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
        if (typeof dest.destroy === 'function') dest.destroy();
      } // don't leave dangling pipes when there are errors.


      function onerror(er) {
        cleanup();

        if (EE.listenerCount(this, 'error') === 0) {
          throw er; // Unhandled stream error in pipe.
        }
      }

      source.on('error', onerror);
      dest.on('error', onerror); // remove all the event listeners that were added.

      function cleanup() {
        source.removeListener('data', ondata);
        dest.removeListener('drain', ondrain);
        source.removeListener('end', onend);
        source.removeListener('close', onclose);
        source.removeListener('error', onerror);
        dest.removeListener('error', onerror);
        source.removeListener('end', cleanup);
        source.removeListener('close', cleanup);
        dest.removeListener('close', cleanup);
      }

      source.on('end', cleanup);
      source.on('close', cleanup);
      dest.on('close', cleanup);
      dest.emit('pipe', source); // Allow for unix-like usage: A.pipe(B).pipe(C)

      return dest;
    };
  }, {
    "events": 175,
    "inherits": 217,
    "readable-stream/duplex.js": 294,
    "readable-stream/passthrough.js": 306,
    "readable-stream/readable.js": 307,
    "readable-stream/transform.js": 308,
    "readable-stream/writable.js": 309
  }],
  363: [function (require, module, exports) {
    module.exports = shift;

    function shift(stream) {
      var rs = stream._readableState;
      if (!rs) return null;
      return rs.objectMode || typeof stream._duplexState === 'number' ? stream.read() : stream.read(getStateLength(rs));
    }

    function getStateLength(state) {
      if (state.buffer.length) {
        // Since node 6.3.0 state.buffer is a BufferList not an array
        if (state.buffer.head) {
          return state.buffer.head.data.length;
        }

        return state.buffer[0].length;
      }

      return state.length;
    }
  }, {}],
  364: [function (require, module, exports) {
    arguments[4][305][0].apply(exports, arguments);
  }, {
    "dup": 305,
    "safe-buffer": 314
  }],
  365: [function (require, module, exports) {
    // Generated by LiveScript 1.5.0

    /**
     * @package lib.wasm
     * @author  Nazar Mokrynskyi <nazar@mokrynskyi.com>
     * @license 0BSD
     */
    (function () {
      var random_bytes;

      if (typeof crypto !== 'undefined') {
        /**
         * @param {number} size
         *
         * @return {!Uint8Array}
         */
        random_bytes = function random_bytes(size) {
          var array;
          array = new Uint8Array(size);
          crypto.getRandomValues(array);
          return array;
        };
      } else {
        /**
         * @param {string} size
         *
         * @return {!Uint8Array}
         */
        random_bytes = require('crypto').randomBytes;
      }

      function Wrapper(lib) {
        var allocate, free;
        lib = lib();
        allocate = lib['allocateBytes'];
        free = lib['freeBytes'];
        /**
         * @return {!Uint8Array}
         */

        function createSeed() {
          return random_bytes(32);
        }
        /**
         * @param {!Uint8Array} seed
         *
         * @return {!Object}
         */


        function createKeyPair(seed) {
          var publicKey, secretKey;

          if (!(seed instanceof Uint8Array)) {
            throw new Error('not Uint8Array!');
          }

          seed = allocate(0, seed);
          publicKey = allocate(32);
          secretKey = allocate(64);
          lib['_ed25519_create_keypair'](publicKey, secretKey, seed);
          publicKey = publicKey['get']();
          secretKey = secretKey['get']();
          free();
          return {
            publicKey: publicKey,
            secretKey: secretKey
          };
        }
        /**
         * @param {!Uint8Array} message
         * @param {!Uint8Array} publicKey
         * @param {!Uint8Array} secretKey
         *
         * @return {!Uint8Array}
         */


        function sign(message, publicKey, secretKey) {
          var signature;

          if (!(message instanceof Uint8Array && publicKey instanceof Uint8Array && secretKey instanceof Uint8Array)) {
            throw new Error('not Uint8Arrays!');
          }

          message = allocate(0, message);
          publicKey = allocate(0, publicKey);
          secretKey = allocate(0, secretKey);
          signature = allocate(64);
          lib['_ed25519_sign'](signature, message, message.length, publicKey, secretKey);
          signature = signature['get']();
          free();
          return signature;
        }
        /**
         * @param {!Uint8Array} signature
         * @param {!Uint8Array} message
         * @param {!Uint8Array} publicKey
         *
         * @return {boolean}
         */


        function verify(signature, message, publicKey) {
          var result;

          if (!(signature instanceof Uint8Array && message instanceof Uint8Array && publicKey instanceof Uint8Array)) {
            throw new Error('not Uint8Arrays!');
          }

          message = allocate(0, message);
          publicKey = allocate(0, publicKey);
          signature = allocate(0, signature);
          result = lib['_ed25519_verify'](signature, message, message.length, publicKey) === 1;
          free();
          return result;
        }

        return {
          'ready': lib['then'],
          'createSeed': createSeed,
          'createKeyPair': createKeyPair,
          'sign': sign,
          'verify': verify
        };
      }

      if (typeof define === 'function' && define['amd']) {
        define(['./supercop'], Wrapper);
      } else if (_typeof2(exports) === 'object') {
        module.exports = Wrapper(require('./supercop'));
      } else {
        this['supercop_wasm'] = Wrapper(this['__supercopwasm']);
      }
    }).call(this);
  }, {
    "./supercop": 366,
    "crypto": 120
  }],
  366: [function (require, module, exports) {
    (function (process, __dirname) {
      (function () {
        var __supercopwasm = function __supercopwasm(_supercopwasm) {
          _supercopwasm = _supercopwasm || {};
          var a;
          a || (a = typeof _supercopwasm !== 'undefined' ? _supercopwasm : {});
          var k = {},
              l;

          for (l in a) {
            a.hasOwnProperty(l) && (k[l] = a[l]);
          }

          a.arguments = [];
          a.thisProgram = "./this.program";

          a.quit = function (b, c) {
            throw c;
          };

          a.preRun = [];
          a.postRun = [];
          var m = !1,
              n = !1,
              p = !1,
              q = !1;
          if (a.ENVIRONMENT) {
            if ("WEB" === a.ENVIRONMENT) m = !0;else if ("WORKER" === a.ENVIRONMENT) n = !0;else if ("NODE" === a.ENVIRONMENT) p = !0;else if ("SHELL" === a.ENVIRONMENT) q = !0;else throw Error("Module['ENVIRONMENT'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.");
          } else m = "object" === (typeof window === "undefined" ? "undefined" : _typeof2(window)), n = "function" === typeof importScripts, p = "object" === _typeof2(process) && "function" === typeof require && !m && !n, q = !m && !p && !n;
          if (!a.scriptDirectory) if (a.scriptDirectory = "", p) a.scriptDirectory = __dirname + "/";else if (m) {
            var r = this._currentScript || document.currentScript;
            0 !== r.src.indexOf("blob:") && (a.scriptDirectory = r.src.split("/").slice(0, -1).join("/") + "/");
          } else n && (a.scriptDirectory = (this._selfLocation || self.location).href.split("/").slice(0, -1).join("/") + "/");
          a.memoryInitializerPrefixURL || (a.memoryInitializerPrefixURL = a.scriptDirectory);
          a.pthreadMainPrefixURL || (a.pthreadMainPrefixURL = a.scriptDirectory);
          a.cdInitializerPrefixURL || (a.cdInitializerPrefixURL = a.scriptDirectory);
          a.filePackagePrefixURL || (a.filePackagePrefixURL = a.scriptDirectory);

          if (p) {
            var t, u;

            a.read = function (b, c) {
              t || (t = require("fs"));
              u || (u = require("path"));
              b = u.normalize(b);
              b = t.readFileSync(b);
              return c ? b : b.toString();
            };

            a.readBinary = function (b) {
              b = a.read(b, !0);
              b.buffer || (b = new Uint8Array(b));
              assert(b.buffer);
              return b;
            };

            1 < process.argv.length && (a.thisProgram = process.argv[1].replace(/\\/g, "/"));
            a.arguments = process.argv.slice(2);
            process.on("uncaughtException", function (b) {
              if (!(b instanceof v)) throw b;
            });
            process.on("unhandledRejection", function () {
              process.exit(1);
            });

            a.inspect = function () {
              return "[Emscripten Module object]";
            };
          } else if (q) "undefined" != typeof read && (a.read = function (b) {
            return read(b);
          }), a.readBinary = function (b) {
            if ("function" === typeof readbuffer) return new Uint8Array(readbuffer(b));
            b = read(b, "binary");
            assert("object" === _typeof2(b));
            return b;
          }, "undefined" != typeof scriptArgs ? a.arguments = scriptArgs : "undefined" != typeof arguments && (a.arguments = arguments), "function" === typeof quit && (a.quit = function (b) {
            quit(b);
          });else if (m || n) a.read = function (b) {
            var c = new XMLHttpRequest();
            c.open("GET", b, !1);
            c.send(null);
            return c.responseText;
          }, n && (a.readBinary = function (b) {
            var c = new XMLHttpRequest();
            c.open("GET", b, !1);
            c.responseType = "arraybuffer";
            c.send(null);
            return new Uint8Array(c.response);
          }), a.readAsync = function (b, c, h) {
            var d = new XMLHttpRequest();
            d.open("GET", b, !0);
            d.responseType = "arraybuffer";

            d.onload = function () {
              200 == d.status || 0 == d.status && d.response ? c(d.response) : h();
            };

            d.onerror = h;
            d.send(null);
          }, "undefined" != typeof arguments && (a.arguments = arguments), a.setWindowTitle = function (b) {
            document.title = b;
          };

          a.print = "undefined" !== typeof console ? console.log.bind(console) : "undefined" !== typeof print ? print : null;
          a.printErr = "undefined" !== typeof printErr ? printErr : "undefined" !== typeof console && console.warn.bind(console) || a.print;
          a.print = a.print;
          a.printErr = a.printErr;

          for (l in k) {
            k.hasOwnProperty(l) && (a[l] = k[l]);
          }

          k = void 0;

          function w(b) {
            var c;
            c || (c = 16);
            return Math.ceil(b / c) * c;
          }

          var x = 0;

          function assert(b, c) {
            b || y("Assertion failed: " + c);
          }

          "undefined" !== typeof TextDecoder && new TextDecoder("utf8");
          "undefined" !== typeof TextDecoder && new TextDecoder("utf-16le");
          var buffer, z, A, B;

          function C() {
            a.HEAP8 = new Int8Array(buffer);
            a.HEAP16 = A = new Int16Array(buffer);
            a.HEAP32 = B = new Int32Array(buffer);
            a.HEAPU8 = z = new Uint8Array(buffer);
            a.HEAPU16 = new Uint16Array(buffer);
            a.HEAPU32 = new Uint32Array(buffer);
            a.HEAPF32 = new Float32Array(buffer);
            a.HEAPF64 = new Float64Array(buffer);
          }

          var D, G, H, I, J, K, L, M;
          D = G = I = J = K = L = M = 0;
          H = !1;

          function N() {
            y("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value " + O + ", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ");
          }

          var P = a.TOTAL_STACK || 5242880,
              O = a.TOTAL_MEMORY || 16777216;
          O < P && a.printErr("TOTAL_MEMORY should be larger than TOTAL_STACK, was " + O + "! (TOTAL_STACK=" + P + ")");
          a.buffer ? buffer = a.buffer : ("object" === (typeof WebAssembly === "undefined" ? "undefined" : _typeof2(WebAssembly)) && "function" === typeof WebAssembly.Memory ? (a.wasmMemory = new WebAssembly.Memory({
            initial: O / 65536,
            maximum: O / 65536
          }), buffer = a.wasmMemory.buffer) : buffer = new ArrayBuffer(O), a.buffer = buffer);
          C();
          B[0] = 1668509029;
          A[1] = 25459;
          if (115 !== z[2] || 99 !== z[3]) throw "Runtime error: expected the system to be little-endian!";

          function Q(b) {
            for (; 0 < b.length;) {
              var c = b.shift();
              if ("function" == typeof c) c();else {
                var h = c.f;
                "number" === typeof h ? void 0 === c.a ? a.dynCall_v(h) : a.dynCall_vi(h, c.a) : h(void 0 === c.a ? null : c.a);
              }
            }
          }

          var R = [],
              S = [],
              aa = [],
              ba = [],
              T = [],
              U = !1;

          function ca() {
            var b = a.preRun.shift();
            R.unshift(b);
          }

          var V = 0,
              W = null,
              X = null;
          a.preloadedImages = {};
          a.preloadedAudios = {};

          function Y(b) {
            return String.prototype.startsWith ? b.startsWith("data:application/octet-stream;base64,") : 0 === b.indexOf("data:application/octet-stream;base64,");
          }

          (function () {
            function b() {
              try {
                if (a.wasmBinary) return new Uint8Array(a.wasmBinary);
                if (a.readBinary) return a.readBinary(e);
                throw "on the web, we need the wasm binary to be preloaded and set on Module['wasmBinary']. emcc.py will do that for you when generating HTML (but not JS)";
              } catch (E) {
                y(E);
              }
            }

            function c() {
              return a.wasmBinary || !m && !n || "function" !== typeof fetch ? new Promise(function (c) {
                c(b());
              }) : fetch(e, {
                credentials: "same-origin"
              }).then(function (b) {
                if (!b.ok) throw "failed to load wasm binary file at '" + e + "'";
                return b.arrayBuffer();
              }).catch(function () {
                return b();
              });
            }

            function h(b) {
              function d(b) {
                F = b.exports;

                if (F.memory) {
                  b = F.memory;
                  var c = a.buffer;
                  b.byteLength < c.byteLength && a.printErr("the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here");
                  c = new Int8Array(c);
                  new Int8Array(b).set(c);
                  a.buffer = buffer = b;
                  C();
                }

                a.asm = F;
                a.usingWasm = !0;
                V--;
                a.monitorRunDependencies && a.monitorRunDependencies(V);
                0 == V && (null !== W && (clearInterval(W), W = null), X && (b = X, X = null, b()));
              }

              function g(b) {
                d(b.instance);
              }

              function E(b) {
                c().then(function (b) {
                  return WebAssembly.instantiate(b, f);
                }).then(b).catch(function (b) {
                  a.printErr("failed to asynchronously prepare wasm: " + b);
                  y(b);
                });
              }

              if ("object" !== (typeof WebAssembly === "undefined" ? "undefined" : _typeof2(WebAssembly))) return a.printErr("no native wasm support detected"), !1;
              if (!(a.wasmMemory instanceof WebAssembly.Memory)) return a.printErr("no native wasm Memory in use"), !1;
              b.memory = a.wasmMemory;
              f.global = {
                NaN: NaN,
                Infinity: Infinity
              };
              f["global.Math"] = Math;
              f.env = b;
              V++;
              a.monitorRunDependencies && a.monitorRunDependencies(V);
              if (a.instantiateWasm) try {
                return a.instantiateWasm(f, d);
              } catch (fa) {
                return a.printErr("Module.instantiateWasm callback failed with error: " + fa), !1;
              }
              a.wasmBinary || "function" !== typeof WebAssembly.instantiateStreaming || Y(e) || "function" !== typeof fetch ? E(g) : WebAssembly.instantiateStreaming(fetch(e, {
                credentials: "same-origin"
              }), f).then(g).catch(function (b) {
                a.printErr("wasm streaming compile failed: " + b);
                a.printErr("falling back to ArrayBuffer instantiation");
                E(g);
              });
              return {};
            }

            var d = "supercop.wast",
                e = "supercop.wasm",
                g = "supercop.temp.asm.js";
            "function" === typeof a.locateFile ? (Y(d) || (d = a.locateFile(d)), Y(e) || (e = a.locateFile(e)), Y(g) || (g = a.locateFile(g))) : (Y(d) || (d = a.scriptDirectory + d), Y(e) || (e = a.scriptDirectory + e), Y(g) || (g = a.scriptDirectory + g));
            var f = {
              global: null,
              env: null,
              asm2wasm: {
                "f64-rem": function f64Rem(b, c) {
                  return b % c;
                },
                "debugger": function _debugger() {
                  debugger;
                }
              },
              parent: a
            },
                F = null;
            a.asmPreload = a.asm;
            var ha = a.reallocBuffer;

            a.reallocBuffer = function (b) {
              if ("asmjs" === ia) var c = ha(b);else a: {
                var e = a.usingWasm ? 65536 : 16777216;
                0 < b % e && (b += e - b % e);
                e = a.buffer.byteLength;
                if (a.usingWasm) try {
                  c = -1 !== a.wasmMemory.grow((b - e) / 65536) ? a.buffer = a.wasmMemory.buffer : null;
                  break a;
                } catch (ma) {
                  c = null;
                  break a;
                }
                c = void 0;
              }
              return c;
            };

            var ia = "";

            a.asm = function (b, c) {
              if (!c.table) {
                b = a.wasmTableSize;
                void 0 === b && (b = 1024);
                var e = a.wasmMaxTableSize;
                c.table = "object" === (typeof WebAssembly === "undefined" ? "undefined" : _typeof2(WebAssembly)) && "function" === typeof WebAssembly.Table ? void 0 !== e ? new WebAssembly.Table({
                  initial: b,
                  maximum: e,
                  element: "anyfunc"
                }) : new WebAssembly.Table({
                  initial: b,
                  element: "anyfunc"
                }) : Array(b);
                a.wasmTable = c.table;
              }

              c.memoryBase || (c.memoryBase = a.STATIC_BASE);
              c.tableBase || (c.tableBase = 0);
              (c = h(c)) || y("no binaryen method succeeded. consider enabling more options, like interpreting, if you want that: https://github.com/kripken/emscripten/wiki/WebAssembly#binaryen-methods");
              return c;
            };
          })();

          D = 1024;
          G = D + 33968;
          S.push();
          a.STATIC_BASE = D;
          a.STATIC_BUMP = 33968;
          G += 16;
          assert(!H);
          var da = G;
          G = G + 4 + 15 & -16;
          M = da;
          I = J = w(G);
          K = I + P;
          L = w(K);
          B[M >> 2] = L;
          H = !0;
          a.wasmTableSize = 0;
          a.wasmMaxTableSize = 0;
          a.b = {};
          a.c = {
            enlargeMemory: function enlargeMemory() {
              N();
            },
            getTotalMemory: function getTotalMemory() {
              return O;
            },
            abortOnCannotGrowMemory: N,
            ___setErrNo: function ___setErrNo(b) {
              a.___errno_location && (B[a.___errno_location() >> 2] = b);
              return b;
            },
            DYNAMICTOP_PTR: M,
            STACKTOP: J
          };
          var ea = a.asm(a.b, a.c, buffer);
          a.asm = ea;

          a._ed25519_create_keypair = function () {
            return a.asm._ed25519_create_keypair.apply(null, arguments);
          };

          a._ed25519_sign = function () {
            return a.asm._ed25519_sign.apply(null, arguments);
          };

          a._ed25519_verify = function () {
            return a.asm._ed25519_verify.apply(null, arguments);
          };

          var ja = a._free = function () {
            return a.asm._free.apply(null, arguments);
          },
              ka = a._malloc = function () {
            return a.asm._malloc.apply(null, arguments);
          };

          a.asm = ea;

          a.then = function (b) {
            if (a.calledRun) b(a);else {
              var c = a.onRuntimeInitialized;

              a.onRuntimeInitialized = function () {
                c && c();
                b(a);
              };
            }
            return a;
          };

          function v(b) {
            this.name = "ExitStatus";
            this.message = "Program terminated with exit(" + b + ")";
            this.status = b;
          }

          v.prototype = Error();
          v.prototype.constructor = v;

          X = function la() {
            a.calledRun || Z();
            a.calledRun || (X = la);
          };

          function Z() {
            function b() {
              if (!a.calledRun && (a.calledRun = !0, !x)) {
                U || (U = !0, Q(S));
                Q(aa);
                if (a.onRuntimeInitialized) a.onRuntimeInitialized();
                if (a.postRun) for ("function" == typeof a.postRun && (a.postRun = [a.postRun]); a.postRun.length;) {
                  var b = a.postRun.shift();
                  T.unshift(b);
                }
                Q(T);
              }
            }

            if (!(0 < V)) {
              if (a.preRun) for ("function" == typeof a.preRun && (a.preRun = [a.preRun]); a.preRun.length;) {
                ca();
              }
              Q(R);
              0 < V || a.calledRun || (a.setStatus ? (a.setStatus("Running..."), setTimeout(function () {
                setTimeout(function () {
                  a.setStatus("");
                }, 1);
                b();
              }, 1)) : b());
            }
          }

          a.run = Z;

          a.exit = function (b, c) {
            if (!c || !a.noExitRuntime || 0 !== b) {
              if (!a.noExitRuntime && (x = !0, J = void 0, Q(ba), a.onExit)) a.onExit(b);
              p && process.exit(b);
              a.quit(b, new v(b));
            }
          };

          function y(b) {
            if (a.onAbort) a.onAbort(b);
            void 0 !== b ? (a.print(b), a.printErr(b), b = JSON.stringify(b)) : b = "";
            x = !0;
            throw "abort(" + b + "). Build with -s ASSERTIONS=1 for more info.";
          }

          a.abort = y;
          if (a.preInit) for ("function" == typeof a.preInit && (a.preInit = [a.preInit]); 0 < a.preInit.length;) {
            a.preInit.pop()();
          }
          a.noExitRuntime = !0;
          Z();

          (function () {
            function b(b) {
              if (b && b.buffer instanceof ArrayBuffer) b = new Uint8Array(b.buffer, b.byteOffset, b.byteLength);else if ("string" === typeof b) {
                for (var c = b.length, e = new Uint8Array(c + 1), d = 0; d < c; ++d) {
                  e[d] = b.charCodeAt(d);
                }

                return e;
              }
              return b;
            }

            function c(e, g) {
              var f = new Number(e);
              f.length = g;

              f.get = function (b) {
                b = b || Uint8Array;
                return new b(buffer, f, g / b.BYTES_PER_ELEMENT).slice();
              };

              f.dereference = function (b) {
                b = b || 4;
                return c(f.get(Uint32Array)[0], b);
              };

              f.set = function (c) {
                c = b(c);
                if (c.length > g) throw RangeError("invalid array length");
                z.set(c, f);
              };

              f.free = function () {
                ja(f);
                d.splice(d.indexOf(f), 1);
              };

              d.push(f);
              return f;
            }

            function h(e, d) {
              d = b(d);
              0 === e && (e = d.length);
              var f = c(ka(e), e);
              void 0 !== d ? (f.set(d), d.length < e && z.fill(0, f + d.length, f + e)) : z.fill(0, f, f + e);
              return f;
            }

            var d = [];
            a.createPointer = c;

            a.allocatePointer = function (b) {
              b && (b = Uint32Array.of(b));
              return h(4, b);
            };

            a.allocateBytes = h;

            a.freeBytes = function () {
              for (var b = 0, c = d.length; b < c; ++b) {
                ja(d[b]);
              }

              d = [];
            };
          })();

          return _supercopwasm;
        };

        __supercopwasm = __supercopwasm.bind({
          _currentScript: typeof document !== 'undefined' ? document.currentScript : undefined,
          _selfLocation: typeof self !== 'undefined' ? self.location : undefined
        });
        if (_typeof2(exports) === 'object' && _typeof2(module) === 'object') module.exports = __supercopwasm;else if (typeof define === 'function' && define['amd']) define([], function () {
          return __supercopwasm;
        });else if (_typeof2(exports) === 'object') exports["__supercopwasm"] = __supercopwasm;
      }).call(this);
    }).call(this, require('_process'), "/../node_modules/supercop.wasm/src");
  }, {
    "_process": 276,
    "fs": 100,
    "path": 268
  }],
  367: [function (require, module, exports) {
    'use strict';

    module.exports = {
      stdout: false,
      stderr: false
    };
  }, {}],
  368: [function (require, module, exports) {
    (function (setImmediate, clearImmediate) {
      (function () {
        var nextTick = require('process/browser.js').nextTick;

        var apply = Function.prototype.apply;
        var slice = Array.prototype.slice;
        var immediateIds = {};
        var nextImmediateId = 0; // DOM APIs, for completeness

        exports.setTimeout = function () {
          return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
        };

        exports.setInterval = function () {
          return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
        };

        exports.clearTimeout = exports.clearInterval = function (timeout) {
          timeout.close();
        };

        function Timeout(id, clearFn) {
          this._id = id;
          this._clearFn = clearFn;
        }

        Timeout.prototype.unref = Timeout.prototype.ref = function () {};

        Timeout.prototype.close = function () {
          this._clearFn.call(window, this._id);
        }; // Does not start the time, just sets up the members needed.


        exports.enroll = function (item, msecs) {
          clearTimeout(item._idleTimeoutId);
          item._idleTimeout = msecs;
        };

        exports.unenroll = function (item) {
          clearTimeout(item._idleTimeoutId);
          item._idleTimeout = -1;
        };

        exports._unrefActive = exports.active = function (item) {
          clearTimeout(item._idleTimeoutId);
          var msecs = item._idleTimeout;

          if (msecs >= 0) {
            item._idleTimeoutId = setTimeout(function onTimeout() {
              if (item._onTimeout) item._onTimeout();
            }, msecs);
          }
        }; // That's not how node.js implements it but the exposed api is the same.


        exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function (fn) {
          var id = nextImmediateId++;
          var args = arguments.length < 2 ? false : slice.call(arguments, 1);
          immediateIds[id] = true;
          nextTick(function onNextTick() {
            if (immediateIds[id]) {
              // fn.call() is faster so we optimize for the common use-case
              // @see http://jsperf.com/call-apply-segu
              if (args) {
                fn.apply(null, args);
              } else {
                fn.call(null);
              } // Prevent ids from leaking


              exports.clearImmediate(id);
            }
          });
          return id;
        };
        exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function (id) {
          delete immediateIds[id];
        };
      }).call(this);
    }).call(this, require("timers").setImmediate, require("timers").clearImmediate);
  }, {
    "process/browser.js": 276,
    "timers": 368
  }],
  369: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TypedEmitter = require("events").EventEmitter;
  }, {
    "events": 175
  }],
  370: [function (require, module, exports) {
    module.exports = toArray;

    function toArray(list, index) {
      var array = [];
      index = index || 0;

      for (var i = index || 0; i < list.length; i++) {
        array[i - index] = list[i];
      }

      return array;
    }
  }, {}],
  371: [function (require, module, exports) {
    (function (global) {
      (function () {
        /*! *****************************************************************************
        Copyright (c) Microsoft Corporation.
        
        Permission to use, copy, modify, and/or distribute this software for any
        purpose with or without fee is hereby granted.
        
        THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
        REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
        AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
        INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
        LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
        OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
        PERFORMANCE OF THIS SOFTWARE.
        ***************************************************************************** */

        /* global global, define, System, Reflect, Promise */
        var __extends;

        var __assign;

        var __rest;

        var __decorate;

        var __param;

        var __metadata;

        var __awaiter;

        var __generator;

        var __exportStar;

        var __values;

        var __read;

        var __spread;

        var __spreadArrays;

        var _await;

        var __asyncGenerator;

        var __asyncDelegator;

        var __asyncValues;

        var __makeTemplateObject;

        var __importStar;

        var __importDefault;

        var __classPrivateFieldGet;

        var __classPrivateFieldSet;

        var __createBinding;

        (function (factory) {
          var root = _typeof2(global) === "object" ? global : (typeof self === "undefined" ? "undefined" : _typeof2(self)) === "object" ? self : _typeof2(this) === "object" ? this : {};

          if (typeof define === "function" && define.amd) {
            define("tslib", ["exports"], function (exports) {
              factory(createExporter(root, createExporter(exports)));
            });
          } else if (_typeof2(module) === "object" && _typeof2(module.exports) === "object") {
            factory(createExporter(root, createExporter(module.exports)));
          } else {
            factory(createExporter(root));
          }

          function createExporter(exports, previous) {
            if (exports !== root) {
              if (typeof Object.create === "function") {
                Object.defineProperty(exports, "__esModule", {
                  value: true
                });
              } else {
                exports.__esModule = true;
              }
            }

            return function (id, v) {
              return exports[id] = previous ? previous(id, v) : v;
            };
          }
        })(function (exporter) {
          var extendStatics = Object.setPrototypeOf || {
            __proto__: []
          } instanceof Array && function (d, b) {
            d.__proto__ = b;
          } || function (d, b) {
            for (var p in b) {
              if (b.hasOwnProperty(p)) d[p] = b[p];
            }
          };

          __extends = function __extends(d, b) {
            extendStatics(d, b);

            function __() {
              this.constructor = d;
            }

            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };

          __assign = Object.assign || function (t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];

              for (var p in s) {
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
              }
            }

            return t;
          };

          __rest = function __rest(s, e) {
            var t = {};

            for (var p in s) {
              if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
            }

            if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
            }
            return t;
          };

          __decorate = function __decorate(decorators, target, key, desc) {
            var c = arguments.length,
                r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                d;
            if ((typeof Reflect === "undefined" ? "undefined" : _typeof2(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
              if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
            }
            return c > 3 && r && Object.defineProperty(target, key, r), r;
          };

          __param = function __param(paramIndex, decorator) {
            return function (target, key) {
              decorator(target, key, paramIndex);
            };
          };

          __metadata = function __metadata(metadataKey, metadataValue) {
            if ((typeof Reflect === "undefined" ? "undefined" : _typeof2(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
          };

          __awaiter = function __awaiter(thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P ? value : new P(function (resolve) {
                resolve(value);
              });
            }

            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }

              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }

              function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
              }

              step((generator = generator.apply(thisArg, _arguments || [])).next());
            });
          };

          __generator = function __generator(thisArg, body) {
            var _ = {
              label: 0,
              sent: function sent() {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: []
            },
                f,
                y,
                t,
                g;
            return g = {
              next: verb(0),
              "throw": verb(1),
              "return": verb(2)
            }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
              return this;
            }), g;

            function verb(n) {
              return function (v) {
                return step([n, v]);
              };
            }

            function step(op) {
              if (f) throw new TypeError("Generator is already executing.");

              while (_) {
                try {
                  if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                  if (y = 0, t) op = [op[0] & 2, t.value];

                  switch (op[0]) {
                    case 0:
                    case 1:
                      t = op;
                      break;

                    case 4:
                      _.label++;
                      return {
                        value: op[1],
                        done: false
                      };

                    case 5:
                      _.label++;
                      y = op[1];
                      op = [0];
                      continue;

                    case 7:
                      op = _.ops.pop();

                      _.trys.pop();

                      continue;

                    default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                      }

                      if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                      }

                      if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                      }

                      if (t && _.label < t[2]) {
                        _.label = t[2];

                        _.ops.push(op);

                        break;
                      }

                      if (t[2]) _.ops.pop();

                      _.trys.pop();

                      continue;
                  }

                  op = body.call(thisArg, _);
                } catch (e) {
                  op = [6, e];
                  y = 0;
                } finally {
                  f = t = 0;
                }
              }

              if (op[0] & 5) throw op[1];
              return {
                value: op[0] ? op[1] : void 0,
                done: true
              };
            }
          };

          __createBinding = function __createBinding(o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            o[k2] = m[k];
          };

          __exportStar = function __exportStar(m, exports) {
            for (var p in m) {
              if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          };

          __values = function __values(o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
              next: function next() {
                if (o && i >= o.length) o = void 0;
                return {
                  value: o && o[i++],
                  done: !o
                };
              }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };

          __read = function __read(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o),
                r,
                ar = [],
                e;

            try {
              while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
                ar.push(r.value);
              }
            } catch (error) {
              e = {
                error: error
              };
            } finally {
              try {
                if (r && !r.done && (m = i["return"])) m.call(i);
              } finally {
                if (e) throw e.error;
              }
            }

            return ar;
          };

          __spread = function __spread() {
            for (var ar = [], i = 0; i < arguments.length; i++) {
              ar = ar.concat(__read(arguments[i]));
            }

            return ar;
          };

          __spreadArrays = function __spreadArrays() {
            for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
              s += arguments[i].length;
            }

            for (var r = Array(s), k = 0, i = 0; i < il; i++) {
              for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
                r[k] = a[j];
              }
            }

            return r;
          };

          _await = function __await(v) {
            return this instanceof _await ? (this.v = v, this) : new _await(v);
          };

          __asyncGenerator = function __asyncGenerator(thisArg, _arguments, generator) {
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var g = generator.apply(thisArg, _arguments || []),
                i,
                q = [];
            return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
              return this;
            }, i;

            function verb(n) {
              if (g[n]) i[n] = function (v) {
                return new Promise(function (a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
            }

            function resume(n, v) {
              try {
                step(g[n](v));
              } catch (e) {
                settle(q[0][3], e);
              }
            }

            function step(r) {
              r.value instanceof _await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
            }

            function fulfill(value) {
              resume("next", value);
            }

            function reject(value) {
              resume("throw", value);
            }

            function settle(f, v) {
              if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
            }
          };

          __asyncDelegator = function __asyncDelegator(o) {
            var i, p;
            return i = {}, verb("next"), verb("throw", function (e) {
              throw e;
            }), verb("return"), i[Symbol.iterator] = function () {
              return this;
            }, i;

            function verb(n, f) {
              i[n] = o[n] ? function (v) {
                return (p = !p) ? {
                  value: _await(o[n](v)),
                  done: n === "return"
                } : f ? f(v) : v;
              } : f;
            }
          };

          __asyncValues = function __asyncValues(o) {
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var m = o[Symbol.asyncIterator],
                i;
            return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
              return this;
            }, i);

            function verb(n) {
              i[n] = o[n] && function (v) {
                return new Promise(function (resolve, reject) {
                  v = o[n](v), settle(resolve, reject, v.done, v.value);
                });
              };
            }

            function settle(resolve, reject, d, v) {
              Promise.resolve(v).then(function (v) {
                resolve({
                  value: v,
                  done: d
                });
              }, reject);
            }
          };

          __makeTemplateObject = function __makeTemplateObject(cooked, raw) {
            if (Object.defineProperty) {
              Object.defineProperty(cooked, "raw", {
                value: raw
              });
            } else {
              cooked.raw = raw;
            }

            return cooked;
          };

          __importStar = function __importStar(mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) {
              if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            }
            result["default"] = mod;
            return result;
          };

          __importDefault = function __importDefault(mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };

          __classPrivateFieldGet = function __classPrivateFieldGet(receiver, privateMap) {
            if (!privateMap.has(receiver)) {
              throw new TypeError("attempted to get private field on non-instance");
            }

            return privateMap.get(receiver);
          };

          __classPrivateFieldSet = function __classPrivateFieldSet(receiver, privateMap, value) {
            if (!privateMap.has(receiver)) {
              throw new TypeError("attempted to set private field on non-instance");
            }

            privateMap.set(receiver, value);
            return value;
          };

          exporter("__extends", __extends);
          exporter("__assign", __assign);
          exporter("__rest", __rest);
          exporter("__decorate", __decorate);
          exporter("__param", __param);
          exporter("__metadata", __metadata);
          exporter("__awaiter", __awaiter);
          exporter("__generator", __generator);
          exporter("__exportStar", __exportStar);
          exporter("__createBinding", __createBinding);
          exporter("__values", __values);
          exporter("__read", __read);
          exporter("__spread", __spread);
          exporter("__spreadArrays", __spreadArrays);
          exporter("__await", _await);
          exporter("__asyncGenerator", __asyncGenerator);
          exporter("__asyncDelegator", __asyncDelegator);
          exporter("__asyncValues", __asyncValues);
          exporter("__makeTemplateObject", __makeTemplateObject);
          exporter("__importStar", __importStar);
          exporter("__importDefault", __importDefault);
          exporter("__classPrivateFieldGet", __classPrivateFieldGet);
          exporter("__classPrivateFieldSet", __classPrivateFieldSet);
        });
      }).call(this);
    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {}],
  372: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var reflection_helpers_1 = require("../reflection-helpers");

    var dependency_container_1 = require("../dependency-container");

    var injection_token_1 = require("../providers/injection-token");

    var error_helpers_1 = require("../error-helpers");

    function autoInjectable() {
      return function (target) {
        var paramInfo = reflection_helpers_1.getParamInfo(target);
        return /*#__PURE__*/function (_target) {
          _inherits(_class, _target);

          var _super18 = _createSuper(_class);

          function _class() {
            for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
              args[_key11] = arguments[_key11];
            }

            _classCallCheck2(this, _class);

            return _super18.call.apply(_super18, [this].concat(_toConsumableArray(args.concat(paramInfo.slice(args.length).map(function (type, index) {
              try {
                if (injection_token_1.isTokenDescriptor(type)) {
                  return type.multiple ? dependency_container_1.instance.resolveAll(type.token) : dependency_container_1.instance.resolve(type.token);
                }

                return dependency_container_1.instance.resolve(type);
              } catch (e) {
                var argIndex = index + args.length;
                throw new Error(error_helpers_1.formatErrorCtor(target, argIndex, e));
              }
            })))));
          }

          return _class;
        }(target);
      };
    }

    exports.default = autoInjectable;
  }, {
    "../dependency-container": 380,
    "../error-helpers": 381,
    "../providers/injection-token": 390,
    "../reflection-helpers": 394
  }],
  373: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var auto_injectable_1 = require("./auto-injectable");

    exports.autoInjectable = auto_injectable_1.default;

    var inject_1 = require("./inject");

    exports.inject = inject_1.default;

    var injectable_1 = require("./injectable");

    exports.injectable = injectable_1.default;

    var registry_1 = require("./registry");

    exports.registry = registry_1.default;

    var singleton_1 = require("./singleton");

    exports.singleton = singleton_1.default;

    var inject_all_1 = require("./inject-all");

    exports.injectAll = inject_all_1.default;

    var scoped_1 = require("./scoped");

    exports.scoped = scoped_1.default;
  }, {
    "./auto-injectable": 372,
    "./inject": 375,
    "./inject-all": 374,
    "./injectable": 376,
    "./registry": 377,
    "./scoped": 378,
    "./singleton": 379
  }],
  374: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var reflection_helpers_1 = require("../reflection-helpers");

    function injectAll(token) {
      var data = {
        token: token,
        multiple: true
      };
      return reflection_helpers_1.defineInjectionTokenMetadata(data);
    }

    exports.default = injectAll;
  }, {
    "../reflection-helpers": 394
  }],
  375: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var reflection_helpers_1 = require("../reflection-helpers");

    function inject(token) {
      return reflection_helpers_1.defineInjectionTokenMetadata(token);
    }

    exports.default = inject;
  }, {
    "../reflection-helpers": 394
  }],
  376: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var reflection_helpers_1 = require("../reflection-helpers");

    var dependency_container_1 = require("../dependency-container");

    function injectable() {
      return function (target) {
        dependency_container_1.typeInfo.set(target, reflection_helpers_1.getParamInfo(target));
      };
    }

    exports.default = injectable;
  }, {
    "../dependency-container": 380,
    "../reflection-helpers": 394
  }],
  377: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var tslib_1 = require("tslib");

    var dependency_container_1 = require("../dependency-container");

    function registry() {
      var registrations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      return function (target) {
        registrations.forEach(function (_a) {
          var token = _a.token,
              options = _a.options,
              provider = tslib_1.__rest(_a, ["token", "options"]);

          return dependency_container_1.instance.register(token, provider, options);
        });
        return target;
      };
    }

    exports.default = registry;
  }, {
    "../dependency-container": 380,
    "tslib": 371
  }],
  378: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var injectable_1 = require("./injectable");

    var dependency_container_1 = require("../dependency-container");

    function scoped(lifecycle, token) {
      return function (target) {
        injectable_1.default()(target);
        dependency_container_1.instance.register(token || target, target, {
          lifecycle: lifecycle
        });
      };
    }

    exports.default = scoped;
  }, {
    "../dependency-container": 380,
    "./injectable": 376
  }],
  379: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var injectable_1 = require("./injectable");

    var dependency_container_1 = require("../dependency-container");

    function singleton() {
      return function (target) {
        injectable_1.default()(target);
        dependency_container_1.instance.registerSingleton(target);
      };
    }

    exports.default = singleton;
  }, {
    "../dependency-container": 380,
    "./injectable": 376
  }],
  380: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var providers_1 = require("./providers");

    var provider_1 = require("./providers/provider");

    var injection_token_1 = require("./providers/injection-token");

    var registry_1 = require("./registry");

    var lifecycle_1 = require("./types/lifecycle");

    var resolution_context_1 = require("./resolution-context");

    var error_helpers_1 = require("./error-helpers");

    var lazy_helpers_1 = require("./lazy-helpers");

    exports.typeInfo = new Map();

    var InternalDependencyContainer = /*#__PURE__*/function () {
      function InternalDependencyContainer(parent) {
        _classCallCheck2(this, InternalDependencyContainer);

        this.parent = parent;
        this._registry = new registry_1.default();
      }

      _createClass2(InternalDependencyContainer, [{
        key: "register",
        value: function register(token, providerOrConstructor) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
            lifecycle: lifecycle_1.default.Transient
          };
          var provider;

          if (!provider_1.isProvider(providerOrConstructor)) {
            provider = {
              useClass: providerOrConstructor
            };
          } else {
            provider = providerOrConstructor;
          }

          if (options.lifecycle === lifecycle_1.default.Singleton || options.lifecycle == lifecycle_1.default.ContainerScoped || options.lifecycle == lifecycle_1.default.ResolutionScoped) {
            if (providers_1.isValueProvider(provider) || providers_1.isFactoryProvider(provider)) {
              throw new Error("Cannot use lifecycle \"".concat(lifecycle_1.default[options.lifecycle], "\" with ValueProviders or FactoryProviders"));
            }
          }

          this._registry.set(token, {
            provider: provider,
            options: options
          });

          return this;
        }
      }, {
        key: "registerType",
        value: function registerType(from, to) {
          if (providers_1.isNormalToken(to)) {
            return this.register(from, {
              useToken: to
            });
          }

          return this.register(from, {
            useClass: to
          });
        }
      }, {
        key: "registerInstance",
        value: function registerInstance(token, instance) {
          return this.register(token, {
            useValue: instance
          });
        }
      }, {
        key: "registerSingleton",
        value: function registerSingleton(from, to) {
          if (providers_1.isNormalToken(from)) {
            if (providers_1.isNormalToken(to)) {
              return this.register(from, {
                useToken: to
              }, {
                lifecycle: lifecycle_1.default.Singleton
              });
            } else if (to) {
              return this.register(from, {
                useClass: to
              }, {
                lifecycle: lifecycle_1.default.Singleton
              });
            }

            throw new Error('Cannot register a type name as a singleton without a "to" token');
          }

          var useClass = from;

          if (to && !providers_1.isNormalToken(to)) {
            useClass = to;
          }

          return this.register(from, {
            useClass: useClass
          }, {
            lifecycle: lifecycle_1.default.Singleton
          });
        }
      }, {
        key: "resolve",
        value: function resolve(token) {
          var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new resolution_context_1.default();
          var registration = this.getRegistration(token);

          if (!registration && providers_1.isNormalToken(token)) {
            throw new Error("Attempted to resolve unregistered dependency token: \"".concat(token.toString(), "\""));
          }

          if (registration) {
            return this.resolveRegistration(registration, context);
          }

          if (injection_token_1.isConstructorToken(token)) {
            return this.construct(token, context);
          }

          throw new Error("Attempted to construct an undefined constructor. Could mean a circular dependency problem. Try using `delay` function.");
        }
      }, {
        key: "resolveRegistration",
        value: function resolveRegistration(registration, context) {
          if (registration.options.lifecycle === lifecycle_1.default.ResolutionScoped && context.scopedResolutions.has(registration)) {
            return context.scopedResolutions.get(registration);
          }

          var isSingleton = registration.options.lifecycle === lifecycle_1.default.Singleton;
          var isContainerScoped = registration.options.lifecycle === lifecycle_1.default.ContainerScoped;
          var returnInstance = isSingleton || isContainerScoped;
          var resolved;

          if (providers_1.isValueProvider(registration.provider)) {
            resolved = registration.provider.useValue;
          } else if (providers_1.isTokenProvider(registration.provider)) {
            resolved = returnInstance ? registration.instance || (registration.instance = this.resolve(registration.provider.useToken, context)) : this.resolve(registration.provider.useToken, context);
          } else if (providers_1.isClassProvider(registration.provider)) {
            resolved = returnInstance ? registration.instance || (registration.instance = this.construct(registration.provider.useClass, context)) : this.construct(registration.provider.useClass, context);
          } else if (providers_1.isFactoryProvider(registration.provider)) {
            resolved = registration.provider.useFactory(this);
          } else {
            resolved = this.construct(registration.provider, context);
          }

          if (registration.options.lifecycle === lifecycle_1.default.ResolutionScoped) {
            context.scopedResolutions.set(registration, resolved);
          }

          return resolved;
        }
      }, {
        key: "resolveAll",
        value: function resolveAll(token) {
          var _this69 = this;

          var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new resolution_context_1.default();
          var registrations = this.getAllRegistrations(token);

          if (!registrations && providers_1.isNormalToken(token)) {
            throw new Error("Attempted to resolve unregistered dependency token: \"".concat(token.toString(), "\""));
          }

          if (registrations) {
            return registrations.map(function (item) {
              return _this69.resolveRegistration(item, context);
            });
          }

          return [this.construct(token, context)];
        }
      }, {
        key: "isRegistered",
        value: function isRegistered(token) {
          var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          return this._registry.has(token) || recursive && (this.parent || false) && this.parent.isRegistered(token, true);
        }
      }, {
        key: "reset",
        value: function reset() {
          this._registry.clear();
        }
      }, {
        key: "clearInstances",
        value: function clearInstances() {
          var _iterator12 = _createForOfIteratorHelper(this._registry.entries()),
              _step12;

          try {
            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
              var _step12$value = _slicedToArray(_step12.value, 2),
                  token = _step12$value[0],
                  registrations = _step12$value[1];

              this._registry.setAll(token, registrations.filter(function (registration) {
                return !providers_1.isValueProvider(registration.provider);
              }).map(function (registration) {
                registration.instance = undefined;
                return registration;
              }));
            }
          } catch (err) {
            _iterator12.e(err);
          } finally {
            _iterator12.f();
          }
        }
      }, {
        key: "createChildContainer",
        value: function createChildContainer() {
          var childContainer = new InternalDependencyContainer(this);

          var _iterator13 = _createForOfIteratorHelper(this._registry.entries()),
              _step13;

          try {
            for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
              var _step13$value = _slicedToArray(_step13.value, 2),
                  token = _step13$value[0],
                  registrations = _step13$value[1];

              if (registrations.some(function (_ref29) {
                var options = _ref29.options;
                return options.lifecycle === lifecycle_1.default.ContainerScoped;
              })) {
                childContainer._registry.setAll(token, registrations.map(function (registration) {
                  if (registration.options.lifecycle === lifecycle_1.default.ContainerScoped) {
                    return {
                      provider: registration.provider,
                      options: registration.options
                    };
                  }

                  return registration;
                }));
              }
            }
          } catch (err) {
            _iterator13.e(err);
          } finally {
            _iterator13.f();
          }

          return childContainer;
        }
      }, {
        key: "getRegistration",
        value: function getRegistration(token) {
          if (this.isRegistered(token)) {
            return this._registry.get(token);
          }

          if (this.parent) {
            return this.parent.getRegistration(token);
          }

          return null;
        }
      }, {
        key: "getAllRegistrations",
        value: function getAllRegistrations(token) {
          if (this.isRegistered(token)) {
            return this._registry.getAll(token);
          }

          if (this.parent) {
            return this.parent.getAllRegistrations(token);
          }

          return null;
        }
      }, {
        key: "construct",
        value: function construct(ctor, context) {
          var _this70 = this;

          if (ctor instanceof lazy_helpers_1.DelayedConstructor) {
            return ctor.createProxy(function (target) {
              return _this70.resolve(target, context);
            });
          }

          if (ctor.length === 0) {
            return new ctor();
          }

          var paramInfo = exports.typeInfo.get(ctor);

          if (!paramInfo || paramInfo.length === 0) {
            throw new Error("TypeInfo not known for \"".concat(ctor.name, "\""));
          }

          var params = paramInfo.map(this.resolveParams(context, ctor));
          return _construct(ctor, _toConsumableArray(params));
        }
      }, {
        key: "resolveParams",
        value: function resolveParams(context, ctor) {
          var _this71 = this;

          return function (param, idx) {
            try {
              if (injection_token_1.isTokenDescriptor(param)) {
                return param.multiple ? _this71.resolveAll(param.token) : _this71.resolve(param.token, context);
              }

              return _this71.resolve(param, context);
            } catch (e) {
              throw new Error(error_helpers_1.formatErrorCtor(ctor, idx, e));
            }
          };
        }
      }]);

      return InternalDependencyContainer;
    }();

    exports.instance = new InternalDependencyContainer();
    exports.default = exports.instance;
  }, {
    "./error-helpers": 381,
    "./lazy-helpers": 386,
    "./providers": 389,
    "./providers/injection-token": 390,
    "./providers/provider": 391,
    "./registry": 395,
    "./resolution-context": 396,
    "./types/lifecycle": 398
  }],
  381: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    function formatDependency(params, idx) {
      if (params === null) {
        return "at position #".concat(idx);
      }

      var argName = params.split(",")[idx].trim();
      return "\"".concat(argName, "\" at position #").concat(idx);
    }

    function composeErrorMessage(msg, e) {
      var indent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "    ";
      return [msg].concat(_toConsumableArray(e.message.split("\n").map(function (l) {
        return indent + l;
      }))).join("\n");
    }

    function formatErrorCtor(ctor, paramIdx, error) {
      var _ref30 = ctor.toString().match(/constructor\(([\w, ]+)\)/) || [],
          _ref31 = _slicedToArray(_ref30, 2),
          _ref31$ = _ref31[1],
          params = _ref31$ === void 0 ? null : _ref31$;

      var dep = formatDependency(params, paramIdx);
      return composeErrorMessage("Cannot inject the dependency ".concat(dep, " of \"").concat(ctor.name, "\" constructor. Reason:"), error);
    }

    exports.formatErrorCtor = formatErrorCtor;
  }, {}],
  382: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var instance_caching_factory_1 = require("./instance-caching-factory");

    exports.instanceCachingFactory = instance_caching_factory_1.default;

    var predicate_aware_class_factory_1 = require("./predicate-aware-class-factory");

    exports.predicateAwareClassFactory = predicate_aware_class_factory_1.default;
  }, {
    "./instance-caching-factory": 383,
    "./predicate-aware-class-factory": 384
  }],
  383: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    function instanceCachingFactory(factoryFunc) {
      var instance;
      return function (dependencyContainer) {
        if (instance == undefined) {
          instance = factoryFunc(dependencyContainer);
        }

        return instance;
      };
    }

    exports.default = instanceCachingFactory;
  }, {}],
  384: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    function predicateAwareClassFactory(predicate, trueConstructor, falseConstructor) {
      var useCaching = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var instance;
      var previousPredicate;
      return function (dependencyContainer) {
        var currentPredicate = predicate(dependencyContainer);

        if (!useCaching || previousPredicate !== currentPredicate) {
          if (previousPredicate = currentPredicate) {
            instance = dependencyContainer.resolve(trueConstructor);
          } else {
            instance = dependencyContainer.resolve(falseConstructor);
          }
        }

        return instance;
      };
    }

    exports.default = predicateAwareClassFactory;
  }, {}],
  385: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var tslib_1 = require("tslib");

    if (typeof Reflect === "undefined" || !Reflect.getMetadata) {
      throw new Error("tsyringe requires a reflect polyfill. Please add 'import \"reflect-metadata\"' to the top of your entry point.");
    }

    var types_1 = require("./types");

    exports.Lifecycle = types_1.Lifecycle;

    tslib_1.__exportStar(require("./decorators"), exports);

    tslib_1.__exportStar(require("./factories"), exports);

    tslib_1.__exportStar(require("./providers"), exports);

    var lazy_helpers_1 = require("./lazy-helpers");

    exports.delay = lazy_helpers_1.delay;

    var dependency_container_1 = require("./dependency-container");

    exports.container = dependency_container_1.instance;
  }, {
    "./decorators": 373,
    "./dependency-container": 380,
    "./factories": 382,
    "./lazy-helpers": 386,
    "./providers": 389,
    "./types": 397,
    "tslib": 371
  }],
  386: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var DelayedConstructor = /*#__PURE__*/function () {
      function DelayedConstructor(wrap) {
        _classCallCheck2(this, DelayedConstructor);

        this.wrap = wrap;
        this.reflectMethods = ["get", "getPrototypeOf", "setPrototypeOf", "getOwnPropertyDescriptor", "defineProperty", "has", "set", "deleteProperty", "apply", "construct"];
      }

      _createClass2(DelayedConstructor, [{
        key: "createProxy",
        value: function createProxy(createObject) {
          var _this72 = this;

          var target = {};
          var init = false;
          var value;

          var delayedObject = function delayedObject() {
            if (!init) {
              value = createObject(_this72.wrap());
              init = true;
            }

            return value;
          };

          return new Proxy(target, this.createHandler(delayedObject));
        }
      }, {
        key: "createHandler",
        value: function createHandler(delayedObject) {
          var handler = {};

          var install = function install(name) {
            handler[name] = function () {
              for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
                args[_key12] = arguments[_key12];
              }

              args[0] = delayedObject();
              var method = Reflect[name];
              return method.apply(void 0, args);
            };
          };

          this.reflectMethods.forEach(install);
          return handler;
        }
      }]);

      return DelayedConstructor;
    }();

    exports.DelayedConstructor = DelayedConstructor;

    function delay(wrappedConstructor) {
      if (typeof wrappedConstructor === "undefined") {
        throw new Error("Attempt to `delay` undefined. Constructor must be wrapped in a callback");
      }

      return new DelayedConstructor(wrappedConstructor);
    }

    exports.delay = delay;
  }, {}],
  387: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    function isClassProvider(provider) {
      return !!provider.useClass;
    }

    exports.isClassProvider = isClassProvider;
  }, {}],
  388: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    function isFactoryProvider(provider) {
      return !!provider.useFactory;
    }

    exports.isFactoryProvider = isFactoryProvider;
  }, {}],
  389: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var class_provider_1 = require("./class-provider");

    exports.isClassProvider = class_provider_1.isClassProvider;

    var factory_provider_1 = require("./factory-provider");

    exports.isFactoryProvider = factory_provider_1.isFactoryProvider;

    var injection_token_1 = require("./injection-token");

    exports.isNormalToken = injection_token_1.isNormalToken;

    var token_provider_1 = require("./token-provider");

    exports.isTokenProvider = token_provider_1.isTokenProvider;

    var value_provider_1 = require("./value-provider");

    exports.isValueProvider = value_provider_1.isValueProvider;
  }, {
    "./class-provider": 387,
    "./factory-provider": 388,
    "./injection-token": 390,
    "./token-provider": 392,
    "./value-provider": 393
  }],
  390: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var lazy_helpers_1 = require("../lazy-helpers");

    function isNormalToken(token) {
      return typeof token === "string" || _typeof2(token) === "symbol";
    }

    exports.isNormalToken = isNormalToken;

    function isTokenDescriptor(descriptor) {
      return _typeof2(descriptor) === "object" && "token" in descriptor && "multiple" in descriptor;
    }

    exports.isTokenDescriptor = isTokenDescriptor;

    function isConstructorToken(token) {
      return typeof token === "function" || token instanceof lazy_helpers_1.DelayedConstructor;
    }

    exports.isConstructorToken = isConstructorToken;
  }, {
    "../lazy-helpers": 386
  }],
  391: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var class_provider_1 = require("./class-provider");

    var value_provider_1 = require("./value-provider");

    var token_provider_1 = require("./token-provider");

    var factory_provider_1 = require("./factory-provider");

    function isProvider(provider) {
      return class_provider_1.isClassProvider(provider) || value_provider_1.isValueProvider(provider) || token_provider_1.isTokenProvider(provider) || factory_provider_1.isFactoryProvider(provider);
    }

    exports.isProvider = isProvider;
  }, {
    "./class-provider": 387,
    "./factory-provider": 388,
    "./token-provider": 392,
    "./value-provider": 393
  }],
  392: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    function isTokenProvider(provider) {
      return !!provider.useToken;
    }

    exports.isTokenProvider = isTokenProvider;
  }, {}],
  393: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    function isValueProvider(provider) {
      return provider.useValue != undefined;
    }

    exports.isValueProvider = isValueProvider;
  }, {}],
  394: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.INJECTION_TOKEN_METADATA_KEY = "injectionTokens";

    function getParamInfo(target) {
      var params = Reflect.getMetadata("design:paramtypes", target) || [];
      var injectionTokens = Reflect.getOwnMetadata(exports.INJECTION_TOKEN_METADATA_KEY, target) || {};
      Object.keys(injectionTokens).forEach(function (key) {
        params[+key] = injectionTokens[key];
      });
      return params;
    }

    exports.getParamInfo = getParamInfo;

    function defineInjectionTokenMetadata(data) {
      return function (target, _propertyKey, parameterIndex) {
        var injectionTokens = Reflect.getOwnMetadata(exports.INJECTION_TOKEN_METADATA_KEY, target) || {};
        injectionTokens[parameterIndex] = data;
        Reflect.defineMetadata(exports.INJECTION_TOKEN_METADATA_KEY, injectionTokens, target);
      };
    }

    exports.defineInjectionTokenMetadata = defineInjectionTokenMetadata;
  }, {}],
  395: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var Registry = /*#__PURE__*/function () {
      function Registry() {
        _classCallCheck2(this, Registry);

        this._registryMap = new Map();
      }

      _createClass2(Registry, [{
        key: "entries",
        value: function entries() {
          return this._registryMap.entries();
        }
      }, {
        key: "getAll",
        value: function getAll(key) {
          this.ensure(key);
          return this._registryMap.get(key);
        }
      }, {
        key: "get",
        value: function get(key) {
          this.ensure(key);

          var value = this._registryMap.get(key);

          return value[value.length - 1] || null;
        }
      }, {
        key: "set",
        value: function set(key, value) {
          this.ensure(key);

          this._registryMap.get(key).push(value);
        }
      }, {
        key: "setAll",
        value: function setAll(key, value) {
          this._registryMap.set(key, value);
        }
      }, {
        key: "has",
        value: function has(key) {
          this.ensure(key);
          return this._registryMap.get(key).length > 0;
        }
      }, {
        key: "clear",
        value: function clear() {
          this._registryMap.clear();
        }
      }, {
        key: "ensure",
        value: function ensure(key) {
          if (!this._registryMap.has(key)) {
            this._registryMap.set(key, []);
          }
        }
      }]);

      return Registry;
    }();

    exports.default = Registry;
  }, {}],
  396: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var ResolutionContext = function ResolutionContext() {
      _classCallCheck2(this, ResolutionContext);

      this.scopedResolutions = new Map();
    };

    exports.default = ResolutionContext;
  }, {}],
  397: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var lifecycle_1 = require("./lifecycle");

    exports.Lifecycle = lifecycle_1.default;
  }, {
    "./lifecycle": 398
  }],
  398: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Lifecycle;

    (function (Lifecycle) {
      Lifecycle[Lifecycle["Transient"] = 0] = "Transient";
      Lifecycle[Lifecycle["Singleton"] = 1] = "Singleton";
      Lifecycle[Lifecycle["ResolutionScoped"] = 2] = "ResolutionScoped";
      Lifecycle[Lifecycle["ContainerScoped"] = 3] = "ContainerScoped";
    })(Lifecycle || (Lifecycle = {}));

    exports.default = Lifecycle;
  }, {}],
  399: [function (require, module, exports) {
    module.exports = remove;

    function remove(arr, i) {
      if (i >= arr.length || i < 0) return;
      var last = arr.pop();

      if (i < arr.length) {
        var tmp = arr[i];
        arr[i] = last;
        return tmp;
      }

      return last;
    }
  }, {}],
  400: [function (require, module, exports) {
    (function (global) {
      (function () {
        /**
         * Module exports.
         */
        module.exports = deprecate;
        /**
         * Mark that a method should not be used.
         * Returns a modified function which warns once by default.
         *
         * If `localStorage.noDeprecation = true` is set, then it is a no-op.
         *
         * If `localStorage.throwDeprecation = true` is set, then deprecated functions
         * will throw an Error when invoked.
         *
         * If `localStorage.traceDeprecation = true` is set, then deprecated functions
         * will invoke `console.trace()` instead of `console.error()`.
         *
         * @param {Function} fn - the function to deprecate
         * @param {String} msg - the string to print to the console when `fn` is invoked
         * @returns {Function} a new "deprecated" version of `fn`
         * @api public
         */

        function deprecate(fn, msg) {
          if (config('noDeprecation')) {
            return fn;
          }

          var warned = false;

          function deprecated() {
            if (!warned) {
              if (config('throwDeprecation')) {
                throw new Error(msg);
              } else if (config('traceDeprecation')) {
                console.trace(msg);
              } else {
                console.warn(msg);
              }

              warned = true;
            }

            return fn.apply(this, arguments);
          }

          return deprecated;
        }
        /**
         * Checks `localStorage` for boolean values for the given `name`.
         *
         * @param {String} name
         * @returns {Boolean}
         * @api private
         */


        function config(name) {
          // accessing global.localStorage can trigger a DOMException in sandboxed iframes
          try {
            if (!global.localStorage) return false;
          } catch (_) {
            return false;
          }

          var val = global.localStorage[name];
          if (null == val) return false;
          return String(val).toLowerCase() === 'true';
        }
      }).call(this);
    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {}],
  401: [function (require, module, exports) {
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;

        var TempCtor = function TempCtor() {};

        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      };
    }
  }, {}],
  402: [function (require, module, exports) {
    module.exports = function isBuffer(arg) {
      return arg && _typeof2(arg) === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
    };
  }, {}],
  403: [function (require, module, exports) {
    (function (process, global) {
      (function () {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        var formatRegExp = /%[sdj%]/g;

        exports.format = function (f) {
          if (!isString(f)) {
            var objects = [];

            for (var i = 0; i < arguments.length; i++) {
              objects.push(inspect(arguments[i]));
            }

            return objects.join(' ');
          }

          var i = 1;
          var args = arguments;
          var len = args.length;
          var str = String(f).replace(formatRegExp, function (x) {
            if (x === '%%') return '%';
            if (i >= len) return x;

            switch (x) {
              case '%s':
                return String(args[i++]);

              case '%d':
                return Number(args[i++]);

              case '%j':
                try {
                  return JSON.stringify(args[i++]);
                } catch (_) {
                  return '[Circular]';
                }

              default:
                return x;
            }
          });

          for (var x = args[i]; i < len; x = args[++i]) {
            if (isNull(x) || !isObject(x)) {
              str += ' ' + x;
            } else {
              str += ' ' + inspect(x);
            }
          }

          return str;
        }; // Mark that a method should not be used.
        // Returns a modified function which warns once by default.
        // If --no-deprecation is set, then it is a no-op.


        exports.deprecate = function (fn, msg) {
          // Allow for deprecating things in the process of starting up.
          if (isUndefined(global.process)) {
            return function () {
              return exports.deprecate(fn, msg).apply(this, arguments);
            };
          }

          if (process.noDeprecation === true) {
            return fn;
          }

          var warned = false;

          function deprecated() {
            if (!warned) {
              if (process.throwDeprecation) {
                throw new Error(msg);
              } else if (process.traceDeprecation) {
                console.trace(msg);
              } else {
                console.error(msg);
              }

              warned = true;
            }

            return fn.apply(this, arguments);
          }

          return deprecated;
        };

        var debugs = {};
        var debugEnviron;

        exports.debuglog = function (set) {
          if (isUndefined(debugEnviron)) debugEnviron = undefined || '';
          set = set.toUpperCase();

          if (!debugs[set]) {
            if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
              var pid = process.pid;

              debugs[set] = function () {
                var msg = exports.format.apply(exports, arguments);
                console.error('%s %d: %s', set, pid, msg);
              };
            } else {
              debugs[set] = function () {};
            }
          }

          return debugs[set];
        };
        /**
         * Echos the value of a value. Trys to print the value out
         * in the best way possible given the different types.
         *
         * @param {Object} obj The object to print out.
         * @param {Object} opts Optional options object that alters the output.
         */

        /* legacy: obj, showHidden, depth, colors*/


        function inspect(obj, opts) {
          // default options
          var ctx = {
            seen: [],
            stylize: stylizeNoColor
          }; // legacy...

          if (arguments.length >= 3) ctx.depth = arguments[2];
          if (arguments.length >= 4) ctx.colors = arguments[3];

          if (isBoolean(opts)) {
            // legacy...
            ctx.showHidden = opts;
          } else if (opts) {
            // got an "options" object
            exports._extend(ctx, opts);
          } // set default options


          if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
          if (isUndefined(ctx.depth)) ctx.depth = 2;
          if (isUndefined(ctx.colors)) ctx.colors = false;
          if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
          if (ctx.colors) ctx.stylize = stylizeWithColor;
          return formatValue(ctx, obj, ctx.depth);
        }

        exports.inspect = inspect; // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

        inspect.colors = {
          'bold': [1, 22],
          'italic': [3, 23],
          'underline': [4, 24],
          'inverse': [7, 27],
          'white': [37, 39],
          'grey': [90, 39],
          'black': [30, 39],
          'blue': [34, 39],
          'cyan': [36, 39],
          'green': [32, 39],
          'magenta': [35, 39],
          'red': [31, 39],
          'yellow': [33, 39]
        }; // Don't use 'blue' not visible on cmd.exe

        inspect.styles = {
          'special': 'cyan',
          'number': 'yellow',
          'boolean': 'yellow',
          'undefined': 'grey',
          'null': 'bold',
          'string': 'green',
          'date': 'magenta',
          // "name": intentionally not styling
          'regexp': 'red'
        };

        function stylizeWithColor(str, styleType) {
          var style = inspect.styles[styleType];

          if (style) {
            return "\x1B[" + inspect.colors[style][0] + 'm' + str + "\x1B[" + inspect.colors[style][1] + 'm';
          } else {
            return str;
          }
        }

        function stylizeNoColor(str, styleType) {
          return str;
        }

        function arrayToHash(array) {
          var hash = {};
          array.forEach(function (val, idx) {
            hash[val] = true;
          });
          return hash;
        }

        function formatValue(ctx, value, recurseTimes) {
          // Provide a hook for user-specified inspect functions.
          // Check that value is an object with an inspect function on it
          if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
          value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
          !(value.constructor && value.constructor.prototype === value)) {
            var ret = value.inspect(recurseTimes, ctx);

            if (!isString(ret)) {
              ret = formatValue(ctx, ret, recurseTimes);
            }

            return ret;
          } // Primitive types cannot have properties


          var primitive = formatPrimitive(ctx, value);

          if (primitive) {
            return primitive;
          } // Look up the keys of the object.


          var keys = Object.keys(value);
          var visibleKeys = arrayToHash(keys);

          if (ctx.showHidden) {
            keys = Object.getOwnPropertyNames(value);
          } // IE doesn't make error fields non-enumerable
          // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


          if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
            return formatError(value);
          } // Some type of object without properties can be shortcutted.


          if (keys.length === 0) {
            if (isFunction(value)) {
              var name = value.name ? ': ' + value.name : '';
              return ctx.stylize('[Function' + name + ']', 'special');
            }

            if (isRegExp(value)) {
              return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
            }

            if (isDate(value)) {
              return ctx.stylize(Date.prototype.toString.call(value), 'date');
            }

            if (isError(value)) {
              return formatError(value);
            }
          }

          var base = '',
              array = false,
              braces = ['{', '}']; // Make Array say that they are Array

          if (isArray(value)) {
            array = true;
            braces = ['[', ']'];
          } // Make functions say that they are functions


          if (isFunction(value)) {
            var n = value.name ? ': ' + value.name : '';
            base = ' [Function' + n + ']';
          } // Make RegExps say that they are RegExps


          if (isRegExp(value)) {
            base = ' ' + RegExp.prototype.toString.call(value);
          } // Make dates with properties first say the date


          if (isDate(value)) {
            base = ' ' + Date.prototype.toUTCString.call(value);
          } // Make error with message first say the error


          if (isError(value)) {
            base = ' ' + formatError(value);
          }

          if (keys.length === 0 && (!array || value.length == 0)) {
            return braces[0] + base + braces[1];
          }

          if (recurseTimes < 0) {
            if (isRegExp(value)) {
              return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
            } else {
              return ctx.stylize('[Object]', 'special');
            }
          }

          ctx.seen.push(value);
          var output;

          if (array) {
            output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
          } else {
            output = keys.map(function (key) {
              return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
            });
          }

          ctx.seen.pop();
          return reduceToSingleString(output, base, braces);
        }

        function formatPrimitive(ctx, value) {
          if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

          if (isString(value)) {
            var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
            return ctx.stylize(simple, 'string');
          }

          if (isNumber(value)) return ctx.stylize('' + value, 'number');
          if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.

          if (isNull(value)) return ctx.stylize('null', 'null');
        }

        function formatError(value) {
          return '[' + Error.prototype.toString.call(value) + ']';
        }

        function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
          var output = [];

          for (var i = 0, l = value.length; i < l; ++i) {
            if (hasOwnProperty(value, String(i))) {
              output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
            } else {
              output.push('');
            }
          }

          keys.forEach(function (key) {
            if (!key.match(/^\d+$/)) {
              output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
            }
          });
          return output;
        }

        function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
          var name, str, desc;
          desc = Object.getOwnPropertyDescriptor(value, key) || {
            value: value[key]
          };

          if (desc.get) {
            if (desc.set) {
              str = ctx.stylize('[Getter/Setter]', 'special');
            } else {
              str = ctx.stylize('[Getter]', 'special');
            }
          } else {
            if (desc.set) {
              str = ctx.stylize('[Setter]', 'special');
            }
          }

          if (!hasOwnProperty(visibleKeys, key)) {
            name = '[' + key + ']';
          }

          if (!str) {
            if (ctx.seen.indexOf(desc.value) < 0) {
              if (isNull(recurseTimes)) {
                str = formatValue(ctx, desc.value, null);
              } else {
                str = formatValue(ctx, desc.value, recurseTimes - 1);
              }

              if (str.indexOf('\n') > -1) {
                if (array) {
                  str = str.split('\n').map(function (line) {
                    return '  ' + line;
                  }).join('\n').substr(2);
                } else {
                  str = '\n' + str.split('\n').map(function (line) {
                    return '   ' + line;
                  }).join('\n');
                }
              }
            } else {
              str = ctx.stylize('[Circular]', 'special');
            }
          }

          if (isUndefined(name)) {
            if (array && key.match(/^\d+$/)) {
              return str;
            }

            name = JSON.stringify('' + key);

            if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
              name = name.substr(1, name.length - 2);
              name = ctx.stylize(name, 'name');
            } else {
              name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
              name = ctx.stylize(name, 'string');
            }
          }

          return name + ': ' + str;
        }

        function reduceToSingleString(output, base, braces) {
          var numLinesEst = 0;
          var length = output.reduce(function (prev, cur) {
            numLinesEst++;
            if (cur.indexOf('\n') >= 0) numLinesEst++;
            return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
          }, 0);

          if (length > 60) {
            return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
          }

          return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
        } // NOTE: These type checking functions intentionally don't use `instanceof`
        // because it is fragile and can be easily faked with `Object.create()`.


        function isArray(ar) {
          return Array.isArray(ar);
        }

        exports.isArray = isArray;

        function isBoolean(arg) {
          return typeof arg === 'boolean';
        }

        exports.isBoolean = isBoolean;

        function isNull(arg) {
          return arg === null;
        }

        exports.isNull = isNull;

        function isNullOrUndefined(arg) {
          return arg == null;
        }

        exports.isNullOrUndefined = isNullOrUndefined;

        function isNumber(arg) {
          return typeof arg === 'number';
        }

        exports.isNumber = isNumber;

        function isString(arg) {
          return typeof arg === 'string';
        }

        exports.isString = isString;

        function isSymbol(arg) {
          return _typeof2(arg) === 'symbol';
        }

        exports.isSymbol = isSymbol;

        function isUndefined(arg) {
          return arg === void 0;
        }

        exports.isUndefined = isUndefined;

        function isRegExp(re) {
          return isObject(re) && objectToString(re) === '[object RegExp]';
        }

        exports.isRegExp = isRegExp;

        function isObject(arg) {
          return _typeof2(arg) === 'object' && arg !== null;
        }

        exports.isObject = isObject;

        function isDate(d) {
          return isObject(d) && objectToString(d) === '[object Date]';
        }

        exports.isDate = isDate;

        function isError(e) {
          return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
        }

        exports.isError = isError;

        function isFunction(arg) {
          return typeof arg === 'function';
        }

        exports.isFunction = isFunction;

        function isPrimitive(arg) {
          return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || _typeof2(arg) === 'symbol' || // ES6 symbol
          typeof arg === 'undefined';
        }

        exports.isPrimitive = isPrimitive;
        exports.isBuffer = require('./support/isBuffer');

        function objectToString(o) {
          return Object.prototype.toString.call(o);
        }

        function pad(n) {
          return n < 10 ? '0' + n.toString(10) : n.toString(10);
        }

        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34

        function timestamp() {
          var d = new Date();
          var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
          return [d.getDate(), months[d.getMonth()], time].join(' ');
        } // log is just a thin wrapper to console.log that prepends a timestamp


        exports.log = function () {
          console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
        };
        /**
         * Inherit the prototype methods from one constructor into another.
         *
         * The Function.prototype.inherits from lang.js rewritten as a standalone
         * function (not on Function.prototype). NOTE: If this file is to be loaded
         * during bootstrapping this function needs to be rewritten using some native
         * functions as prototype setup using normal JavaScript does not work as
         * expected during bootstrapping (see mirror.js in r114903).
         *
         * @param {function} ctor Constructor function which needs to inherit the
         *     prototype.
         * @param {function} superCtor Constructor function to inherit prototype from.
         */


        exports.inherits = require('inherits');

        exports._extend = function (origin, add) {
          // Don't do anything if add isn't an object
          if (!add || !isObject(add)) return origin;
          var keys = Object.keys(add);
          var i = keys.length;

          while (i--) {
            origin[keys[i]] = add[keys[i]];
          }

          return origin;
        };

        function hasOwnProperty(obj, prop) {
          return Object.prototype.hasOwnProperty.call(obj, prop);
        }
      }).call(this);
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {
    "./support/isBuffer": 402,
    "_process": 276,
    "inherits": 401
  }],
  404: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "v1", {
      enumerable: true,
      get: function get() {
        return _v.default;
      }
    });
    Object.defineProperty(exports, "v3", {
      enumerable: true,
      get: function get() {
        return _v2.default;
      }
    });
    Object.defineProperty(exports, "v4", {
      enumerable: true,
      get: function get() {
        return _v3.default;
      }
    });
    Object.defineProperty(exports, "v5", {
      enumerable: true,
      get: function get() {
        return _v4.default;
      }
    });
    Object.defineProperty(exports, "NIL", {
      enumerable: true,
      get: function get() {
        return _nil.default;
      }
    });
    Object.defineProperty(exports, "version", {
      enumerable: true,
      get: function get() {
        return _version.default;
      }
    });
    Object.defineProperty(exports, "validate", {
      enumerable: true,
      get: function get() {
        return _validate.default;
      }
    });
    Object.defineProperty(exports, "stringify", {
      enumerable: true,
      get: function get() {
        return _stringify.default;
      }
    });
    Object.defineProperty(exports, "parse", {
      enumerable: true,
      get: function get() {
        return _parse.default;
      }
    });

    var _v = _interopRequireDefault(require("./v1.js"));

    var _v2 = _interopRequireDefault(require("./v3.js"));

    var _v3 = _interopRequireDefault(require("./v4.js"));

    var _v4 = _interopRequireDefault(require("./v5.js"));

    var _nil = _interopRequireDefault(require("./nil.js"));

    var _version = _interopRequireDefault(require("./version.js"));

    var _validate = _interopRequireDefault(require("./validate.js"));

    var _stringify = _interopRequireDefault(require("./stringify.js"));

    var _parse = _interopRequireDefault(require("./parse.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }, {
    "./nil.js": 406,
    "./parse.js": 407,
    "./stringify.js": 411,
    "./v1.js": 412,
    "./v3.js": 413,
    "./v4.js": 415,
    "./v5.js": 416,
    "./validate.js": 417,
    "./version.js": 418
  }],
  405: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    /*
     * Browser-compatible JavaScript MD5
     *
     * Modification of JavaScript MD5
     * https://github.com/blueimp/JavaScript-MD5
     *
     * Copyright 2011, Sebastian Tschan
     * https://blueimp.net
     *
     * Licensed under the MIT license:
     * https://opensource.org/licenses/MIT
     *
     * Based on
     * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
     * Digest Algorithm, as defined in RFC 1321.
     * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     * Distributed under the BSD License
     * See http://pajhome.org.uk/crypt/md5 for more info.
     */

    function md5(bytes) {
      if (typeof bytes === 'string') {
        var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

        bytes = new Uint8Array(msg.length);

        for (var i = 0; i < msg.length; ++i) {
          bytes[i] = msg.charCodeAt(i);
        }
      }

      return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
    }
    /*
     * Convert an array of little-endian words to an array of bytes
     */


    function md5ToHexEncodedArray(input) {
      var output = [];
      var length32 = input.length * 32;
      var hexTab = '0123456789abcdef';

      for (var i = 0; i < length32; i += 8) {
        var x = input[i >> 5] >>> i % 32 & 0xff;
        var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
        output.push(hex);
      }

      return output;
    }
    /**
     * Calculate output length with padding and bit length
     */


    function getOutputLength(inputLength8) {
      return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
    }
    /*
     * Calculate the MD5 of an array of little-endian words, and a bit length.
     */


    function wordsToMd5(x, len) {
      /* append padding */
      x[len >> 5] |= 0x80 << len % 32;
      x[getOutputLength(len) - 1] = len;
      var a = 1732584193;
      var b = -271733879;
      var c = -1732584194;
      var d = 271733878;

      for (var i = 0; i < x.length; i += 16) {
        var olda = a;
        var oldb = b;
        var oldc = c;
        var oldd = d;
        a = md5ff(a, b, c, d, x[i], 7, -680876936);
        d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
        b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
        a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = md5gg(b, c, d, a, x[i], 20, -373897302);
        a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
        a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
        d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = md5hh(d, a, b, c, x[i], 11, -358537222);
        c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
        a = md5ii(a, b, c, d, x[i], 6, -198630844);
        d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
        a = safeAdd(a, olda);
        b = safeAdd(b, oldb);
        c = safeAdd(c, oldc);
        d = safeAdd(d, oldd);
      }

      return [a, b, c, d];
    }
    /*
     * Convert an array bytes to an array of little-endian words
     * Characters >255 have their high-byte silently ignored.
     */


    function bytesToWords(input) {
      if (input.length === 0) {
        return [];
      }

      var length8 = input.length * 8;
      var output = new Uint32Array(getOutputLength(length8));

      for (var i = 0; i < length8; i += 8) {
        output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
      }

      return output;
    }
    /*
     * Add integers, wrapping at 2^32. This uses 16-bit operations internally
     * to work around bugs in some JS interpreters.
     */


    function safeAdd(x, y) {
      var lsw = (x & 0xffff) + (y & 0xffff);
      var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
      return msw << 16 | lsw & 0xffff;
    }
    /*
     * Bitwise rotate a 32-bit number to the left.
     */


    function bitRotateLeft(num, cnt) {
      return num << cnt | num >>> 32 - cnt;
    }
    /*
     * These functions implement the four basic operations the algorithm uses.
     */


    function md5cmn(q, a, b, x, s, t) {
      return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
    }

    function md5ff(a, b, c, d, x, s, t) {
      return md5cmn(b & c | ~b & d, a, b, x, s, t);
    }

    function md5gg(a, b, c, d, x, s, t) {
      return md5cmn(b & d | c & ~d, a, b, x, s, t);
    }

    function md5hh(a, b, c, d, x, s, t) {
      return md5cmn(b ^ c ^ d, a, b, x, s, t);
    }

    function md5ii(a, b, c, d, x, s, t) {
      return md5cmn(c ^ (b | ~d), a, b, x, s, t);
    }

    var _default = md5;
    exports.default = _default;
  }, {}],
  406: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = '00000000-0000-0000-0000-000000000000';
    exports.default = _default;
  }, {}],
  407: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _validate = _interopRequireDefault(require("./validate.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function parse(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError('Invalid UUID');
      }

      var v;
      var arr = new Uint8Array(16); // Parse ########-....-....-....-............

      arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
      arr[1] = v >>> 16 & 0xff;
      arr[2] = v >>> 8 & 0xff;
      arr[3] = v & 0xff; // Parse ........-####-....-....-............

      arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
      arr[5] = v & 0xff; // Parse ........-....-####-....-............

      arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
      arr[7] = v & 0xff; // Parse ........-....-....-####-............

      arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
      arr[9] = v & 0xff; // Parse ........-....-....-....-############
      // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

      arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
      arr[11] = v / 0x100000000 & 0xff;
      arr[12] = v >>> 24 & 0xff;
      arr[13] = v >>> 16 & 0xff;
      arr[14] = v >>> 8 & 0xff;
      arr[15] = v & 0xff;
      return arr;
    }

    var _default = parse;
    exports.default = _default;
  }, {
    "./validate.js": 417
  }],
  408: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    exports.default = _default;
  }, {}],
  409: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = rng; // Unique ID creation requires a high quality random # generator. In the browser we therefore
    // require the crypto API and do not support built-in fallback to lower quality random number
    // generators (like Math.random()).
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.

    var getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);
    var rnds8 = new Uint8Array(16);

    function rng() {
      if (!getRandomValues) {
        throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
      }

      return getRandomValues(rnds8);
    }
  }, {}],
  410: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0; // Adapted from Chris Veness' SHA1 code at
    // http://www.movable-type.co.uk/scripts/sha1.html

    function f(s, x, y, z) {
      switch (s) {
        case 0:
          return x & y ^ ~x & z;

        case 1:
          return x ^ y ^ z;

        case 2:
          return x & y ^ x & z ^ y & z;

        case 3:
          return x ^ y ^ z;
      }
    }

    function ROTL(x, n) {
      return x << n | x >>> 32 - n;
    }

    function sha1(bytes) {
      var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
      var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

      if (typeof bytes === 'string') {
        var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

        bytes = [];

        for (var i = 0; i < msg.length; ++i) {
          bytes.push(msg.charCodeAt(i));
        }
      } else if (!Array.isArray(bytes)) {
        // Convert Array-like to Array
        bytes = Array.prototype.slice.call(bytes);
      }

      bytes.push(0x80);
      var l = bytes.length / 4 + 2;
      var N = Math.ceil(l / 16);
      var M = new Array(N);

      for (var _i21 = 0; _i21 < N; ++_i21) {
        var arr = new Uint32Array(16);

        for (var j = 0; j < 16; ++j) {
          arr[j] = bytes[_i21 * 64 + j * 4] << 24 | bytes[_i21 * 64 + j * 4 + 1] << 16 | bytes[_i21 * 64 + j * 4 + 2] << 8 | bytes[_i21 * 64 + j * 4 + 3];
        }

        M[_i21] = arr;
      }

      M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
      M[N - 1][14] = Math.floor(M[N - 1][14]);
      M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

      for (var _i22 = 0; _i22 < N; ++_i22) {
        var W = new Uint32Array(80);

        for (var t = 0; t < 16; ++t) {
          W[t] = M[_i22][t];
        }

        for (var _t = 16; _t < 80; ++_t) {
          W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
        }

        var a = H[0];
        var b = H[1];
        var c = H[2];
        var d = H[3];
        var e = H[4];

        for (var _t2 = 0; _t2 < 80; ++_t2) {
          var s = Math.floor(_t2 / 20);
          var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
          e = d;
          d = c;
          c = ROTL(b, 30) >>> 0;
          b = a;
          a = T;
        }

        H[0] = H[0] + a >>> 0;
        H[1] = H[1] + b >>> 0;
        H[2] = H[2] + c >>> 0;
        H[3] = H[3] + d >>> 0;
        H[4] = H[4] + e >>> 0;
      }

      return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
    }

    var _default = sha1;
    exports.default = _default;
  }, {}],
  411: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _validate = _interopRequireDefault(require("./validate.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    /**
     * Convert array of 16 byte values to UUID string format of the form:
     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     */


    var byteToHex = [];

    for (var i = 0; i < 256; ++i) {
      byteToHex.push((i + 0x100).toString(16).substr(1));
    }

    function stringify(arr) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      // Note: Be careful editing this code!  It's been tuned for performance
      // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
      var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
      // of the following:
      // - One or more input array values don't map to a hex octet (leading to
      // "undefined" in the uuid)
      // - Invalid input values for the RFC `version` or `variant` fields

      if (!(0, _validate.default)(uuid)) {
        throw TypeError('Stringified UUID is invalid');
      }

      return uuid;
    }

    var _default = stringify;
    exports.default = _default;
  }, {
    "./validate.js": 417
  }],
  412: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _rng = _interopRequireDefault(require("./rng.js"));

    var _stringify = _interopRequireDefault(require("./stringify.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    } // **`v1()` - Generate time-based UUID**
    //
    // Inspired by https://github.com/LiosK/UUID.js
    // and http://docs.python.org/library/uuid.html


    var _nodeId;

    var _clockseq; // Previous uuid creation time


    var _lastMSecs = 0;
    var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

    function v1(options, buf, offset) {
      var i = buf && offset || 0;
      var b = buf || new Array(16);
      options = options || {};
      var node = options.node || _nodeId;
      var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
      // specified.  We do this lazily to minimize issues related to insufficient
      // system entropy.  See #189

      if (node == null || clockseq == null) {
        var seedBytes = options.random || (options.rng || _rng.default)();

        if (node == null) {
          // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
          node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
        }

        if (clockseq == null) {
          // Per 4.2.2, randomize (14 bit) clockseq
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
        }
      } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
      // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
      // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
      // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


      var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
      // cycle to simulate higher resolution clock

      var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

      var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

      if (dt < 0 && options.clockseq === undefined) {
        clockseq = clockseq + 1 & 0x3fff;
      } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
      // time interval


      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
        nsecs = 0;
      } // Per 4.2.1.2 Throw error if too many uuids are requested


      if (nsecs >= 10000) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }

      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

      msecs += 12219292800000; // `time_low`

      var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
      b[i++] = tl >>> 24 & 0xff;
      b[i++] = tl >>> 16 & 0xff;
      b[i++] = tl >>> 8 & 0xff;
      b[i++] = tl & 0xff; // `time_mid`

      var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
      b[i++] = tmh >>> 8 & 0xff;
      b[i++] = tmh & 0xff; // `time_high_and_version`

      b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

      b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

      b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

      b[i++] = clockseq & 0xff; // `node`

      for (var n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }

      return buf || (0, _stringify.default)(b);
    }

    var _default = v1;
    exports.default = _default;
  }, {
    "./rng.js": 409,
    "./stringify.js": 411
  }],
  413: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _v = _interopRequireDefault(require("./v35.js"));

    var _md = _interopRequireDefault(require("./md5.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    var v3 = (0, _v.default)('v3', 0x30, _md.default);
    var _default = v3;
    exports.default = _default;
  }, {
    "./md5.js": 405,
    "./v35.js": 414
  }],
  414: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    exports.URL = exports.DNS = void 0;

    var _stringify = _interopRequireDefault(require("./stringify.js"));

    var _parse = _interopRequireDefault(require("./parse.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str)); // UTF8 escape

      var bytes = [];

      for (var i = 0; i < str.length; ++i) {
        bytes.push(str.charCodeAt(i));
      }

      return bytes;
    }

    var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
    exports.DNS = DNS;
    var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
    exports.URL = URL;

    function _default(name, version, hashfunc) {
      function generateUUID(value, namespace, buf, offset) {
        if (typeof value === 'string') {
          value = stringToBytes(value);
        }

        if (typeof namespace === 'string') {
          namespace = (0, _parse.default)(namespace);
        }

        if (namespace.length !== 16) {
          throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
        } // Compute hash of namespace and value, Per 4.3
        // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
        // hashfunc([...namespace, ... value])`


        var bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = hashfunc(bytes);
        bytes[6] = bytes[6] & 0x0f | version;
        bytes[8] = bytes[8] & 0x3f | 0x80;

        if (buf) {
          offset = offset || 0;

          for (var i = 0; i < 16; ++i) {
            buf[offset + i] = bytes[i];
          }

          return buf;
        }

        return (0, _stringify.default)(bytes);
      } // Function#name is not settable on some platforms (#270)


      try {
        generateUUID.name = name; // eslint-disable-next-line no-empty
      } catch (err) {} // For CommonJS default export support


      generateUUID.DNS = DNS;
      generateUUID.URL = URL;
      return generateUUID;
    }
  }, {
    "./parse.js": 407,
    "./stringify.js": 411
  }],
  415: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _rng = _interopRequireDefault(require("./rng.js"));

    var _stringify = _interopRequireDefault(require("./stringify.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function v4(options, buf, offset) {
      options = options || {};

      var rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


      rnds[6] = rnds[6] & 0x0f | 0x40;
      rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

      if (buf) {
        offset = offset || 0;

        for (var i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }

        return buf;
      }

      return (0, _stringify.default)(rnds);
    }

    var _default = v4;
    exports.default = _default;
  }, {
    "./rng.js": 409,
    "./stringify.js": 411
  }],
  416: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _v = _interopRequireDefault(require("./v35.js"));

    var _sha = _interopRequireDefault(require("./sha1.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    var v5 = (0, _v.default)('v5', 0x50, _sha.default);
    var _default = v5;
    exports.default = _default;
  }, {
    "./sha1.js": 410,
    "./v35.js": 414
  }],
  417: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _regex = _interopRequireDefault(require("./regex.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function validate(uuid) {
      return typeof uuid === 'string' && _regex.default.test(uuid);
    }

    var _default = validate;
    exports.default = _default;
  }, {
    "./regex.js": 408
  }],
  418: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _validate = _interopRequireDefault(require("./validate.js"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }

    function version(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError('Invalid UUID');
      }

      return parseInt(uuid.substr(14, 1), 16);
    }

    var _default = version;
    exports.default = _default;
  }, {
    "./validate.js": 417
  }],
  419: [function (require, module, exports) {
    arguments[4][279][0].apply(exports, arguments);
  }, {
    "dup": 279
  }],
  420: [function (require, module, exports) {
    arguments[4][280][0].apply(exports, arguments);
  }, {
    "dup": 280
  }],
  421: [function (require, module, exports) {
    arguments[4][281][0].apply(exports, arguments);
  }, {
    "./decode.js": 419,
    "./encode.js": 420,
    "./length.js": 422,
    "dup": 281
  }],
  422: [function (require, module, exports) {
    arguments[4][282][0].apply(exports, arguments);
  }, {
    "dup": 282
  }],
  423: [function (require, module, exports) {
    (function (process, global) {
      (function () {
        'use strict';

        var Transform = require('readable-stream').Transform;

        var duplexify = require('duplexify');

        var WS = require('ws');

        var Buffer = require('safe-buffer').Buffer;

        module.exports = WebSocketStream;

        function buildProxy(options, socketWrite, socketEnd) {
          var proxy = new Transform({
            objectMode: options.objectMode
          });
          proxy._write = socketWrite;
          proxy._flush = socketEnd;
          return proxy;
        }

        function WebSocketStream(target, protocols, options) {
          var stream, socket;
          var isBrowser = process.title === 'browser';
          var isNative = !!global.WebSocket;
          var socketWrite = isBrowser ? socketWriteBrowser : socketWriteNode;

          if (protocols && !Array.isArray(protocols) && 'object' === _typeof2(protocols)) {
            // accept the "options" Object as the 2nd argument
            options = protocols;
            protocols = null;

            if (typeof options.protocol === 'string' || Array.isArray(options.protocol)) {
              protocols = options.protocol;
            }
          }

          if (!options) options = {};

          if (options.objectMode === undefined) {
            options.objectMode = !(options.binary === true || options.binary === undefined);
          }

          var proxy = buildProxy(options, socketWrite, socketEnd);

          if (!options.objectMode) {
            proxy._writev = writev;
          } // browser only: sets the maximum socket buffer size before throttling


          var bufferSize = options.browserBufferSize || 1024 * 512; // browser only: how long to wait when throttling

          var bufferTimeout = options.browserBufferTimeout || 1000; // use existing WebSocket object that was passed in

          if (_typeof2(target) === 'object') {
            socket = target; // otherwise make a new one
          } else {
            // special constructor treatment for native websockets in browsers, see
            // https://github.com/maxogden/websocket-stream/issues/82
            if (isNative && isBrowser) {
              socket = new WS(target, protocols);
            } else {
              socket = new WS(target, protocols, options);
            }

            socket.binaryType = 'arraybuffer';
          } // according to https://github.com/baygeldin/ws-streamify/issues/1
          // Nodejs WebSocketServer cause memory leak
          // Handlers like onerror, onclose, onmessage and onopen are accessible via setter/getter
          // And setter first of all fires removeAllListeners, that doesnt make inner array of clients on WebSocketServer cleared ever


          var eventListenerSupport = 'undefined' === typeof socket.addEventListener; // was already open when passed in

          if (socket.readyState === socket.OPEN) {
            stream = proxy;
          } else {
            stream = stream = duplexify(undefined, undefined, options);

            if (!options.objectMode) {
              stream._writev = writev;
            }

            if (eventListenerSupport) {
              socket.addEventListener('open', onopen);
            } else {
              socket.onopen = onopen;
            }
          }

          stream.socket = socket;

          if (eventListenerSupport) {
            socket.addEventListener('close', onclose);
            socket.addEventListener('error', onerror);
            socket.addEventListener('message', onmessage);
          } else {
            socket.onclose = onclose;
            socket.onerror = onerror;
            socket.onmessage = onmessage;
          }

          proxy.on('close', destroy);
          var coerceToBuffer = !options.objectMode;

          function socketWriteNode(chunk, enc, next) {
            // avoid errors, this never happens unless
            // destroy() is called
            if (socket.readyState !== socket.OPEN) {
              next();
              return;
            }

            if (coerceToBuffer && typeof chunk === 'string') {
              chunk = Buffer.from(chunk, 'utf8');
            }

            socket.send(chunk, next);
          }

          function socketWriteBrowser(chunk, enc, next) {
            if (socket.bufferedAmount > bufferSize) {
              setTimeout(socketWriteBrowser, bufferTimeout, chunk, enc, next);
              return;
            }

            if (coerceToBuffer && typeof chunk === 'string') {
              chunk = Buffer.from(chunk, 'utf8');
            }

            try {
              socket.send(chunk);
            } catch (err) {
              return next(err);
            }

            next();
          }

          function socketEnd(done) {
            socket.close();
            done();
          }

          function onopen() {
            stream.setReadable(proxy);
            stream.setWritable(proxy);
            stream.emit('connect');
          }

          function onclose() {
            stream.end();
            stream.destroy();
          }

          function onerror(err) {
            stream.destroy(err);
          }

          function onmessage(event) {
            var data = event.data;
            if (data instanceof ArrayBuffer) data = Buffer.from(data);else data = Buffer.from(data, 'utf8');
            proxy.push(data);
          }

          function destroy() {
            socket.close();
          } // this is to be enabled only if objectMode is false


          function writev(chunks, cb) {
            var buffers = new Array(chunks.length);

            for (var i = 0; i < chunks.length; i++) {
              if (typeof chunks[i].chunk === 'string') {
                buffers[i] = Buffer.from(chunks[i], 'utf8');
              } else {
                buffers[i] = chunks[i].chunk;
              }
            }

            this._write(Buffer.concat(buffers), 'binary', cb);
          }

          return stream;
        }
      }).call(this);
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {
    "_process": 276,
    "duplexify": 138,
    "readable-stream": 307,
    "safe-buffer": 314,
    "ws": 424
  }],
  424: [function (require, module, exports) {
    var ws = null;

    if (typeof WebSocket !== 'undefined') {
      ws = WebSocket;
    } else if (typeof MozWebSocket !== 'undefined') {
      ws = MozWebSocket;
    } else if (typeof window !== 'undefined') {
      ws = window.WebSocket || window.MozWebSocket;
    }

    module.exports = ws;
  }, {}],
  425: [function (require, module, exports) {
    // Returns a wrapper function that returns a wrapped callback
    // The wrapper function should do some stuff, and return a
    // presumably different callback function.
    // This makes sure that own properties are retained, so that
    // decorations and such are not lost along the way.
    module.exports = wrappy;

    function wrappy(fn, cb) {
      if (fn && cb) return wrappy(fn)(cb);
      if (typeof fn !== 'function') throw new TypeError('need wrapper function');
      Object.keys(fn).forEach(function (k) {
        wrapper[k] = fn[k];
      });
      return wrapper;

      function wrapper() {
        var args = new Array(arguments.length);

        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }

        var ret = fn.apply(this, args);
        var cb = args[args.length - 1];

        if (typeof ret === 'function' && ret !== cb) {
          Object.keys(cb).forEach(function (k) {
            ret[k] = cb[k];
          });
        }

        return ret;
      }
    }
  }, {}],
  426: [function (require, module, exports) {
    'use strict';

    exports.MediaStream = window.MediaStream;
    exports.MediaStreamTrack = window.MediaStreamTrack;
    exports.RTCDataChannel = window.RTCDataChannel;
    exports.RTCDataChannelEvent = window.RTCDataChannelEvent;
    exports.RTCDtlsTransport = window.RTCDtlsTransport;
    exports.RTCIceCandidate = window.RTCIceCandidate;
    exports.RTCIceTransport = window.RTCIceTransport;
    exports.RTCPeerConnection = window.RTCPeerConnection;
    exports.RTCPeerConnectionIceEvent = window.RTCPeerConnectionIceEvent;
    exports.RTCRtpReceiver = window.RTCRtpReceiver;
    exports.RTCRtpSender = window.RTCRtpSender;
    exports.RTCRtpTransceiver = window.RTCRtpTransceiver;
    exports.RTCSctpTransport = window.RTCSctpTransport;
    exports.RTCSessionDescription = window.RTCSessionDescription;
    exports.getUserMedia = window.getUserMedia;
    exports.mediaDevices = navigator.mediaDevices;
  }, {}],
  427: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        module.exports = dist;

        function dist(a, b) {
          if (a.length !== b.length) throw new Error('Inputs should have the same length');
          var result = Buffer.allocUnsafe(a.length);

          for (var i = 0; i < a.length; i++) {
            result[i] = a[i] ^ b[i];
          }

          return result;
        }

        dist.compare = function compare(a, b) {
          if (a.length !== b.length) throw new Error('Inputs should have the same length');

          for (var i = 0; i < a.length; i++) {
            if (a[i] === b[i]) continue;
            return a[i] < b[i] ? -1 : 1;
          }

          return 0;
        };

        dist.gt = function gt(a, b) {
          return dist.compare(a, b) === 1;
        };

        dist.lt = function lt(a, b) {
          return dist.compare(a, b) === -1;
        };

        dist.eq = function eq(a, b) {
          return dist.compare(a, b) === 0;
        };
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "buffer": 102
  }],
  428: [function (require, module, exports) {
    'use strict';

    var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''),
        length = 64,
        map = {},
        seed = 0,
        i = 0,
        prev;
    /**
     * Return a string representing the specified number.
     *
     * @param {Number} num The number to convert.
     * @returns {String} The string representation of the number.
     * @api public
     */

    function encode(num) {
      var encoded = '';

      do {
        encoded = alphabet[num % length] + encoded;
        num = Math.floor(num / length);
      } while (num > 0);

      return encoded;
    }
    /**
     * Return the integer value specified by the given string.
     *
     * @param {String} str The string to convert.
     * @returns {Number} The integer value represented by the string.
     * @api public
     */


    function decode(str) {
      var decoded = 0;

      for (i = 0; i < str.length; i++) {
        decoded = decoded * length + map[str.charAt(i)];
      }

      return decoded;
    }
    /**
     * Yeast: A tiny growing id generator.
     *
     * @returns {String} A unique id.
     * @api public
     */


    function yeast() {
      var now = encode(+new Date());
      if (now !== prev) return seed = 0, prev = now;
      return now + '.' + encode(seed++);
    } //
    // Map each character to its index.
    //


    for (; i < length; i++) {
      map[alphabet[i]] = i;
    } //
    // Expose the `yeast`, `encode` and `decode` functions.
    //


    yeast.encode = encode;
    yeast.decode = decode;
    module.exports = yeast;
  }, {}],
  429: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        "use strict";

        var __assign = void 0 && (void 0).__assign || function () {
          __assign = Object.assign || function (t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];

              for (var p in s) {
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
              }
            }

            return t;
          };

          return __assign.apply(this, arguments);
        };

        var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function (resolve) {
              resolve(value);
            });
          }

          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }

            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }

            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }

            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };

        var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
          var _ = {
            label: 0,
            sent: function sent() {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: []
          },
              f,
              y,
              t,
              g;
          return g = {
            next: verb(0),
            "throw": verb(1),
            "return": verb(2)
          }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
          }), g;

          function verb(n) {
            return function (v) {
              return step([n, v]);
            };
          }

          function step(op) {
            if (f) throw new TypeError("Generator is already executing.");

            while (_) {
              try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];

                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;

                  case 4:
                    _.label++;
                    return {
                      value: op[1],
                      done: false
                    };

                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;

                  case 7:
                    op = _.ops.pop();

                    _.trys.pop();

                    continue;

                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }

                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }

                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }

                    if (t && _.label < t[2]) {
                      _.label = t[2];

                      _.ops.push(op);

                      break;
                    }

                    if (t[2]) _.ops.pop();

                    _.trys.pop();

                    continue;
                }

                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            }

            if (op[0] & 5) throw op[1];
            return {
              value: op[0] ? op[1] : void 0,
              done: true
            };
          }
        };

        var __asyncValues = void 0 && (void 0).__asyncValues || function (o) {
          if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
          var m = o[Symbol.asyncIterator],
              i;
          return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
            return this;
          }, i);

          function verb(n) {
            i[n] = o[n] && function (v) {
              return new Promise(function (resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
              });
            };
          }

          function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function (v) {
              resolve({
                value: v,
                done: d
              });
            }, reject);
          }
        };

        var __read = void 0 && (void 0).__read || function (o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m) return o;
          var i = m.call(o),
              r,
              ar = [],
              e;

          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
              ar.push(r.value);
            }
          } catch (error) {
            e = {
              error: error
            };
          } finally {
            try {
              if (r && !r.done && (m = i["return"])) m.call(i);
            } finally {
              if (e) throw e.error;
            }
          }

          return ar;
        };

        var __values = void 0 && (void 0).__values || function (o) {
          var s = typeof Symbol === "function" && Symbol.iterator,
              m = s && o[s],
              i = 0;
          if (m) return m.call(o);
          if (o && typeof o.length === "number") return {
            next: function next() {
              if (o && i >= o.length) o = void 0;
              return {
                value: o && o[i++],
                done: !o
              };
            }
          };
          throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };

        var __spread = void 0 && (void 0).__spread || function () {
          for (var ar = [], i = 0; i < arguments.length; i++) {
            ar = ar.concat(__read(arguments[i]));
          }

          return ar;
        };

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Client = void 0;

        var tsyringe_1 = require("tsyringe");

        var Metadata_1 = require("./extensions/Metadata");

        var MetainfoFile_1 = require("./models/MetainfoFile");

        var DHTService_1 = require("./services/DHTService");

        var SHA1HashAlgorithm_1 = require("./services/hashalgorithms/SHA1HashAlgorithm");

        var SHA256HashAlgorithm_1 = require("./services/hashalgorithms/SHA256HashAlgorithm");

        var HashService_1 = require("./services/HashService");

        var ISigningAlgorithm_1 = require("./services/interfaces/ISigningAlgorithm");

        var LogLevelLogger_1 = require("./services/LogLevelLogger");

        var MetaInfoService_1 = require("./services/MetaInfoService");

        var PeerManager_1 = require("./services/PeerManager");

        var ClassicNetworkPeerStrategy_1 = require("./services/peerstrategies/ClassicNetworkPeerStrategy");

        var WebRTCPeerStrategy_1 = require("./services/peerstrategies/WebRTCPeerStrategy");

        var PieceManager_1 = require("./services/PieceManager");

        var ED25519SuperCopAlgorithm_1 = require("./services/signaturealgorithms/ED25519SuperCopAlgorithm");

        var SECP256K1SignatureAlgorithm_1 = require("./services/signaturealgorithms/SECP256K1SignatureAlgorithm");

        var SigningService_1 = require("./services/SigningService");

        var TorrentDiscovery_1 = require("./services/TorrentDiscovery");

        var TorrentManager_1 = require("./services/TorrentManager");

        var createMetaInfo_1 = require("./utils/createMetaInfo");

        var diskFilesToChunks_1 = require("./utils/diskFilesToChunks");

        var defaultExtensions = [function (ioc) {
          return function (w, infoId, metainfo) {
            return new Metadata_1.MetadataExtension(w, infoId, metainfo, ioc.resolve('IHashService'), ioc.resolve('ISigningService'), ioc.resolve('ILogger'));
          };
        }];
        var defaultSettings = {
          extensions: defaultExtensions
        };
        /**
         * Manages the instances of torrents we want to download and seed
         * Client -> Torrent -> Peers
         */

        var Client =
        /** @class */
        function () {
          function Client(settings) {
            var _this = this;

            if (settings === void 0) {
              settings = defaultSettings;
            }

            this.torrents = new Map();

            this.stopAllTorrents = function () {
              return __awaiter(_this, void 0, void 0, function () {
                var _a, _b, _c, _, torrent, e_1_1;

                var e_1, _d;

                return __generator(this, function (_e) {
                  switch (_e.label) {
                    case 0:
                      _e.trys.push([0, 6, 7, 12]);

                      _a = __asyncValues(this.torrents.entries());
                      _e.label = 1;

                    case 1:
                      return [4
                      /*yield*/
                      , _a.next()];

                    case 2:
                      if (!(_b = _e.sent(), !_b.done)) return [3
                      /*break*/
                      , 5];
                      _c = __read(_b.value, 2), _ = _c[0], torrent = _c[1];
                      return [4
                      /*yield*/
                      , torrent.stopTorrent()];

                    case 3:
                      _e.sent();

                      _e.label = 4;

                    case 4:
                      return [3
                      /*break*/
                      , 1];

                    case 5:
                      return [3
                      /*break*/
                      , 12];

                    case 6:
                      e_1_1 = _e.sent();
                      e_1 = {
                        error: e_1_1
                      };
                      return [3
                      /*break*/
                      , 12];

                    case 7:
                      _e.trys.push([7,, 10, 11]);

                      if (!(_b && !_b.done && (_d = _a["return"]))) return [3
                      /*break*/
                      , 9];
                      return [4
                      /*yield*/
                      , _d.call(_a)];

                    case 8:
                      _e.sent();

                      _e.label = 9;

                    case 9:
                      return [3
                      /*break*/
                      , 11];

                    case 10:
                      if (e_1) throw e_1.error;
                      return [7
                      /*endfinally*/
                      ];

                    case 11:
                      return [7
                      /*endfinally*/
                      ];

                    case 12:
                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            };
            /**
             * Stop seeding the existing torrent and replace with a new metainfo file.
             * Start seeding that torrent.
             * @param {TorrentManager} currentTorrent
             * @param {SignedMetainfoFile} metainfo
             * @param {KeyPair} keyPair
             * @param {Array<DiskFile>} files
             */


            this.updateTorrent = function (currentTorrent, metainfo, keyPair, files) {
              if (files === void 0) {
                files = [];
              }

              return __awaiter(_this, void 0, void 0, function () {
                var existingTorrent, newTorrent;
                return __generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      if (!MetainfoFile_1.isSignedMetainfo(currentTorrent.metainfo)) {
                        throw new Error('Must be a signed metainfo file to allow updates');
                      }

                      existingTorrent = this.torrents.get(currentTorrent.metainfo.infosig);

                      if (!existingTorrent) {
                        throw new Error("No torrent exists with that id: " + currentTorrent.id);
                      }

                      return [4
                      /*yield*/
                      , this.addTorrentByMetainfo(metainfo, keyPair, files)];

                    case 1:
                      newTorrent = _a.sent();
                      this.torrents["delete"](currentTorrent.metainfo.infosig);
                      return [2
                      /*return*/
                      , newTorrent];
                  }
                });
              });
            };
            /**
             * Adds a torrent to be seeded or leeched. If you add files, you are a seeder, if you pass undefined, you are a leech
             * @param {MetainfoFile} metainfo
             * @param {Array<DiskFile> | undefined} files
             */


            this.addTorrentByMetainfo = function (metainfo, keyPair, files) {
              if (files === void 0) {
                files = [];
              }

              return __awaiter(_this, void 0, void 0, function () {
                var requestContainer, torrentManager, infoId, error_1;
                return __generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      _a.trys.push([0, 2,, 3]);

                      requestContainer = this.registerScopedDependencies(metainfo, files);
                      return [4
                      /*yield*/
                      , this.registerExtensions(requestContainer)];

                    case 1:
                      requestContainer = _a.sent();
                      torrentManager = requestContainer.resolve(TorrentManager_1.TorrentManager);
                      torrentManager.addTorrent(metainfo, keyPair);
                      infoId = requestContainer.resolve(MetaInfoService_1.MetaInfoService).infoIdentifier;

                      if (!infoId) {
                        throw new Error('How did we create a torrent without an infoId?');
                      }

                      this.torrents.set(infoId, torrentManager);
                      return [2
                      /*return*/
                      , torrentManager];

                    case 2:
                      error_1 = _a.sent();
                      console.error(error_1);
                      throw error_1;

                    case 3:
                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            };

            this.addTorrentByInfoHash = function (infoHash) {
              return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                  return [2
                  /*return*/
                  , this.addTorrentByInfoIdentifier(infoHash)];
                });
              });
            };

            this.addTorrentByInfoSig = function (infoSig) {
              return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                  return [2
                  /*return*/
                  , this.addTorrentByInfoIdentifier(infoSig)];
                });
              });
            };

            this.addTorrentByInfoIdentifier = function (infoIdentifier) {
              return __awaiter(_this, void 0, void 0, function () {
                var requestContainer, discovery, metainfo, torrentManager;
                return __generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      requestContainer = this.registerScopedDependencies(undefined, []);
                      discovery = requestContainer.resolve('ITorrentDiscovery');
                      return [4
                      /*yield*/
                      , discovery.discoverByInfoSig(infoIdentifier)];

                    case 1:
                      metainfo = _a.sent(); // Set up metainfo service and extensions, so we can get going

                      requestContainer.resolve(MetaInfoService_1.MetaInfoService).metainfo = metainfo;
                      return [4
                      /*yield*/
                      , this.registerExtensions(requestContainer)];

                    case 2:
                      requestContainer = _a.sent();
                      torrentManager = requestContainer.resolve(TorrentManager_1.TorrentManager);
                      torrentManager.addTorrent(metainfo);
                      this.torrents.set(infoIdentifier, torrentManager);
                      return [2
                      /*return*/
                      , torrentManager];
                  }
                });
              });
            };

            this.registerScopedDependencies = function (metainfo, files) {
              var requestContainer = tsyringe_1.container.createChildContainer();
              requestContainer.registerSingleton(PieceManager_1.PieceManager);
              requestContainer.registerSingleton('ILogger', LogLevelLogger_1.ConsoleLogger);
              requestContainer.register(PeerManager_1.PeerManager, PeerManager_1.PeerManager);
              requestContainer.register('ITorrentDiscovery', TorrentDiscovery_1.TorrentDiscovery);
              requestContainer.registerSingleton(DHTService_1.DHTService);
              var fileChunks = [];

              if (metainfo) {
                fileChunks = diskFilesToChunks_1.diskFilesToChunks(files, metainfo.info['piece length']);
              }

              requestContainer.registerInstance(MetaInfoService_1.MetaInfoService, new MetaInfoService_1.MetaInfoService(metainfo, fileChunks));
              return requestContainer;
            };

            this.registerExtensions = function (requestContainer) {
              return __awaiter(_this, void 0, void 0, function () {
                var infoIdentifier, _a, _b, extension;

                var e_2, _c;

                return __generator(this, function (_d) {
                  infoIdentifier = requestContainer.resolve(MetaInfoService_1.MetaInfoService).infoIdentifier;

                  if (!infoIdentifier) {
                    throw new Error('Cant add torrent if we dont have an InfoID');
                  }

                  try {
                    for (_a = __values(this.settings.extensions), _b = _a.next(); !_b.done; _b = _a.next()) {
                      extension = _b.value;
                      requestContainer.register('IExtension', {
                        useValue: extension(requestContainer)
                      });
                    }
                  } catch (e_2_1) {
                    e_2 = {
                      error: e_2_1
                    };
                  } finally {
                    try {
                      if (_b && !_b.done && (_c = _a["return"])) _c.call(_a);
                    } finally {
                      if (e_2) throw e_2.error;
                    }
                  }

                  return [2
                  /*return*/
                  , requestContainer];
                });
              });
            };

            this.settings = __assign(__assign(__assign({}, defaultSettings), settings), {
              extensions: __spread(settings.extensions, defaultSettings.extensions)
            });
            this.hashService = tsyringe_1.container.resolve('IHashService');
            this.signingService = tsyringe_1.container.resolve('ISigningService');
          }

          Client.prototype.generateMetaInfo = function (diskFiles, torrentName, hashalgo, privateKeyBuffer, publicKeyBuffer) {
            var _a;

            return __awaiter(this, void 0, void 0, function () {
              var metainfo, signature;
              return __generator(this, function (_b) {
                switch (_b.label) {
                  case 0:
                    metainfo = createMetaInfo_1.createMetaInfo(diskFiles, torrentName, hashalgo);
                    if (!(privateKeyBuffer && publicKeyBuffer)) return [3
                    /*break*/
                    , 2];
                    return [4
                    /*yield*/
                    , (_a = this.signingService) === null || _a === void 0 ? void 0 : _a.sign(metainfo.infohash, ISigningAlgorithm_1.SupportedSignatureAlgorithms.ed25519, privateKeyBuffer, publicKeyBuffer)];

                  case 1:
                    signature = _b.sent();
                    return [2
                    /*return*/
                    , __assign(__assign({}, metainfo), {
                      infosig: signature,
                      'infosig algo': signature ? ISigningAlgorithm_1.SupportedSignatureAlgorithms.ed25519 : undefined,
                      'pub key': Buffer.from(publicKeyBuffer)
                    })];

                  case 2:
                    return [2
                    /*return*/
                    , metainfo];
                }
              });
            });
          };

          Client.registerDependencies = function () {
            return __awaiter(void 0, void 0, void 0, function () {
              var superCopAlgo;
              return __generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    tsyringe_1.container.register('IHashService', HashService_1.HashService);
                    tsyringe_1.container.register('ISigningService', SigningService_1.SigningService);
                    return [4
                    /*yield*/
                    , ED25519SuperCopAlgorithm_1.ED25519SuperCopAlgorithm.build()];

                  case 1:
                    superCopAlgo = _a.sent();
                    tsyringe_1.container.registerInstance('ISigningAlgorithm', superCopAlgo);
                    tsyringe_1.container.registerInstance(ED25519SuperCopAlgorithm_1.ED25519SuperCopAlgorithm, superCopAlgo);
                    tsyringe_1.container.register('ISigningAlgorithm', SECP256K1SignatureAlgorithm_1.SECP256K1SignatureAlgorithm);
                    tsyringe_1.container.register(SECP256K1SignatureAlgorithm_1.SECP256K1SignatureAlgorithm, SECP256K1SignatureAlgorithm_1.SECP256K1SignatureAlgorithm);
                    tsyringe_1.container.register('IHashAlgorithm', SHA1HashAlgorithm_1.SHA1HashAlgorithm);
                    tsyringe_1.container.register(SHA1HashAlgorithm_1.SHA1HashAlgorithm, SHA1HashAlgorithm_1.SHA1HashAlgorithm);
                    tsyringe_1.container.register('IHashAlgorithm', SHA256HashAlgorithm_1.SHA256HashAlgorithm);
                    tsyringe_1.container.register(SHA256HashAlgorithm_1.SHA256HashAlgorithm, SHA256HashAlgorithm_1.SHA256HashAlgorithm);
                    tsyringe_1.container.register('IPeerStrategy', ClassicNetworkPeerStrategy_1.ClassicNetworkPeerStrategy);
                    tsyringe_1.container.register('IPeerStrategy', WebRTCPeerStrategy_1.WebRTCPeerStrategy);
                    return [2
                    /*return*/
                    ];
                }
              });
            });
          };

          return Client;
        }();

        exports.Client = Client;
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "./extensions/Metadata": 430,
    "./models/MetainfoFile": 432,
    "./services/DHTService": 435,
    "./services/HashService": 436,
    "./services/LogLevelLogger": 437,
    "./services/MetaInfoService": 438,
    "./services/PeerManager": 440,
    "./services/PieceManager": 441,
    "./services/SigningService": 442,
    "./services/TorrentDiscovery": 443,
    "./services/TorrentManager": 444,
    "./services/hashalgorithms/SHA1HashAlgorithm": 445,
    "./services/hashalgorithms/SHA256HashAlgorithm": 446,
    "./services/interfaces/ISigningAlgorithm": 447,
    "./services/peerstrategies/ClassicNetworkPeerStrategy": 448,
    "./services/peerstrategies/WebRTCPeerStrategy": 449,
    "./services/signaturealgorithms/ED25519SuperCopAlgorithm": 450,
    "./services/signaturealgorithms/SECP256K1SignatureAlgorithm": 451,
    "./utils/createMetaInfo": 455,
    "./utils/diskFilesToChunks": 456,
    "buffer": 102,
    "tsyringe": 385
  }],
  430: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        "use strict";

        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        var __extends = void 0 && (void 0).__extends || function () {
          var _extendStatics = function extendStatics(d, b) {
            _extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
              }
            };

            return _extendStatics(d, b);
          };

          return function (d, b) {
            _extendStatics(d, b);

            function __() {
              this.constructor = d;
            }

            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();

        var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
          if (k2 === undefined) k2 = k;
          Object.defineProperty(o, k2, {
            enumerable: true,
            get: function get() {
              return m[k];
            }
          });
        } : function (o, m, k, k2) {
          if (k2 === undefined) k2 = k;
          o[k2] = m[k];
        });

        var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
          Object.defineProperty(o, "default", {
            enumerable: true,
            value: v
          });
        } : function (o, v) {
          o["default"] = v;
        });

        var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
          var c = arguments.length,
              r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
              d;
          if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
            if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
          }
          return c > 3 && r && Object.defineProperty(target, key, r), r;
        };

        var __importStar = void 0 && (void 0).__importStar || function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) for (var k in mod) {
            if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
          }

          __setModuleDefault(result, mod);

          return result;
        };

        var __metadata = void 0 && (void 0).__metadata || function (k, v) {
          if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
        };

        var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
          return function (target, key) {
            decorator(target, key, paramIndex);
          };
        };

        var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function (resolve) {
              resolve(value);
            });
          }

          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }

            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }

            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }

            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };

        var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
          var _ = {
            label: 0,
            sent: function sent() {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: []
          },
              f,
              y,
              t,
              g;
          return g = {
            next: verb(0),
            "throw": verb(1),
            "return": verb(2)
          }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
          }), g;

          function verb(n) {
            return function (v) {
              return step([n, v]);
            };
          }

          function step(op) {
            if (f) throw new TypeError("Generator is already executing.");

            while (_) {
              try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];

                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;

                  case 4:
                    _.label++;
                    return {
                      value: op[1],
                      done: false
                    };

                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;

                  case 7:
                    op = _.ops.pop();

                    _.trys.pop();

                    continue;

                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }

                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }

                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }

                    if (t && _.label < t[2]) {
                      _.label = t[2];

                      _.ops.push(op);

                      break;
                    }

                    if (t[2]) _.ops.pop();

                    _.trys.pop();

                    continue;
                }

                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            }

            if (op[0] & 5) throw op[1];
            return {
              value: op[0] ? op[1] : void 0,
              done: true
            };
          }
        };

        var __read = void 0 && (void 0).__read || function (o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m) return o;
          var i = m.call(o),
              r,
              ar = [],
              e;

          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
              ar.push(r.value);
            }
          } catch (error) {
            e = {
              error: error
            };
          } finally {
            try {
              if (r && !r.done && (m = i["return"])) m.call(i);
            } finally {
              if (e) throw e.error;
            }
          }

          return ar;
        };

        var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
          return mod && mod.__esModule ? mod : {
            "default": mod
          };
        };

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.MetadataExtension = void 0;

        var bittorrent_protocol_1 = __importStar(require("@firaenix/bittorrent-protocol"));

        var bencode_1 = __importDefault(require("bencode"));

        var bitfield_1 = __importDefault(require("bitfield"));

        var tsyringe_1 = require("tsyringe");

        var MetainfoFile_1 = require("../models/MetainfoFile");

        var ISigningAlgorithm_1 = require("../services/interfaces/ISigningAlgorithm");

        var calculatePieceLength_1 = require("../utils/calculatePieceLength");

        var chunkBuffer_1 = require("../utils/chunkBuffer");

        var MetainfoFlags;

        (function (MetainfoFlags) {
          /**
           * Recieved when peer says they have metadata for you
           */
          MetainfoFlags[MetainfoFlags["have_metadata"] = 0] = "have_metadata";
          /**
           * When request for amount of pieces
           * [piece_bitfield]
           */

          MetainfoFlags[MetainfoFlags["piece_bitfield"] = 1] = "piece_bitfield";
          /**
           * [bitfield, BitField, piece_count, pieceLength]
           */

          MetainfoFlags[MetainfoFlags["bitfield"] = 2] = "bitfield";
          /**
           * Requesting a specific piece
           * [fetch, piece_index]
           */

          MetainfoFlags[MetainfoFlags["fetch"] = 3] = "fetch";
          /**
           * Recieved a piece
           * [piece, piece_index, bytearray]
           */

          MetainfoFlags[MetainfoFlags["piece"] = 4] = "piece";
          /**
           * Got all pieces and verified
           * [recieved_metainfo, true]
           */

          MetainfoFlags[MetainfoFlags["recieved_metainfo"] = 153] = "recieved_metainfo";
          MetainfoFlags[MetainfoFlags["error"] = 255] = "error";
        })(MetainfoFlags || (MetainfoFlags = {}));

        var MetadataExtension =
        /** @class */
        function (_super) {
          __extends(MetadataExtension, _super);

          function MetadataExtension(wire, infoId, metainfo, hashService, signingService, logger) {
            var _this = _super.call(this, wire) || this;

            _this.wire = wire;
            _this.infoId = infoId;
            _this.hashService = hashService;
            _this.signingService = signingService;
            _this.logger = logger;
            _this.name = 'metadata';

            _this.onHandshake = function (infoHash, peerId, extensions) {
              _this.logger.log('metadata onHandshake', _this.wire.wireName, infoHash, peerId, extensions);
            };

            _this.onExtendedHandshake = function (handshake) {
              _this.logger.log('metadata onExtendedHandshake', handshake);

              _this.logger.log(handshake);

              if (handshake.exts[_this.name] === undefined) {
                _this.logger.warn('Remote peer has no metadata extension');

                return;
              }

              var hasDataFlag = Number(_this.metainfo === undefined ? 0x0 : 0x1);

              _this.sendExtendedMessage([MetainfoFlags.have_metadata, hasDataFlag]);
            }; // onBitField = () =>
            //   new Promise<void>((resolve, reject) => {
            //     this.eventBus.on(MetadataExtensionEvents.ReceivedMetainfo, () => {
            //       this.logger.log('Metainfo recieved!');
            //       resolve();
            //     });
            //     this.eventBus.on(MetadataExtensionEvents.Error, (err) => {
            //       this.logger.error('Error getting metainfo');
            //       reject(err);
            //     });
            //   });


            _this.onMessage = function (buf) {
              var _a = __read(bencode_1["default"].decode(buf)),
                  flag = _a[0],
                  msg = _a.slice(1);

              _this.logger.warn('Received flag', MetainfoFlags[flag], 'Message', msg, msg[1]);

              try {
                switch (flag) {
                  case MetainfoFlags.have_metadata:
                    return _this.peerHasMetainfo(Boolean(msg[0]));

                  case MetainfoFlags.piece_bitfield:
                    return _this.onMetadataBitfieldRequested();

                  case MetainfoFlags.bitfield:
                    return _this.onPeerMetadataBitfield(Object(msg[0]), Number(msg[1]), Number(msg[2]));

                  case MetainfoFlags.fetch:
                    return _this.onFetchRequested(Number(msg[0]));

                  case MetainfoFlags.piece:
                    return _this.onRecievedPiece(Number(msg[0]), Buffer.from(msg[1]));

                  case MetainfoFlags.recieved_metainfo:
                    return _this.logger.warn('Peer finished getting all pieces!');

                  case MetainfoFlags.error:
                    return _this.logger.error(msg[0]);
                }
              } catch (error) {
                _this.sendExtendedMessage([MetainfoFlags.error, error]);

                _this.emit('error', error);
              }
            };

            _this.peerHasMetainfo = function (hasMetaInfo) {
              // If we have metainfo, dont do anything.
              if (_this.metadataBuffer) {
                return;
              } // if they dont have metainfo, do nothing


              if (!hasMetaInfo) {
                return;
              } // If we dont have metainfo, but they do, request it.


              _this.logger.log('Requesting metadata from peer');

              _this.sendExtendedMessage([MetainfoFlags.piece_bitfield]);
            };

            _this.onFetchRequested = function (index) {
              var _a;

              _this.logger.log('metainfo requested from peer', index);

              if (!_this.metaPieceLength) {
                throw new Error('Cannot accept a fetch request when we havent handshaken');
              }

              var chunkStart = _this.metaPieceLength * index;

              _this.logger.log('chunkStart', chunkStart);

              var chunkEnd = chunkStart + _this.metaPieceLength;

              _this.logger.log('chunkEnd', chunkEnd);

              var chunk = (_a = _this.metadataBuffer) === null || _a === void 0 ? void 0 : _a.subarray(chunkStart, chunkEnd);

              _this.logger.log('chunk', chunk);

              _this.sendExtendedMessage([MetainfoFlags.piece, index, chunk]);
            };

            _this.onRecievedPiece = function (index, pieceBuf) {
              return __awaiter(_this, void 0, void 0, function () {
                var metainfo, nextPieceIndex;

                var _a;

                return __generator(this, function (_b) {
                  switch (_b.label) {
                    case 0:
                      if (pieceBuf.length <= 0) {
                        throw new Error('Nuhuh, dont like that');
                      }

                      if (!this.metaPieceLength || !this.metaPieceCount || !this.myBitfield) {
                        throw new Error('Cannot accept a fetch request when we havent handshaken');
                      }

                      if (!this.peerBitfield) {
                        throw new Error('Shits fucked');
                      }

                      this.logger.log('Recieved metadata piece', index, pieceBuf, (_a = this.peerBitfield) === null || _a === void 0 ? void 0 : _a.buffer.byteLength);

                      if (!this.reconstructedBuffer) {
                        this.reconstructedBuffer = Buffer.alloc(this.metaPieceCount * this.metaPieceLength);
                      }

                      pieceBuf.copy(this.reconstructedBuffer, index * this.metaPieceLength);
                      this.myBitfield.set(index);
                      if (!(index === this.metaPieceCount - 1)) return [3
                      /*break*/
                      , 2];
                      this.logger.log('GOT ALL PIECES! LETS CHECK VALIDITY');
                      metainfo = bencode_1["default"].decode(this.reconstructedBuffer);
                      return [4
                      /*yield*/
                      , this.isValidMetainfo(metainfo)];

                    case 1:
                      _b.sent();

                      this.sendExtendedMessage([MetainfoFlags.recieved_metainfo]);
                      this.metainfo = metainfo;
                      this.emit('ReceivedMetainfo', metainfo);
                      return [2
                      /*return*/
                      ];

                    case 2:
                      nextPieceIndex = index; // Keep checking for next piece index we dont have

                      while (this.myBitfield.get(nextPieceIndex) === true && nextPieceIndex <= this.metaPieceCount) {
                        nextPieceIndex++;
                      }

                      this.sendExtendedMessage([MetainfoFlags.fetch, nextPieceIndex]);
                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            };

            _this.isValidMetainfo = function (metainfo) {
              return __awaiter(_this, void 0, void 0, function () {
                var isValidSig;
                return __generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      if (!this.infoIdentifier) {
                        throw new Error('Need infoidentifier to create metadata extension');
                      }

                      if (metainfo.infohash.equals(Buffer.from(this.infoIdentifier))) {
                        this.logger.log('METAINFO GET! it was an info hash and it matches, now to calculate infohash and see if still matches');

                        if (this.isValidInfoHash(metainfo, this.infoIdentifier) === false) {
                          throw new Error('Something is fucked with the metainfo we recieved');
                        }

                        return [2
                        /*return*/
                        , true];
                      }

                      if (!(MetainfoFile_1.isSignedMetainfo(metainfo) && metainfo.infosig.equals(Buffer.from(this.infoIdentifier)))) return [3
                      /*break*/
                      , 2];
                      this.logger.log('SIGNED METAINFO GET! it was an info sig and it matches, now to calculate info hash and compare with infosig to see if its a valid signature');
                      return [4
                      /*yield*/
                      , this.isValidInfoSig(metainfo, this.infoIdentifier)];

                    case 1:
                      isValidSig = _a.sent();

                      if (isValidSig === false) {
                        throw new Error('Something is fucked with the metainfo we recieved');
                      }

                      this.logger.log('Signature matches infoIdentifier, this is a valid metainfo');
                      return [2
                      /*return*/
                      , true];

                    case 2:
                      return [2
                      /*return*/
                      , false];
                  }
                });
              });
            };

            _this.isValidInfoHash = function (metainfo, infoHash) {
              if (metainfo.infohash.equals(Buffer.from(infoHash)) === false) {
                return false;
              }

              var infoBuf = bencode_1["default"].encode(metainfo.info);

              var metainfoHashBuf = _this.hashService.hash(infoBuf, metainfo.info['piece hash algo']);

              if (metainfoHashBuf.equals(Buffer.from(infoHash)) === false) {
                return false;
              }

              return true;
            };

            _this.isValidInfoSig = function (metainfo, infoSig) {
              return __awaiter(_this, void 0, void 0, function () {
                var infoBuf, metainfoHashBuf;
                return __generator(this, function (_a) {
                  infoBuf = bencode_1["default"].encode(metainfo.info);
                  metainfoHashBuf = this.hashService.hash(infoBuf, metainfo.info['piece hash algo']);

                  if (metainfoHashBuf.equals(Buffer.from(metainfo.infohash)) === false) {
                    this.logger.warn('Calculated infohash doesnt match metainfo infohash');
                    return [2
                    /*return*/
                    , false];
                  }

                  return [2
                  /*return*/
                  , this.signingService.verify(metainfoHashBuf, Buffer.from(infoSig), Buffer.from(metainfo['pub key']), ISigningAlgorithm_1.SupportedSignatureAlgorithms[Buffer.from(metainfo['infosig algo']).toString()])];
                });
              });
            };

            _this.metainfo = metainfo;

            if (metainfo) {
              var metaBuffer = bencode_1["default"].encode(metainfo);
              _this.metaPieceLength = calculatePieceLength_1.calculatePieceLength(metaBuffer.length);
              var bufferChunks = chunkBuffer_1.chunkBuffer(metaBuffer, _this.metaPieceLength);
              _this.metaPieceCount = bufferChunks.length;
              _this._metadataBuffer = metaBuffer;
              _this.myBitfield = new bitfield_1["default"](_this.metaPieceCount);

              for (var index = 0; index < _this.metaPieceCount; index++) {
                _this.myBitfield.set(index);
              }
            }

            _this.logger.info(wire.wireName, metainfo === null || metainfo === void 0 ? void 0 : metainfo.infohash.toString('hex'), 'Created MetadataExtension');

            return _this;
          }

          Object.defineProperty(MetadataExtension.prototype, "metadataBuffer", {
            get: function get() {
              return this._metadataBuffer;
            },
            enumerable: false,
            configurable: true
          });

          MetadataExtension.prototype.onMetadataBitfieldRequested = function () {
            this.sendExtendedMessage([MetainfoFlags.bitfield, this.myBitfield, this.metaPieceCount, this.metaPieceLength]);
          };
          /**
           * Last step of the metadata handshake, sets the information we need to recieve the metainfo.
           * @param msg
           * @param pieceCount
           * @param metaPieceLength
           */


          MetadataExtension.prototype.onPeerMetadataBitfield = function (msg, pieceCount, metaPieceLength) {
            this.logger.log('onPeerMetadataBitfield msg', new bitfield_1["default"](msg.buffer, {
              grow: msg.grow
            }));
            this.peerBitfield = new bitfield_1["default"](msg.buffer, {
              grow: msg.grow
            });
            this.myBitfield = new bitfield_1["default"](pieceCount, {
              grow: msg.grow
            });
            this.metaPieceLength = metaPieceLength;
            this.metaPieceCount = pieceCount; // Get first bit we dont have but they do.

            this.sendExtendedMessage([MetainfoFlags.fetch, 0]);
          };

          Object.defineProperty(MetadataExtension.prototype, "infoIdentifier", {
            get: function get() {
              return this.infoId;
            },
            enumerable: false,
            configurable: true
          });
          MetadataExtension = __decorate([__param(3, tsyringe_1.inject('IHashService')), __param(4, tsyringe_1.inject('ISigningService')), __param(5, tsyringe_1.inject('ILogger')), __metadata("design:paramtypes", [bittorrent_protocol_1["default"], Buffer, Object, Object, Object, Object])], MetadataExtension);
          return MetadataExtension;
        }(bittorrent_protocol_1.EventExtension);

        exports.MetadataExtension = MetadataExtension;
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "../models/MetainfoFile": 432,
    "../services/interfaces/ISigningAlgorithm": 447,
    "../utils/calculatePieceLength": 453,
    "../utils/chunkBuffer": 454,
    "@firaenix/bittorrent-protocol": 3,
    "bencode": 48,
    "bitfield": 49,
    "buffer": 102,
    "tsyringe": 385
  }],
  431: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        "use strict";

        var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function (resolve) {
              resolve(value);
            });
          }

          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }

            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }

            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }

            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };

        var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
          var _ = {
            label: 0,
            sent: function sent() {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: []
          },
              f,
              y,
              t,
              g;
          return g = {
            next: verb(0),
            "throw": verb(1),
            "return": verb(2)
          }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
          }), g;

          function verb(n) {
            return function (v) {
              return step([n, v]);
            };
          }

          function step(op) {
            if (f) throw new TypeError("Generator is already executing.");

            while (_) {
              try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];

                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;

                  case 4:
                    _.label++;
                    return {
                      value: op[1],
                      done: false
                    };

                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;

                  case 7:
                    op = _.ops.pop();

                    _.trys.pop();

                    continue;

                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }

                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }

                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }

                    if (t && _.label < t[2]) {
                      _.label = t[2];

                      _.ops.push(op);

                      break;
                    }

                    if (t[2]) _.ops.pop();

                    _.trys.pop();

                    continue;
                }

                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            }

            if (op[0] & 5) throw op[1];
            return {
              value: op[0] ? op[1] : void 0,
              done: true
            };
          }
        };

        var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
          return mod && mod.__esModule ? mod : {
            "default": mod
          };
        };

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ED25519KeyPair = void 0;

        var supercop_wasm_1 = __importDefault(require("supercop.wasm"));

        var ED25519KeyPair =
        /** @class */
        function () {
          function ED25519KeyPair(publicKey, secretKey) {
            var _this = this;

            this.isValidKeyPair = function () {
              var msg = Buffer.from('TEST MESSAGE');
              var sig = supercop_wasm_1["default"].sign(msg, _this.publicKey, _this.secretKey);
              var isVerified = supercop_wasm_1["default"].verify(sig, msg, _this.publicKey);
              return isVerified;
            };

            this.publicKey = publicKey;
            this.secretKey = secretKey;

            if (this.isValidKeyPair() === false) {
              throw new Error('Not a valid keypair');
            }
          }

          ED25519KeyPair.create = function (publicKey, secretKey) {
            return __awaiter(void 0, void 0, void 0, function () {
              return __generator(this, function (_a) {
                return [2
                /*return*/
                , new Promise(function (resolve, reject) {
                  try {
                    supercop_wasm_1["default"].ready(function () {
                      resolve(new ED25519KeyPair(publicKey, secretKey));
                    });
                  } catch (error) {
                    reject(error);
                  }
                })];
              });
            });
          };

          return ED25519KeyPair;
        }();

        exports.ED25519KeyPair = ED25519KeyPair;
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "buffer": 102,
    "supercop.wasm": 365
  }],
  432: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isSignedMetainfo = void 0;

    function isSignedMetainfo(x) {
      return !!x['infosig'];
    }

    exports.isSignedMetainfo = isSignedMetainfo;
  }, {}],
  433: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        "use strict";

        var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
          return mod && mod.__esModule ? mod : {
            "default": mod
          };
        };

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SECP256K1KeyPair = void 0;

        var secp256k1_1 = __importDefault(require("secp256k1"));

        var SECP256K1KeyPair =
        /** @class */
        function () {
          function SECP256K1KeyPair(publicKey, secretKey) {
            var _this = this;

            this.isValidKeyPair = function () {
              try {
                var isValidPrivate = secp256k1_1["default"].privateKeyVerify(_this.secretKey);
                var isValidPublic = secp256k1_1["default"].publicKeyVerify(_this.publicKey);
                var testPubKey = Buffer.from(secp256k1_1["default"].publicKeyCreate(_this.secretKey));

                var isActualPubKey = _this.publicKey.equals(testPubKey);

                return isValidPrivate && isValidPublic && isActualPubKey;
              } catch (error) {
                console.error(error);
                return false;
              }
            };

            this.publicKey = publicKey;
            this.secretKey = secretKey;

            if (this.isValidKeyPair() === false) {
              throw new Error('Not a valid keypair');
            }
          }

          return SECP256K1KeyPair;
        }();

        exports.SECP256K1KeyPair = SECP256K1KeyPair;
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "buffer": 102,
    "secp256k1": 316
  }],
  434: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SupportedHashAlgorithms = void 0;
    var SupportedHashAlgorithms;

    (function (SupportedHashAlgorithms) {
      SupportedHashAlgorithms["sha1"] = "sha1";
      SupportedHashAlgorithms["sha256"] = "sha256";
    })(SupportedHashAlgorithms = exports.SupportedHashAlgorithms || (exports.SupportedHashAlgorithms = {}));
  }, {}],
  435: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        "use strict";

        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
          var c = arguments.length,
              r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
              d;
          if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
            if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
          }
          return c > 3 && r && Object.defineProperty(target, key, r), r;
        };

        var __metadata = void 0 && (void 0).__metadata || function (k, v) {
          if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
        };

        var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
          return function (target, key) {
            decorator(target, key, paramIndex);
          };
        };

        var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function (resolve) {
              resolve(value);
            });
          }

          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }

            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }

            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }

            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };

        var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
          var _ = {
            label: 0,
            sent: function sent() {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: []
          },
              f,
              y,
              t,
              g;
          return g = {
            next: verb(0),
            "throw": verb(1),
            "return": verb(2)
          }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
          }), g;

          function verb(n) {
            return function (v) {
              return step([n, v]);
            };
          }

          function step(op) {
            if (f) throw new TypeError("Generator is already executing.");

            while (_) {
              try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];

                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;

                  case 4:
                    _.label++;
                    return {
                      value: op[1],
                      done: false
                    };

                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;

                  case 7:
                    op = _.ops.pop();

                    _.trys.pop();

                    continue;

                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }

                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }

                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }

                    if (t && _.label < t[2]) {
                      _.label = t[2];

                      _.ops.push(op);

                      break;
                    }

                    if (t[2]) _.ops.pop();

                    _.trys.pop();

                    continue;
                }

                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            }

            if (op[0] & 5) throw op[1];
            return {
              value: op[0] ? op[1] : void 0,
              done: true
            };
          }
        };

        var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
          return mod && mod.__esModule ? mod : {
            "default": mod
          };
        };

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.DHTService = void 0;

        require("../typings/bittorrent-dht");

        var bittorrent_dht_1 = __importDefault(require("bittorrent-dht"));

        var tsyringe_1 = require("tsyringe");

        var ED25519SuperCopAlgorithm_1 = require("./signaturealgorithms/ED25519SuperCopAlgorithm");

        var DHTService =
        /** @class */
        function () {
          function DHTService(ed25519algo, hashService, logger) {
            var _this = this;

            this.ed25519algo = ed25519algo;
            this.hashService = hashService;
            this.logger = logger;
            /**
             *
             * @param {Buffer} key Hash of Public Key
             */

            this.get = function (key) {
              return new Promise(function (res, reject) {
                _this.dht.get(key, undefined, function (err, data) {
                  if (err) {
                    return reject(err);
                  }

                  if (!data) {
                    return reject(new Error('No data returned'));
                  }

                  return res(data);
                });
              });
            };

            this.subscribe = function (key, interval, cb) {
              var previousData = undefined;
              var currentInterval = setInterval(function () {
                return __awaiter(_this, void 0, void 0, function () {
                  var data, error_1;
                  return __generator(this, function (_a) {
                    switch (_a.label) {
                      case 0:
                        _a.trys.push([0, 2,, 3]);

                        return [4
                        /*yield*/
                        , this.get(key)];

                      case 1:
                        data = _a.sent();

                        if (previousData !== undefined && (data.sig.equals(previousData.sig) || data.v.equals(previousData.v))) {
                          return [2
                          /*return*/
                          ];
                        }

                        previousData = data;
                        cb(data, function () {
                          clearInterval(currentInterval);
                        });
                        return [3
                        /*break*/
                        , 3];

                      case 2:
                        error_1 = _a.sent();
                        this.logger.warn('Got error back from get', error_1);
                        return [3
                        /*break*/
                        , 3];

                      case 3:
                        return [2
                        /*return*/
                        ];
                    }
                  });
                });
              }, interval);
            };

            this.publish = function (keyPair, data, salt, seq) {
              return new Promise(function (res, reject) {
                try {
                  var dataBuf = Buffer.from(data);

                  _this.dht.put({
                    v: dataBuf,
                    k: keyPair.publicKey,
                    seq: seq,
                    sign: function sign(buf) {
                      var signedData = _this.ed25519algo.signSync(buf, keyPair.secretKey, keyPair.publicKey);

                      return signedData;
                    },
                    salt: salt
                  }, function (err, hash) {
                    if (err) {
                      return reject(err);
                    }

                    return res(hash);
                  });
                } catch (error) {
                  _this.logger.error(error);

                  reject(error);
                }
              });
            };

            this.destroy = function () {
              return new Promise(function (res) {
                _this.dht.destroy(res);
              });
            };

            try {
              this.dht = new bittorrent_dht_1["default"]({
                host: true,
                verify: function verify(sig, msg, pubkey) {
                  return _this.ed25519algo.verifySync(msg, sig, pubkey);
                } // hash: (buf) => this.hashService.hash(buf, SupportedHashAlgorithms.sha256)

              });
              this.dht.listen(function () {});
            } catch (error) {
              console.error(error);
              throw error;
            }
          }

          DHTService = __decorate([tsyringe_1.injectable(), __param(1, tsyringe_1.inject('IHashService')), __param(2, tsyringe_1.inject('ILogger')), __metadata("design:paramtypes", [ED25519SuperCopAlgorithm_1.ED25519SuperCopAlgorithm, Object, Object])], DHTService);
          return DHTService;
        }();

        exports.DHTService = DHTService;
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "../typings/bittorrent-dht": 452,
    "./signaturealgorithms/ED25519SuperCopAlgorithm": 450,
    "bittorrent-dht": 51,
    "buffer": 102,
    "tsyringe": 385
  }],
  436: [function (require, module, exports) {
    "use strict";

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }

    var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
      var c = arguments.length,
          r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
          d;
      if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      }
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    var __metadata = void 0 && (void 0).__metadata || function (k, v) {
      if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };

    var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
      return function (target, key) {
        decorator(target, key, paramIndex);
      };
    };

    var __values = void 0 && (void 0).__values || function (o) {
      var s = typeof Symbol === "function" && Symbol.iterator,
          m = s && o[s],
          i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function next() {
          if (o && i >= o.length) o = void 0;
          return {
            value: o && o[i++],
            done: !o
          };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };

    var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.HashService = exports.CryptoHash = void 0;

    var crypto_1 = __importDefault(require("crypto"));

    var tsyringe_1 = require("tsyringe");

    exports.CryptoHash = function (algo) {
      return function (buf) {
        var hash = crypto_1["default"].createHash(algo);
        return hash.update(buf).digest();
      };
    };

    var HashService =
    /** @class */
    function () {
      function HashService(hashAlgos) {
        var e_1, _a;

        var _this = this;

        this.strategies = {};

        this.hash = function (buf, algorithm) {
          return _this.strategies[algorithm].hash(buf);
        };

        try {
          for (var hashAlgos_1 = __values(hashAlgos), hashAlgos_1_1 = hashAlgos_1.next(); !hashAlgos_1_1.done; hashAlgos_1_1 = hashAlgos_1.next()) {
            var algo = hashAlgos_1_1.value;
            this.strategies[algo.algorithm] = algo;
          }
        } catch (e_1_1) {
          e_1 = {
            error: e_1_1
          };
        } finally {
          try {
            if (hashAlgos_1_1 && !hashAlgos_1_1.done && (_a = hashAlgos_1["return"])) _a.call(hashAlgos_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      }

      HashService = __decorate([tsyringe_1.singleton(), __param(0, tsyringe_1.injectAll('IHashAlgorithm')), __metadata("design:paramtypes", [Array])], HashService);
      return HashService;
    }();

    exports.HashService = HashService;
  }, {
    "crypto": 120,
    "tsyringe": 385
  }],
  437: [function (require, module, exports) {
    (function (process) {
      (function () {
        "use strict";

        var __read = void 0 && (void 0).__read || function (o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m) return o;
          var i = m.call(o),
              r,
              ar = [],
              e;

          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
              ar.push(r.value);
            }
          } catch (error) {
            e = {
              error: error
            };
          } finally {
            try {
              if (r && !r.done && (m = i["return"])) m.call(i);
            } finally {
              if (e) throw e.error;
            }
          }

          return ar;
        };

        var __spread = void 0 && (void 0).__spread || function () {
          for (var ar = [], i = 0; i < arguments.length; i++) {
            ar = ar.concat(__read(arguments[i]));
          }

          return ar;
        };

        var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
          return mod && mod.__esModule ? mod : {
            "default": mod
          };
        };

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ConsoleLogger = void 0;

        var chalk_1 = __importDefault(require("chalk"));

        var LogLevels;

        (function (LogLevels) {
          LogLevels[LogLevels["Trace"] = 0] = "Trace";
          LogLevels[LogLevels["Debug"] = 1] = "Debug";
          LogLevels[LogLevels["Info"] = 2] = "Info";
          LogLevels[LogLevels["Warn"] = 3] = "Warn";
          LogLevels[LogLevels["Error"] = 4] = "Error";
          LogLevels[LogLevels["Fatal"] = 5] = "Fatal";
        })(LogLevels || (LogLevels = {}));

        var ConsoleLogger =
        /** @class */
        function () {
          function ConsoleLogger() {
            this.minLevel = LogLevels.Trace;
          }

          ConsoleLogger.prototype.trace = function (message) {
            var optionalParams = [];

            for (var _i = 1; _i < arguments.length; _i++) {
              optionalParams[_i - 1] = arguments[_i];
            }

            if (this.minLevel > LogLevels.Trace) {
              return;
            }

            console.log.apply(console, __spread([chalk_1["default"].greenBright("[TRACE] - " + message)], optionalParams));
          };

          ConsoleLogger.prototype.debug = function (message) {
            var optionalParams = [];

            for (var _i = 1; _i < arguments.length; _i++) {
              optionalParams[_i - 1] = arguments[_i];
            }

            if (this.minLevel > LogLevels.Debug) {
              return;
            }

            console.log.apply(console, __spread([chalk_1["default"].blue("[DEBUG] - " + message)], optionalParams));
          };

          ConsoleLogger.prototype.log = function (message) {
            var optionalParams = [];

            for (var _i = 1; _i < arguments.length; _i++) {
              optionalParams[_i - 1] = arguments[_i];
            }

            this.debug.apply(this, __spread([message], optionalParams));
          };

          ConsoleLogger.prototype.info = function (message) {
            var optionalParams = [];

            for (var _i = 1; _i < arguments.length; _i++) {
              optionalParams[_i - 1] = arguments[_i];
            }

            if (this.minLevel > LogLevels.Info) {
              return;
            }

            console.log.apply(console, __spread([chalk_1["default"].cyan("[INFO] - " + message)], optionalParams));
          };

          ConsoleLogger.prototype.warn = function (message) {
            var optionalParams = [];

            for (var _i = 1; _i < arguments.length; _i++) {
              optionalParams[_i - 1] = arguments[_i];
            }

            if (this.minLevel > LogLevels.Warn) {
              return;
            }

            console.log.apply(console, __spread([chalk_1["default"].yellow("[WARN] - " + message)], optionalParams));
          };

          ConsoleLogger.prototype.error = function (message) {
            var optionalParams = [];

            for (var _i = 1; _i < arguments.length; _i++) {
              optionalParams[_i - 1] = arguments[_i];
            }

            if (this.minLevel > LogLevels.Error) {
              return;
            }

            console.error.apply(console, __spread([chalk_1["default"].redBright("[ERROR] - " + message)], optionalParams));
          };

          ConsoleLogger.prototype.fatal = function (message) {
            var optionalParams = [];

            for (var _i = 1; _i < arguments.length; _i++) {
              optionalParams[_i - 1] = arguments[_i];
            }

            if (this.minLevel > LogLevels.Fatal) {
              return;
            }

            console.error.apply(console, __spread([chalk_1["default"].bgRedBright("[FATAL] - " + message)], optionalParams));
            process.exit(-1);
          };

          return ConsoleLogger;
        }();

        exports.ConsoleLogger = ConsoleLogger;
      }).call(this);
    }).call(this, require('_process'));
  }, {
    "_process": 276,
    "chalk": 103
  }],
  438: [function (require, module, exports) {
    "use strict";

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }

    var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
      var c = arguments.length,
          r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
          d;
      if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      }
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    var __metadata = void 0 && (void 0).__metadata || function (k, v) {
      if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MetaInfoService = void 0;

    var tsyringe_1 = require("tsyringe");

    var MetainfoFile_1 = require("../models/MetainfoFile");
    /**
     * Just a wrapper container for storing request level configuration.
     * eg. MetaInfo, InfoHash
     */


    var MetaInfoService =
    /** @class */
    function () {
      function MetaInfoService(metainfo, fileChunks) {
        this.fileChunks = fileChunks;
        this.updatedSequence = 0;
        this.metainfo = metainfo;
      }

      Object.defineProperty(MetaInfoService.prototype, "metainfo", {
        get: function get() {
          return this._metainfo;
        },
        set: function set(metainfo) {
          this._metainfo = metainfo;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MetaInfoService.prototype, "infoIdentifier", {
        get: function get() {
          var _a;

          return ((_a = this.infoSig) === null || _a === void 0 ? void 0 : _a.sig) || this.infoHash;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MetaInfoService.prototype, "infoHash", {
        get: function get() {
          var _a;

          return (_a = this._metainfo) === null || _a === void 0 ? void 0 : _a.infohash;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MetaInfoService.prototype, "infoSig", {
        get: function get() {
          if (!this._metainfo) {
            return undefined;
          }

          if (!MetainfoFile_1.isSignedMetainfo(this._metainfo)) {
            return undefined;
          }

          return {
            sig: this._metainfo.infosig,
            algo: this._metainfo['infosig algo']
          };
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MetaInfoService.prototype, "pieceCount", {
        get: function get() {
          var _a;

          return (_a = this._metainfo) === null || _a === void 0 ? void 0 : _a.info.pieces.length;
        },
        enumerable: false,
        configurable: true
      });
      MetaInfoService = __decorate([tsyringe_1.injectable(), tsyringe_1.scoped(tsyringe_1.Lifecycle.ResolutionScoped), __metadata("design:paramtypes", [Object, Array])], MetaInfoService);
      return MetaInfoService;
    }();

    exports.MetaInfoService = MetaInfoService;
  }, {
    "../models/MetainfoFile": 432,
    "tsyringe": 385
  }],
  439: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        "use strict";

        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        var __extends = void 0 && (void 0).__extends || function () {
          var _extendStatics = function extendStatics(d, b) {
            _extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
              }
            };

            return _extendStatics(d, b);
          };

          return function (d, b) {
            _extendStatics(d, b);

            function __() {
              this.constructor = d;
            }

            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();

        var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
          var c = arguments.length,
              r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
              d;
          if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
            if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
          }
          return c > 3 && r && Object.defineProperty(target, key, r), r;
        };

        var __metadata = void 0 && (void 0).__metadata || function (k, v) {
          if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
        };

        var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
          return function (target, key) {
            decorator(target, key, paramIndex);
          };
        };

        var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function (resolve) {
              resolve(value);
            });
          }

          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }

            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }

            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }

            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };

        var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
          var _ = {
            label: 0,
            sent: function sent() {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: []
          },
              f,
              y,
              t,
              g;
          return g = {
            next: verb(0),
            "throw": verb(1),
            "return": verb(2)
          }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
          }), g;

          function verb(n) {
            return function (v) {
              return step([n, v]);
            };
          }

          function step(op) {
            if (f) throw new TypeError("Generator is already executing.");

            while (_) {
              try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];

                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;

                  case 4:
                    _.label++;
                    return {
                      value: op[1],
                      done: false
                    };

                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;

                  case 7:
                    op = _.ops.pop();

                    _.trys.pop();

                    continue;

                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }

                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }

                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }

                    if (t && _.label < t[2]) {
                      _.label = t[2];

                      _.ops.push(op);

                      break;
                    }

                    if (t[2]) _.ops.pop();

                    _.trys.pop();

                    continue;
                }

                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            }

            if (op[0] & 5) throw op[1];
            return {
              value: op[0] ? op[1] : void 0,
              done: true
            };
          }
        };

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Peer = exports.PeerEvents = void 0;

        var bittorrent_protocol_1 = require("@firaenix/bittorrent-protocol");

        var tiny_typed_emitter_1 = require("tiny-typed-emitter");

        var tsyringe_1 = require("tsyringe");

        var PeerEvents;

        (function (PeerEvents) {
          PeerEvents["need_bitfield"] = "need:bitfield";
          PeerEvents["got_piece"] = "on:piece";
          PeerEvents["got_bitfield"] = "on:bitfield";
          PeerEvents["got_request"] = "on:request";
          PeerEvents["error"] = "error";
          PeerEvents["close"] = "close";
        })(PeerEvents = exports.PeerEvents || (exports.PeerEvents = {}));
        /**
         * Stores stateful information about a peer while also handling the socket connections over the wire.
         *
         * Provides a wrapper around Wire to safely handle data flow.
         */


        var Peer =
        /** @class */
        function (_super) {
          __extends(Peer, _super);

          function Peer(wire, infoIdentifier, myPeerId, logger) {
            var _this = _super.call(this) || this;

            _this.wire = wire;
            _this.infoIdentifier = infoIdentifier;
            _this.myPeerId = myPeerId;
            _this.logger = logger;

            _this.onHave = function (index) {
              var _a;

              _this.logger.log(_this.wire.wireName, 'Peer said that they have this piece', index);

              (_a = _this.bitfield) === null || _a === void 0 ? void 0 : _a.set(index);
            };

            _this.onPiece = function (index, offset, pieceBuf) {
              _this.emit(PeerEvents.got_piece, index, offset, pieceBuf);
            };

            _this.onWireClosed = function () {
              _this.emit(PeerEvents.close);
            };

            _this.onError = function (error) {
              _this.emit(PeerEvents.error, error);
            };

            _this.onBitfield = function (bitfield) {
              _this.bitfield = bitfield;

              _this.emit(PeerEvents.got_bitfield, bitfield);
            };

            _this.onRequest = function (index, offset, length) {
              _this.logger.warn(_this.wire.wireName, 'Got a request for', index, offset, length);

              _this.emit(PeerEvents.got_request, index, offset, length);
            };

            _this.onExtendedHandshake = function (extensionName, extensions) {
              _this.logger.log(_this.wire.wireName, 'Incoming extended message from ', extensionName, 'Our peerId:', _this.myPeerId.toString('hex'), 'Their PeerId:', _this.wire.peerId);

              _this.logger.log(_this.wire.wireName, 'Supported extensions: ', extensions);

              if (_this.myPeerId.toString('hex') === _this.wire.peerId) {
                _this.logger.warn('Dont want to connect to myself, thats weird.');

                _this.wire.end();

                return;
              } // Only want to request bitfield after handshake


              if (extensionName === 'handshake') {
                _this.wire.unchoke();

                _this.emit(PeerEvents.need_bitfield, function (bitfield) {
                  _this.wire.bitfield(bitfield);
                });
              }
            };

            _this.destroy = function () {
              _this.wire.destroy();
            };

            _this.request = function (index, offset, length) {
              return __awaiter(_this, void 0, void 0, function () {
                var _this = this;

                return __generator(this, function (_a) {
                  return [2
                  /*return*/
                  , new Promise(function (resolve, reject) {
                    _this.wire.request(index, offset, length, function (err, buffer) {
                      if (err !== null && err !== undefined) {
                        return reject(err);
                      }

                      if (buffer === null || buffer === undefined) {
                        return reject(new Error('No buffer returned from request'));
                      }

                      return resolve(buffer);
                    });
                  })];
                });
              });
            };

            _this.cancel = function (index, offset, length) {
              return _this.wire.cancel(index, offset, length);
            };

            _this.have = function (index) {
              _this.wire.have(index);
            };

            _this.isClosed = function () {
              return _this.wire._finished;
            };

            _this.setUninterested = function () {
              return _this.wire.uninterested();
            };

            _this.sendBitfield = function (bitfield) {
              return _this.wire.bitfield(bitfield);
            };

            _this.sendPiece = function (index, offset, pieceBuf) {
              return _this.wire.piece(index, offset, pieceBuf);
            };

            _this.unchoke = function () {
              return _this.wire.unchoke();
            };
            /**
             * Checks if the peer has any pieces that are missing from the given bitfield.
             *
             * Like a shopping cart, go to supermarket to get pieces they have but you do not.
             *
             * TODO: Get a better name for this method
             * @param bitfield
             */


            _this.getIndexesThatDontExistInGivenBitfield = function (incompleteBitfield, totalPiecesCount) {
              if (_this.bitfield === undefined) {
                return [];
              }

              var haveIndicies = [];

              for (var index = 0; index < totalPiecesCount; index++) {
                // If they dont have the piece, I dont care
                if (_this.bitfield.get(index) === false) {
                  continue;
                } // If the index exists in the incompleteBitfield, I dont care


                if (incompleteBitfield.get(index) === true) {
                  continue;
                }

                haveIndicies.push(index);
              }

              return haveIndicies;
            };

            _this.wire.on('error', _this.onError); // 5. Recieve the actual data pieces


            _this.wire.on('piece', _this.onPiece); // 4. Recieve have requests


            _this.wire.on('request', _this.onRequest); // 3. On recieved Bitfield, go through it and remember the pieces that the peer has.
            // Request all the pieces that the peer has but you dont.


            _this.wire.on('bitfield', _this.onBitfield); // 2. On recieved Extended Handshake (normal handshake follows up with extended handshake), send Bitfield


            _this.wire.on('extended_handshake', _this.onExtendedHandshake);

            _this.wire.on('close', _this.onWireClosed);

            _this.wire.on('have', _this.onHave);

            _this.wire.setKeepAlive(true); // 1. Send Handshake


            _this.wire.handshake(_this.infoIdentifier, _this.myPeerId);

            return _this;
          }

          Object.defineProperty(Peer.prototype, "peerId", {
            get: function get() {
              return this.wire.peerId;
            },
            enumerable: false,
            configurable: true
          });
          Peer = __decorate([__param(3, tsyringe_1.inject('ILogger')), __metadata("design:paramtypes", [bittorrent_protocol_1.Wire, Buffer, Buffer, Object])], Peer);
          return Peer;
        }(tiny_typed_emitter_1.TypedEmitter);

        exports.Peer = Peer;
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "@firaenix/bittorrent-protocol": 3,
    "buffer": 102,
    "tiny-typed-emitter": 369,
    "tsyringe": 385
  }],
  440: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        "use strict";

        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        var __extends = void 0 && (void 0).__extends || function () {
          var _extendStatics = function extendStatics(d, b) {
            _extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
              }
            };

            return _extendStatics(d, b);
          };

          return function (d, b) {
            _extendStatics(d, b);

            function __() {
              this.constructor = d;
            }

            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();

        var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
          var c = arguments.length,
              r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
              d;
          if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
            if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
          }
          return c > 3 && r && Object.defineProperty(target, key, r), r;
        };

        var __metadata = void 0 && (void 0).__metadata || function (k, v) {
          if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
        };

        var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
          return function (target, key) {
            decorator(target, key, paramIndex);
          };
        };

        var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function (resolve) {
              resolve(value);
            });
          }

          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }

            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }

            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }

            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };

        var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
          var _ = {
            label: 0,
            sent: function sent() {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: []
          },
              f,
              y,
              t,
              g;
          return g = {
            next: verb(0),
            "throw": verb(1),
            "return": verb(2)
          }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
          }), g;

          function verb(n) {
            return function (v) {
              return step([n, v]);
            };
          }

          function step(op) {
            if (f) throw new TypeError("Generator is already executing.");

            while (_) {
              try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];

                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;

                  case 4:
                    _.label++;
                    return {
                      value: op[1],
                      done: false
                    };

                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;

                  case 7:
                    op = _.ops.pop();

                    _.trys.pop();

                    continue;

                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }

                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }

                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }

                    if (t && _.label < t[2]) {
                      _.label = t[2];

                      _.ops.push(op);

                      break;
                    }

                    if (t[2]) _.ops.pop();

                    _.trys.pop();

                    continue;
                }

                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            }

            if (op[0] & 5) throw op[1];
            return {
              value: op[0] ? op[1] : void 0,
              done: true
            };
          }
        };

        var __values = void 0 && (void 0).__values || function (o) {
          var s = typeof Symbol === "function" && Symbol.iterator,
              m = s && o[s],
              i = 0;
          if (m) return m.call(o);
          if (o && typeof o.length === "number") return {
            next: function next() {
              if (o && i >= o.length) o = void 0;
              return {
                value: o && o[i++],
                done: !o
              };
            }
          };
          throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PeerManager = exports.PeerManagerEvents = void 0;

        var tiny_typed_emitter_1 = require("tiny-typed-emitter");

        var tsyringe_1 = require("tsyringe");

        var uuid_1 = require("uuid");

        var SupportedHashAlgorithms_1 = require("../models/SupportedHashAlgorithms");

        var MetaInfoService_1 = require("./MetaInfoService");

        var Peer_1 = require("./Peer");

        var PieceManager_1 = require("./PieceManager");

        var PeerManagerEvents;

        (function (PeerManagerEvents) {
          PeerManagerEvents["got_piece"] = "on:piece";
          PeerManagerEvents["got_bitfield"] = "on:bitfield";
          PeerManagerEvents["got_request"] = "on:request";
        })(PeerManagerEvents = exports.PeerManagerEvents || (exports.PeerManagerEvents = {}));

        var PeerManager =
        /** @class */
        function (_super) {
          __extends(PeerManager, _super);

          function PeerManager(hashService, peerDiscoveryStrategies, metainfoService, pieceManager, extensions, logger) {
            var e_1, _a;

            var _this = _super.call(this) || this;

            _this.hashService = hashService;
            _this.peerDiscoveryStrategies = peerDiscoveryStrategies;
            _this.metainfoService = metainfoService;
            _this.pieceManager = pieceManager;
            _this.extensions = extensions;
            _this.logger = logger;
            _this.peers = [];

            _this.searchByInfoIdentifier = function (infoIdentifier) {
              var e_2, _a;

              var infoHashHash = _this.hashService.hash(infoIdentifier, SupportedHashAlgorithms_1.SupportedHashAlgorithms.sha256);

              try {
                for (var _b = __values(_this.peerDiscoveryStrategies), _c = _b.next(); !_c.done; _c = _b.next()) {
                  var strategy = _c.value;
                  strategy.startDiscovery(infoHashHash);
                }
              } catch (e_2_1) {
                e_2 = {
                  error: e_2_1
                };
              } finally {
                try {
                  if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
                } finally {
                  if (e_2) throw e_2.error;
                }
              }
            };

            _this.stopDiscovery = function (infoIdentifier) {
              return __awaiter(_this, void 0, void 0, function () {
                var infoHashHash;
                return __generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      infoHashHash = this.hashService.hash(infoIdentifier, SupportedHashAlgorithms_1.SupportedHashAlgorithms.sha256);
                      return [4
                      /*yield*/
                      , Promise.all(this.peerDiscoveryStrategies.map(function (x) {
                        return x.stopDiscovery(infoHashHash);
                      }))];

                    case 1:
                      _a.sent();

                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            };
            /**
             * Broadcasts to all peers that we are no longer interested in downloading.
             */


            _this.setUninterested = function () {
              var e_3, _a;

              try {
                for (var _b = __values(_this.peers), _c = _b.next(); !_c.done; _c = _b.next()) {
                  var peer = _c.value;
                  peer.setUninterested();
                }
              } catch (e_3_1) {
                e_3 = {
                  error: e_3_1
                };
              } finally {
                try {
                  if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
                } finally {
                  if (e_3) throw e_3.error;
                }
              }
            };

            _this.have = function (index) {
              var e_4, _a;

              try {
                for (var _b = __values(_this.peers), _c = _b.next(); !_c.done; _c = _b.next()) {
                  var peer = _c.value;
                  peer.have(index);
                }
              } catch (e_4_1) {
                e_4 = {
                  error: e_4_1
                };
              } finally {
                try {
                  if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
                } finally {
                  if (e_4) throw e_4.error;
                }
              }
            };

            _this.cancel = function (index, offset, length) {
              var e_5, _a;

              try {
                for (var _b = __values(_this.peers), _c = _b.next(); !_c.done; _c = _b.next()) {
                  var peer = _c.value;
                  peer.cancel(index, offset, length);
                }
              } catch (e_5_1) {
                e_5 = {
                  error: e_5_1
                };
              } finally {
                try {
                  if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
                } finally {
                  if (e_5) throw e_5.error;
                }
              }
            };

            _this.broadcastBitfield = function (bitfield) {
              var e_6, _a;

              try {
                for (var _b = __values(_this.peers), _c = _b.next(); !_c.done; _c = _b.next()) {
                  var peer = _c.value;
                  peer.sendBitfield(bitfield);
                }
              } catch (e_6_1) {
                e_6 = {
                  error: e_6_1
                };
              } finally {
                try {
                  if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
                } finally {
                  if (e_6) throw e_6.error;
                }
              }
            };

            _this.getPeerThatHasPiece = function (pieceIndex) {
              var e_7, _a;

              var _b;

              try {
                for (var _c = __values(_this.peers), _d = _c.next(); !_d.done; _d = _c.next()) {
                  var peer = _d.value;

                  if (!((_b = peer.bitfield) === null || _b === void 0 ? void 0 : _b.get(pieceIndex))) {
                    continue;
                  }

                  return peer;
                }
              } catch (e_7_1) {
                e_7 = {
                  error: e_7_1
                };
              } finally {
                try {
                  if (_d && !_d.done && (_a = _c["return"])) _a.call(_c);
                } finally {
                  if (e_7) throw e_7.error;
                }
              }

              return undefined;
            };

            _this.requestPieceAsync = function (index, offset, length) {
              return __awaiter(_this, void 0, void 0, function () {
                var peer;
                return __generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      // Smartly find a peer that does have the piece we need
                      this.logger.warn('NEED TO FIND SMARTER WAY OF REQUESTING PIECES!');
                      peer = this.peers.find(function (x) {
                        var _a;

                        return ((_a = x.bitfield) === null || _a === void 0 ? void 0 : _a.get(index)) !== undefined;
                      });

                      if (!peer) {
                        throw new Error("Can't find a peer with that piece");
                      }

                      return [4
                      /*yield*/
                      , peer.request(index, offset, length)];

                    case 1:
                      _a.sent();

                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            };

            _this.onWireConnected = function (connectedWire, infoIdentifier) {
              var e_8, _a;

              var _loop_1 = function _loop_1(extension) {
                connectedWire.use(function (w) {
                  return extension(w, infoIdentifier, _this.metainfoService.metainfo);
                });
              };

              try {
                for (var _b = __values(_this.extensions), _c = _b.next(); !_c.done; _c = _b.next()) {
                  var extension = _c.value;

                  _loop_1(extension);
                }
              } catch (e_8_1) {
                e_8 = {
                  error: e_8_1
                };
              } finally {
                try {
                  if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
                } finally {
                  if (e_8) throw e_8.error;
                }
              }

              var peer = new Peer_1.Peer(connectedWire, infoIdentifier, _this.peerId, _this.logger);

              _this.addPeer(peer);
            };

            _this.addPeer = function (peer) {
              peer.on(Peer_1.PeerEvents.got_piece, _this.onPiece);
              peer.on(Peer_1.PeerEvents.got_bitfield, _this.onBitfield(peer));
              peer.on(Peer_1.PeerEvents.got_request, _this.onRequest(peer));
              peer.on(Peer_1.PeerEvents.need_bitfield, function (cb) {
                cb(_this.pieceManager.getBitfield());
              });

              var peerIndex = _this.peers.push(peer);

              peer.on(Peer_1.PeerEvents.close, function () {
                _this.peers.splice(peerIndex, 1);
              });
            };

            _this.onPiece = function (index, offset, pieceBuf) {
              return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                  this.emit(PeerManagerEvents.got_piece, index, offset, pieceBuf);
                  return [2
                  /*return*/
                  ];
                });
              });
            };

            _this.onBitfield = function (peer) {
              return function (recievedBitfield) {
                _this.emit(PeerManagerEvents.got_bitfield, peer, recievedBitfield);
              };
            };

            _this.onRequest = function (peer) {
              return function (index, offset, length) {
                _this.logger.log('PeerManager on request', index, offset, length);

                _this.emit(PeerManagerEvents.got_request, peer, index, offset, length);
              };
            };

            _this.peerId = Buffer.from(_this.hashService.hash(Buffer.from(uuid_1.v4()), SupportedHashAlgorithms_1.SupportedHashAlgorithms.sha1));

            _this.logger.log('PEER MANAGER PEERID', _this.peerId);

            try {
              for (var peerDiscoveryStrategies_1 = __values(peerDiscoveryStrategies), peerDiscoveryStrategies_1_1 = peerDiscoveryStrategies_1.next(); !peerDiscoveryStrategies_1_1.done; peerDiscoveryStrategies_1_1 = peerDiscoveryStrategies_1.next()) {
                var strategy = peerDiscoveryStrategies_1_1.value;
                strategy.on('found', _this.onWireConnected);
                strategy.on('got_update', function (key) {// this.logger.info(strategy.name, 'Updated', key);
                });
              }
            } catch (e_1_1) {
              e_1 = {
                error: e_1_1
              };
            } finally {
              try {
                if (peerDiscoveryStrategies_1_1 && !peerDiscoveryStrategies_1_1.done && (_a = peerDiscoveryStrategies_1["return"])) _a.call(peerDiscoveryStrategies_1);
              } finally {
                if (e_1) throw e_1.error;
              }
            }

            return _this;
          }

          PeerManager = __decorate([tsyringe_1.injectable(), __param(0, tsyringe_1.inject('IHashService')), __param(1, tsyringe_1.injectAll('IPeerStrategy')), __param(2, tsyringe_1.inject(MetaInfoService_1.MetaInfoService)), __param(4, tsyringe_1.injectAll('IExtension')), __param(5, tsyringe_1.inject('ILogger')), __metadata("design:paramtypes", [Object, Array, MetaInfoService_1.MetaInfoService, PieceManager_1.PieceManager, Array, Object])], PeerManager);
          return PeerManager;
        }(tiny_typed_emitter_1.TypedEmitter);

        exports.PeerManager = PeerManager;
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "../models/SupportedHashAlgorithms": 434,
    "./MetaInfoService": 438,
    "./Peer": 439,
    "./PieceManager": 441,
    "buffer": 102,
    "tiny-typed-emitter": 369,
    "tsyringe": 385,
    "uuid": 404
  }],
  441: [function (require, module, exports) {
    "use strict";

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }

    var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
      var c = arguments.length,
          r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
          d;
      if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      }
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    var __metadata = void 0 && (void 0).__metadata || function (k, v) {
      if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };

    var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
      return function (target, key) {
        decorator(target, key, paramIndex);
      };
    };

    var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PieceManager = void 0;

    var bitfield_1 = __importDefault(require("bitfield"));

    var tsyringe_1 = require("tsyringe");

    var MetaInfoService_1 = require("./MetaInfoService");
    /**
     * Responsible for managing the Bitfield and Piece Buffers.
     * One of these will exist per torrent.
     * This object will be available globally for a Peer and a Torrent Manager, allows us to update a value in one place and everyone has access to it.
     */


    var PieceManager =
    /** @class */
    function () {
      function PieceManager(metainfoService, logger) {
        var _this = this;

        this.metainfoService = metainfoService;
        this.logger = logger;
        this.peerBitfields = {};

        this.clearPieces = function () {
          _this.bitfield = new bitfield_1["default"]();
          _this.metainfoService.fileChunks = [];
        };

        this.addPeerBitfield = function (peerId, recievedBitfield) {
          _this.peerBitfields[peerId] = recievedBitfield;
        };

        this.hasPiece = function (index) {
          return _this.bitfield.get(index);
        };

        this.getBitfield = function () {
          return _this.bitfield;
        };

        this.getNextNeededPiece = function (excluding) {
          if (excluding === void 0) {
            excluding = [];
          }

          if (!_this.metainfoService.metainfo) {
            throw new Error('Cant choose next piece, got no metainfo');
          }

          var metainfo = _this.metainfoService.metainfo;
          var pieces = _this.metainfoService.metainfo.info.pieces;
          var pieceIndex = pieces.findIndex(function (_, index) {
            return !_this.hasPiece(index) && !excluding.includes(index);
          });
          var pieceLength = metainfo.info['piece length']; // If last piece, calculate what the correct offset is.

          if (pieceIndex === pieces.length - 1) {
            var totalfileLength = metainfo.info.files.map(function (x) {
              return x.length;
            }).reduce(function (p, c) {
              return p + c;
            });
            pieceLength = totalfileLength % pieceLength;
          }

          return [pieceIndex, metainfo.info['piece length'] * pieceIndex, pieceLength];
        };

        this.getPiece = function (index) {
          if (!_this.hasPiece(index)) {
            throw new Error("I dont have the piece you want: " + index);
          }

          var pieceBuffer = _this.metainfoService.fileChunks[index];

          if (!pieceBuffer) {
            _this.bitfield.set(index, false);

            throw new Error("I dont have the piece you want: " + index);
          }

          return _this.metainfoService.fileChunks[index];
        };

        this.setPiece = function (index, pieceBuffer) {
          if (!pieceBuffer) {
            throw new Error('No piece was specified');
          }

          if (!_this.metainfoService.metainfo) {
            throw new Error('Metainfo must not be undefined so we can set a piece');
          }

          _this.bitfield.set(index, true);

          _this.metainfoService.fileChunks.splice(index, 0, pieceBuffer);
        };

        this.getPieceCount = function () {
          return _this.metainfoService.fileChunks.length;
        };

        logger.info('PieceManager being created');

        if (metainfoService.pieceCount === undefined) {
          throw new Error('metainfoService.pieceCount === undefined');
        }

        this.bitfield = new bitfield_1["default"](metainfoService.pieceCount);

        for (var i = 0; i <= metainfoService.fileChunks.length; i++) {
          if (!this.metainfoService.fileChunks[i]) {
            continue;
          }

          this.bitfield.set(i, true);
        }
      }

      PieceManager = __decorate([tsyringe_1.injectable(), __param(1, tsyringe_1.inject('ILogger')), __metadata("design:paramtypes", [MetaInfoService_1.MetaInfoService, Object])], PieceManager);
      return PieceManager;
    }();

    exports.PieceManager = PieceManager;
  }, {
    "./MetaInfoService": 438,
    "bitfield": 49,
    "tsyringe": 385
  }],
  442: [function (require, module, exports) {
    "use strict";

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }

    var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
      var c = arguments.length,
          r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
          d;
      if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      }
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    var __metadata = void 0 && (void 0).__metadata || function (k, v) {
      if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };

    var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
      return function (target, key) {
        decorator(target, key, paramIndex);
      };
    };

    var __values = void 0 && (void 0).__values || function (o) {
      var s = typeof Symbol === "function" && Symbol.iterator,
          m = s && o[s],
          i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function next() {
          if (o && i >= o.length) o = void 0;
          return {
            value: o && o[i++],
            done: !o
          };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SigningService = void 0;

    var tsyringe_1 = require("tsyringe");

    var SigningService =
    /** @class */
    function () {
      function SigningService(signingAlgos) {
        var e_1, _a;

        this.strategies = {};

        try {
          for (var signingAlgos_1 = __values(signingAlgos), signingAlgos_1_1 = signingAlgos_1.next(); !signingAlgos_1_1.done; signingAlgos_1_1 = signingAlgos_1.next()) {
            var algo = signingAlgos_1_1.value;
            this.strategies[algo.algorithm] = algo;
          }
        } catch (e_1_1) {
          e_1 = {
            error: e_1_1
          };
        } finally {
          try {
            if (signingAlgos_1_1 && !signingAlgos_1_1.done && (_a = signingAlgos_1["return"])) _a.call(signingAlgos_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      }

      SigningService.prototype.sign = function (data, supportedSignatureAlgos, privateKey, publicKey) {
        return this.strategies[supportedSignatureAlgos].sign(data, privateKey, publicKey);
      };

      SigningService.prototype.generateKeyPair = function (supportedSignatureAlgos) {
        return this.strategies[supportedSignatureAlgos].generateKeyPair();
      };

      SigningService.prototype.verify = function (message, signature, publicKey, supportedSignatureAlgos) {
        return this.strategies[supportedSignatureAlgos].verify(message, signature, publicKey);
      };

      SigningService = __decorate([tsyringe_1.singleton(), __param(0, tsyringe_1.injectAll('ISigningAlgorithm')), __metadata("design:paramtypes", [Array])], SigningService);
      return SigningService;
    }();

    exports.SigningService = SigningService;
  }, {
    "tsyringe": 385
  }],
  443: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        "use strict";

        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
          var c = arguments.length,
              r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
              d;
          if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
            if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
          }
          return c > 3 && r && Object.defineProperty(target, key, r), r;
        };

        var __metadata = void 0 && (void 0).__metadata || function (k, v) {
          if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
        };

        var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
          return function (target, key) {
            decorator(target, key, paramIndex);
          };
        };

        var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function (resolve) {
              resolve(value);
            });
          }

          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }

            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }

            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }

            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };

        var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
          var _ = {
            label: 0,
            sent: function sent() {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: []
          },
              f,
              y,
              t,
              g;
          return g = {
            next: verb(0),
            "throw": verb(1),
            "return": verb(2)
          }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
          }), g;

          function verb(n) {
            return function (v) {
              return step([n, v]);
            };
          }

          function step(op) {
            if (f) throw new TypeError("Generator is already executing.");

            while (_) {
              try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];

                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;

                  case 4:
                    _.label++;
                    return {
                      value: op[1],
                      done: false
                    };

                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;

                  case 7:
                    op = _.ops.pop();

                    _.trys.pop();

                    continue;

                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }

                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }

                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }

                    if (t && _.label < t[2]) {
                      _.label = t[2];

                      _.ops.push(op);

                      break;
                    }

                    if (t[2]) _.ops.pop();

                    _.trys.pop();

                    continue;
                }

                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            }

            if (op[0] & 5) throw op[1];
            return {
              value: op[0] ? op[1] : void 0,
              done: true
            };
          }
        };

        var __values = void 0 && (void 0).__values || function (o) {
          var s = typeof Symbol === "function" && Symbol.iterator,
              m = s && o[s],
              i = 0;
          if (m) return m.call(o);
          if (o && typeof o.length === "number") return {
            next: function next() {
              if (o && i >= o.length) o = void 0;
              return {
                value: o && o[i++],
                done: !o
              };
            }
          };
          throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.TorrentDiscovery = void 0;

        var tsyringe_1 = require("tsyringe");

        var Metadata_1 = require("../extensions/Metadata");

        var MetainfoFile_1 = require("../models/MetainfoFile");

        var SupportedHashAlgorithms_1 = require("../models/SupportedHashAlgorithms");

        var MetaInfoService_1 = require("./MetaInfoService");

        var Peer_1 = require("./Peer");

        var TorrentDiscovery =
        /** @class */
        function () {
          function TorrentDiscovery(peerStrategies, hashService, metainfoService, signingService, logger) {
            var _this = this;

            this.peerStrategies = peerStrategies;
            this.hashService = hashService;
            this.metainfoService = metainfoService;
            this.signingService = signingService;
            this.logger = logger;

            this.discoverByInfoHash = function (infoHash) {
              return new Promise(function (resolve, reject) {
                var e_1, _a;

                try {
                  for (var _b = __values(_this.peerStrategies), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var strat = _c.value;

                    var infoHashHash = _this.hashService.hash(infoHash, SupportedHashAlgorithms_1.SupportedHashAlgorithms.sha256);

                    strat.startDiscovery(infoHashHash);
                    strat.on('found', function (connectedWire) {
                      return __awaiter(_this, void 0, void 0, function () {
                        var metaInfo, error_1;
                        return __generator(this, function (_a) {
                          switch (_a.label) {
                            case 0:
                              _a.trys.push([0, 2, 3, 4]);

                              return [4
                              /*yield*/
                              , this.discoverByInfoIdentifier(connectedWire, infoHash)];

                            case 1:
                              metaInfo = _a.sent();

                              if (!this.metainfoService.metainfo) {
                                return [2
                                /*return*/
                                , reject(new Error('Metainfo service is empty'))];
                              }

                              if (metaInfo.infohash.equals(this.metainfoService.metainfo.infohash) === false) {
                                return [2
                                /*return*/
                                , reject(new Error('What how do'))];
                              }

                              resolve(metaInfo);
                              return [3
                              /*break*/
                              , 4];

                            case 2:
                              error_1 = _a.sent();
                              reject(error_1);
                              return [3
                              /*break*/
                              , 4];

                            case 3:
                              Promise.all(this.peerStrategies.map(function (x) {
                                return x.stopDiscovery(infoHash);
                              }));
                              return [7
                              /*endfinally*/
                              ];

                            case 4:
                              return [2
                              /*return*/
                              ];
                          }
                        });
                      });
                    });
                  }
                } catch (e_1_1) {
                  e_1 = {
                    error: e_1_1
                  };
                } finally {
                  try {
                    if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
                  } finally {
                    if (e_1) throw e_1.error;
                  }
                }
              });
            };

            this.discoverByInfoSig = function (infoSig) {
              return new Promise(function (resolve, reject) {
                var e_2, _a;

                try {
                  for (var _b = __values(_this.peerStrategies), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var strat = _c.value;

                    var infoSigHash = _this.hashService.hash(infoSig, SupportedHashAlgorithms_1.SupportedHashAlgorithms.sha256);

                    strat.startDiscovery(infoSigHash);
                    strat.on('found', function (connectedWire) {
                      return __awaiter(_this, void 0, void 0, function () {
                        var metaInfo, error_2;
                        return __generator(this, function (_a) {
                          switch (_a.label) {
                            case 0:
                              this.logger.info('TorrentDiscovery', 'Found wire', connectedWire.wireName);
                              _a.label = 1;

                            case 1:
                              _a.trys.push([1, 3, 4, 5]);

                              return [4
                              /*yield*/
                              , this.discoverByInfoIdentifier(connectedWire, infoSig)];

                            case 2:
                              metaInfo = _a.sent();

                              if (!this.metainfoService.metainfo) {
                                return [2
                                /*return*/
                                , reject(new Error('Metainfo service is empty'))];
                              }

                              if (!MetainfoFile_1.isSignedMetainfo(metaInfo)) {
                                return [2
                                /*return*/
                                , reject(new Error('Not a signed metainfo file'))];
                              }

                              if (!MetainfoFile_1.isSignedMetainfo(this.metainfoService.metainfo)) {
                                return [2
                                /*return*/
                                , reject(new Error('metainfo service does not contain a signed metainfo file'))];
                              }

                              if (metaInfo.infosig.equals(this.metainfoService.metainfo.infosig) === false) {
                                return [2
                                /*return*/
                                , reject(new Error('What how do'))];
                              }

                              resolve(metaInfo);
                              return [3
                              /*break*/
                              , 5];

                            case 3:
                              error_2 = _a.sent();
                              reject(error_2);
                              return [3
                              /*break*/
                              , 5];

                            case 4:
                              return [7
                              /*endfinally*/
                              ];

                            case 5:
                              return [2
                              /*return*/
                              ];
                          }
                        });
                      });
                    });
                  }
                } catch (e_2_1) {
                  e_2 = {
                    error: e_2_1
                  };
                } finally {
                  try {
                    if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
                  } finally {
                    if (e_2) throw e_2.error;
                  }
                }
              });
            };

            this.discoverByInfoIdentifier = function (connectedWire, infoId) {
              return new Promise(function (resolve, reject) {
                _this.logger.info('TorrentDiscovery - attempting to get metainfo from wire', connectedWire.wireName);

                connectedWire.on('error', function (err) {
                  _this.logger.error(err);

                  reject(err);
                });

                var peerId = _this.hashService.hash(Buffer.from("DISCOVERY" + connectedWire.wireName), SupportedHashAlgorithms_1.SupportedHashAlgorithms.sha1);

                var metadataExtension = new Metadata_1.MetadataExtension(connectedWire, infoId, undefined, _this.hashService, _this.signingService, _this.logger);
                connectedWire.use(function () {
                  return metadataExtension;
                });
                metadataExtension.on('error', function (err) {
                  _this.logger.error('TorrentDiscovery - failed to get metadata from wire', connectedWire.wireName);

                  _this.logger.error(err);

                  reject(err);
                });
                metadataExtension.once('ReceivedMetainfo', function (metainfo) {
                  _this.metainfoService.metainfo = metainfo;
                  resolve(metainfo);
                });
                new Peer_1.Peer(connectedWire, infoId, peerId, _this.logger);
              });
            };
          }

          TorrentDiscovery = __decorate([tsyringe_1.injectable(), __param(0, tsyringe_1.injectAll('IPeerStrategy')), __param(1, tsyringe_1.inject('IHashService')), __param(3, tsyringe_1.inject('ISigningService')), __param(4, tsyringe_1.inject('ILogger')), __metadata("design:paramtypes", [Array, Object, MetaInfoService_1.MetaInfoService, Object, Object])], TorrentDiscovery);
          return TorrentDiscovery;
        }();

        exports.TorrentDiscovery = TorrentDiscovery;
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "../extensions/Metadata": 430,
    "../models/MetainfoFile": 432,
    "../models/SupportedHashAlgorithms": 434,
    "./MetaInfoService": 438,
    "./Peer": 439,
    "buffer": 102,
    "tsyringe": 385
  }],
  444: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        "use strict";

        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
          var c = arguments.length,
              r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
              d;
          if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
            if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
          }
          return c > 3 && r && Object.defineProperty(target, key, r), r;
        };

        var __metadata = void 0 && (void 0).__metadata || function (k, v) {
          if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
        };

        var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
          return function (target, key) {
            decorator(target, key, paramIndex);
          };
        };

        var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function (resolve) {
              resolve(value);
            });
          }

          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }

            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }

            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }

            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };

        var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
          var _ = {
            label: 0,
            sent: function sent() {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: []
          },
              f,
              y,
              t,
              g;
          return g = {
            next: verb(0),
            "throw": verb(1),
            "return": verb(2)
          }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
          }), g;

          function verb(n) {
            return function (v) {
              return step([n, v]);
            };
          }

          function step(op) {
            if (f) throw new TypeError("Generator is already executing.");

            while (_) {
              try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];

                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;

                  case 4:
                    _.label++;
                    return {
                      value: op[1],
                      done: false
                    };

                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;

                  case 7:
                    op = _.ops.pop();

                    _.trys.pop();

                    continue;

                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }

                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }

                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }

                    if (t && _.label < t[2]) {
                      _.label = t[2];

                      _.ops.push(op);

                      break;
                    }

                    if (t[2]) _.ops.pop();

                    _.trys.pop();

                    continue;
                }

                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            }

            if (op[0] & 5) throw op[1];
            return {
              value: op[0] ? op[1] : void 0,
              done: true
            };
          }
        };

        var __read = void 0 && (void 0).__read || function (o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m) return o;
          var i = m.call(o),
              r,
              ar = [],
              e;

          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
              ar.push(r.value);
            }
          } catch (error) {
            e = {
              error: error
            };
          } finally {
            try {
              if (r && !r.done && (m = i["return"])) m.call(i);
            } finally {
              if (e) throw e.error;
            }
          }

          return ar;
        };

        var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
          return mod && mod.__esModule ? mod : {
            "default": mod
          };
        };

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.TorrentManager = void 0;

        var stream_1 = __importDefault(require("stream"));

        var tsyringe_1 = require("tsyringe");

        var util_1 = __importDefault(require("util"));

        var MetaInfoService_1 = require("./MetaInfoService");

        var PeerManager_1 = require("./PeerManager");

        var PieceManager_1 = require("./PieceManager");

        var TorrentManager =
        /** @class */
        function () {
          /**
           * if files is undefined, you are a leech, seeders have all the data
           * @param peerDiscovery
           * @param hashService
           * @param metainfoFile
           * @param files
           */
          function TorrentManager(hashService, peerManager, pieceManager, metainfoService, logger) {
            var _this = this;

            this.hashService = hashService;
            this.peerManager = peerManager;
            this.pieceManager = pieceManager;
            this.metainfoService = metainfoService;
            this.logger = logger;
            this.id = Math.random().toString(36).substr(2, 9);

            this.addTorrent = function (metaInfo, keyPair, fileChunks) {
              if (!metaInfo) {
                throw new Error('Cannot add empty metainfo');
              }

              _this.metainfoService.metainfo = metaInfo;

              if (fileChunks) {
                _this.metainfoService.fileChunks = fileChunks;
              }

              if (!_this.metainfoService.infoIdentifier) {
                throw new Error('Info identifier cannot be empty');
              }

              _this.peerManager.searchByInfoIdentifier(_this.metainfoService.infoIdentifier);
            };

            this.stopTorrent = function () {
              return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      if (!this.metainfoService.infoIdentifier) {
                        throw new Error('No infoidentifier exists. Start a torrent before you stop it.');
                      }

                      return [4
                      /*yield*/
                      , this.peerManager.stopDiscovery(this.metainfoService.infoIdentifier)];

                    case 1:
                      _a.sent();

                      this.pieceManager.clearPieces();
                      this.metainfoService.metainfo = undefined;
                      this.downloadStream.push(null);
                      this.downloadStream.destroy();
                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            };

            this.verifyIsFinishedDownloading = function () {
              var _a;

              var pieceCount = _this.metainfoService.pieceCount;

              _this.logger.log('Got', _this.pieceManager.getPieceCount(), 'pieces /', pieceCount);

              if (!pieceCount) {
                throw new Error('No pieces?');
              } // Still need more pieces


              if (_this.pieceManager.getPieceCount() < pieceCount) {
                return;
              } // We are done! Say we arent interested anymore


              (_a = _this.peerManager) === null || _a === void 0 ? void 0 : _a.setUninterested();

              _this.logger.log('Finished downloading, uninterested in other peers');

              _this.downloadStream.push(null);

              _this.downloadStream.destroy();
            };

            this.onPiece = function (index, offset, pieceBuf) {
              return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                  if (!this.metainfoService.metainfo || !this.metainfoService.pieceCount) {
                    throw new Error('No metainfo? How did we recieve a piece?');
                  }

                  this.logger.log('We got piece', index, offset, pieceBuf.length);
                  return [2
                  /*return*/
                  ];
                });
              });
            };

            this.isPieceValid = function (index, offset, pieceBuf) {
              // TODO: Need to Verify Piece
              if (!_this.metainfoService.metainfo) {
                throw new Error('No metainfo? How did we recieve a piece?');
              }

              var algo = _this.metainfoService.metainfo.info['piece hash algo'];
              var hash = _this.metainfoService.metainfo.info.pieces[index];

              _this.logger.log('Checking if piece', index, 'passes', algo, 'check', hash);

              var pieceHash = _this.hashService.hash(pieceBuf, algo); // Checksum failed - re-request piece


              if (!pieceHash.equals(hash)) {
                return false;
              }

              return true;
            };

            this.onPieceValidated = function (index, offset, piece) {
              return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                  if (!this.metainfoService.metainfo || !this.metainfoService.pieceCount) {
                    throw new Error('Must have metainfo so we can validate a piece');
                  }

                  if (!this.pieceManager.hasPiece(index)) {
                    this.pieceManager.setPiece(index, piece);
                  }

                  this.logger.log('We have validated the piece', index, offset, piece);

                  if (!this.downloadStream.destroyed) {
                    this.downloadStream.push(Buffer.concat([Buffer.from(index + ":" + offset + ":"), piece]));
                  }

                  this.verifyIsFinishedDownloading();
                  return [2
                  /*return*/
                  ];
                });
              });
            };

            this.onBitfield = function (peer, recievedBitfield) {
              return __awaiter(_this, void 0, void 0, function () {
                var pieces, myBitfield, missingPieces;
                return __generator(this, function (_a) {
                  if (!this.metainfoService.metainfo) {
                    throw new Error('Cant recieve bitfield, got no metainfo');
                  }

                  if (!peer.peerId) {
                    this.logger.error('Unable to determine peerId, destroying connection');
                    peer.destroy();
                    return [2
                    /*return*/
                    ];
                  }

                  pieces = this.metainfoService.metainfo.info.pieces;
                  this.logger.log(peer.wire.wireName, 'Bitfield length', recievedBitfield.buffer.length);
                  this.pieceManager.addPeerBitfield(peer.peerId, recievedBitfield);
                  myBitfield = this.pieceManager.getBitfield();
                  missingPieces = peer.getIndexesThatDontExistInGivenBitfield(myBitfield, pieces.length);

                  if (missingPieces.length <= 0) {
                    peer.setUninterested();
                    this.logger.log(peer.wire.wireName, 'Peer has no pieces that we want, uninterested');
                    return [2
                    /*return*/
                    ];
                  }

                  this.requestPiecesLoop();
                  return [2
                  /*return*/
                  ];
                });
              });
            };

            this.onRequest = function (peer, index, offset, length) {
              _this.logger.log('Incoming request ', index, offset, length);

              if (!_this.metainfoService.metainfo || !_this.metainfoService.pieceCount) {
                throw new Error('Cant recieve request, got no metainfo');
              }

              if (!_this.pieceManager.hasPiece(index)) {
                _this.logger.log('Oh, I dont have any pieces to send, let all the peers know');

                _this.peerManager.broadcastBitfield(_this.pieceManager.getBitfield());

                return;
              }

              peer.sendPiece(index, offset, _this.pieceManager.getPiece(index));
            };

            this.requestPiecesLoop = function () {
              return __awaiter(_this, void 0, void 0, function () {
                var totalPieceCount, _a, pieceIndex, pieceOffset, pieceLength, peer, pieceBuf, error_1;

                return __generator(this, function (_b) {
                  switch (_b.label) {
                    case 0:
                      _b.trys.push([0, 3,, 4]); // TODO: Store a map somewhere to say which peers have the pieces we want - PeerManager?


                      if (this.metainfoService === undefined) {
                        throw new Error('Cannot request pieces if we dont have metainfo');
                      }

                      totalPieceCount = this.metainfoService.pieceCount;

                      if (!totalPieceCount) {
                        throw new Error('How can we not know the total pieceCount?');
                      }

                      if (this.pieceManager.getPieceCount() >= totalPieceCount) {
                        this.logger.warn('Done! I think we have all of the pieces!');
                        return [2
                        /*return*/
                        ];
                      }

                      _a = __read(this.pieceManager.getNextNeededPiece(), 3), pieceIndex = _a[0], pieceOffset = _a[1], pieceLength = _a[2];
                      peer = this.peerManager.getPeerThatHasPiece(pieceIndex);

                      if (!peer) {
                        throw new Error('Peer doesnt exist cant request next piece');
                      }

                      return [4
                      /*yield*/
                      , peer.request(pieceIndex, pieceOffset, pieceLength)];

                    case 1:
                      pieceBuf = _b.sent();

                      if (pieceBuf.length !== pieceLength) {
                        throw new Error('pieceBuf.length !== pieceLength');
                      }

                      if (!this.isPieceValid(pieceIndex, pieceOffset, pieceBuf)) {
                        this.logger.error('Piece is not valid, ask another peer for it', pieceIndex, pieceOffset);
                        throw new Error('PIECE IS NOT VALID');
                      }

                      this.logger.log('Piece is valid'); // Piece we recieved is valid, broadcast that I have the piece to other peers, add to downlo

                      this.peerManager.have(pieceIndex);
                      this.peerManager.cancel(pieceIndex, pieceOffset, pieceLength);
                      this.onPieceValidated(pieceIndex, pieceOffset, pieceBuf);
                      return [4
                      /*yield*/
                      , this.requestPiecesLoop()];

                    case 2:
                      _b.sent();

                      return [3
                      /*break*/
                      , 4];

                    case 3:
                      error_1 = _b.sent();

                      if (util_1["default"].types.isNativeError(error_1)) {
                        if (error_1.message === 'request was cancelled') {
                          this.logger.info('Request was cancelled.');
                          return [2
                          /*return*/
                          ];
                        }
                      }

                      this.logger.error(error_1);
                      return [3
                      /*break*/
                      , 4];

                    case 4:
                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            };

            this.downloadStream = new stream_1["default"].Readable({
              read: function read() {
                return true;
              }
            });
            this.peerManager.on(PeerManager_1.PeerManagerEvents.got_bitfield, this.onBitfield);
            this.peerManager.on(PeerManager_1.PeerManagerEvents.got_request, this.onRequest);
            this.peerManager.on(PeerManager_1.PeerManagerEvents.got_piece, this.onPiece);
          }

          Object.defineProperty(TorrentManager.prototype, "metainfo", {
            get: function get() {
              if (!this.metainfoService.metainfo) {
                throw new Error('Do not yet have metainfo');
              }

              return this.metainfoService.metainfo;
            },
            enumerable: false,
            configurable: true
          });
          TorrentManager = __decorate([tsyringe_1.injectable(), __param(0, tsyringe_1.inject('IHashService')), __param(4, tsyringe_1.inject('ILogger')), __metadata("design:paramtypes", [Object, PeerManager_1.PeerManager, PieceManager_1.PieceManager, MetaInfoService_1.MetaInfoService, Object])], TorrentManager);
          return TorrentManager;
        }();

        exports.TorrentManager = TorrentManager;
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "./MetaInfoService": 438,
    "./PeerManager": 440,
    "./PieceManager": 441,
    "buffer": 102,
    "stream": 362,
    "tsyringe": 385,
    "util": 403
  }],
  445: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SHA1HashAlgorithm = void 0;

    var SupportedHashAlgorithms_1 = require("../../models/SupportedHashAlgorithms");

    var HashService_1 = require("../HashService");

    var SHA1HashAlgorithm =
    /** @class */
    function () {
      function SHA1HashAlgorithm() {
        var _this = this;

        this.algorithm = SupportedHashAlgorithms_1.SupportedHashAlgorithms.sha1;

        this.hash = function (msg) {
          return _this._hasher(msg);
        };

        this._hasher = HashService_1.CryptoHash('sha1');
      }

      return SHA1HashAlgorithm;
    }();

    exports.SHA1HashAlgorithm = SHA1HashAlgorithm;
  }, {
    "../../models/SupportedHashAlgorithms": 434,
    "../HashService": 436
  }],
  446: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SHA256HashAlgorithm = void 0;

    var SupportedHashAlgorithms_1 = require("../../models/SupportedHashAlgorithms");

    var HashService_1 = require("../HashService");

    var SHA256HashAlgorithm =
    /** @class */
    function () {
      function SHA256HashAlgorithm() {
        var _this = this;

        this.algorithm = SupportedHashAlgorithms_1.SupportedHashAlgorithms.sha256;

        this.hash = function (msg) {
          return _this._hasher(msg);
        };

        this._hasher = HashService_1.CryptoHash('sha256');
      }

      return SHA256HashAlgorithm;
    }();

    exports.SHA256HashAlgorithm = SHA256HashAlgorithm;
  }, {
    "../../models/SupportedHashAlgorithms": 434,
    "../HashService": 436
  }],
  447: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SupportedSignatureAlgorithms = void 0;
    var SupportedSignatureAlgorithms;

    (function (SupportedSignatureAlgorithms) {
      SupportedSignatureAlgorithms["ed25519"] = "ed25519";
      SupportedSignatureAlgorithms["secp256k1"] = "secp256k1";
    })(SupportedSignatureAlgorithms = exports.SupportedSignatureAlgorithms || (exports.SupportedSignatureAlgorithms = {}));
  }, {}],
  448: [function (require, module, exports) {
    "use strict";

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }

    var __extends = void 0 && (void 0).__extends || function () {
      var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function (d, b) {
          d.__proto__ = b;
        } || function (d, b) {
          for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
          }
        };

        return _extendStatics(d, b);
      };

      return function (d, b) {
        _extendStatics(d, b);

        function __() {
          this.constructor = d;
        }

        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();

    var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
      var c = arguments.length,
          r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
          d;
      if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      }
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    var __metadata = void 0 && (void 0).__metadata || function (k, v) {
      if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };

    var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
      return function (target, key) {
        decorator(target, key, paramIndex);
      };
    };

    var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function (resolve) {
          resolve(value);
        });
      }

      return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }

        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }

        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }

        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };

    var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
      var _ = {
        label: 0,
        sent: function sent() {
          if (t[0] & 1) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      },
          f,
          y,
          t,
          g;
      return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
      }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
      }), g;

      function verb(n) {
        return function (v) {
          return step([n, v]);
        };
      }

      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");

        while (_) {
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];

            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;

              case 4:
                _.label++;
                return {
                  value: op[1],
                  done: false
                };

              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;

              case 7:
                op = _.ops.pop();

                _.trys.pop();

                continue;

              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }

                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }

                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }

                if (t && _.label < t[2]) {
                  _.label = t[2];

                  _.ops.push(op);

                  break;
                }

                if (t[2]) _.ops.pop();

                _.trys.pop();

                continue;
            }

            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        }

        if (op[0] & 5) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    };

    var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ClassicNetworkPeerStrategy = void 0;

    var bittorrent_protocol_1 = __importDefault(require("@firaenix/bittorrent-protocol"));

    var hyperswarm_1 = __importDefault(require("hyperswarm"));

    var tiny_typed_emitter_1 = require("tiny-typed-emitter");

    var tsyringe_1 = require("tsyringe");

    var uuid_1 = require("uuid");

    var ClassicNetworkPeerStrategy =
    /** @class */
    function (_super) {
      __extends(ClassicNetworkPeerStrategy, _super);

      function ClassicNetworkPeerStrategy(logger) {
        var _this = _super.call(this) || this;

        _this.logger = logger;
        _this.name = 'ClassicNetworkPeerStrategy';
        _this.id = uuid_1.v4();

        _this.stopDiscovery = function (infoIdentifier) {
          return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
              this.logger.info('Leaving channel', infoIdentifier, this.id);
              this.swarm.leave(infoIdentifier);
              return [2
              /*return*/
              ];
            });
          });
        };

        _this.startDiscovery = function (infoIdentifier) {
          _this.swarm.join(infoIdentifier, {
            lookup: true,
            announce: true // optional- announce self as a connection target

          });

          _this.swarm.on('updated', function (_a) {
            var key = _a.key;

            _this.emit('got_update', key);
          });

          _this.swarm.on('connection', function (socket, details) {
            var _a;

            var id = ((_a = details === null || details === void 0 ? void 0 : details.peer) === null || _a === void 0 ? void 0 : _a.host) ? "TCP-" + details.peer.host + ":" + details.peer.port : "UDP-" + Math.random().toString(36).substr(2, 9);
            var wire = new bittorrent_protocol_1["default"](id);
            wire.pipe(socket).pipe(wire);

            _this.emit('found', wire, infoIdentifier);
          });
        };

        logger.info('Creating ClassicNetworkPeerStrategy', _this.id);
        _this.swarm = hyperswarm_1["default"]();
        return _this;
      }

      ClassicNetworkPeerStrategy = __decorate([tsyringe_1.singleton(), __param(0, tsyringe_1.inject('ILogger')), __metadata("design:paramtypes", [Object])], ClassicNetworkPeerStrategy);
      return ClassicNetworkPeerStrategy;
    }(tiny_typed_emitter_1.TypedEmitter);

    exports.ClassicNetworkPeerStrategy = ClassicNetworkPeerStrategy;
  }, {
    "@firaenix/bittorrent-protocol": 3,
    "hyperswarm": 214,
    "tiny-typed-emitter": 369,
    "tsyringe": 385,
    "uuid": 404
  }],
  449: [function (require, module, exports) {
    "use strict";

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }

    var __extends = void 0 && (void 0).__extends || function () {
      var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function (d, b) {
          d.__proto__ = b;
        } || function (d, b) {
          for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
          }
        };

        return _extendStatics(d, b);
      };

      return function (d, b) {
        _extendStatics(d, b);

        function __() {
          this.constructor = d;
        }

        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();

    var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
      var c = arguments.length,
          r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
          d;
      if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      }
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    var __metadata = void 0 && (void 0).__metadata || function (k, v) {
      if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };

    var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
      return function (target, key) {
        decorator(target, key, paramIndex);
      };
    };

    var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function (resolve) {
          resolve(value);
        });
      }

      return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }

        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }

        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }

        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };

    var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
      var _ = {
        label: 0,
        sent: function sent() {
          if (t[0] & 1) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      },
          f,
          y,
          t,
          g;
      return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
      }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
      }), g;

      function verb(n) {
        return function (v) {
          return step([n, v]);
        };
      }

      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");

        while (_) {
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];

            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;

              case 4:
                _.label++;
                return {
                  value: op[1],
                  done: false
                };

              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;

              case 7:
                op = _.ops.pop();

                _.trys.pop();

                continue;

              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }

                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }

                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }

                if (t && _.label < t[2]) {
                  _.label = t[2];

                  _.ops.push(op);

                  break;
                }

                if (t[2]) _.ops.pop();

                _.trys.pop();

                continue;
            }

            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        }

        if (op[0] & 5) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    };

    var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WebRTCPeerStrategy = void 0;

    var bittorrent_protocol_1 = __importDefault(require("@firaenix/bittorrent-protocol"));

    var hyperswarm_web_1 = __importDefault(require("hyperswarm-web"));

    var tiny_typed_emitter_1 = require("tiny-typed-emitter");

    var tsyringe_1 = require("tsyringe");

    var uuid_1 = require("uuid");

    var isServer_1 = require("../../utils/isServer");

    var WebRTCPeerStrategy =
    /** @class */
    function (_super) {
      __extends(WebRTCPeerStrategy, _super);

      function WebRTCPeerStrategy(logger) {
        var _this = _super.call(this) || this;

        _this.logger = logger;
        _this.name = 'WebRTCPeerStrategy';
        _this.id = uuid_1.v4();

        _this.startDiscovery = function (infoIdentifier) {
          _this.swarm.join(infoIdentifier, {
            lookup: true,
            announce: true // optional- announce self as a connection target

          });

          _this.swarm.on('updated', function (_a) {
            var key = _a.key;

            _this.emit('got_update', key);
          });

          _this.swarm.on('connection', function (socket, details) {
            var wire = new bittorrent_protocol_1["default"]('seed'); // you can now use the socket as a stream, eg:
            // process.stdin.pipe(socket).pipe(process.stdout)

            wire.pipe(socket).pipe(wire);

            _this.emit('found', wire, infoIdentifier);
          });
        };

        _this.stopDiscovery = function (infoIdentifier) {
          return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
              this.logger.info('Leaving channel', infoIdentifier, this.id);
              this.swarm.leave(infoIdentifier);
              return [2
              /*return*/
              ];
            });
          });
        };

        logger.info('Creating WebRTCPeerStrategy', _this.id);
        _this.swarm = hyperswarm_web_1["default"]({
          // If you omit this, it'll try to connect to 'wss://hyperswarm.mauve.moe'
          // It will also attempt to connect to a local proxy on `ws://localhost:4977`
          wsProxy: 'ws://localhost:4977',
          // The configuration passed to the SimplePeer constructor
          //See https://github.com/feross/simple-peer#peer--new-peeropts
          // for more options
          webrtcBootstrap: ['http://localhost:4000'],
          simplePeer: {
            // The configuration passed to the RTCPeerConnection constructor,for more details see
            // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/RTCPeerConnection#RTCConfiguration_dictionary
            wrtc: isServer_1.isServer() ? require('wrtc') : undefined
          }
        });
        return _this; // this.swarm.listen();
      }

      WebRTCPeerStrategy = __decorate([tsyringe_1.singleton(), __param(0, tsyringe_1.inject('ILogger')), __metadata("design:paramtypes", [Object])], WebRTCPeerStrategy);
      return WebRTCPeerStrategy;
    }(tiny_typed_emitter_1.TypedEmitter);

    exports.WebRTCPeerStrategy = WebRTCPeerStrategy;
  }, {
    "../../utils/isServer": 457,
    "@firaenix/bittorrent-protocol": 3,
    "hyperswarm-web": 214,
    "tiny-typed-emitter": 369,
    "tsyringe": 385,
    "uuid": 404,
    "wrtc": 426
  }],
  450: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        "use strict";

        var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function (resolve) {
              resolve(value);
            });
          }

          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }

            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }

            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }

            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };

        var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
          var _ = {
            label: 0,
            sent: function sent() {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: []
          },
              f,
              y,
              t,
              g;
          return g = {
            next: verb(0),
            "throw": verb(1),
            "return": verb(2)
          }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
          }), g;

          function verb(n) {
            return function (v) {
              return step([n, v]);
            };
          }

          function step(op) {
            if (f) throw new TypeError("Generator is already executing.");

            while (_) {
              try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];

                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;

                  case 4:
                    _.label++;
                    return {
                      value: op[1],
                      done: false
                    };

                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;

                  case 7:
                    op = _.ops.pop();

                    _.trys.pop();

                    continue;

                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }

                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }

                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }

                    if (t && _.label < t[2]) {
                      _.label = t[2];

                      _.ops.push(op);

                      break;
                    }

                    if (t[2]) _.ops.pop();

                    _.trys.pop();

                    continue;
                }

                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            }

            if (op[0] & 5) throw op[1];
            return {
              value: op[0] ? op[1] : void 0,
              done: true
            };
          }
        };

        var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
          return mod && mod.__esModule ? mod : {
            "default": mod
          };
        };

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ED25519SuperCopAlgorithm = void 0;

        var supercop_wasm_1 = __importDefault(require("supercop.wasm"));

        var ED25519KeyPair_1 = require("../../models/ED25519KeyPair");

        var ISigningAlgorithm_1 = require("../interfaces/ISigningAlgorithm");

        var ED25519SuperCopAlgorithm =
        /** @class */
        function () {
          function ED25519SuperCopAlgorithm() {
            var _this = this;

            this.algorithm = ISigningAlgorithm_1.SupportedSignatureAlgorithms.ed25519;
            this.isInitialised = false;

            this.sign = function (message, privateKey, publicKey) {
              return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                  return [2
                  /*return*/
                  , this.signSync(message, privateKey, publicKey)];
                });
              });
            };

            this.signSync = function (message, privateKey, publicKey) {
              if (!_this.isInitialised) {
                throw new Error('Supercop not initialised');
              }

              var signed = supercop_wasm_1["default"].sign(message, publicKey, privateKey);
              return Buffer.from(signed);
            };

            this.verify = function (message, signature, publicKey) {
              return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                  return [2
                  /*return*/
                  , this.verifySync(message, signature, publicKey)];
                });
              });
            };

            this.verifySync = function (message, signature, publicKey) {
              if (!_this.isInitialised) {
                throw new Error('Supercop not initialised');
              }

              var verified = supercop_wasm_1["default"].verify(signature, message, publicKey);
              return verified;
            };

            this.generateKeyPair = function (seed) {
              return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                  return [2
                  /*return*/
                  , this.generateKeyPairSync(seed)];
                });
              });
            };

            this.generateKeyPairSync = function (seed) {
              if (!_this.isInitialised) {
                throw new Error('Supercop not initialised');
              }

              seed = seed !== null && seed !== void 0 ? seed : supercop_wasm_1["default"].createSeed();
              var keys = supercop_wasm_1["default"].createKeyPair(seed);
              var keypair = new ED25519KeyPair_1.ED25519KeyPair(Buffer.from(keys.publicKey), Buffer.from(keys.secretKey));
              var isvalid = keypair.isValidKeyPair();

              if (isvalid === false) {
                throw new Error('Did not create a valid keypair');
              }

              return keypair;
            };
          }

          ED25519SuperCopAlgorithm.build = function () {
            return new Promise(function (res, reject) {
              try {
                supercop_wasm_1["default"].ready(function () {
                  var algo = new ED25519SuperCopAlgorithm();
                  algo.isInitialised = true;
                  res(algo);
                });
              } catch (error) {
                reject(error);
              }
            });
          };

          return ED25519SuperCopAlgorithm;
        }();

        exports.ED25519SuperCopAlgorithm = ED25519SuperCopAlgorithm;
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "../../models/ED25519KeyPair": 431,
    "../interfaces/ISigningAlgorithm": 447,
    "buffer": 102,
    "supercop.wasm": 365
  }],
  451: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        "use strict";

        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
          var c = arguments.length,
              r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
              d;
          if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
            if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
          }
          return c > 3 && r && Object.defineProperty(target, key, r), r;
        };

        var __metadata = void 0 && (void 0).__metadata || function (k, v) {
          if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
        };

        var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
          return function (target, key) {
            decorator(target, key, paramIndex);
          };
        };

        var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
          return mod && mod.__esModule ? mod : {
            "default": mod
          };
        };

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SECP256K1SignatureAlgorithm = void 0;

        var crypto_1 = require("crypto");

        var secp256k1_1 = __importDefault(require("secp256k1"));

        var tsyringe_1 = require("tsyringe");

        var SECP256K1KeyPair_1 = require("../../models/SECP256K1KeyPair");

        var SupportedHashAlgorithms_1 = require("../../models/SupportedHashAlgorithms");

        var ISigningAlgorithm_1 = require("../interfaces/ISigningAlgorithm");

        var SECP256K1SignatureAlgorithm =
        /** @class */
        function () {
          function SECP256K1SignatureAlgorithm(hashService) {
            var _this = this;

            this.hashService = hashService;
            this.algorithm = ISigningAlgorithm_1.SupportedSignatureAlgorithms.secp256k1;

            this.sign = function (message, privateKey, publicKey) {
              // secp256k1 requires you to hash before sign, handled externally
              var hashMsg = _this.hashService.hash(message, SupportedHashAlgorithms_1.SupportedHashAlgorithms.sha256);

              var sigObj = secp256k1_1["default"].ecdsaSign(hashMsg, privateKey);
              return Promise.resolve(Buffer.from(sigObj.signature));
            };

            this.verify = function (message, signature, publicKey) {
              // secp256k1 requires you to hash before sign, handled externally
              var hashMsg = _this.hashService.hash(message, SupportedHashAlgorithms_1.SupportedHashAlgorithms.sha256);

              return Promise.resolve(secp256k1_1["default"].ecdsaVerify(Buffer.from(signature), hashMsg, publicKey));
            };

            this.generateKeyPair = function () {
              var privKey;

              do {
                privKey = crypto_1.randomBytes(32);
              } while (!secp256k1_1["default"].privateKeyVerify(privKey)); // get the public key in a compressed format


              var pubKey = Buffer.from(secp256k1_1["default"].publicKeyCreate(privKey));
              var secretKey = Buffer.from(privKey);
              var keyPair = new SECP256K1KeyPair_1.SECP256K1KeyPair(pubKey, secretKey);
              return Promise.resolve(keyPair);
            };
          }

          SECP256K1SignatureAlgorithm = __decorate([tsyringe_1.injectable(), __param(0, tsyringe_1.inject('IHashService')), __metadata("design:paramtypes", [Object])], SECP256K1SignatureAlgorithm);
          return SECP256K1SignatureAlgorithm;
        }();

        exports.SECP256K1SignatureAlgorithm = SECP256K1SignatureAlgorithm;
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "../../models/SECP256K1KeyPair": 433,
    "../../models/SupportedHashAlgorithms": 434,
    "../interfaces/ISigningAlgorithm": 447,
    "buffer": 102,
    "crypto": 120,
    "secp256k1": 316,
    "tsyringe": 385
  }],
  452: [function (require, module, exports) {
    "use strict";
  }, {}],
  453: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.calculatePieceLength = void 0;
    /**
     * From https://github.com/michaelrhodes/piece-length
     * @param {number} bytes
     */

    exports.calculatePieceLength = function (bytes) {
      return Math.max(16384, 1 << Math.log2(bytes < 1024 ? 1 : bytes / 1024) + 0.5 | 0);
    };
  }, {}],
  454: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        "use strict";

        var __read = void 0 && (void 0).__read || function (o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m) return o;
          var i = m.call(o),
              r,
              ar = [],
              e;

          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
              ar.push(r.value);
            }
          } catch (error) {
            e = {
              error: error
            };
          } finally {
            try {
              if (r && !r.done && (m = i["return"])) m.call(i);
            } finally {
              if (e) throw e.error;
            }
          }

          return ar;
        };

        var __spread = void 0 && (void 0).__spread || function () {
          for (var ar = [], i = 0; i < arguments.length; i++) {
            ar = ar.concat(__read(arguments[i]));
          }

          return ar;
        };

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.chunkBuffer = void 0;

        exports.chunkBuffer = function (buf, size, shouldPad) {
          var bufferChunks = [];

          for (var index = 0; index < buf.length;) {
            var nextChunk = buf.slice(index, size + index);

            if (shouldPad && nextChunk.length < size) {
              // Pad out the chunk with zeroes
              var padding = size - nextChunk.length;
              nextChunk = Buffer.from(__spread(nextChunk, Array(padding).fill(0, 0, padding)));
            }

            bufferChunks.push(nextChunk);
            index += size;
          }

          return bufferChunks;
        };
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "buffer": 102
  }],
  455: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        "use strict";

        var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
          return mod && mod.__esModule ? mod : {
            "default": mod
          };
        };

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.createMetaInfo = void 0;

        var bencode_1 = __importDefault(require("bencode"));

        var SupportedHashAlgorithms_1 = require("../models/SupportedHashAlgorithms");

        var SHA1HashAlgorithm_1 = require("../services/hashalgorithms/SHA1HashAlgorithm");

        var SHA256HashAlgorithm_1 = require("../services/hashalgorithms/SHA256HashAlgorithm");

        var HashService_1 = require("../services/HashService");

        var calculatePieceLength_1 = require("./calculatePieceLength");

        var diskFilesToChunks_1 = require("./diskFilesToChunks");

        exports.createMetaInfo = function (diskFiles, torrentName, hashalgo) {
          if (hashalgo === void 0) {
            hashalgo = SupportedHashAlgorithms_1.SupportedHashAlgorithms.sha1;
          }

          var hasher = new HashService_1.HashService([new SHA1HashAlgorithm_1.SHA1HashAlgorithm(), new SHA256HashAlgorithm_1.SHA256HashAlgorithm()]);
          var totalFileLength = diskFiles.map(function (x) {
            return x.file.length;
          }).reduce(function (p, c) {
            return p + c;
          });
          var pieceLength = calculatePieceLength_1.calculatePieceLength(totalFileLength);
          var chunks = diskFilesToChunks_1.diskFilesToChunks(diskFiles, pieceLength);
          var pieces = chunks.map(function (x) {
            return Buffer.from(hasher.hash(x, hashalgo));
          });
          var files = diskFiles.map(function (x) {
            return {
              length: x.file.length,
              path: x.path
            };
          });
          var metaInfo = {
            name: Buffer.from(torrentName),
            pieces: pieces,
            'piece length': pieceLength,
            'piece hash algo': hashalgo,
            files: files
          }; // to get infohash, metainfo to bencode buffer then hash

          var bencodedMetaInfo = bencode_1["default"].encode(metaInfo);
          var infohash = hasher.hash(bencodedMetaInfo, hashalgo);
          return {
            info: metaInfo,
            infohash: infohash
          };
        };
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "../models/SupportedHashAlgorithms": 434,
    "../services/HashService": 436,
    "../services/hashalgorithms/SHA1HashAlgorithm": 445,
    "../services/hashalgorithms/SHA256HashAlgorithm": 446,
    "./calculatePieceLength": 453,
    "./diskFilesToChunks": 456,
    "bencode": 48,
    "buffer": 102
  }],
  456: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.diskFilesToChunks = void 0;

        var chunkBuffer_1 = require("./chunkBuffer");

        exports.diskFilesToChunks = function (files, size) {
          var fileChunks = []; // Combine all files into 1 buffer, then chunk.

          var hugeBuffer = files.map(function (x) {
            return x.file;
          }).reduce(function (prev, curr) {
            return Buffer.concat([prev, curr]);
          });
          fileChunks = chunkBuffer_1.chunkBuffer(hugeBuffer, size);
          var totalFileLength = files.map(function (x) {
            return x.file.length;
          }).reduce(function (p, c) {
            return p + c;
          });

          if (totalFileLength % size !== fileChunks[fileChunks.length - 1].length) {
            throw new Error('Could not accurately calculate the final piece file length');
          }

          return fileChunks;
        };
      }).call(this);
    }).call(this, require("buffer").Buffer);
  }, {
    "./chunkBuffer": 454,
    "buffer": 102
  }],
  457: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isServer = void 0;

    exports.isServer = function () {
      return typeof window === 'undefined';
    };
  }, {}]
}, {}, [429]);
},{"buffer":"node_modules/buffer/index.js","process":"node_modules/process/browser.js"}],"index.tsx":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

require("reflect-metadata");

require("regenerator-runtime/runtime");

var bencode_1 = __importDefault(require("bencode"));

var fs_1 = require("fs");

var Client_min_js_1 = __importDefault(require("synapse-core/lib/Client.min.js")); // const raw = readFileSync(__dirname + '/raw.tsx', 'utf-8');


console.log(Client_min_js_1.default);
var client = new Client_min_js_1.default.Client();
var mymetainfo = Buffer("ZDQ6aW5mb2Q1OmZpbGVzbGQ2Omxlbmd0aGk2MTQ4ZTQ6cGF0aDE4OnRvcnJlbnRzLy5EU19TdG9yZWVkNjpsZW5ndGhpNjcyMmU0OnBhdGg0Mzp0b3JyZW50cy9Ub3JyZW50QXBwbGljYXRpb25TdHJ1Y3R1cmUuZHJhd2lvZWQ2Omxlbmd0aGkxMjUxNTRlNDpwYXRoMjM6dG9ycmVudHMveWFybi1lcnJvci5sb2dlZTQ6bmFtZTE4OmRvd25vYWRlZF90b3JyZW50czE1OnBpZWNlIGhhc2ggYWxnbzQ6c2hhMTEyOnBpZWNlIGxlbmd0aGkxNjM4NGU2OnBpZWNlc2wyMDrRTTMAdTEluHcc2mJkeQTIh4ei7TIwOvGkiPvc282WX7a0V7SC1eJCX2e6MjA69O1MCcGWhsMUJ8s9m0WWUm8AOeIyMDqN6izPV1ZUPRwSzSbzME7ce8G8pzIwOpvlywPu8VIlCvqlqv4nz6MML8xEMjA6gSQX2qsexRxKryoswyaYUmGGo0wyMDoeUsQSH68JqWQ5JHDOTcNxKgTFQzIwOgqtm6ICx+nrMZl7+xVErB0+AN2YMjA6Y+PIv+hKOSsrmpOM4xIJgqmxy85lZTg6aW5mb2hhc2gyMDp9QNiZ7Coj126q8lzvlHZwfmYF5zc6aW5mb3NpZzY0Ol0N6B4JLAe6PHKMaY8QcLfQAUogoxtGa10PMYJkzCR6pQCVKanDAXBEVK+K7PF8KSx09ZN1y7ZN4oTVjbLk9gkxMjppbmZvc2lnIGFsZ283OmVkMjU1MTk3OnB1YiBrZXkzMjo1PThOaeKWlePlUvHil3IQOwJAHPDd3r9W4uDUb5oTYmU=", "base64");
console.log("mymetainfo", mymetainfo, Buffer.from(mymetainfo), Buffer.from(mymetainfo)[283]);
var thing = Buffer.from(mymetainfo);
var info = bencode_1.default.decode(thing);
console.log("info", info);
client.addTorrentByInfoSig(Buffer.from(info.infosig));
},{"reflect-metadata":"../node_modules/reflect-metadata/Reflect.js","regenerator-runtime/runtime":"node_modules/regenerator-runtime/runtime.js","bencode":"../node_modules/bencode/lib/index.js","fs":"node_modules/parcel-bundler/src/builtins/_empty.js","synapse-core/lib/Client.min.js":"../node_modules/synapse-core/lib/Client.min.js","buffer":"node_modules/buffer/index.js"}],"node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "56448" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["node_modules/parcel-bundler/src/builtins/hmr-runtime.js","index.tsx"], null)
//# sourceMappingURL=/synapse-browser.f69400ca.js.map